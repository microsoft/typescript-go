--- old.declarationEmitRetainsJsdocyComments.types
+++ new.declarationEmitRetainsJsdocyComments.types
@@= skipped -5, +5 lines =@@
  * @param p 
  */
 export const foo = (p: string) => {
->foo : (p: string) => { bar: (s: number) => void; bar2(s: number): void; }
->    : ^ ^^      ^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^
->(p: string) => {    return {        /**         * comment2         * @param s          */        bar: (s: number) => {},        /**         * comment3         * @param s          */        bar2(s: number) {},    }} : (p: string) => { bar: (s: number) => void; bar2(s: number): void; }
->                                                                                                                                                                                                                       : ^ ^^      ^^^^^^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^
+>foo : (p: string) => { bar: (s: number) => void; bar2: (s: number) => void; }
+>(p: string) => {    return {        /**         * comment2         * @param s          */        bar: (s: number) => {},        /**         * comment3         * @param s          */        bar2(s: number) {},    }} : (p: string) => { bar: (s: number) => void; bar2: (s: number) => void; }
 >p : string
->  : ^^^^^^
 
     return {
->{        /**         * comment2         * @param s          */        bar: (s: number) => {},        /**         * comment3         * @param s          */        bar2(s: number) {},    } : { bar: (s: number) => void; bar2(s: number): void; }
->                                                                                                                                                                                           : ^^^^^^^^ ^^      ^^^^^^^^^^^^^^^^ ^^      ^^^^^^^^^^
+>{        /**         * comment2         * @param s          */        bar: (s: number) => {},        /**         * comment3         * @param s          */        bar2(s: number) {},    } : { bar: (s: number) => void; bar2: (s: number) => void; }
 
         /**
          * comment2
@@= skipped -17, +13 lines =@@
          */
         bar: (s: number) => {},
 >bar : (s: number) => void
->    : ^ ^^      ^^^^^^^^^
 >(s: number) => {} : (s: number) => void
->                  : ^ ^^      ^^^^^^^^^
 >s : number
->  : ^^^^^^
 
         /**
          * comment3
@@= skipped -12, +9 lines =@@
          */
         bar2(s: number) {},
 >bar2 : (s: number) => void
->     : ^ ^^      ^^^^^^^^^
 >s : number
->  : ^^^^^^
     }
 }
 
 export class Foo {
 >Foo : Foo
->    : ^^^
 
     /**
      * comment4
@@= skipped -16, +13 lines =@@
      */
     bar(s: number) {
 >bar : (s: number) => void
->    : ^ ^^      ^^^^^^^^^
 >s : number
->  : ^^^^^^
     }
 }
 
@@= skipped -12, +10 lines =@@
     */
     someMethod
 >someMethod : any
->           : ^^^
 
 } = null as any;
 >null as any : any
 
 declare global {
 >global : any
->       : ^^^
 
     interface ExtFunc {
+>ExtFunc : ExtFunc
+
         /**
         * comment6
         */
         someMethod(collection: any[]): boolean;
 >someMethod : (collection: any[]) => boolean
->           : ^          ^^     ^^^^^       
 >collection : any[]
->           : ^^^^^
     }
 }
 
