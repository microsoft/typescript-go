--- old.propTypeValidatorInference.symbols
+++ new.propTypeValidatorInference.symbols
@@= skipped -55, +55 lines =@@
 >Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     [nominalTypeHack]?: T;
->[nominalTypeHack] : Symbol(Validator[nominalTypeHack], Decl(index.d.ts, 9, 115))
+>[nominalTypeHack] : Symbol([nominalTypeHack], Decl(index.d.ts, 9, 115))
 >nominalTypeHack : Symbol(nominalTypeHack, Decl(index.d.ts, 0, 12))
 >T : Symbol(T, Decl(index.d.ts, 8, 27))
 }
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(index.d.ts, 13, 29))
 
     isRequired: Validator<NonNullable<T>>;
->isRequired : Symbol(Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 >Validator : Symbol(Validator, Decl(index.d.ts, 6, 72))
 >NonNullable : Symbol(NonNullable, Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(index.d.ts, 13, 29))
@@= skipped -92, +92 lines =@@
 >Props : Symbol(Props, Decl(file.ts, 0, 40))
 
     any?: any;
->any : Symbol(Props.any, Decl(file.ts, 1, 17))
+>any : Symbol(any, Decl(file.ts, 1, 17))
 
     array: string[];
->array : Symbol(Props.array, Decl(file.ts, 2, 14))
+>array : Symbol(array, Decl(file.ts, 2, 14))
 
     bool: boolean;
->bool : Symbol(Props.bool, Decl(file.ts, 3, 20))
+>bool : Symbol(bool, Decl(file.ts, 3, 20))
 
     shape: {
->shape : Symbol(Props.shape, Decl(file.ts, 4, 18))
+>shape : Symbol(shape, Decl(file.ts, 4, 18))
 
         foo: string;
 >foo : Symbol(foo, Decl(file.ts, 5, 12))
@@= skipped -22, +22 lines =@@
 
     };
     oneOfType: string | boolean | {
->oneOfType : Symbol(Props.oneOfType, Decl(file.ts, 9, 6))
+>oneOfType : Symbol(oneOfType, Decl(file.ts, 9, 6))
 
         foo?: string;
 >foo : Symbol(foo, Decl(file.ts, 10, 35))
@@= skipped -14, +14 lines =@@
 type PropTypesMap = PropTypes.ValidationMap<Props>;
 >PropTypesMap : Symbol(PropTypesMap, Decl(file.ts, 14, 1))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->ValidationMap : Symbol(PropTypes.ValidationMap, Decl(index.d.ts, 15, 1))
+>ValidationMap : Symbol(ValidationMap, Decl(index.d.ts, 15, 1))
 >Props : Symbol(Props, Decl(file.ts, 0, 40))
 
 const innerProps = {
@@= skipped -8, +8 lines =@@
 
     foo: PropTypes.string.isRequired,
 >foo : Symbol(foo, Decl(file.ts, 18, 20))
->PropTypes.string.isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.string : Symbol(PropTypes.string, Decl(index.d.ts, 27, 12))
+>PropTypes.string.isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.string : Symbol(string, Decl(index.d.ts, 27, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->string : Symbol(PropTypes.string, Decl(index.d.ts, 27, 12))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>string : Symbol(string, Decl(index.d.ts, 27, 12))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
     bar: PropTypes.bool,
 >bar : Symbol(bar, Decl(file.ts, 19, 37))
->PropTypes.bool : Symbol(PropTypes.bool, Decl(index.d.ts, 26, 12))
+>PropTypes.bool : Symbol(bool, Decl(index.d.ts, 26, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->bool : Symbol(PropTypes.bool, Decl(index.d.ts, 26, 12))
+>bool : Symbol(bool, Decl(index.d.ts, 26, 12))
 
     baz: PropTypes.any
 >baz : Symbol(baz, Decl(file.ts, 20, 24))
->PropTypes.any : Symbol(PropTypes.any, Decl(index.d.ts, 24, 12))
+>PropTypes.any : Symbol(any, Decl(index.d.ts, 24, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->any : Symbol(PropTypes.any, Decl(index.d.ts, 24, 12))
+>any : Symbol(any, Decl(index.d.ts, 24, 12))
 
 };
 
 const arrayOfTypes = [PropTypes.string, PropTypes.bool, PropTypes.shape({
 >arrayOfTypes : Symbol(arrayOfTypes, Decl(file.ts, 24, 5))
->PropTypes.string : Symbol(PropTypes.string, Decl(index.d.ts, 27, 12))
+>PropTypes.string : Symbol(string, Decl(index.d.ts, 27, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->string : Symbol(PropTypes.string, Decl(index.d.ts, 27, 12))
->PropTypes.bool : Symbol(PropTypes.bool, Decl(index.d.ts, 26, 12))
+>string : Symbol(string, Decl(index.d.ts, 27, 12))
+>PropTypes.bool : Symbol(bool, Decl(index.d.ts, 26, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->bool : Symbol(PropTypes.bool, Decl(index.d.ts, 26, 12))
->PropTypes.shape : Symbol(PropTypes.shape, Decl(index.d.ts, 28, 41))
+>bool : Symbol(bool, Decl(index.d.ts, 26, 12))
+>PropTypes.shape : Symbol(shape, Decl(index.d.ts, 28, 41))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->shape : Symbol(PropTypes.shape, Decl(index.d.ts, 28, 41))
+>shape : Symbol(shape, Decl(index.d.ts, 28, 41))
 
     foo: PropTypes.string,
 >foo : Symbol(foo, Decl(file.ts, 24, 73))
->PropTypes.string : Symbol(PropTypes.string, Decl(index.d.ts, 27, 12))
+>PropTypes.string : Symbol(string, Decl(index.d.ts, 27, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->string : Symbol(PropTypes.string, Decl(index.d.ts, 27, 12))
+>string : Symbol(string, Decl(index.d.ts, 27, 12))
 
     bar: PropTypes.number.isRequired
 >bar : Symbol(bar, Decl(file.ts, 25, 26))
->PropTypes.number.isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.number : Symbol(PropTypes.number, Decl(index.d.ts, 28, 12))
+>PropTypes.number.isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.number : Symbol(number, Decl(index.d.ts, 28, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->number : Symbol(PropTypes.number, Decl(index.d.ts, 28, 12))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>number : Symbol(number, Decl(index.d.ts, 28, 12))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
 })];
 
@@= skipped -55, +55 lines =@@
 
     any: PropTypes.any,
 >any : Symbol(any, Decl(file.ts, 30, 33))
->PropTypes.any : Symbol(PropTypes.any, Decl(index.d.ts, 24, 12))
+>PropTypes.any : Symbol(any, Decl(index.d.ts, 24, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->any : Symbol(PropTypes.any, Decl(index.d.ts, 24, 12))
+>any : Symbol(any, Decl(index.d.ts, 24, 12))
 
     array: PropTypes.array.isRequired,
 >array : Symbol(array, Decl(file.ts, 31, 23))
->PropTypes.array.isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.array : Symbol(PropTypes.array, Decl(index.d.ts, 25, 12))
+>PropTypes.array.isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.array : Symbol(array, Decl(index.d.ts, 25, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->array : Symbol(PropTypes.array, Decl(index.d.ts, 25, 12))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>array : Symbol(array, Decl(index.d.ts, 25, 12))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
     bool: PropTypes.bool.isRequired,
 >bool : Symbol(bool, Decl(file.ts, 32, 38))
->PropTypes.bool.isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.bool : Symbol(PropTypes.bool, Decl(index.d.ts, 26, 12))
+>PropTypes.bool.isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.bool : Symbol(bool, Decl(index.d.ts, 26, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->bool : Symbol(PropTypes.bool, Decl(index.d.ts, 26, 12))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>bool : Symbol(bool, Decl(index.d.ts, 26, 12))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
     shape: PropTypes.shape(innerProps).isRequired,
 >shape : Symbol(shape, Decl(file.ts, 33, 36))
->PropTypes.shape(innerProps).isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.shape : Symbol(PropTypes.shape, Decl(index.d.ts, 28, 41))
+>PropTypes.shape(innerProps).isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.shape : Symbol(shape, Decl(index.d.ts, 28, 41))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->shape : Symbol(PropTypes.shape, Decl(index.d.ts, 28, 41))
+>shape : Symbol(shape, Decl(index.d.ts, 28, 41))
 >innerProps : Symbol(innerProps, Decl(file.ts, 18, 5))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
     oneOfType: PropTypes.oneOfType(arrayOfTypes).isRequired,
 >oneOfType : Symbol(oneOfType, Decl(file.ts, 34, 50))
->PropTypes.oneOfType(arrayOfTypes).isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.oneOfType : Symbol(PropTypes.oneOfType, Decl(index.d.ts, 29, 89))
+>PropTypes.oneOfType(arrayOfTypes).isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.oneOfType : Symbol(oneOfType, Decl(index.d.ts, 29, 89))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->oneOfType : Symbol(PropTypes.oneOfType, Decl(index.d.ts, 29, 89))
+>oneOfType : Symbol(oneOfType, Decl(index.d.ts, 29, 89))
 >arrayOfTypes : Symbol(arrayOfTypes, Decl(file.ts, 24, 5))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
 };
 
@@= skipped -46, +46 lines =@@
 
     any: PropTypes.any,
 >any : Symbol(any, Decl(file.ts, 39, 36))
->PropTypes.any : Symbol(PropTypes.any, Decl(index.d.ts, 24, 12))
+>PropTypes.any : Symbol(any, Decl(index.d.ts, 24, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->any : Symbol(PropTypes.any, Decl(index.d.ts, 24, 12))
+>any : Symbol(any, Decl(index.d.ts, 24, 12))
 
     array: PropTypes.array.isRequired,
 >array : Symbol(array, Decl(file.ts, 40, 23))
->PropTypes.array.isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.array : Symbol(PropTypes.array, Decl(index.d.ts, 25, 12))
+>PropTypes.array.isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.array : Symbol(array, Decl(index.d.ts, 25, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->array : Symbol(PropTypes.array, Decl(index.d.ts, 25, 12))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>array : Symbol(array, Decl(index.d.ts, 25, 12))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
     bool: PropTypes.bool.isRequired,
 >bool : Symbol(bool, Decl(file.ts, 41, 38))
->PropTypes.bool.isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.bool : Symbol(PropTypes.bool, Decl(index.d.ts, 26, 12))
+>PropTypes.bool.isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.bool : Symbol(bool, Decl(index.d.ts, 26, 12))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->bool : Symbol(PropTypes.bool, Decl(index.d.ts, 26, 12))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>bool : Symbol(bool, Decl(index.d.ts, 26, 12))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
     shape: PropTypes.shape(innerProps).isRequired,
 >shape : Symbol(shape, Decl(file.ts, 42, 36))
->PropTypes.shape(innerProps).isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.shape : Symbol(PropTypes.shape, Decl(index.d.ts, 28, 41))
+>PropTypes.shape(innerProps).isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.shape : Symbol(shape, Decl(index.d.ts, 28, 41))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->shape : Symbol(PropTypes.shape, Decl(index.d.ts, 28, 41))
+>shape : Symbol(shape, Decl(index.d.ts, 28, 41))
 >innerProps : Symbol(innerProps, Decl(file.ts, 18, 5))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
     oneOfType: PropTypes.oneOfType(arrayOfTypes).isRequired,
 >oneOfType : Symbol(oneOfType, Decl(file.ts, 43, 50))
->PropTypes.oneOfType(arrayOfTypes).isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
->PropTypes.oneOfType : Symbol(PropTypes.oneOfType, Decl(index.d.ts, 29, 89))
+>PropTypes.oneOfType(arrayOfTypes).isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
+>PropTypes.oneOfType : Symbol(oneOfType, Decl(index.d.ts, 29, 89))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->oneOfType : Symbol(PropTypes.oneOfType, Decl(index.d.ts, 29, 89))
+>oneOfType : Symbol(oneOfType, Decl(index.d.ts, 29, 89))
 >arrayOfTypes : Symbol(arrayOfTypes, Decl(file.ts, 24, 5))
->isRequired : Symbol(PropTypes.Requireable.isRequired, Decl(index.d.ts, 13, 54))
+>isRequired : Symbol(isRequired, Decl(index.d.ts, 13, 54))
 
 };
 
 type ExtractedProps = PropTypes.InferProps<typeof propTypes>;
 >ExtractedProps : Symbol(ExtractedProps, Decl(file.ts, 45, 2))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->InferProps : Symbol(PropTypes.InferProps, Decl(index.d.ts, 19, 66))
+>InferProps : Symbol(InferProps, Decl(index.d.ts, 19, 66))
 >propTypes : Symbol(propTypes, Decl(file.ts, 30, 5))
 
 type ExtractedPropsWithoutAnnotation = PropTypes.InferProps<typeof propTypesWithoutAnnotation>;
 >ExtractedPropsWithoutAnnotation : Symbol(ExtractedPropsWithoutAnnotation, Decl(file.ts, 47, 61))
 >PropTypes : Symbol(PropTypes, Decl(file.ts, 0, 6))
->InferProps : Symbol(PropTypes.InferProps, Decl(index.d.ts, 19, 66))
+>InferProps : Symbol(InferProps, Decl(index.d.ts, 19, 66))
 >propTypesWithoutAnnotation : Symbol(propTypesWithoutAnnotation, Decl(file.ts, 39, 5))
 
 type ExtractPropsMatch = ExtractedProps extends ExtractedPropsWithoutAnnotation ? true : false;
