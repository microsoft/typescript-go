--- old.typeGuardConstructorNarrowPrimitivesInUnion.types
+++ new.typeGuardConstructorNarrowPrimitivesInUnion.types
@@= skipped -2, +2 lines =@@
 === typeGuardConstructorNarrowPrimitivesInUnion.ts ===
 // Union of primitives, number, arrays, and C1
 let var1: number | "hello" | "world" | true | false | number[] | string[];
->var1 : number | boolean | "hello" | "world" | number[] | string[]
+>var1 : number | "hello" | "world" | boolean | string[] | number[]
 >true : true
 >false : false
 
 if (var1.constructor === Number) {
 >var1.constructor === Number : boolean
 >var1.constructor : Function
->var1 : number | boolean | "hello" | "world" | number[] | string[]
+>var1 : number | "hello" | "world" | boolean | string[] | number[]
 >constructor : Function
 >Number : NumberConstructor
 
@@= skipped -18, +18 lines =@@
 if (var1.constructor === String) {
 >var1.constructor === String : boolean
 >var1.constructor : Function
->var1 : number | boolean | "hello" | "world" | number[] | string[]
+>var1 : number | "hello" | "world" | boolean | string[] | number[]
 >constructor : Function
 >String : StringConstructor
 
@@= skipped -11, +11 lines =@@
 if (var1.constructor === Boolean) {
 >var1.constructor === Boolean : boolean
 >var1.constructor : Function
->var1 : number | boolean | "hello" | "world" | number[] | string[]
+>var1 : number | "hello" | "world" | boolean | string[] | number[]
 >constructor : Function
 >Boolean : BooleanConstructor
 
@@= skipped -11, +11 lines =@@
 if (var1.constructor === Array) {
 >var1.constructor === Array : boolean
 >var1.constructor : Function
->var1 : number | boolean | "hello" | "world" | number[] | string[]
+>var1 : number | "hello" | "world" | boolean | string[] | number[]
 >constructor : Function
 >Array : ArrayConstructor
 
     var1; // number[] | string[]
->var1 : number[] | string[]
+>var1 : string[] | number[]
 }
 
