//// [tests/cases/compiler/jsxIntrinsicElementsCompatability.tsx] ////

=== jsxIntrinsicElementsCompatability.tsx ===
/// <reference path="react16.d.ts" />
import * as React from "react";
>React : Symbol(React, Decl(jsxIntrinsicElementsCompatability.tsx, 1, 6))

function SomeComponent<T extends 'button' | 'a'>(props: { element?: T } & JSX.IntrinsicElements[T]): JSX.Element {
>SomeComponent : Symbol(SomeComponent, Decl(jsxIntrinsicElementsCompatability.tsx, 1, 31))
>T : Symbol(T, Decl(jsxIntrinsicElementsCompatability.tsx, 2, 23))
>props : Symbol(props, Decl(jsxIntrinsicElementsCompatability.tsx, 2, 49))
>element : Symbol(element, Decl(jsxIntrinsicElementsCompatability.tsx, 2, 57))
>T : Symbol(T, Decl(jsxIntrinsicElementsCompatability.tsx, 2, 23))
>JSX : Symbol(JSX)
>IntrinsicElements : Symbol(IntrinsicElements)
>T : Symbol(T, Decl(jsxIntrinsicElementsCompatability.tsx, 2, 23))
>JSX : Symbol(JSX)
>Element : Symbol(Element)

    // Just so the return value is RectElement, the rendered element doesnt matter
    return <div />
}

function Test<T extends 'button' | 'a'>(el: T) {
>Test : Symbol(Test, Decl(jsxIntrinsicElementsCompatability.tsx, 5, 1))
>T : Symbol(T, Decl(jsxIntrinsicElementsCompatability.tsx, 7, 14))
>el : Symbol(el, Decl(jsxIntrinsicElementsCompatability.tsx, 7, 40))
>T : Symbol(T, Decl(jsxIntrinsicElementsCompatability.tsx, 7, 14))

    return <SomeComponent element={el} />
>SomeComponent : Symbol(SomeComponent, Decl(jsxIntrinsicElementsCompatability.tsx, 1, 31))
>element : Symbol(element, Decl(jsxIntrinsicElementsCompatability.tsx, 8, 25))
>el : Symbol(el, Decl(jsxIntrinsicElementsCompatability.tsx, 7, 40))
}
