--- old.objectLiteralArraySpecialization.symbols
+++ new.objectLiteralArraySpecialization.symbols
@@= skipped -13, +13 lines =@@
 >T : Symbol(T, Decl(objectLiteralArraySpecialization.ts, 1, 25))
 
 	constructor(initialItems?: T[]);
->constructor : Symbol(MyArrayWrapper.constructor, Decl(objectLiteralArraySpecialization.ts, 1, 29))
+>constructor : Symbol(constructor, Decl(objectLiteralArraySpecialization.ts, 1, 29))
 >initialItems : Symbol(initialItems, Decl(objectLiteralArraySpecialization.ts, 2, 13))
 >T : Symbol(T, Decl(objectLiteralArraySpecialization.ts, 1, 25))
 
 	doSomething(predicate: (x: T, y: T) => boolean): void;
->doSomething : Symbol(MyArrayWrapper.doSomething, Decl(objectLiteralArraySpecialization.ts, 2, 33))
+>doSomething : Symbol(doSomething, Decl(objectLiteralArraySpecialization.ts, 2, 33))
 >predicate : Symbol(predicate, Decl(objectLiteralArraySpecialization.ts, 3, 13))
 >x : Symbol(x, Decl(objectLiteralArraySpecialization.ts, 3, 25))
 >T : Symbol(T, Decl(objectLiteralArraySpecialization.ts, 1, 25))
@@= skipped -21, +21 lines =@@
 >id : Symbol(id, Decl(objectLiteralArraySpecialization.ts, 5, 61))
 
 thing.doSomething((x, y) => x.name === "bob"); // should not error
->thing.doSomething : Symbol(MyArrayWrapper.doSomething, Decl(objectLiteralArraySpecialization.ts, 2, 33))
+>thing.doSomething : Symbol(doSomething, Decl(objectLiteralArraySpecialization.ts, 2, 33))
 >thing : Symbol(thing, Decl(objectLiteralArraySpecialization.ts, 5, 3))
->doSomething : Symbol(MyArrayWrapper.doSomething, Decl(objectLiteralArraySpecialization.ts, 2, 33))
+>doSomething : Symbol(doSomething, Decl(objectLiteralArraySpecialization.ts, 2, 33))
 >x : Symbol(x, Decl(objectLiteralArraySpecialization.ts, 6, 19))
 >y : Symbol(y, Decl(objectLiteralArraySpecialization.ts, 6, 21))
 >x.name : Symbol(name, Decl(objectLiteralArraySpecialization.ts, 5, 22))
