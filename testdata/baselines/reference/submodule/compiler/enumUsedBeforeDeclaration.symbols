//// [tests/cases/compiler/enumUsedBeforeDeclaration.ts] ////

=== enumUsedBeforeDeclaration.ts ===
const v: Color = Color.Green;
>v : Symbol(v, Decl(enumUsedBeforeDeclaration.ts, 0, 5))
>Color : Symbol(Color, Decl(enumUsedBeforeDeclaration.ts, 1, 40))
>Color.Green : Symbol(Green, Decl(enumUsedBeforeDeclaration.ts, 2, 17))
>Color : Symbol(Color, Decl(enumUsedBeforeDeclaration.ts, 1, 40))
>Green : Symbol(Green, Decl(enumUsedBeforeDeclaration.ts, 2, 17))

const v2: ConstColor = ConstColor.Green;
>v2 : Symbol(v2, Decl(enumUsedBeforeDeclaration.ts, 1, 5))
>ConstColor : Symbol(ConstColor, Decl(enumUsedBeforeDeclaration.ts, 2, 31))
>ConstColor.Green : Symbol(Green, Decl(enumUsedBeforeDeclaration.ts, 3, 28))
>ConstColor : Symbol(ConstColor, Decl(enumUsedBeforeDeclaration.ts, 2, 31))
>Green : Symbol(Green, Decl(enumUsedBeforeDeclaration.ts, 3, 28))

enum Color { Red, Green, Blue }
>Color : Symbol(Color, Decl(enumUsedBeforeDeclaration.ts, 1, 40))
>Red : Symbol(Red, Decl(enumUsedBeforeDeclaration.ts, 2, 12))
>Green : Symbol(Green, Decl(enumUsedBeforeDeclaration.ts, 2, 17))
>Blue : Symbol(Blue, Decl(enumUsedBeforeDeclaration.ts, 2, 24))

const enum ConstColor { Red, Green, Blue }
>ConstColor : Symbol(ConstColor, Decl(enumUsedBeforeDeclaration.ts, 2, 31))
>Red : Symbol(Red, Decl(enumUsedBeforeDeclaration.ts, 3, 23))
>Green : Symbol(Green, Decl(enumUsedBeforeDeclaration.ts, 3, 28))
>Blue : Symbol(Blue, Decl(enumUsedBeforeDeclaration.ts, 3, 35))


