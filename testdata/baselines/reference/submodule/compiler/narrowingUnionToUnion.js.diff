--- old.narrowingUnionToUnion.js
+++ new.narrowingUnionToUnion.js
@@= skipped -265, +265 lines =@@


 //// [narrowingUnionToUnion.js]
-"use strict";
 function fx1(x) {
     if (isFalsy(x)) {
         x; // "" | 0 | undefined
@@= skipped -42, +41 lines =@@
 }
 // Repro from #37807
 function f1(x) { }
-var v1;
+let v1;
 f1(v1);
 v1; // number | undefined
 function f2(x) { }
-var v2;
+let v2;
 f2(v2);
 v2; // 6 | undefined
-var TEST_CASES = [
-    function (value) {
+const TEST_CASES = [
+    (value) => {
         if (isEmptyString(value)) {
             value; // ""
         }
@@= skipped -22, +22 lines =@@
             value; // string
         }
     },
-    function (value) {
+    (value) => {
         if (isMaybeEmptyString(value)) {
             value; // "" | undefined
         }
@@= skipped -8, +8 lines =@@
             value; // string
         }
     },
-    function (value) {
+    (value) => {
         if (isZero(value)) {
             value; // 0
         }
@@= skipped -14, +14 lines =@@
             value; // number
         }
     },
-    function (value) {
+    (value) => {
         if (isMaybeZero(value)) {
             value; // 0 | undefined
         }
@@= skipped -8, +8 lines =@@
             value; // number
         }
     },
-    function (value) {
+    (value) => {
         if (isEmptyArray(value)) {
             value; // []
         }
@@= skipped -14, +14 lines =@@
             value; // string[]
         }
     },
-    function (value) {
+    (value) => {
         if (isMaybeEmptyArray(value)) {
             value; // [] | undefined
         }
@@= skipped -12, +12 lines =@@
 function isEmpty(value) {
     return value === '' || value === null || value === undefined;
 }
-var test;
+let test;
 if (isEmpty(test)) {
     test; // EmptyString
 }
@@= skipped -95, +95 lines =@@
 }
 declare function isXSorY(obj: unknown): obj is XS | Y;
 declare function fx5<T extends X>(obj: X | YS, c: typeof XS | typeof Y): void;
+// Repro from #31156
 declare function isEmptyStrOrUndefined(mixed: any): mixed is "" | undefined;
 declare function fx10(s: string | undefined): void;
+// Repro from #37807
 declare function f1(x: any): asserts x is number | undefined;
 declare let v1: number | string | undefined;
 declare function f2(x: any): asserts x is 6 | undefined;
 declare let v2: number | string | undefined;
+// #39105
 declare function isEmptyString(value: string): value is '';
 declare function isMaybeEmptyString(value: string | null | undefined): value is '' | null | undefined;
 declare function isZero(value: number): value is 0;
@@= skipped -13, +16 lines =@@
 declare function isEmptyArray<T>(value: T[]): value is [];
 declare function isMaybeEmptyArray<T>(value: T[] | null | undefined): value is [] | null | undefined;
 declare const TEST_CASES: (((value: string) => void) | ((value: number) => void) | ((value: string[]) => void))[];
+// Repro from #42101
 type EmptyString = '' | null | undefined;
 declare function isEmpty(value: string | EmptyString): value is EmptyString;
 declare let test: string | null | undefined;
+// Repro from #43825
 declare function assert<T>(value: any): asserts value is T;
 declare function test1(foo: number | string | boolean): void;
+// Repro from #46909
 declare function check1(x: unknown): x is (string | 0);
 declare function check2(x: unknown): x is ("hello" | 0);
 declare function test3(x: unknown): void;
+// Repro from #49588
 declare function assertRelationIsNullOrStringArray(v: (string | number)[] | null): asserts v is string[] | null;
 declare function f1x(obj: (string | number)[] | null): void;
+// Repro from #55425
 type MyDiscriminatedUnion = {
     type: 'A';
     aProp: number;
@@= skipped -21, +26 lines =@@
 declare const working: unknown;
 declare const broken: Record<string, any> | undefined;
 declare const workingAgain: Record<string, any> | undefined | unknown;
+// Repro from #56144
 type Union = {
     type: 'a';
     variant: 1;