//// [tests/cases/compiler/recursiveConditionalTypes2.ts] ////

=== recursiveConditionalTypes2.ts ===
// repro from https://github.com/microsoft/TypeScript/issues/43877

type UnionToIntersection<U> = (
>UnionToIntersection : UnionToIntersection<U>
>U : U

  U extends any ? (k: U) => unknown : never
>k : U

) extends (k: infer I) => unknown
>k : I
>I : I

  ? I
  : never;

interface ClassSpec {
>ClassSpec : ClassSpec

  public?: object;
>public : object | undefined

  private?: object;
>private : object | undefined

  publicExtends?: Record<string, ClassSpec>;
>publicExtends : Record<string, ClassSpec> | undefined

  privateExtends?: Record<string, ClassSpec>;
>privateExtends : Record<string, ClassSpec> | undefined
}

type MaybeMergePrivateSuperSpec<T> = T extends Record<string, ClassSpec>
>MaybeMergePrivateSuperSpec : MaybeMergePrivateSuperSpec<T>
>T : T

  ? MergePrivateSuperSpec<T>
  : {};

type MaybeMergePrivateSpecs<T extends ClassSpec, U> = U extends ClassSpec
>MaybeMergePrivateSpecs : MaybeMergePrivateSpecs<T, U>
>T : T
>U : U

  ? MergePrivateSpecs<U, T>
  : T;

type MergePrivateSpecs<T extends ClassSpec, U extends ClassSpec> = {
>MergePrivateSpecs : MergePrivateSpecs<T, U>
>T : T
>U : U

  public: T["public"] & U["public"];
>public : T["public"] & U["public"]

  private: T["private"] & U["private"];
>private : T["private"] & U["private"]

};

type MergePrivateSuperSpec<T extends Record<string, ClassSpec>> =
>MergePrivateSuperSpec : MergePrivateSuperSpec<T>
>T : T

  UnionToIntersection<
    {
      [P in keyof T]: SimplifyPrivateSpec<T[P]>;
>P : P

    }[keyof T]
  >;

export type SimplifyPrivateSpec<T extends ClassSpec> = MaybeMergePrivateSpecs<
>SimplifyPrivateSpec : SimplifyPrivateSpec<T>
>T : T

  MaybeMergePrivateSpecs<T, MaybeMergePrivateSuperSpec<T["publicExtends"]>>,
  MaybeMergePrivateSuperSpec<T["privateExtends"]>
>;

// repro from https://github.com/microsoft/TypeScript/issues/43877#issuecomment-866146516

type Converted<T> = {
>Converted : Converted<T>
>T : T

  [P in keyof T]: null extends T[P] ? T[P] : T[P];
>P : P

};

type DefaultsDeep<T, U extends T> = {
>DefaultsDeep : DefaultsDeep<T, U>
>T : T
>U : U

  [P in keyof T]-?: U[P] extends T[P]
>P : P

    ? null extends U[P]
      ? Converted<DefaultsDeep<T[P], NonNullable<U[P]>>>
      : T[P]
    : T[P];
};

interface _Array<T> {
>_Array : _Array<T>
>T : T

  find<S extends T>(predicate: (value: T) => boolean): void;
>find : <S extends T>(predicate: (value: T) => boolean) => void
>S : S
>predicate : (value: T) => boolean
>value : T
}

const z: _Array<DefaultsDeep<{}, {}>> = [];
>z : _Array<DefaultsDeep<{}, {}>>
>[] : never[]

z.find((_) => true);
>z.find((_) => true) : void
>z.find : <S extends DefaultsDeep<{}, {}>>(predicate: (value: DefaultsDeep<{}, {}>) => boolean) => void
>z : _Array<DefaultsDeep<{}, {}>>
>find : <S extends DefaultsDeep<{}, {}>>(predicate: (value: DefaultsDeep<{}, {}>) => boolean) => void
>(_) => true : (_: DefaultsDeep<{}, {}>) => true
>_ : DefaultsDeep<{}, {}>
>true : true

