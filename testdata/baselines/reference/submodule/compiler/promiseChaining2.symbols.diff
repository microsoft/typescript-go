--- old.promiseChaining2.symbols
+++ new.promiseChaining2.symbols
@@= skipped -7, +7 lines =@@
 >length : Symbol(length, Decl(promiseChaining2.ts, 1, 24))
 
     constructor(public value: T) { }
->value : Symbol(Chain2.value, Decl(promiseChaining2.ts, 2, 16))
+>value : Symbol(value, Decl(promiseChaining2.ts, 2, 16))
 >T : Symbol(T, Decl(promiseChaining2.ts, 1, 13))
 
     then<S extends Function>(cb: (x: T) => S): Chain2<S> {
->then : Symbol(Chain2.then, Decl(promiseChaining2.ts, 2, 36))
+>then : Symbol(then, Decl(promiseChaining2.ts, 2, 36))
 >S : Symbol(S, Decl(promiseChaining2.ts, 3, 9))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >cb : Symbol(cb, Decl(promiseChaining2.ts, 3, 29))
@@= skipped -17, +17 lines =@@
         var result = cb(this.value);
 >result : Symbol(result, Decl(promiseChaining2.ts, 4, 11))
 >cb : Symbol(cb, Decl(promiseChaining2.ts, 3, 29))
->this.value : Symbol(Chain2.value, Decl(promiseChaining2.ts, 2, 16))
+>this.value : Symbol(value, Decl(promiseChaining2.ts, 2, 16))
 >this : Symbol(Chain2, Decl(promiseChaining2.ts, 0, 0))
->value : Symbol(Chain2.value, Decl(promiseChaining2.ts, 2, 16))
+>value : Symbol(value, Decl(promiseChaining2.ts, 2, 16))
 
         // should get a fresh type parameter which each then call
         var z = this.then(x => result).then(x => "abc").then(x => x.length);
 >z : Symbol(z, Decl(promiseChaining2.ts, 6, 11))
->this.then(x => result).then(x => "abc").then : Symbol(Chain2.then, Decl(promiseChaining2.ts, 2, 36))
->this.then(x => result).then : Symbol(Chain2.then, Decl(promiseChaining2.ts, 2, 36))
->this.then : Symbol(Chain2.then, Decl(promiseChaining2.ts, 2, 36))
+>this.then(x => result).then(x => "abc").then : Symbol(then, Decl(promiseChaining2.ts, 2, 36))
+>this.then(x => result).then : Symbol(then, Decl(promiseChaining2.ts, 2, 36))
+>this.then : Symbol(then, Decl(promiseChaining2.ts, 2, 36))
 >this : Symbol(Chain2, Decl(promiseChaining2.ts, 0, 0))
->then : Symbol(Chain2.then, Decl(promiseChaining2.ts, 2, 36))
+>then : Symbol(then, Decl(promiseChaining2.ts, 2, 36))
 >x : Symbol(x, Decl(promiseChaining2.ts, 6, 26))
 >result : Symbol(result, Decl(promiseChaining2.ts, 4, 11))
->then : Symbol(Chain2.then, Decl(promiseChaining2.ts, 2, 36))
+>then : Symbol(then, Decl(promiseChaining2.ts, 2, 36))
 >x : Symbol(x, Decl(promiseChaining2.ts, 6, 44))
->then : Symbol(Chain2.then, Decl(promiseChaining2.ts, 2, 36))
+>then : Symbol(then, Decl(promiseChaining2.ts, 2, 36))
 >x : Symbol(x, Decl(promiseChaining2.ts, 6, 61))
->x.length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
+>x.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(promiseChaining2.ts, 6, 61))
->length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 
         return new Chain2(result);
 >Chain2 : Symbol(Chain2, Decl(promiseChaining2.ts, 0, 0))
