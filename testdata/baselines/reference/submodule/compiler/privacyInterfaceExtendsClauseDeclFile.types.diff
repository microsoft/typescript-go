--- old.privacyInterfaceExtendsClauseDeclFile.types
+++ new.privacyInterfaceExtendsClauseDeclFile.types
@@= skipped -1, +1 lines =@@
 
 === privacyInterfaceExtendsClauseDeclFile_externalModule.ts ===
 export module publicModule {
+>publicModule : any
+
     export interface publicInterfaceInPublicModule {
+>publicInterfaceInPublicModule : publicInterfaceInPublicModule
     }
 
     interface privateInterfaceInPublicModule {
+>privateInterfaceInPublicModule : privateInterfaceInPublicModule
     }
 
     interface privateInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPublicModule {
+>privateInterfaceImplementingPublicInterfaceInModule : privateInterfaceImplementingPublicInterfaceInModule
     }
     interface privateInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPublicModule {
+>privateInterfaceImplementingPrivateInterfaceInModule : privateInterfaceImplementingPrivateInterfaceInModule
     }
     export interface publicInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPublicModule {
+>publicInterfaceImplementingPublicInterfaceInModule : publicInterfaceImplementingPublicInterfaceInModule
     }
     export interface publicInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPublicModule { // Should error
+>publicInterfaceImplementingPrivateInterfaceInModule : publicInterfaceImplementingPrivateInterfaceInModule
     }
 
     interface privateInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule {
+>privateInterfaceImplementingFromPrivateModuleInterface : privateInterfaceImplementingFromPrivateModuleInterface
 >privateModule : any
     }
     export interface publicInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule { // Should error
+>publicInterfaceImplementingFromPrivateModuleInterface : publicInterfaceImplementingFromPrivateModuleInterface
 >privateModule : any
     }
 
     export interface publicInterfaceImplementingPrivateAndPublicInterface extends privateInterfaceInPublicModule, publicInterfaceInPublicModule { // Should error
+>publicInterfaceImplementingPrivateAndPublicInterface : publicInterfaceImplementingPrivateAndPublicInterface
     }
 }
 
 module privateModule {
+>privateModule : any
+
     export interface publicInterfaceInPrivateModule {
+>publicInterfaceInPrivateModule : publicInterfaceInPrivateModule
 
     }
 
     interface privateInterfaceInPrivateModule {
+>privateInterfaceInPrivateModule : privateInterfaceInPrivateModule
     }
 
     interface privateInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPrivateModule {
+>privateInterfaceImplementingPublicInterfaceInModule : privateInterfaceImplementingPublicInterfaceInModule
     }
     interface privateInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPrivateModule {
+>privateInterfaceImplementingPrivateInterfaceInModule : privateInterfaceImplementingPrivateInterfaceInModule
     }
     export interface publicInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPrivateModule {
+>publicInterfaceImplementingPublicInterfaceInModule : publicInterfaceImplementingPublicInterfaceInModule
     }
     export interface publicInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPrivateModule {
+>publicInterfaceImplementingPrivateInterfaceInModule : publicInterfaceImplementingPrivateInterfaceInModule
     }
 
     interface privateInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule {
+>privateInterfaceImplementingFromPrivateModuleInterface : privateInterfaceImplementingFromPrivateModuleInterface
 >privateModule : any
     }
     export interface publicInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule {
+>publicInterfaceImplementingFromPrivateModuleInterface : publicInterfaceImplementingFromPrivateModuleInterface
 >privateModule : any
     }
 }
 
 export interface publicInterface {
+>publicInterface : publicInterface
 
 }
 
 interface privateInterface {
+>privateInterface : privateInterface
 }
 
 interface privateInterfaceImplementingPublicInterface extends publicInterface {
+>privateInterfaceImplementingPublicInterface : privateInterfaceImplementingPublicInterface
 }
 interface privateInterfaceImplementingPrivateInterfaceInModule extends privateInterface {
+>privateInterfaceImplementingPrivateInterfaceInModule : privateInterfaceImplementingPrivateInterfaceInModule
 }
 export interface publicInterfaceImplementingPublicInterface extends publicInterface {
+>publicInterfaceImplementingPublicInterface : publicInterfaceImplementingPublicInterface
 }
 export interface publicInterfaceImplementingPrivateInterface extends privateInterface { // Should error
+>publicInterfaceImplementingPrivateInterface : publicInterfaceImplementingPrivateInterface
 }
 
 interface privateInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule {
+>privateInterfaceImplementingFromPrivateModuleInterface : privateInterfaceImplementingFromPrivateModuleInterface
 >privateModule : any
 }
 export interface publicInterfaceImplementingFromPrivateModuleInterface extends privateModule.publicInterfaceInPrivateModule { // Should error
+>publicInterfaceImplementingFromPrivateModuleInterface : publicInterfaceImplementingFromPrivateModuleInterface
 >privateModule : any
 }
 
 === privacyInterfaceExtendsClauseDeclFile_GlobalFile.ts ===
-
 module publicModuleInGlobal {
+>publicModuleInGlobal : any
+
     export interface publicInterfaceInPublicModule {
+>publicInterfaceInPublicModule : publicInterfaceInPublicModule
     }
 
     interface privateInterfaceInPublicModule {
+>privateInterfaceInPublicModule : privateInterfaceInPublicModule
     }
 
     interface privateInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPublicModule {
+>privateInterfaceImplementingPublicInterfaceInModule : privateInterfaceImplementingPublicInterfaceInModule
     }
     interface privateInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPublicModule {
+>privateInterfaceImplementingPrivateInterfaceInModule : privateInterfaceImplementingPrivateInterfaceInModule
     }
     export interface publicInterfaceImplementingPublicInterfaceInModule extends publicInterfaceInPublicModule {
+>publicInterfaceImplementingPublicInterfaceInModule : publicInterfaceImplementingPublicInterfaceInModule
     }
     export interface publicInterfaceImplementingPrivateInterfaceInModule extends privateInterfaceInPublicModule { // Should error
+>publicInterfaceImplementingPrivateInterfaceInModule : publicInterfaceImplementingPrivateInterfaceInModule
     }
 }
 interface publicInterfaceInGlobal {
+>publicInterfaceInGlobal : publicInterfaceInGlobal
 }
 interface publicInterfaceImplementingPublicInterfaceInGlobal extends publicInterfaceInGlobal {
+>publicInterfaceImplementingPublicInterfaceInGlobal : publicInterfaceImplementingPublicInterfaceInGlobal
 }
 
