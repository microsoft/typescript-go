--- old.transformNestedGeneratorsWithTry.types
+++ new.transformNestedGeneratorsWithTry.types
@@= skipped -3, +3 lines =@@
 // https://github.com/Microsoft/TypeScript/issues/11177
 import * as Bluebird from 'bluebird';
 >Bluebird : PromiseConstructor
->         : ^^^^^^^^^^^^^^^^^^
 
 async function a(): Bluebird<void> {
 >a : () => Bluebird<void>
->  : ^^^^^^              
 
   try {
     const b = async function b(): Bluebird<void> {
 >b : () => Bluebird<void>
->  : ^^^^^^              
 >async function b(): Bluebird<void> {      try {        await Bluebird.resolve(); // -- remove this and it compiles      } catch (error) { }    } : () => Bluebird<void>
->                                                                                                                                                 : ^^^^^^              
 >b : () => Bluebird<void>
->  : ^^^^^^              
 
       try {
         await Bluebird.resolve(); // -- remove this and it compiles
 >await Bluebird.resolve() : void
->                         : ^^^^
 >Bluebird.resolve() : Promise<void>
->                   : ^^^^^^^^^^^^^
 >Bluebird.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
->                 : ^^^^^^             ^^^ ^^     ^^ ^^^                   ^^^ ^^     ^^                  ^^^                   ^^^
 >Bluebird : PromiseConstructor
->         : ^^^^^^^^^^^^^^^^^^
 >resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
->        : ^^^^^^             ^^^ ^^     ^^ ^^^                   ^^^ ^^     ^^                  ^^^                   ^^^
 
       } catch (error) { }
 >error : any
@@= skipped -35, +25 lines =@@
 
     await b(); // -- or remove this and it compiles
 >await b() : void
->          : ^^^^
 >b() : Bluebird<void>
->    : ^^^^^^^^^^^^^^
 >b : () => Bluebird<void>
->  : ^^^^^^              
 
   } catch (error) { }
 >error : any
@@= skipped -13, +10 lines =@@
 === bluebird.d.ts ===
 declare module "bluebird" {
 >"bluebird" : typeof import("bluebird")
->           : ^^^^^^^^^^^^^^^^^^^^^^^^^
 
     type Bluebird<T> = Promise<T>;
 >Bluebird : Bluebird<T>
->         : ^^^^^^^^^^^
+>T : T
 
     const Bluebird: typeof Promise;
 >Bluebird : PromiseConstructor
->         : ^^^^^^^^^^^^^^^^^^
->Promise : PromiseConstructor
->        : ^^^^^^^^^^^^^^^^^^
 
     export = Bluebird;
 >Bluebird : Bluebird<T>
->         : ^^^^^^^^^^^
 }
