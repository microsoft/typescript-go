--- old.es2018ObjectAssign.symbols
+++ new.es2018ObjectAssign.symbols
@@= skipped -2, +2 lines =@@
 === es2018ObjectAssign.ts ===
 const test = Object.assign({}, { test: true });
 >test : Symbol(test, Decl(es2018ObjectAssign.ts, 0, 5))
->Object.assign : Symbol(ObjectConstructor.assign, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
+>Object.assign : Symbol(assign, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->assign : Symbol(ObjectConstructor.assign, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
+>assign : Symbol(assign, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --))
 >test : Symbol(test, Decl(es2018ObjectAssign.ts, 0, 32))
 
 declare const p: Promise<number>;
@@= skipped -10, +10 lines =@@
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))
 
 p.finally();
->p.finally : Symbol(Promise.finally, Decl(lib.es2018.promise.d.ts, --, --))
+>p.finally : Symbol(finally, Decl(lib.es2018.promise.d.ts, --, --))
 >p : Symbol(p, Decl(es2018ObjectAssign.ts, 2, 13))
->finally : Symbol(Promise.finally, Decl(lib.es2018.promise.d.ts, --, --))
+>finally : Symbol(finally, Decl(lib.es2018.promise.d.ts, --, --))
 
