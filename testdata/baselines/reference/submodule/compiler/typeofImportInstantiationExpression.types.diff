--- old.typeofImportInstantiationExpression.types
+++ new.typeofImportInstantiationExpression.types
@@= skipped -1, +1 lines =@@
 
 === input.ts ===
 interface Arg<T = any, Params extends Record<string, any> = Record<string, any>> {
+>Arg : Arg<T, Params>
+>T : T
+>Params : Params
+
     "__is_argument__"?: true;
 >"__is_argument__" : true
 >true : true
@@= skipped -12, +16 lines =@@
 }
 
 export function myFunction<T = any, U extends Record<string, any> = Record<string, any>>(arg: Arg<T, U>) { return (arg.params || {}) as U }
->myFunction : <T = any, U extends Record<string, any> = Record<string, any>>(arg: Arg<T, U>) => U
+>myFunction : <T, U extends Record<string, any>>(arg: Arg<T, U>) => U
+>T : T
+>U : U
 >arg : Arg<T, U>
 >(arg.params || {}) as U : U
 >(arg.params || {}) : U | {}
@@= skipped -12, +14 lines =@@
 
 === main.ts ===
 type T1 = typeof import('./input.js').myFunction;
->T1 : <T = any, U extends Record<string, any> = Record<string, any>>(arg: Arg<T, U>) => U
->myFunction : error
+>T1 : <T, U extends Record<string, any>>(arg: Arg<T, U>) => U
 
 type T2 = typeof import('./input.js').myFunction<any, { slug: 'hello' }>;
 >T2 : (arg: Arg<any, { slug: "hello"; }>) => { slug: "hello"; }
->myFunction : error
 >slug : "hello"
 
