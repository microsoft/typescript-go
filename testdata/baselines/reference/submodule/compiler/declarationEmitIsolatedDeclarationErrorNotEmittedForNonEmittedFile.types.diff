--- old.declarationEmitIsolatedDeclarationErrorNotEmittedForNonEmittedFile.types
+++ new.declarationEmitIsolatedDeclarationErrorNotEmittedForNonEmittedFile.types
@@= skipped -1, +1 lines =@@
 
 === node_modules/@trpc/server/internals/config.d.ts ===
 export interface RootConfig<T> {
+>RootConfig : RootConfig<T>
+>T : T
+
     prop: T;
 >prop : T
 }
 === node_modules/@trpc/server/internals/utils.d.ts ===
 export interface ErrorFormatterShape<T={}> {
+>ErrorFormatterShape : ErrorFormatterShape<T>
+>T : T
+
     prop: T;
 >prop : T
 }
 export type PickFirstDefined<TType, TPick> = undefined extends TType
 >PickFirstDefined : PickFirstDefined<TType, TPick>
+>TType : TType
+>TPick : TPick
 
   ? undefined extends TPick
     ? never
     : TPick
   : TType;
 export interface ErrorFormatter<T={},U={}> {
+>ErrorFormatter : ErrorFormatter<T, U>
+>T : T
+>U : U
+
     prop: [T, U];
 >prop : [T, U]
 }
 export interface DefaultErrorShape<T={}> {
+>DefaultErrorShape : DefaultErrorShape<T>
+>T : T
+
     prop: T;
 >prop : T
 }
 === node_modules/@trpc/server/middleware.d.ts ===
 export interface MiddlewareFunction<T={},U={}> {
+>MiddlewareFunction : MiddlewareFunction<T, U>
+>T : T
+>U : U
+
     prop: [T, U];
 >prop : [T, U]
 }
 export interface MiddlewareBuilder<T={},U={}> {
+>MiddlewareBuilder : MiddlewareBuilder<T, U>
+>T : T
+>U : U
+
     prop: [T, U];
 >prop : [T, U]
 }
@@= skipped -44, +67 lines =@@
 
 declare class TRPCBuilder<TParams> {
 >TRPCBuilder : TRPCBuilder<TParams>
+>TParams : TParams
 
     create<TOptions extends Record<string, any>>(): {
->create : <TOptions extends Record<string, any>>() => { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: import("./middleware").MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>; }>; }, TNewParams>) => import("./middleware").MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>; }>; }, TNewParams>; router: {}; }
+>create : <TOptions extends Record<string, any>>() => { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<???, ???>>>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<???, ???>>>; }>; }, TNewParams>; router: {}; }
+>TOptions : TOptions
 
         procedure: {};
 >procedure : {}
 
         middleware: <TNewParams extends Record<string, any>>(fn: import("./middleware").MiddlewareFunction<{
->middleware : <TNewParams extends Record<string, any>>(fn: import("./middleware").MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>; }>; }, TNewParams>) => import("./middleware").MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>; }>; }, TNewParams>
->fn : import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>; }>; }, TNewParams>
+>middleware : <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? ??? : object, DefaultErrorShape<{}>>>>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? ??? : object, DefaultErrorShape<{}>>>>; }>; }, TNewParams>
+>TNewParams : TNewParams
+>fn : MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape<{}>>>>; }>; }, TNewParams>
 
             _config: RootConfig<{
->_config : RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>; }>
+>_config : RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape<{}>>>>; }>
 
                 errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>;
 >errorShape : ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape<{}>>>>
@@= skipped -20, +23 lines =@@
             }>;
         }, TNewParams>) => import("./middleware").MiddlewareBuilder<{
             _config: RootConfig<{
->_config : RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>; }>
+>_config : RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape<{}>>>>; }>
 
                 errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape>>>;
 >errorShape : ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<TParams["ctx"] extends object ? TParams["ctx"] : object, DefaultErrorShape<{}>>>>
@@= skipped -22, +22 lines =@@
 >initTRPC : TRPCBuilder<object>
 
 const trpc = initTRPC.create();
->trpc : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
->initTRPC.create() : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
->initTRPC.create : <TOptions extends Record<string, any>>() => { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<import("node_modules/@trpc/server/internals/utils").PickFirstDefined<TOptions["errorFormatter"], import("node_modules/@trpc/server/internals/utils").ErrorFormatter<object, import("node_modules/@trpc/server/internals/utils").DefaultErrorShape<{}>>>>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<import("node_modules/@trpc/server/internals/utils").PickFirstDefined<TOptions["errorFormatter"], import("node_modules/@trpc/server/internals/utils").ErrorFormatter<object, import("node_modules/@trpc/server/internals/utils").DefaultErrorShape<{}>>>>; }>; }, TNewParams>; router: {}; }
+>trpc : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
+>initTRPC.create() : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
+>initTRPC.create : <TOptions extends Record<string, any>>() => { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<object, ???>>>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<object, ???>>>; }>; }, TNewParams>; router: {}; }
 >initTRPC : TRPCBuilder<object>
->create : <TOptions extends Record<string, any>>() => { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<import("node_modules/@trpc/server/internals/utils").PickFirstDefined<TOptions["errorFormatter"], import("node_modules/@trpc/server/internals/utils").ErrorFormatter<object, import("node_modules/@trpc/server/internals/utils").DefaultErrorShape<{}>>>>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<import("node_modules/@trpc/server/internals/utils").PickFirstDefined<TOptions["errorFormatter"], import("node_modules/@trpc/server/internals/utils").ErrorFormatter<object, import("node_modules/@trpc/server/internals/utils").DefaultErrorShape<{}>>>>; }>; }, TNewParams>; router: {}; }
+>create : <TOptions extends Record<string, any>>() => { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<object, ???>>>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<PickFirstDefined<TOptions["errorFormatter"], ErrorFormatter<object, ???>>>; }>; }, TNewParams>; router: {}; }
 
 export const middleware = trpc.middleware;
->middleware : <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>
->trpc.middleware : <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>
->trpc : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
->middleware : <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>
+>middleware : <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>
+>trpc.middleware : <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>
+>trpc : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
+>middleware : <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>
 
 export const router = trpc.router;
 >router : {}
 >trpc.router : {}
->trpc : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
+>trpc : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
 >router : {}
 
 export const publicProcedure = trpc.procedure;
 >publicProcedure : {}
 >trpc.procedure : {}
->trpc : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: import("node_modules/@trpc/server/middleware").MiddlewareFunction<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>) => import("node_modules/@trpc/server/middleware").MiddlewareBuilder<{ _config: import("node_modules/@trpc/server/internals/config").RootConfig<{ errorShape: import("node_modules/@trpc/server/internals/utils").ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
+>trpc : { procedure: {}; middleware: <TNewParams extends Record<string, any>>(fn: MiddlewareFunction<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>) => MiddlewareBuilder<{ _config: RootConfig<{ errorShape: ErrorFormatterShape<never>; }>; }, TNewParams>; router: {}; }
 >procedure : {}
 
