--- old.declarationEmitInlinedDistributiveConditional.types
+++ new.declarationEmitInlinedDistributiveConditional.types
@@= skipped -1, +1 lines =@@

 === test.ts ===
 import {dropPrivateProps1, dropPrivateProps2} from './api';
->dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
+>dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("./internal").PublicKeys1<keyof Obj>]: Obj[K]; }
 >dropPrivateProps2 : <Obj>(obj: Obj) => { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; }

 const a = dropPrivateProps1({foo: 42, _bar: 'secret'}); // type is {foo: number}
 >a : { foo: number; }
 >dropPrivateProps1({foo: 42, _bar: 'secret'}) : { foo: number; }
->dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
+>dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("./internal").PublicKeys1<keyof Obj>]: Obj[K]; }
 >{foo: 42, _bar: 'secret'} : { foo: number; _bar: string; }
 >foo : number
 >42 : 42
@@= skipped -28, +28 lines =@@

 === api.ts ===
 import {excludePrivateKeys1, excludePrivateKeys2} from './internal';
->excludePrivateKeys1 : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
+>excludePrivateKeys1 : <Obj>(obj: Obj) => { [K in import("./internal").PublicKeys1<keyof Obj>]: Obj[K]; }
 >excludePrivateKeys2 : <Obj>(obj: Obj) => { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; }

 export const dropPrivateProps1 = <Obj>(obj: Obj) => excludePrivateKeys1(obj);
->dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
-><Obj>(obj: Obj) => excludePrivateKeys1(obj) : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
+>dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("./internal").PublicKeys1<keyof Obj>]: Obj[K]; }
+><Obj>(obj: Obj) => excludePrivateKeys1(obj) : <Obj>(obj: Obj) => { [K in import("./internal").PublicKeys1<keyof Obj>]: Obj[K]; }
 >obj : Obj
->excludePrivateKeys1(obj) : { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
->excludePrivateKeys1 : <Obj_1>(obj: Obj_1) => { [K in import("internal").PublicKeys1<keyof Obj_1>]: Obj_1[K]; }
+>excludePrivateKeys1(obj) : { [K in import("./internal").PublicKeys1<keyof Obj>]: Obj[K]; }
+>excludePrivateKeys1 : <Obj_1>(obj: Obj_1) => { [K in import("./internal").PublicKeys1<keyof Obj_1>]: Obj_1[K]; }
 >obj : Obj

 export const dropPrivateProps2 = <Obj>(obj: Obj) => excludePrivateKeys2(obj);