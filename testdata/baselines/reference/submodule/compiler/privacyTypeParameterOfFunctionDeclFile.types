//// [tests/cases/compiler/privacyTypeParameterOfFunctionDeclFile.ts] ////

=== privacyTypeParameterOfFunctionDeclFile.ts ===
class privateClass {
>privateClass : privateClass
}

export class publicClass {
>publicClass : publicClass
}

export interface publicInterfaceWithPrivateTypeParameters {
>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters

    new <T extends privateClass>(): privateClass;  // Error
>T : T

    <T extends privateClass>(): privateClass;  // Error
>T : T

    myMethod<T extends privateClass>(): privateClass;  // Error
>myMethod : <T extends privateClass>() => privateClass
>T : T
}

export interface publicInterfaceWithPublicTypeParameters {
>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters

    new <T extends publicClass>(): publicClass;
>T : T

    <T extends publicClass>(): publicClass;
>T : T

    myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>T : T
}

interface privateInterfaceWithPrivateTypeParameters {
>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters

    new <T extends privateClass>(): privateClass;
>T : T

    <T extends privateClass>(): privateClass;
>T : T

    myMethod<T extends privateClass>(): privateClass;
>myMethod : <T extends privateClass>() => privateClass
>T : T
}

interface privateInterfaceWithPublicTypeParameters {
>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters

    new <T extends publicClass>(): publicClass;
>T : T

    <T extends publicClass>(): publicClass;
>T : T

    myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>T : T
}

export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : publicClassWithWithPrivateTypeParameters

    static myPublicStaticMethod<T extends privateClass>() {  // Error
>myPublicStaticMethod : <T extends privateClass>() => void
>T : T
    }
    private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>T : T
    }
    myPublicMethod<T extends privateClass>() {  // Error
>myPublicMethod : <T extends privateClass>() => void
>T : T
    }
    private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>T : T
    }
}

export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : publicClassWithWithPublicTypeParameters

    static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
    }
    private static myPrivateStaticMethod<T extends publicClass>() { 
>myPrivateStaticMethod : <T extends publicClass>() => void
>T : T
    }
    myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>T : T
    }
    private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>T : T
    }
}

class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : privateClassWithWithPrivateTypeParameters

    static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : <T extends privateClass>() => void
>T : T
    }
    private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>T : T
    }
    myPublicMethod<T extends privateClass>() {
>myPublicMethod : <T extends privateClass>() => void
>T : T
    }
    private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>T : T
    }
}

class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : privateClassWithWithPublicTypeParameters

    static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
    }
    private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>T : T
    }
    myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>T : T
    }
    private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>T : T
    }
}

export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() {  // Error
>publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>T : T
}

export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>T : T
}

function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>T : T
}

function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>T : T
}

export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends

    new <T>(): publicClass;
>T : T

    <T>(): publicClass;
>T : T

    myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>T : T
}

interface privateInterfaceWithPublicTypeParametersWithoutExtends {
>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends

    new <T>(): publicClass;
>T : T

    <T>(): publicClass;
>T : T

    myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>T : T
}

export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : publicClassWithWithPublicTypeParametersWithoutExtends

    static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>T : T
    }
    private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>T : T
    }
    myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>T : T
    }
    private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>T : T
    }
}
class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : privateClassWithWithPublicTypeParametersWithoutExtends

    static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>T : T
    }
    private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>T : T
    }
    myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>T : T
    }
    private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>T : T
    }
}

export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>T : T
}

function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>T : T
}

export interface publicInterfaceWithPrivatModuleTypeParameters {
>publicInterfaceWithPrivatModuleTypeParameters : publicInterfaceWithPrivatModuleTypeParameters

    new <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>T : T
>privateModule : any
>privateModule : any

    <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>T : T
>privateModule : any
>privateModule : any

    myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>myMethod : <T extends publicClass>() => publicClass
>T : T
>privateModule : any
>privateModule : any
}
export class publicClassWithWithPrivateModuleTypeParameters {
>publicClassWithWithPrivateModuleTypeParameters : publicClassWithWithPrivateModuleTypeParameters

    static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
>privateModule : any
    }
    myPublicMethod<T extends privateModule.publicClass>() {  // Error
>myPublicMethod : <T extends publicClass>() => void
>T : T
>privateModule : any
    }
}
export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
>publicFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
>T : T
>privateModule : any
}


interface privateInterfaceWithPrivatModuleTypeParameters {
>privateInterfaceWithPrivatModuleTypeParameters : privateInterfaceWithPrivatModuleTypeParameters

    new <T extends privateModule.publicClass>(): privateModule.publicClass;
>T : T
>privateModule : any
>privateModule : any

    <T extends privateModule.publicClass>(): privateModule.publicClass;
>T : T
>privateModule : any
>privateModule : any

    myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;
>myMethod : <T extends publicClass>() => publicClass
>T : T
>privateModule : any
>privateModule : any
}
class privateClassWithWithPrivateModuleTypeParameters {
>privateClassWithWithPrivateModuleTypeParameters : privateClassWithWithPrivateModuleTypeParameters

    static myPublicStaticMethod<T extends privateModule.publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
>privateModule : any
    }
    myPublicMethod<T extends privateModule.publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>T : T
>privateModule : any
    }
}
function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {
>privateFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
>T : T
>privateModule : any
}


export module publicModule {
>publicModule : typeof publicModule

    class privateClass {
>privateClass : privateClass
    }

    export class publicClass {
>publicClass : publicClass
    }

    export interface publicInterfaceWithPrivateTypeParameters {
>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters

        new <T extends privateClass>(): privateClass;  // Error
>T : T

        <T extends privateClass>(): privateClass;  // Error
>T : T

        myMethod<T extends privateClass>(): privateClass;  // Error
>myMethod : <T extends privateClass>() => privateClass
>T : T
    }

    export interface publicInterfaceWithPublicTypeParameters {
>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters

        new <T extends publicClass>(): publicClass;
>T : T

        <T extends publicClass>(): publicClass;
>T : T

        myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>T : T
    }

    interface privateInterfaceWithPrivateTypeParameters {
>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters

        new <T extends privateClass>(): privateClass;
>T : T

        <T extends privateClass>(): privateClass;
>T : T

        myMethod<T extends privateClass>(): privateClass;
>myMethod : <T extends privateClass>() => privateClass
>T : T
    }

    interface privateInterfaceWithPublicTypeParameters {
>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters

        new <T extends publicClass>(): publicClass;
>T : T

        <T extends publicClass>(): publicClass;
>T : T

        myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>T : T
    }

    export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : publicClassWithWithPrivateTypeParameters

        static myPublicStaticMethod<T extends privateClass>() {  // Error
>myPublicStaticMethod : <T extends privateClass>() => void
>T : T
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>T : T
        }
        myPublicMethod<T extends privateClass>() {  // Error
>myPublicMethod : <T extends privateClass>() => void
>T : T
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>T : T
        }
    }

    export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : publicClassWithWithPublicTypeParameters

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>T : T
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>T : T
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>T : T
        }
    }

    class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : privateClassWithWithPrivateTypeParameters

        static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : <T extends privateClass>() => void
>T : T
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>T : T
        }
        myPublicMethod<T extends privateClass>() {
>myPublicMethod : <T extends privateClass>() => void
>T : T
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>T : T
        }
    }

    class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : privateClassWithWithPublicTypeParameters

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>T : T
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>T : T
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>T : T
        }
    }

    export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() {  // Error
>publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>T : T
    }

    export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>T : T
    }

    function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>T : T
    }

    function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>T : T
    }

    export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends

        new <T>(): publicClass;
>T : T

        <T>(): publicClass;
>T : T

        myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>T : T
    }

    interface privateInterfaceWithPublicTypeParametersWithoutExtends {
>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends

        new <T>(): publicClass;
>T : T

        <T>(): publicClass;
>T : T

        myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>T : T
    }

    export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : publicClassWithWithPublicTypeParametersWithoutExtends

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>T : T
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>T : T
        }
        myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>T : T
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>T : T
        }
    }
    class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : privateClassWithWithPublicTypeParametersWithoutExtends

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>T : T
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>T : T
        }
        myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>T : T
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>T : T
        }
    }

    export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>T : T
    }

    function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>T : T
    }

    export interface publicInterfaceWithPrivatModuleTypeParameters {
>publicInterfaceWithPrivatModuleTypeParameters : publicInterfaceWithPrivatModuleTypeParameters

        new <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>T : T
>privateModule : any
>privateModule : any

        <T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>T : T
>privateModule : any
>privateModule : any

        myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
>myMethod : <T extends publicClass>() => publicClass
>T : T
>privateModule : any
>privateModule : any
    }
    export class publicClassWithWithPrivateModuleTypeParameters {
>publicClassWithWithPrivateModuleTypeParameters : publicClassWithWithPrivateModuleTypeParameters

        static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
>privateModule : any
        }
        myPublicMethod<T extends privateModule.publicClass>() {  // Error
>myPublicMethod : <T extends publicClass>() => void
>T : T
>privateModule : any
        }
    }
    export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
>publicFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
>T : T
>privateModule : any
    }


    interface privateInterfaceWithPrivatModuleTypeParameters {
>privateInterfaceWithPrivatModuleTypeParameters : privateInterfaceWithPrivatModuleTypeParameters

        new <T extends privateModule.publicClass>(): privateModule.publicClass;  
>T : T
>privateModule : any
>privateModule : any

        <T extends privateModule.publicClass>(): privateModule.publicClass;  
>T : T
>privateModule : any
>privateModule : any

        myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  
>myMethod : <T extends publicClass>() => publicClass
>T : T
>privateModule : any
>privateModule : any
    }
    class privateClassWithWithPrivateModuleTypeParameters {
>privateClassWithWithPrivateModuleTypeParameters : privateClassWithWithPrivateModuleTypeParameters

        static myPublicStaticMethod<T extends privateModule.publicClass>() {  
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
>privateModule : any
        }
        myPublicMethod<T extends privateModule.publicClass>() { 
>myPublicMethod : <T extends publicClass>() => void
>T : T
>privateModule : any
        }
    }
    function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() { 
>privateFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
>T : T
>privateModule : any
    }

}

module privateModule {
>privateModule : typeof privateModule

    class privateClass {
>privateClass : privateClass
    }

    export class publicClass {
>publicClass : publicClass
    }

    export interface publicInterfaceWithPrivateTypeParameters {
>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters

        new <T extends privateClass>(): privateClass; 
>T : T

        <T extends privateClass>(): privateClass;
>T : T

        myMethod<T extends privateClass>(): privateClass; 
>myMethod : <T extends privateClass>() => privateClass
>T : T
    }

    export interface publicInterfaceWithPublicTypeParameters {
>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters

        new <T extends publicClass>(): publicClass;
>T : T

        <T extends publicClass>(): publicClass;
>T : T

        myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>T : T
    }

    interface privateInterfaceWithPrivateTypeParameters {
>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters

        new <T extends privateClass>(): privateClass;
>T : T

        <T extends privateClass>(): privateClass;
>T : T

        myMethod<T extends privateClass>(): privateClass;
>myMethod : <T extends privateClass>() => privateClass
>T : T
    }

    interface privateInterfaceWithPublicTypeParameters {
>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters

        new <T extends publicClass>(): publicClass;
>T : T

        <T extends publicClass>(): publicClass;
>T : T

        myMethod<T extends publicClass>(): publicClass;
>myMethod : <T extends publicClass>() => publicClass
>T : T
    }

    export class publicClassWithWithPrivateTypeParameters {
>publicClassWithWithPrivateTypeParameters : publicClassWithWithPrivateTypeParameters

        static myPublicStaticMethod<T extends privateClass>() { 
>myPublicStaticMethod : <T extends privateClass>() => void
>T : T
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>T : T
        }
        myPublicMethod<T extends privateClass>() {  
>myPublicMethod : <T extends privateClass>() => void
>T : T
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>T : T
        }
    }

    export class publicClassWithWithPublicTypeParameters {
>publicClassWithWithPublicTypeParameters : publicClassWithWithPublicTypeParameters

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>T : T
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>T : T
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>T : T
        }
    }

    class privateClassWithWithPrivateTypeParameters {
>privateClassWithWithPrivateTypeParameters : privateClassWithWithPrivateTypeParameters

        static myPublicStaticMethod<T extends privateClass>() {
>myPublicStaticMethod : <T extends privateClass>() => void
>T : T
        }
        private static myPrivateStaticMethod<T extends privateClass>() {
>myPrivateStaticMethod : <T extends privateClass>() => void
>T : T
        }
        myPublicMethod<T extends privateClass>() {
>myPublicMethod : <T extends privateClass>() => void
>T : T
        }
        private myPrivateMethod<T extends privateClass>() {
>myPrivateMethod : <T extends privateClass>() => void
>T : T
        }
    }

    class privateClassWithWithPublicTypeParameters {
>privateClassWithWithPublicTypeParameters : privateClassWithWithPublicTypeParameters

        static myPublicStaticMethod<T extends publicClass>() {
>myPublicStaticMethod : <T extends publicClass>() => void
>T : T
        }
        private static myPrivateStaticMethod<T extends publicClass>() {
>myPrivateStaticMethod : <T extends publicClass>() => void
>T : T
        }
        myPublicMethod<T extends publicClass>() {
>myPublicMethod : <T extends publicClass>() => void
>T : T
        }
        private myPrivateMethod<T extends publicClass>() {
>myPrivateMethod : <T extends publicClass>() => void
>T : T
        }
    }

    export function publicFunctionWithPrivateTypeParameters<T extends privateClass>() { 
>publicFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>T : T
    }

    export function publicFunctionWithPublicTypeParameters<T extends publicClass>() {
>publicFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>T : T
    }

    function privateFunctionWithPrivateTypeParameters<T extends privateClass>() {
>privateFunctionWithPrivateTypeParameters : <T extends privateClass>() => void
>T : T
    }

    function privateFunctionWithPublicTypeParameters<T extends publicClass>() {
>privateFunctionWithPublicTypeParameters : <T extends publicClass>() => void
>T : T
    }

    export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends

        new <T>(): publicClass;
>T : T

        <T>(): publicClass;
>T : T

        myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>T : T
    }

    interface privateInterfaceWithPublicTypeParametersWithoutExtends {
>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends

        new <T>(): publicClass;
>T : T

        <T>(): publicClass;
>T : T

        myMethod<T>(): publicClass;
>myMethod : <T>() => publicClass
>T : T
    }

    export class publicClassWithWithPublicTypeParametersWithoutExtends {
>publicClassWithWithPublicTypeParametersWithoutExtends : publicClassWithWithPublicTypeParametersWithoutExtends

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>T : T
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>T : T
        }
        myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>T : T
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>T : T
        }
    }
    class privateClassWithWithPublicTypeParametersWithoutExtends {
>privateClassWithWithPublicTypeParametersWithoutExtends : privateClassWithWithPublicTypeParametersWithoutExtends

        static myPublicStaticMethod<T>() {
>myPublicStaticMethod : <T>() => void
>T : T
        }
        private static myPrivateStaticMethod<T>() {
>myPrivateStaticMethod : <T>() => void
>T : T
        }
        myPublicMethod<T>() {
>myPublicMethod : <T>() => void
>T : T
        }
        private myPrivateMethod<T>() {
>myPrivateMethod : <T>() => void
>T : T
        }
    }

    export function publicFunctionWithPublicTypeParametersWithoutExtends<T>() {
>publicFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>T : T
    }

    function privateFunctionWithPublicTypeParametersWithoutExtends<T>() {
>privateFunctionWithPublicTypeParametersWithoutExtends : <T>() => void
>T : T
    }
}
