--- old.reverseMappedTypeIntersectionConstraint.symbols
+++ new.reverseMappedTypeIntersectionConstraint.symbols
@@= skipped -157, +157 lines =@@

     if(Math.random() > 0.5) {
 >Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

       return s as T
@@= skipped -33, +33 lines =@@

     if(Math.random() > 0.5) {
 >Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))

       return arr as T[]
@@= skipped -146, +146 lines =@@
 >DeepWritable : Symbol(DeepWritable, Decl(reverseMappedTypeIntersectionConstraint.ts, 116, 73))
 >T : Symbol(T, Decl(reverseMappedTypeIntersectionConstraint.ts, 118, 18))
 >T : Symbol(T, Decl(reverseMappedTypeIntersectionConstraint.ts, 118, 18))
->Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(reverseMappedTypeIntersectionConstraint.ts, 118, 18))
 >K : Symbol(K, Decl(reverseMappedTypeIntersectionConstraint.ts, 118, 61))
 >T : Symbol(T, Decl(reverseMappedTypeIntersectionConstraint.ts, 118, 18))
@@= skipped -16, +16 lines =@@

   logic: () => Promise<unknown>;
 >logic : Symbol(ProvidedActor.logic, Decl(reverseMappedTypeIntersectionConstraint.ts, 121, 14))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --))
 }

 type DistributeActors<TActor> = TActor extends { src: infer TSrc }
@@= skipped -88, +88 lines =@@

 const child = () => Promise.resolve("foo");
 >child : Symbol(child, Decl(reverseMappedTypeIntersectionConstraint.ts, 151, 5))
->Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))

 const config = createXMachine({
 >config : Symbol(config, Decl(reverseMappedTypeIntersectionConstraint.ts, 153, 5))