--- old.reverseMappedTypeIntersectionConstraint.symbols
+++ new.reverseMappedTypeIntersectionConstraint.symbols
@@= skipped -137, +137 lines =@@
 >Stuff : Symbol(Stuff, Decl(reverseMappedTypeIntersectionConstraint.ts, 45, 8))
 
     field: number;
->field : Symbol(Stuff.field, Decl(reverseMappedTypeIntersectionConstraint.ts, 49, 17))
+>field : Symbol(field, Decl(reverseMappedTypeIntersectionConstraint.ts, 49, 17))
 
     anotherField: string;
->anotherField : Symbol(Stuff.anotherField, Decl(reverseMappedTypeIntersectionConstraint.ts, 50, 18))
+>anotherField : Symbol(anotherField, Decl(reverseMappedTypeIntersectionConstraint.ts, 50, 18))
 }
 
 function doStuffWithStuff<T extends Stuff>(s: { [K in keyof T & keyof Stuff]: T[K] } ): T {
@@= skipped -19, +19 lines =@@
 >T : Symbol(T, Decl(reverseMappedTypeIntersectionConstraint.ts, 54, 26))
 
     if(Math.random() > 0.5) {
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>Math.random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 
       return s as T
 >s : Symbol(s, Decl(reverseMappedTypeIntersectionConstraint.ts, 54, 43))
@@= skipped -33, +33 lines =@@
 >T : Symbol(T, Decl(reverseMappedTypeIntersectionConstraint.ts, 64, 29))
 
     if(Math.random() > 0.5) {
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>Math.random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 
       return arr as T[]
 >arr : Symbol(arr, Decl(reverseMappedTypeIntersectionConstraint.ts, 64, 46))
@@= skipped -106, +106 lines =@@
 >WithNestedProp : Symbol(WithNestedProp, Decl(reverseMappedTypeIntersectionConstraint.ts, 99, 30))
 
   prop: string;
->prop : Symbol(WithNestedProp.prop, Decl(reverseMappedTypeIntersectionConstraint.ts, 103, 26))
+>prop : Symbol(prop, Decl(reverseMappedTypeIntersectionConstraint.ts, 103, 26))
 
   nested: {
->nested : Symbol(WithNestedProp.nested, Decl(reverseMappedTypeIntersectionConstraint.ts, 104, 15))
+>nested : Symbol(nested, Decl(reverseMappedTypeIntersectionConstraint.ts, 104, 15))
 
     prop: string;
 >prop : Symbol(prop, Decl(reverseMappedTypeIntersectionConstraint.ts, 105, 11))
@@= skipped -53, +53 lines =@@
 >ProvidedActor : Symbol(ProvidedActor, Decl(reverseMappedTypeIntersectionConstraint.ts, 118, 96))
 
   src: string;
->src : Symbol(ProvidedActor.src, Decl(reverseMappedTypeIntersectionConstraint.ts, 120, 25))
+>src : Symbol(src, Decl(reverseMappedTypeIntersectionConstraint.ts, 120, 25))
 
   logic: () => Promise<unknown>;
->logic : Symbol(ProvidedActor.logic, Decl(reverseMappedTypeIntersectionConstraint.ts, 121, 14))
+>logic : Symbol(logic, Decl(reverseMappedTypeIntersectionConstraint.ts, 121, 14))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --))
 }
 
@@= skipped -27, +27 lines =@@
 >ProvidedActor : Symbol(ProvidedActor, Decl(reverseMappedTypeIntersectionConstraint.ts, 118, 96))
 
   types?: {
->types : Symbol(MachineConfig.types, Decl(reverseMappedTypeIntersectionConstraint.ts, 131, 55))
+>types : Symbol(types, Decl(reverseMappedTypeIntersectionConstraint.ts, 131, 55))
 
     actors?: TActor;
 >actors : Symbol(actors, Decl(reverseMappedTypeIntersectionConstraint.ts, 132, 11))
@@= skipped -8, +8 lines =@@
 
   };
   invoke: IsLiteralString<TActor["src"]> extends true
->invoke : Symbol(MachineConfig.invoke, Decl(reverseMappedTypeIntersectionConstraint.ts, 134, 4))
+>invoke : Symbol(invoke, Decl(reverseMappedTypeIntersectionConstraint.ts, 134, 4))
 >IsLiteralString : Symbol(IsLiteralString, Decl(reverseMappedTypeIntersectionConstraint.ts, 112, 79))
 >TActor : Symbol(TActor, Decl(reverseMappedTypeIntersectionConstraint.ts, 131, 24))
 
