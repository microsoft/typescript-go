--- old.deferredConditionalTypes2.types
+++ new.deferredConditionalTypes2.types
@@= skipped -4, +4 lines =@@
 
 type PositiveInfinity = 1e999;
 >PositiveInfinity : Infinity
->                 : ^^^^^^^^
 
 type NegativeInfinity = -1e999;
 >NegativeInfinity : -Infinity
->                 : ^^^^^^^^^
 >-1e999 : -Infinity
->       : ^^^^^^^^^
 >1e999 : Infinity
->      : ^^^^^^^^
 
 export type IsEqual<A, B> = (<G>() => G extends A ? 1 : 2) extends <
 >IsEqual : IsEqual<A, B>
->        : ^^^^^^^^^^^^^
+>A : A
+>B : B
+>G : G
 
   G,
+>G : G
+
 >() => G extends B ? 1 : 2
   ? true
 >true : true
->     : ^^^^
 
   : false;
 >false : false
->      : ^^^^^
 
 export type Add<A extends number, B extends number> = [
 >Add : [true, false] extends [IsEqual<A, Infinity>, IsEqual<B, -Infinity>] ? Infinity : "failed"
->    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>A : A
+>B : B
 
   IsEqual<A, PositiveInfinity>,
   IsEqual<A, NegativeInfinity>,
   IsEqual<B, PositiveInfinity>,
   IsEqual<B, NegativeInfinity>,
 ] extends infer R extends [boolean, boolean, boolean, boolean]
+>R : R
+
   ? [true, false] extends ([R[0], R[3]])
 >true : true
->     : ^^^^
 >false : false
->      : ^^^^^
 
     ? PositiveInfinity
     : "failed"
@@= skipped -45, +44 lines =@@
 
 export type AddWithoutParentheses<A extends number, B extends number> = [
 >AddWithoutParentheses : [true, false] extends [IsEqual<A, Infinity>, IsEqual<B, -Infinity>] ? Infinity : "failed"
->                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>A : A
+>B : B
 
   IsEqual<A, PositiveInfinity>,
   IsEqual<A, NegativeInfinity>,
   IsEqual<B, PositiveInfinity>,
   IsEqual<B, NegativeInfinity>,
 ] extends infer R extends [boolean, boolean, boolean, boolean]
+>R : R
+
   ? [true, false] extends [R[0], R[3]]
 >true : true
->     : ^^^^
 >false : false
->      : ^^^^^
 
     ? PositiveInfinity
     : "failed"
@@= skipped -19, +20 lines =@@
 
 type AddTest0 = Add<PositiveInfinity, PositiveInfinity>;
 >AddTest0 : Infinity
->         : ^^^^^^^^
 
 type AddTest1 = AddWithoutParentheses<PositiveInfinity, PositiveInfinity>;
 >AddTest1 : Infinity
->         : ^^^^^^^^
 
