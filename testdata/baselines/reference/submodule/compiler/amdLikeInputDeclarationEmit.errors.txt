ExtendedClass.js(7,1): error TS2345: Argument of type '{}' is not assignable to parameter of type '(...modules: unknown[]) => unknown'.
  Type '{}' provides no match for the signature '(...modules: unknown[]): unknown'.
ExtendedClass.js(17,5): error TS1233: An export declaration can only be used at the top level of a namespace or module.
ExtendedClass.js(17,12): error TS2339: Property 'exports' does not exist on type '{}'.
ExtendedClass.js(18,19): error TS2339: Property 'exports' does not exist on type '{}'.


==== typing.d.ts (0 errors) ====
    declare function define<T=unknown>(name: string, modules: string[], ready: (...modules: unknown[]) => T);
==== deps/BaseClass.d.ts (0 errors) ====
    declare module "deps/BaseClass" {
        class BaseClass {
            static extends<A>(a: A): new () => A & BaseClass;
        }
        export = BaseClass;
    }
==== ExtendedClass.js (4 errors) ====
    define("lib/ExtendedClass", ["deps/BaseClass"], 
    /**
     * {typeof import("deps/BaseClass")}
     * @param  {typeof import("deps/BaseClass")} BaseClass 
     * @returns 
     */
    (BaseClass) => {    
    ~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '{}' is not assignable to parameter of type '(...modules: unknown[]) => unknown'.
!!! error TS2345:   Type '{}' provides no match for the signature '(...modules: unknown[]): unknown'.
        
        const ExtendedClass = BaseClass.extends({
            f: function() {
                return "something";
            }
        });
    
        // Exports the module in a way tsc recognize class export 
        const module = {};
        module.exports = ExtendedClass
        ~~~~~~
!!! error TS1233: An export declaration can only be used at the top level of a namespace or module.
               ~~~~~~~
!!! error TS2339: Property 'exports' does not exist on type '{}'.
        return module.exports;
                      ~~~~~~~
!!! error TS2339: Property 'exports' does not exist on type '{}'.
    });