--- old.privacyTypeParametersOfClass.types
+++ new.privacyTypeParametersOfClass.types
@@= skipped -11, +11 lines =@@
 // TypeParameter_0_of_exported_class_1_has_or_is_using_private_type_2
 export class publicClassWithPrivateTypeParameters<T extends privateClass> {
 >publicClassWithPrivateTypeParameters : publicClassWithPrivateTypeParameters<T>
+>T : T
 
     myMethod(val: T): T { // Error
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 export class publicClassWithPublicTypeParameters<T extends publicClass> {
 >publicClassWithPublicTypeParameters : publicClassWithPublicTypeParameters<T>
+>T : T
 
     myMethod(val: T): T { // No Error
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 class privateClassWithPrivateTypeParameters<T extends privateClass> {
 >privateClassWithPrivateTypeParameters : privateClassWithPrivateTypeParameters<T>
+>T : T
 
     myMethod(val: T): T { // No Error
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 class privateClassWithPublicTypeParameters<T extends publicClass> {
 >privateClassWithPublicTypeParameters : privateClassWithPublicTypeParameters<T>
+>T : T
 
     myMethod(val: T): T { // No Error
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 export class publicClassWithPublicTypeParametersWithoutExtends<T> {
 >publicClassWithPublicTypeParametersWithoutExtends : publicClassWithPublicTypeParametersWithoutExtends<T>
+>T : T
 
     myMethod(val: T): T { // No Error
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 class privateClassWithPublicTypeParametersWithoutExtends<T> {
 >privateClassWithPublicTypeParametersWithoutExtends : privateClassWithPublicTypeParametersWithoutExtends<T>
+>T : T
 
     myMethod(val: T): T { // No Error
 >myMethod : (val: T) => T
