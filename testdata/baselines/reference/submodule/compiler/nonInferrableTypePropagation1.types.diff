--- old.nonInferrableTypePropagation1.types
+++ new.nonInferrableTypePropagation1.types
@@= skipped -2, +2 lines =@@
 === nonInferrableTypePropagation1.ts ===
 type Op<I, O> = (thing: Thing<I>) => Thing<O>;
 >Op : Op<I, O>
+>I : I
+>O : O
 >thing : Thing<I>
 
 type Thing<T> = {
 >Thing : Thing<T>
+>T : T
 
     value: T;
 >value : T
 
     pipe<A, B>(
 >pipe : <A, B>(opA: Op<T, A>, opB: Op<A, B>) => Thing<B>
+>A : A
+>B : B
 
         opA: Op<T, A>,
 >opA : Op<T, A>
@@= skipped -21, +26 lines =@@
 };
 type Box<V> = { data: V };
 >Box : Box<V>
+>V : V
 >data : V
 
 declare const thing: Thing<number>;
@@= skipped -7, +8 lines =@@
 
 declare function map<T, R>(project: (value: T) => R): Op<T, R>;
 >map : <T, R>(project: (value: T) => R) => Op<T, R>
+>T : T
+>R : R
 >project : (value: T) => R
 >value : T
 
 declare function tap<T>(next: (value: T) => void): Op<T, T>;
 >tap : <T>(next: (value: T) => void) => Op<T, T>
+>T : T
 >next : (value: T) => void
 >value : T
 
 declare function box<V>(data: V): Box<V>;
 >box : <V>(data: V) => Box<V>
+>V : V
 >data : V
 
 declare function createAndUnbox<V>(factory: () => Thing<V | Box<V>>): Thing<V>;
 >createAndUnbox : <V>(factory: () => Thing<V | Box<V>>) => Thing<V>
+>V : V
 >factory : () => Thing<V | Box<V>>
 
 declare function log(value: any): void;
