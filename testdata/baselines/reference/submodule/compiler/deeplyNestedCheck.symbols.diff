--- old.deeplyNestedCheck.symbols
+++ new.deeplyNestedCheck.symbols
@@= skipped -7, +7 lines =@@
 >X : Symbol(X, Decl(deeplyNestedCheck.ts, 2, 23))
 
   child(path: string): DataSnapshot;
->child : Symbol(DataSnapshot.child, Decl(deeplyNestedCheck.ts, 2, 32))
+>child : Symbol(child, Decl(deeplyNestedCheck.ts, 2, 32))
 >path : Symbol(path, Decl(deeplyNestedCheck.ts, 3, 8))
 >DataSnapshot : Symbol(DataSnapshot, Decl(deeplyNestedCheck.ts, 0, 0))
 }
@@= skipped -11, +11 lines =@@
 >DataSnapshot : Symbol(DataSnapshot, Decl(deeplyNestedCheck.ts, 0, 0))
 
   child<U extends Extract<keyof T, string>>(path: U): Snapshot<T[U]>;
->child : Symbol(Snapshot.child, Decl(deeplyNestedCheck.ts, 6, 44))
+>child : Symbol(child, Decl(deeplyNestedCheck.ts, 6, 44))
 >U : Symbol(U, Decl(deeplyNestedCheck.ts, 7, 8))
 >Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(deeplyNestedCheck.ts, 6, 19))
@@= skipped -15, +15 lines =@@
 
 interface A { b: B[] }
 >A : Symbol(A, Decl(deeplyNestedCheck.ts, 8, 1))
->b : Symbol(A.b, Decl(deeplyNestedCheck.ts, 12, 13))
+>b : Symbol(b, Decl(deeplyNestedCheck.ts, 12, 13))
 >B : Symbol(B, Decl(deeplyNestedCheck.ts, 12, 22))
 
 interface B { c: C }
 >B : Symbol(B, Decl(deeplyNestedCheck.ts, 12, 22))
->c : Symbol(B.c, Decl(deeplyNestedCheck.ts, 13, 13))
+>c : Symbol(c, Decl(deeplyNestedCheck.ts, 13, 13))
 >C : Symbol(C, Decl(deeplyNestedCheck.ts, 13, 20))
 
 interface C { d: D[] }
 >C : Symbol(C, Decl(deeplyNestedCheck.ts, 13, 20))
->d : Symbol(C.d, Decl(deeplyNestedCheck.ts, 14, 13))
+>d : Symbol(d, Decl(deeplyNestedCheck.ts, 14, 13))
 >D : Symbol(D, Decl(deeplyNestedCheck.ts, 14, 22))
 
 interface D { e: E[] }
 >D : Symbol(D, Decl(deeplyNestedCheck.ts, 14, 22))
->e : Symbol(D.e, Decl(deeplyNestedCheck.ts, 15, 13))
+>e : Symbol(e, Decl(deeplyNestedCheck.ts, 15, 13))
 >E : Symbol(E, Decl(deeplyNestedCheck.ts, 15, 22))
 
 interface E { f: F[] }
 >E : Symbol(E, Decl(deeplyNestedCheck.ts, 15, 22))
->f : Symbol(E.f, Decl(deeplyNestedCheck.ts, 16, 13))
+>f : Symbol(f, Decl(deeplyNestedCheck.ts, 16, 13))
 >F : Symbol(F, Decl(deeplyNestedCheck.ts, 16, 22))
 
 interface F { g: G }
 >F : Symbol(F, Decl(deeplyNestedCheck.ts, 16, 22))
->g : Symbol(F.g, Decl(deeplyNestedCheck.ts, 17, 13))
+>g : Symbol(g, Decl(deeplyNestedCheck.ts, 17, 13))
 >G : Symbol(G, Decl(deeplyNestedCheck.ts, 17, 20))
 
 interface G { h: H[] }
 >G : Symbol(G, Decl(deeplyNestedCheck.ts, 17, 20))
->h : Symbol(G.h, Decl(deeplyNestedCheck.ts, 18, 13))
+>h : Symbol(h, Decl(deeplyNestedCheck.ts, 18, 13))
 >H : Symbol(H, Decl(deeplyNestedCheck.ts, 18, 22))
 
 interface H { i: string }
 >H : Symbol(H, Decl(deeplyNestedCheck.ts, 18, 22))
->i : Symbol(H.i, Decl(deeplyNestedCheck.ts, 19, 13))
+>i : Symbol(i, Decl(deeplyNestedCheck.ts, 19, 13))
 
 const x: A = {
 >x : Symbol(x, Decl(deeplyNestedCheck.ts, 21, 5))
