--- old.protectedAccessThroughContextualThis.types
+++ new.protectedAccessThroughContextualThis.types
@@= skipped -17, +17 lines =@@
   constructor() {
     bindCopy.call(this)
 >bindCopy.call(this) : void
->bindCopy.call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
->bindCopy : (this: Foo) => void
->call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
+>bindCopy.call : <T, A extends any[], R>(thisArg: T, ...args: A) => R
+>bindCopy : () => void
+>call : <T, A extends any[], R>(thisArg: T, ...args: A) => R
 >this : this
 
     bindCopy2.call(this)
 >bindCopy2.call(this) : void
->bindCopy2.call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
+>bindCopy2.call : <T, A extends any[], R>(thisArg: T, ...args: A) => R
 >bindCopy2 : BindingFunction
->call : <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A) => R
+>call : <T, A extends any[], R>(thisArg: T, ...args: A) => R
 >this : this
   }
 }
 
 function bindCopy(this: Foo) {
->bindCopy : (this: Foo) => void
+>bindCopy : () => void
 >this : Foo
 
   this.copy = this.protec; // Should OK
@@= skipped -43, +43 lines =@@
 
 const bindCopy2: BindingFunction = function () {
 >bindCopy2 : BindingFunction
->function () {  this.copy = this.protec; // Should OK  console.log(this.privat); // Should error} : (this: Foo) => void
+>function () {  this.copy = this.protec; // Should OK  console.log(this.privat); // Should error} : () => void
 
   this.copy = this.protec; // Should OK
 >this.copy = this.protec : string
