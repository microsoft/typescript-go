--- old.deferredLookupTypeResolution.js
+++ new.deferredLookupTypeResolution.js
@@= skipped -28, +28 lines =@@


 //// [deferredLookupTypeResolution.js]
-"use strict";
-// Repro from #17456
 function f2(a) {
     return f1(a, 'x');
 }
@@= skipped -11, +9 lines =@@


 //// [deferredLookupTypeResolution.d.ts]
+// Repro from #17456
 type StringContains<S extends string, L extends string> = ({
     [K in S]: 'true';
 } & {
     [key: string]: 'false';
 })[L];
 type ObjectHasKey<O, L extends string> = StringContains<Extract<keyof O, string>, L>;
-type First<T> = ObjectHasKey<T, '0'>;
+type First<T> = ObjectHasKey<T, '0'>; // Should be deferred
 type T1 = ObjectHasKey<{
     a: string;
-}, 'a'>;
+}, 'a'>; // 'true'
 type T2 = ObjectHasKey<{
     a: string;
-}, 'b'>;
+}, 'b'>; // 'false'
+// Verify that mapped type isn't eagerly resolved in type-to-string operation
 declare function f1<A extends string, B extends string>(a: A, b: B): {
     [P in A | B]: any;
 };