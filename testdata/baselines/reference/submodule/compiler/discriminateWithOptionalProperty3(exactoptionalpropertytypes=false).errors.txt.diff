--- old.discriminateWithOptionalProperty3(exactoptionalpropertytypes=false).errors.txt
+++ new.discriminateWithOptionalProperty3(exactoptionalpropertytypes=false).errors.txt
@@= skipped -0, +0 lines =@@
-<no content>
+discriminateWithOptionalProperty3.ts(30,51): error TS2345: Argument of type '{ readonly [variable: string]: unknown; } | {}' is not assignable to parameter of type '{ readonly [variable: string]: unknown; }'.
+  Type '{}' is not assignable to type '{ readonly [variable: string]: unknown; }'.
+    Index signature for type 'string' is missing in type '{}'.
+
+
+==== discriminateWithOptionalProperty3.ts (1 errors) ====
+    // https://github.com/microsoft/TypeScript/issues/55532#issuecomment-1694744665
+    
+    type Maybe<T> = null | undefined | T;
+    
+    declare class GraphQLError extends Error {
+      originalError: Error;
+    }
+    
+    interface ExecutionArgs {
+      variableValues?: Maybe<{ readonly [variable: string]: unknown }>;
+    }
+    
+    interface ExecutionContext {
+      variableValues: { [variable: string]: unknown };
+    }
+    
+    type CoercedVariableValues =
+      | { errors: ReadonlyArray<GraphQLError>; coerced?: never }
+      | { coerced: { [variable: string]: unknown }; errors?: never };
+    
+    declare function getVariableValues(inputs: {
+      readonly [variable: string]: unknown;
+    }): CoercedVariableValues;
+    
+    export function buildExecutionContext(
+      args: ExecutionArgs,
+    ): ReadonlyArray<GraphQLError> | ExecutionContext {
+      const { variableValues: rawVariableValues } = args;
+    
+      const coercedVariableValues = getVariableValues(rawVariableValues ?? {});
+                                                      ~~~~~~~~~~~~~~~~~~~~~~~
+!!! error TS2345: Argument of type '{ readonly [variable: string]: unknown; } | {}' is not assignable to parameter of type '{ readonly [variable: string]: unknown; }'.
+!!! error TS2345:   Type '{}' is not assignable to type '{ readonly [variable: string]: unknown; }'.
+!!! error TS2345:     Index signature for type 'string' is missing in type '{}'.
+    
+      if (coercedVariableValues.errors) {
+        return coercedVariableValues.errors;
+      }
+    
+      return {
+        variableValues: coercedVariableValues.coerced,
+      };
+    }
+    