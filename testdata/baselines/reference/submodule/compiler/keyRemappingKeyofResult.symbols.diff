--- old.keyRemappingKeyofResult.symbols
+++ new.keyRemappingKeyofResult.symbols
@@= skipped -2, +2 lines =@@
 === keyRemappingKeyofResult.ts ===
 const sym = Symbol("")
 >sym : Symbol(sym, Decl(keyRemappingKeyofResult.ts, 0, 5))
->Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 
 type Orig = { [k: string]: any, str: any, [sym]: any }
 >Orig : Symbol(Orig, Decl(keyRemappingKeyofResult.ts, 0, 22))
@@= skipped -11, +10 lines =@@
 
 type Okay = Exclude<keyof Orig, never>
 >Okay : Symbol(Okay, Decl(keyRemappingKeyofResult.ts, 1, 54))
->Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
+>Exclude : Symbol(Exclude)
 >Orig : Symbol(Orig, Decl(keyRemappingKeyofResult.ts, 0, 22))
 
 // type Okay = string | number | typeof sym
@@= skipped -9, +9 lines =@@
 >Remapped : Symbol(Remapped, Decl(keyRemappingKeyofResult.ts, 3, 38))
 >K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 6, 19))
 >Orig : Symbol(Orig, Decl(keyRemappingKeyofResult.ts, 0, 22))
->Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+>Record : Symbol(Record)
 >K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 6, 19))
 >K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 6, 19))
 
@@= skipped -12, +12 lines =@@
 
 type Oops = Exclude<keyof Remapped, never>
 >Oops : Symbol(Oops, Decl(keyRemappingKeyofResult.ts, 6, 83))
->Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
+>Exclude : Symbol(Exclude)
 >Remapped : Symbol(Remapped, Decl(keyRemappingKeyofResult.ts, 3, 38))
 
 declare let x: Oops;
@@= skipped -53, +53 lines =@@
 >Remapped : Symbol(Remapped, Decl(keyRemappingKeyofResult.ts, 27, 19))
 >K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 30, 23))
 >Orig : Symbol(Orig, Decl(keyRemappingKeyofResult.ts, 20, 17))
->Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+>Record : Symbol(Record)
 >K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 30, 23))
 >K : Symbol(K, Decl(keyRemappingKeyofResult.ts, 30, 23))
 
@@= skipped -62, +62 lines =@@
     type NonIndex<T extends PropertyKey> = {} extends Record<T, any> ? never : T;
 >NonIndex : Symbol(NonIndex, Decl(keyRemappingKeyofResult.ts, 51, 19))
 >T : Symbol(T, Decl(keyRemappingKeyofResult.ts, 54, 18))
->PropertyKey : Symbol(PropertyKey, Decl(lib.es5.d.ts, --, --))
->Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
+>PropertyKey : Symbol(PropertyKey)
+>Record : Symbol(Record)
 >T : Symbol(T, Decl(keyRemappingKeyofResult.ts, 54, 18))
 >T : Symbol(T, Decl(keyRemappingKeyofResult.ts, 54, 18))
 
     type DistributiveNonIndex<T extends PropertyKey> = T extends unknown ? NonIndex<T> : never;
 >DistributiveNonIndex : Symbol(DistributiveNonIndex, Decl(keyRemappingKeyofResult.ts, 54, 81))
 >T : Symbol(T, Decl(keyRemappingKeyofResult.ts, 55, 30))
->PropertyKey : Symbol(PropertyKey, Decl(lib.es5.d.ts, --, --))
+>PropertyKey : Symbol(PropertyKey)
 >T : Symbol(T, Decl(keyRemappingKeyofResult.ts, 55, 30))
 >NonIndex : Symbol(NonIndex, Decl(keyRemappingKeyofResult.ts, 51, 19))
 >T : Symbol(T, Decl(keyRemappingKeyofResult.ts, 55, 30))
