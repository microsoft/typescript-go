--- old.classExtendingAbstractClassWithMemberCalledTheSameAsItsOwnTypeParam.types
+++ new.classExtendingAbstractClassWithMemberCalledTheSameAsItsOwnTypeParam.types
@@= skipped -1, +1 lines =@@
 
 === classExtendingAbstractClassWithMemberCalledTheSameAsItsOwnTypeParam.ts ===
 interface IObserver {
+>IObserver : IObserver
+
 	handleChange<T, TChange>(observable: IObservable<T, TChange>, change: TChange): void;
 >handleChange : <T, TChange>(observable: IObservable<T, TChange>, change: TChange) => void
+>T : T
+>TChange : TChange
 >observable : IObservable<T, TChange>
 >change : TChange
 }
 
 interface IObservable<T, TChange = unknown> {
+>IObservable : IObservable<T, TChange>
+>T : T
+>TChange : TChange
+
 	get(): T;
 >get : () => T
 
@@= skipped -15, +23 lines =@@
 }
 
 export interface IReader {
+>IReader : IReader
+
 	readObservable<T>(observable: IObservable<T, any>): T;
 >readObservable : <T>(observable: IObservable<T, any>) => T
+>T : T
 >observable : IObservable<T, any>
 }
 
 export abstract class ConvenientObservable<T, TChange> implements IObservable<T, TChange> {
 >ConvenientObservable : ConvenientObservable<T, TChange>
+>T : T
+>TChange : TChange
 
 	get TChange(): TChange { return null!; }
 >TChange : TChange
@@= skipped -18, +23 lines =@@
 
 export abstract class BaseObservable<T, TChange = void> extends ConvenientObservable<T, TChange> {
 >BaseObservable : BaseObservable<T, TChange>
+>T : T
+>TChange : TChange
 >ConvenientObservable : ConvenientObservable<T, TChange>
 
 	protected readonly observers = new Set<IObserver>();
