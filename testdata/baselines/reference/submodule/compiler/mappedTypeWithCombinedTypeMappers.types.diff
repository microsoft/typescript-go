--- old.mappedTypeWithCombinedTypeMappers.types
+++ new.mappedTypeWithCombinedTypeMappers.types
@@= skipped -4, +4 lines =@@
 
 type Meta<T, A> = {
 >Meta : Meta<T, A>
->     : ^^^^^^^^^^
+>T : T
+>A : A
 
     readonly[P in keyof T]: {
+>P : P
+
         value: T[P];
 >value : T[P]
->      : ^^^^
 
         also: A;
 >also : A
->     : ^
 
         readonly children: Meta<T[P], A>;
 >children : Meta<T[P], A>
->         : ^^^^^^^^^^^^^
 
     };
 }
 
 interface Input {
+>Input : Input
+
     x: string;
 >x : string
->  : ^^^^^^
 
     y: number;
 >y : number
->  : ^^^^^^
 }
 
 declare const output: Meta<Input, boolean>;
 >output : Meta<Input, boolean>
->       : ^^^^^^^^^^^^^^^^^^^^
 
 const shouldFail: { important: boolean } = output.x.children;
 >shouldFail : { important: boolean; }
->           : ^^^^^^^^^^^^^       ^^^
 >important : boolean
->          : ^^^^^^^
 >output.x.children : string
->                  : ^^^^^^
 >output.x : { value: string; also: boolean; readonly children: string; }
->         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >output : Meta<Input, boolean>
->       : ^^^^^^^^^^^^^^^^^^^^
 >x : { value: string; also: boolean; readonly children: string; }
->  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >children : string
->         : ^^^^^^
 
