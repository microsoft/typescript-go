--- old.spreadInvalidArgumentType.js
+++ new.spreadInvalidArgumentType.js
@@= skipped -59, +59 lines =@@


 //// [spreadInvalidArgumentType.js]
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
 var E;
 (function (E) {
     E[E["v1"] = 0] = "v1";
@@= skipped -24, +35 lines =@@
     var n;
     var a;
     var e;
-    var o1 = Object.assign({}, p1); // OK, generic type paramterre
-    var o2 = Object.assign({}, p2); // OK
-    var o3 = Object.assign({}, t); // OK, generic type paramter
-    var o4 = Object.assign({}, i); // Error, index access
-    var o5 = Object.assign({}, k); // Error, index
-    var o6 = Object.assign({}, mapped_generic); // OK, generic mapped object type
-    var o7 = Object.assign({}, mapped); // OK, non-generic mapped type
-    var o8 = Object.assign({}, union_generic); // OK, union with generic type parameter
-    var o9 = Object.assign({}, union_primitive); // Error, union with generic type parameter
-    var o10 = Object.assign({}, intersection_generic); // OK, intersection with generic type parameter
-    var o11 = Object.assign({}, intersection_primitive); // Error, intersection with generic type parameter
-    var o12 = Object.assign({}, num); // Error
-    var o13 = Object.assign({}, str); // Error
-    var o14 = Object.assign({}, u); // error, undefined-only not allowed
-    var o15 = Object.assign({}, n); // error, null-only not allowed
-    var o16 = Object.assign({}, a); // OK
-    var o17 = Object.assign({}, literal_string); // Error
-    var o18 = Object.assign({}, literal_number); // Error
-    var o19 = Object.assign({}, e); // Error, enum
+    var o1 = __assign({}, p1); // OK, generic type paramterre
+    var o2 = __assign({}, p2); // OK
+    var o3 = __assign({}, t); // OK, generic type paramter
+    var o4 = __assign({}, i); // Error, index access
+    var o5 = __assign({}, k); // Error, index
+    var o6 = __assign({}, mapped_generic); // OK, generic mapped object type
+    var o7 = __assign({}, mapped); // OK, non-generic mapped type
+    var o8 = __assign({}, union_generic); // OK, union with generic type parameter
+    var o9 = __assign({}, union_primitive); // Error, union with generic type parameter
+    var o10 = __assign({}, intersection_generic); // OK, intersection with generic type parameter
+    var o11 = __assign({}, intersection_primitive); // Error, intersection with generic type parameter
+    var o12 = __assign({}, num); // Error
+    var o13 = __assign({}, str); // Error
+    var o14 = __assign({}, u); // error, undefined-only not allowed
+    var o15 = __assign({}, n); // error, null-only not allowed
+    var o16 = __assign({}, a); // OK
+    var o17 = __assign({}, literal_string); // Error
+    var o18 = __assign({}, literal_number); // Error
+    var o19 = __assign({}, e); // Error, enum
 }