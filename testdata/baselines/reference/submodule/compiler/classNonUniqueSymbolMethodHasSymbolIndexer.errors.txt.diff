--- old.classNonUniqueSymbolMethodHasSymbolIndexer.errors.txt
+++ new.classNonUniqueSymbolMethodHasSymbolIndexer.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'CallableFunction'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'NewableFunction'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'CallableFunction'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'NewableFunction'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== classNonUniqueSymbolMethodHasSymbolIndexer.ts (0 errors) ====
+    declare const a: symbol;
+    export class A {
+        [a]() { return 1 };
+    }
+    declare const e1: A[typeof a]; // no error, `A` has `symbol` index
+    
+    type Constructor = new (...args: any[]) => {};
+    declare function Mix<T extends Constructor>(classish: T): T & (new (...args: any[]) => {mixed: true});
+    
+    export const Mixer = Mix(class {
+        [a]() { return 1 };
+    });
+    
