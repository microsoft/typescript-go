//// [tests/cases/compiler/symbolObserverMismatchingPolyfillsWorkTogether.ts] ////

=== symbolObserverMismatchingPolyfillsWorkTogether.ts ===
interface SymbolConstructor {
>SymbolConstructor : Symbol(SymbolConstructor, Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 0, 0), Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 2, 1))

    readonly observer: symbol;
>observer : Symbol(observer, Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 0, 29), Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 3, 29))
}
interface SymbolConstructor {
>SymbolConstructor : Symbol(SymbolConstructor, Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 0, 0), Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 2, 1))

    readonly observer: unique symbol;
>observer : Symbol(observer, Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 0, 29), Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 3, 29))
}

const obj = {
>obj : Symbol(obj, Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 7, 5))

    [Symbol.observer]: 0
>[Symbol.observer] : Symbol([Symbol.observer], Decl(symbolObserverMismatchingPolyfillsWorkTogether.ts, 7, 13))

};
