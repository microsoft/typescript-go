--- old.awaitedType.types
+++ new.awaitedType.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/awaitedType.ts] ////
 
-=== Performance Stats ===
-Instantiation count: 25,000
-
 === awaitedType.ts ===
 type T1 = Awaited<number>;
 >T1 : number
@@= skipped -64, +61 lines =@@
 >TNullOrUndefined : null
 
 interface BadPromise { then(cb: (value: BadPromise) => void): void; }
+>BadPromise : BadPromise
 >then : (cb: (value: BadPromise) => void) => void
 >cb : (value: BadPromise) => void
 >value : BadPromise
@@= skipped -8, +9 lines =@@
 >T16 : any
 
 interface BadPromise1 { then(cb: (value: BadPromise2) => void): void; }
+>BadPromise1 : BadPromise1
 >then : (cb: (value: BadPromise2) => void) => void
 >cb : (value: BadPromise2) => void
 >value : BadPromise2
 
 interface BadPromise2 { then(cb: (value: BadPromise1) => void): void; }
+>BadPromise2 : BadPromise2
 >then : (cb: (value: BadPromise1) => void) => void
 >cb : (value: BadPromise1) => void
 >value : BadPromise1
@@= skipped -23, +25 lines =@@
 // https://github.com/microsoft/TypeScript/issues/33562
 type MaybePromise<T> = T | Promise<T> | PromiseLike<T>
 >MaybePromise : MaybePromise<T>
+>T : T
 
 declare function MaybePromise<T>(value: T): MaybePromise<T>;
 >MaybePromise : <T>(value: T) => MaybePromise<T>
+>T : T
 >value : T
 
 async function main() {
@@= skipped -27, +29 lines =@@
     ] = await Promise.all([
 >await Promise.all([        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ]) : [number, string, boolean]
 >Promise.all([        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ]) : Promise<[number, string, boolean]>
->Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >Promise : PromiseConstructor
->all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >[        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ] : [number | Promise<1> | PromiseLike<1>, string | Promise<"2"> | PromiseLike<"2">, true | Promise<true> | PromiseLike<true>]
 
         MaybePromise(1),
@@= skipped -94, +94 lines =@@
 
 async function f7<T>(x: T) {
 >f7 : <T>(x: T) => Promise<void>
+>T : T
 >x : T
 
     // NOTE: T does not belong solely to the domain of primitive types and either does
@@= skipped -15, +16 lines =@@
 
 async function f8<T extends any>(x: T) {
 >f8 : <T extends unknown>(x: T) => Promise<void>
+>T : T
 >x : T
 
     // NOTE: T does not belong solely to the domain of primitive types and either does
@@= skipped -15, +16 lines =@@
 
 async function f9<T extends unknown>(x: T) {
 >f9 : <T extends unknown>(x: T) => Promise<void>
+>T : T
 >x : T
 
     // NOTE: T does not belong solely to the domain of primitive types and either does
@@= skipped -15, +16 lines =@@
 
 async function f10<T extends {}>(x: T) {
 >f10 : <T extends {}>(x: T) => Promise<void>
+>T : T
 >x : T
 
     // NOTE: T does not belong solely to the domain of primitive types and either does
@@= skipped -14, +15 lines =@@
 }
 
 async function f11<T extends { then(onfulfilled: (value: unknown) => void): void }>(x: T) {
->f11 : <T extends { then(onfulfilled: (value: unknown) => void): void; }>(x: T) => Promise<void>
+>f11 : <T extends { then: (onfulfilled: (value: unknown) => void) => void; }>(x: T) => Promise<void>
+>T : T
 >then : (onfulfilled: (value: unknown) => void) => void
 >onfulfilled : (value: unknown) => void
 >value : unknown
@@= skipped -19, +20 lines =@@
 
 async function f12<T extends string | object>(x: T) {
 >f12 : <T extends string | object>(x: T) => Promise<void>
+>T : T
 >x : T
 
     // NOTE: T does not belong solely to the domain of primitive types and either does
@@= skipped -15, +16 lines =@@
 
 async function f13<T extends string>(x: T) {
 >f13 : <T extends string>(x: T) => Promise<void>
+>T : T
 >x : T
 
     // NOTE: T belongs to the domain of primitive types
@@= skipped -13, +14 lines =@@
 
 async function f14<T extends { x: number }>(x: T) {
 >f14 : <T extends { x: number; }>(x: T) => Promise<void>
+>T : T
 >x : number
 >x : T
 
@@= skipped -14, +15 lines =@@
 
 async function f15<T extends { then: number }>(x: T) {
 >f15 : <T extends { then: number; }>(x: T) => Promise<void>
+>T : T
 >then : number
 >x : T
 
@@= skipped -13, +14 lines =@@
 }
 
 async function f16<T extends number & { then(): void }>(x: T) {
->f16 : <T extends number & { then(): void; }>(x: T) => Promise<void>
+>f16 : <T extends number & { then: () => void; }>(x: T) => Promise<void>
+>T : T
 >then : () => void
 >x : T
 
@@= skipped -17, +18 lines =@@
 // helps with tests where '.types' just prints out the type alias name
 type _Expect<TActual extends TExpected, TExpected> = TActual;
 >_Expect : TActual
+>TActual : TActual
+>TExpected : TExpected
 
 // https://github.com/microsoft/TypeScript/issues/48320
 async function f17<T extends (...args: any[]) => Promise<any>>(fn: T) {
 >f17 : <T extends (...args: any[]) => Promise<any>>(fn: T) => Promise<ReturnType<T>>
+>T : T
 >args : any[]
 >fn : T
 
@@= skipped -33, +36 lines =@@
 
     return { x };
 >{ x } : { x: 123; }
->x : 123
+>x : any
 }
 
 // https://github.com/microsoft/TypeScript/issues/47144
@@= skipped -8, +8 lines =@@
 >GenericStructure : GenericStructure<AcceptableKeyType>
 
   AcceptableKeyType extends string = string
+>AcceptableKeyType : AcceptableKeyType
+
 > = Record<AcceptableKeyType, number>;
 
 async function brokenExample<AcceptableKeyType extends string = string>(structurePromise: Promise<GenericStructure<AcceptableKeyType>>, key: AcceptableKeyType): Promise<void> {
->brokenExample : <AcceptableKeyType extends string = string>(structurePromise: Promise<GenericStructure<AcceptableKeyType>>, key: AcceptableKeyType) => Promise<void>
+>brokenExample : <AcceptableKeyType extends string>(structurePromise: Promise<GenericStructure<AcceptableKeyType>>, key: AcceptableKeyType) => Promise<void>
+>AcceptableKeyType : AcceptableKeyType
 >structurePromise : Promise<GenericStructure<AcceptableKeyType>>
 >key : AcceptableKeyType
 
@@= skipped -49, +52 lines =@@
 
 type CheckSelect<T, S, U> = T extends SelectAndInclude
 >CheckSelect : CheckSelect<T, S, U>
+>T : T
+>S : S
+>U : U
 
   ? "Please either choose `select` or `include`"
   : T extends HasSelect
@@= skipped -10, +13 lines =@@
 
 declare function findMany<T extends { select?: string; include?: string }>(
 >findMany : <T extends { select?: string; include?: string; }>(args: T) => CheckSelect<T, Promise<1>, Promise<2>>
+>T : T
 >select : string
 >include : string
 
@@= skipped -12, +13 lines =@@
 >findManyWrapper : <T extends { select?: string; include?: string; }>(args: T) => Promise<CheckSelect<T, Promise<1>, Promise<2>>>
 
   T extends { select?: string; include?: string }
+>T : T
 >select : string
 >include : string
 
@@= skipped -10, +11 lines =@@
 >result : Awaited<CheckSelect<T, Promise<1>, Promise<2>>>
 >await findMany(args) : Awaited<CheckSelect<T, Promise<1>, Promise<2>>>
 >findMany(args) : CheckSelect<T, Promise<1>, Promise<2>>
->findMany : <T_1 extends { select?: string; include?: string; }>(args: T_1) => CheckSelect<T_1, Promise<1>, Promise<2>>
+>findMany : <T extends { select?: string; include?: string; }>(args: T) => CheckSelect<T, Promise<1>, Promise<2>>
 >args : T
 
   return result;
@@= skipped -56, +56 lines =@@
 
 {
   const promises = [Promise.resolve(0)] as const
->promises : readonly [Promise<number>]
->[Promise.resolve(0)] as const : readonly [Promise<number>]
->[Promise.resolve(0)] : readonly [Promise<number>]
+>promises : [Promise<number>]
+>[Promise.resolve(0)] as const : [Promise<number>]
+>[Promise.resolve(0)] : [Promise<number>]
 >Promise.resolve(0) : Promise<number>
 >Promise.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
 >Promise : PromiseConstructor
@@= skipped -11, +11 lines =@@
 
   Promise.all(promises).then((results) => {
 >Promise.all(promises).then((results) => {    const first = results[0]    const second = results[1] // error  }) : Promise<void>
->Promise.all(promises).then : <TResult1 = [number], TResult2 = never>(onfulfilled?: (value: [number]) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>Promise.all(promises).then : <TResult1, TResult2>(onfulfilled?: (value: [number]) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
 >Promise.all(promises) : Promise<[number]>
->Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >Promise : PromiseConstructor
->all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
->promises : readonly [Promise<number>]
->then : <TResult1 = [number], TResult2 = never>(onfulfilled?: (value: [number]) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
+>all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
+>promises : [Promise<number>]
+>then : <TResult1, TResult2>(onfulfilled?: (value: [number]) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
 >(results) => {    const first = results[0]    const second = results[1] // error  } : (results: [number]) => void
 >results : [number]
 
@@= skipped -46, +46 lines =@@
 >res : [number, ...void[]]
 >await Promise.all([        promiseNumber,        ...[promiseVoid()]    ]) : [number, ...void[]]
 >Promise.all([        promiseNumber,        ...[promiseVoid()]    ]) : Promise<[number, ...void[]]>
->Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >Promise : PromiseConstructor
->all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >[        promiseNumber,        ...[promiseVoid()]    ] : [Promise<number>, ...Promise<void>[]]
 
         promiseNumber,
