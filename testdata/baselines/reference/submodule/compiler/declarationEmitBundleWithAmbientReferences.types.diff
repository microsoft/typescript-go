--- old.declarationEmitBundleWithAmbientReferences.types
+++ new.declarationEmitBundleWithAmbientReferences.types
@@= skipped -5, +5 lines =@@
 
     export type Result<E extends Error, T> = (E & Failure<E>) | (T & Success<T>);
 >Result : Result<E, T>
+>E : E
+>T : T
 
     export interface Failure<E extends Error> { }
+>Failure : Failure<E>
+>E : E
+
     export interface Success<T> { }
+>Success : Success<T>
+>T : T
 }
 
 === src/datastore_result.ts ===
@@= skipped -10, +17 lines =@@
 >Result : any
 
 export type T<T> = Result<Error, T>;
->T : import("src/datastore_result").T<T>
+>T : T<T>
+>T : T
 
 === src/conditional_directive_field.ts ===
 import * as DatastoreResult from "src/datastore_result";
->DatastoreResult : typeof DatastoreResult
+>DatastoreResult : any
 
 export const build = (): DatastoreResult.T<string> => {
->build : () => DatastoreResult.T<string>
->(): DatastoreResult.T<string> => {	return null;} : () => DatastoreResult.T<string>
+>build : () => T<string>
+>(): DatastoreResult.T<string> => {	return null;} : () => T<string>
 >DatastoreResult : any
 
 	return null;
