--- old.typePredicatesCanNarrowByDiscriminant.types
+++ new.typePredicatesCanNarrowByDiscriminant.types
@@= skipped -9, +9 lines =@@
 
 declare function isOneOf<T, U extends T>(item: T, array: readonly U[]): item is U
 >isOneOf : <T, U extends T>(item: T, array: readonly U[]) => item is U
+>T : T
+>U : U
 >item : T
 >array : readonly U[]
 
@@= skipped -9, +11 lines =@@
 >fruit.kind : "apple" | "banana" | "cherry"
 >fruit : { kind: "apple"; } | { kind: "banana"; } | { kind: "cherry"; }
 >kind : "apple" | "banana" | "cherry"
->['apple', 'banana'] as const : readonly ["apple", "banana"]
->['apple', 'banana'] : readonly ["apple", "banana"]
+>['apple', 'banana'] as const : ["apple", "banana"]
+>['apple', 'banana'] : ["apple", "banana"]
 >'apple' : "apple"
 >'banana' : "banana"
 
@@= skipped -30, +30 lines =@@
 >isOneOf(kind, ['apple', 'banana'] as const) : boolean
 >isOneOf : <T, U extends T>(item: T, array: readonly U[]) => item is U
 >kind : "apple" | "banana" | "cherry"
->['apple', 'banana'] as const : readonly ["apple", "banana"]
->['apple', 'banana'] : readonly ["apple", "banana"]
+>['apple', 'banana'] as const : ["apple", "banana"]
+>['apple', 'banana'] : ["apple", "banana"]
 >'apple' : "apple"
 >'banana' : "banana"
 
