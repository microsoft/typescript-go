--- old.privacyTypeParametersOfClassDeclFile.types
+++ new.privacyTypeParametersOfClassDeclFile.types
@@= skipped -10, +10 lines =@@
 
 export class publicClassWithPrivateTypeParameters<T extends privateClass> { // Error
 >publicClassWithPrivateTypeParameters : publicClassWithPrivateTypeParameters<T>
+>T : T
 
     myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 export class publicClassWithPublicTypeParameters<T extends publicClass> {
 >publicClassWithPublicTypeParameters : publicClassWithPublicTypeParameters<T>
+>T : T
 
     myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 class privateClassWithPrivateTypeParameters<T extends privateClass> {
 >privateClassWithPrivateTypeParameters : privateClassWithPrivateTypeParameters<T>
+>T : T
 
     myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 class privateClassWithPublicTypeParameters<T extends publicClass> {
 >privateClassWithPublicTypeParameters : privateClassWithPublicTypeParameters<T>
+>T : T
 
     myMethod(val: T): T { 
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 export class publicClassWithPublicTypeParametersWithoutExtends<T> {
 >publicClassWithPublicTypeParametersWithoutExtends : publicClassWithPublicTypeParametersWithoutExtends<T>
+>T : T
 
     myMethod(val: T): T { 
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 class privateClassWithPublicTypeParametersWithoutExtends<T> {
 >privateClassWithPublicTypeParametersWithoutExtends : privateClassWithPublicTypeParametersWithoutExtends<T>
+>T : T
 
     myMethod(val: T): T { 
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
 export class publicClassWithTypeParametersFromPrivateModule<T extends privateModule.publicClassInPrivateModule> { // Error
 >publicClassWithTypeParametersFromPrivateModule : publicClassWithTypeParametersFromPrivateModule<T>
+>T : T
 >privateModule : any
 
     myMethod(val: T): T {
@@= skipped -13, +14 lines =@@
 
 class privateClassWithTypeParametersFromPrivateModule<T extends privateModule.publicClassInPrivateModule> {
 >privateClassWithTypeParametersFromPrivateModule : privateClassWithTypeParametersFromPrivateModule<T>
+>T : T
 >privateModule : any
 
     myMethod(val: T): T {
@@= skipped -24, +25 lines =@@
 
     export class publicClassWithPrivateTypeParameters<T extends privateClassInPublicModule> { // Error
 >publicClassWithPrivateTypeParameters : publicClassWithPrivateTypeParameters<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     export class publicClassWithPublicTypeParameters<T extends publicClassInPublicModule> {
 >publicClassWithPublicTypeParameters : publicClassWithPublicTypeParameters<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     class privateClassWithPrivateTypeParameters<T extends privateClassInPublicModule> {
 >privateClassWithPrivateTypeParameters : privateClassWithPrivateTypeParameters<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     class privateClassWithPublicTypeParameters<T extends publicClassInPublicModule> {
 >privateClassWithPublicTypeParameters : privateClassWithPublicTypeParameters<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     export class publicClassWithPublicTypeParametersWithoutExtends<T> {
 >publicClassWithPublicTypeParametersWithoutExtends : publicClassWithPublicTypeParametersWithoutExtends<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     class privateClassWithPublicTypeParametersWithoutExtends<T> {
 >privateClassWithPublicTypeParametersWithoutExtends : privateClassWithPublicTypeParametersWithoutExtends<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     export class publicClassWithTypeParametersFromPrivateModule<T extends privateModule.publicClassInPrivateModule> { // Error
 >publicClassWithTypeParametersFromPrivateModule : publicClassWithTypeParametersFromPrivateModule<T>
+>T : T
 >privateModule : any
 
         myMethod(val: T): T {
@@= skipped -13, +14 lines =@@
 
     class privateClassWithTypeParametersFromPrivateModule<T extends privateModule.publicClassInPrivateModule> {
 >privateClassWithTypeParametersFromPrivateModule : privateClassWithTypeParametersFromPrivateModule<T>
+>T : T
 >privateModule : any
 
         myMethod(val: T): T {
@@= skipped -25, +26 lines =@@
 
     export class publicClassWithPrivateTypeParameters<T extends privateClassInPrivateModule> {
 >publicClassWithPrivateTypeParameters : publicClassWithPrivateTypeParameters<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     export class publicClassWithPublicTypeParameters<T extends publicClassInPrivateModule> {
 >publicClassWithPublicTypeParameters : publicClassWithPublicTypeParameters<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     class privateClassWithPrivateTypeParameters<T extends privateClassInPrivateModule> {
 >privateClassWithPrivateTypeParameters : privateClassWithPrivateTypeParameters<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     class privateClassWithPublicTypeParameters<T extends publicClassInPrivateModule> {
 >privateClassWithPublicTypeParameters : privateClassWithPublicTypeParameters<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     export class publicClassWithPublicTypeParametersWithoutExtends<T> {
 >publicClassWithPublicTypeParametersWithoutExtends : publicClassWithPublicTypeParametersWithoutExtends<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
@@= skipped -12, +13 lines =@@
 
     class privateClassWithPublicTypeParametersWithoutExtends<T> {
 >privateClassWithPublicTypeParametersWithoutExtends : privateClassWithPublicTypeParametersWithoutExtends<T>
+>T : T
 
         myMethod(val: T): T {
 >myMethod : (val: T) => T
