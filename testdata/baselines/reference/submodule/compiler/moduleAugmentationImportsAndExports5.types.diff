--- old.moduleAugmentationImportsAndExports5.types
+++ new.moduleAugmentationImportsAndExports5.types
@@= skipped -2, +2 lines =@@
 === f1.ts ===
 export class A {}
 >A : A
->  : ^
 
 === f2.ts ===
 export class B {
 >B : B
->  : ^
 
     n: number;
 >n : number
->  : ^^^^^^
 }
 
 === f3.ts ===
 import {A} from "./f1";
 >A : typeof A
->  : ^^^^^^^^
 
 import {B} from "./f2";
 >B : typeof B
->  : ^^^^^^^^
 
 A.prototype.foo = function () { return undefined; }
 >A.prototype.foo = function () { return undefined; } : () => any
->                                                    : ^^^^^^^^^
 >A.prototype.foo : () => B
->                : ^^^^^^ 
 >A.prototype : A
->            : ^
 >A : typeof A
->  : ^^^^^^^^
 >prototype : A
->          : ^
 >foo : () => B
->    : ^^^^^^ 
 >function () { return undefined; } : () => any
->                                  : ^^^^^^^^^
 >undefined : undefined
->          : ^^^^^^^^^
 
 namespace N {
+>N : any
+
     export interface Ifc { a: number; }
+>Ifc : Ifc
 >a : number
->  : ^^^^^^
 
     export interface Cls { b: number; }
+>Cls : Cls
 >b : number
->  : ^^^^^^
 }
 import I = N.Ifc;
 >I : any
->  : ^^^
 >N : any
->  : ^^^
->Ifc : I
->    : ^
+>Ifc : Ifc
 
 import C = N.Cls;
 >C : any
->  : ^^^
 >N : any
->  : ^^^
->Cls : C
->    : ^
+>Cls : Cls
 
 declare module "./f1" {
 >"./f1" : typeof import("f1")
->       : ^^^^^^^^^^^^^^^^^^^
 
     interface A {
+>A : A
+
         foo(): B;
 >foo : () => B
->    : ^^^^^^ 
 
         bar(): I;
->bar : () => I
->    : ^^^^^^ 
+>bar : () => Ifc
 
         baz(): C;
->baz : () => C
->    : ^^^^^^ 
+>baz : () => Cls
     }
 }
 
 === f4.ts ===
 import {A} from "./f1";
 >A : typeof A
->  : ^^^^^^^^
 
 import "./f3";
 
 let a: A;
 >a : A
->  : ^
 
 let b = a.foo().n;
 >b : number
->  : ^^^^^^
 >a.foo().n : number
->          : ^^^^^^
->a.foo() : import("f2").B
->        : ^^^^^^^^^^^^^^
->a.foo : () => import("f2").B
->      : ^^^^^^       ^^^^  ^
+>a.foo() : B
+>a.foo : () => B
 >a : A
->  : ^
->foo : () => import("f2").B
->    : ^^^^^^       ^^^^  ^
+>foo : () => B
 >n : number
->  : ^^^^^^
 
 let c = a.bar().a;
 >c : number
->  : ^^^^^^
 >a.bar().a : number
->          : ^^^^^^
->a.bar() : N.Ifc
->        : ^^^^^
->a.bar : () => N.Ifc
->      : ^^^^^^^^^^^
+>a.bar() : Ifc
+>a.bar : () => Ifc
 >a : A
->  : ^
->bar : () => N.Ifc
->    : ^^^^^^^^^^^
+>bar : () => Ifc
 >a : number
->  : ^^^^^^
 
 let d = a.baz().b;
 >d : number
->  : ^^^^^^
 >a.baz().b : number
->          : ^^^^^^
->a.baz() : N.Cls
->        : ^^^^^
->a.baz : () => N.Cls
->      : ^^^^^^^^^^^
+>a.baz() : Cls
+>a.baz : () => Cls
 >a : A
->  : ^
->baz : () => N.Cls
->    : ^^^^^^^^^^^
+>baz : () => Cls
 >b : number
->  : ^^^^^^
 
