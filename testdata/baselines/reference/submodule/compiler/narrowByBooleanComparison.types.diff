--- old.narrowByBooleanComparison.types
+++ new.narrowByBooleanComparison.types
@@= skipped -144, +144 lines =@@
     if (typeof foo !== 'string' && Array.isArray(foo) === false) {
 >typeof foo !== 'string' && Array.isArray(foo) === false : boolean
 >typeof foo !== 'string' : boolean
->typeof foo : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof foo : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >foo : unknown
 >'string' : "string"
 >Array.isArray(foo) === false : boolean
@@= skipped -61, +61 lines =@@
 
 // https://github.com/microsoft/TypeScript/issues/44366
 interface Entity {
+>Entity : Entity
+
     type: string;
 >type : string
 }
@@= skipped -8, +10 lines =@@
 >"actor" : "actor"
 
 interface Actor extends Entity {
+>Actor : Actor
+
     type: typeof ACTOR_TYPE;
 >type : "actor"
->ACTOR_TYPE : "actor"
 }
 function isActor(entity: Entity): entity is Actor {
 >isActor : (entity: Entity) => entity is Actor
@@= skipped -61, +62 lines =@@
 
     return typeof x === "function";
 >typeof x === "function" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"function" : "function"
 }
