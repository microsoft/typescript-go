--- old.selfInLambdas.symbols
+++ new.selfInLambdas.symbols
@@ -5,10 +5,10 @@
 >MouseEvent : Symbol(MouseEvent, Decl(selfInLambdas.ts, 0, 0))
 
     x: number;
->x : Symbol(MouseEvent.x, Decl(selfInLambdas.ts, 0, 22))
+>x : Symbol(x, Decl(selfInLambdas.ts, 0, 22))
 
     y: number;
->y : Symbol(MouseEvent.y, Decl(selfInLambdas.ts, 1, 14))
+>y : Symbol(y, Decl(selfInLambdas.ts, 1, 14))
 }
 
 declare var window: Window;
@@ -19,7 +19,7 @@
 >Window : Symbol(Window, Decl(selfInLambdas.ts, 5, 27))
 
     onmousemove: (ev: MouseEvent) => any;
->onmousemove : Symbol(Window.onmousemove, Decl(selfInLambdas.ts, 6, 18))
+>onmousemove : Symbol(onmousemove, Decl(selfInLambdas.ts, 6, 18))
 >ev : Symbol(ev, Decl(selfInLambdas.ts, 7, 18))
 >MouseEvent : Symbol(MouseEvent, Decl(selfInLambdas.ts, 0, 0))
     
@@ -34,19 +34,19 @@
 >start : Symbol(start, Decl(selfInLambdas.ts, 12, 15))
 
         window.onmousemove = () => {
->window.onmousemove : Symbol(Window.onmousemove, Decl(selfInLambdas.ts, 6, 18))
+>window.onmousemove : Symbol(onmousemove, Decl(selfInLambdas.ts, 6, 18))
 >window : Symbol(window, Decl(selfInLambdas.ts, 5, 11))
->onmousemove : Symbol(Window.onmousemove, Decl(selfInLambdas.ts, 6, 18))
+>onmousemove : Symbol(onmousemove, Decl(selfInLambdas.ts, 6, 18))
 
             this.counter++
 >this.counter : Symbol(counter, Decl(selfInLambdas.ts, 10, 9))
->this : Symbol(o, Decl(selfInLambdas.ts, 10, 7))
+>this : Symbol((Anonymous type), Decl(selfInLambdas.ts, 10, 7))
 >counter : Symbol(counter, Decl(selfInLambdas.ts, 10, 9))
 
             var f = () => this.counter;
 >f : Symbol(f, Decl(selfInLambdas.ts, 18, 15))
 >this.counter : Symbol(counter, Decl(selfInLambdas.ts, 10, 9))
->this : Symbol(o, Decl(selfInLambdas.ts, 10, 7))
+>this : Symbol((Anonymous type), Decl(selfInLambdas.ts, 10, 7))
 >counter : Symbol(counter, Decl(selfInLambdas.ts, 10, 9))
 
         }
@@ -61,28 +61,28 @@
 >X : Symbol(X, Decl(selfInLambdas.ts, 24, 1))
 
 	private value = "value";
->value : Symbol(X.value, Decl(selfInLambdas.ts, 28, 9))
+>value : Symbol(value, Decl(selfInLambdas.ts, 28, 9))
 
 	public foo() {
->foo : Symbol(X.foo, Decl(selfInLambdas.ts, 29, 25))
+>foo : Symbol(foo, Decl(selfInLambdas.ts, 29, 25))
 
 		var outer= () => {
 >outer : Symbol(outer, Decl(selfInLambdas.ts, 32, 5))
 
             var x = this.value;
 >x : Symbol(x, Decl(selfInLambdas.ts, 33, 15))
->this.value : Symbol(X.value, Decl(selfInLambdas.ts, 28, 9))
+>this.value : Symbol(value, Decl(selfInLambdas.ts, 28, 9))
 >this : Symbol(X, Decl(selfInLambdas.ts, 24, 1))
->value : Symbol(X.value, Decl(selfInLambdas.ts, 28, 9))
+>value : Symbol(value, Decl(selfInLambdas.ts, 28, 9))
 
             var inner = () => {
 >inner : Symbol(inner, Decl(selfInLambdas.ts, 34, 15))
 
                 var y = this.value;
 >y : Symbol(y, Decl(selfInLambdas.ts, 35, 19))
->this.value : Symbol(X.value, Decl(selfInLambdas.ts, 28, 9))
+>this.value : Symbol(value, Decl(selfInLambdas.ts, 28, 9))
 >this : Symbol(X, Decl(selfInLambdas.ts, 24, 1))
->value : Symbol(X.value, Decl(selfInLambdas.ts, 28, 9))
+>value : Symbol(value, Decl(selfInLambdas.ts, 28, 9))
 			}
 
 			inner();
