--- old.commentsdoNotEmitComments.symbols
+++ new.commentsdoNotEmitComments.symbols
@@= skipped -30, +30 lines =@@
 
     /** property comment */
     public b = 10;
->b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
+>b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 16, 5))
 
     /** function comment */
     public myFoo() {
->myFoo : Symbol(c.myFoo, Decl(commentsdoNotEmitComments.ts, 19, 18))
+>myFoo : Symbol(myFoo, Decl(commentsdoNotEmitComments.ts, 19, 18))
 
         return this.b;
->this.b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
+>this.b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 16, 5))
 >this : Symbol(c, Decl(commentsdoNotEmitComments.ts, 10, 9))
->b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
+>b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 16, 5))
     }
 
     /** getter comment*/
     public get prop1() {
->prop1 : Symbol(c.prop1, Decl(commentsdoNotEmitComments.ts, 24, 5), Decl(commentsdoNotEmitComments.ts, 29, 5))
+>prop1 : Symbol(prop1, Decl(commentsdoNotEmitComments.ts, 24, 5), Decl(commentsdoNotEmitComments.ts, 29, 5))
 
         return this.b;
->this.b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
+>this.b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 16, 5))
 >this : Symbol(c, Decl(commentsdoNotEmitComments.ts, 10, 9))
->b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
+>b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 16, 5))
     }
 
     /** setter comment*/
     public set prop1(val: number) {
->prop1 : Symbol(c.prop1, Decl(commentsdoNotEmitComments.ts, 24, 5), Decl(commentsdoNotEmitComments.ts, 29, 5))
+>prop1 : Symbol(prop1, Decl(commentsdoNotEmitComments.ts, 24, 5), Decl(commentsdoNotEmitComments.ts, 29, 5))
 >val : Symbol(val, Decl(commentsdoNotEmitComments.ts, 32, 21))
 
         this.b = val;
->this.b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
+>this.b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 16, 5))
 >this : Symbol(c, Decl(commentsdoNotEmitComments.ts, 10, 9))
->b : Symbol(c.b, Decl(commentsdoNotEmitComments.ts, 16, 5))
+>b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 16, 5))
 >val : Symbol(val, Decl(commentsdoNotEmitComments.ts, 32, 21))
     }
 
     /** overload signature1*/
     public foo1(a: number): string;
->foo1 : Symbol(c.foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
+>foo1 : Symbol(foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
 >a : Symbol(a, Decl(commentsdoNotEmitComments.ts, 37, 16))
 
     /** Overload signature 2*/
     public foo1(b: string): string;
->foo1 : Symbol(c.foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
+>foo1 : Symbol(foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
 >b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 39, 16))
 
     /** overload implementation signature*/
     public foo1(aOrb) {
->foo1 : Symbol(c.foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
+>foo1 : Symbol(foo1, Decl(commentsdoNotEmitComments.ts, 34, 5), Decl(commentsdoNotEmitComments.ts, 37, 35), Decl(commentsdoNotEmitComments.ts, 39, 35))
 >aOrb : Symbol(aOrb, Decl(commentsdoNotEmitComments.ts, 41, 16))
 
         return aOrb.toString();
@@= skipped -77, +77 lines =@@
 
     /** function property;*/
     myFoo(/*param prop*/a: number): string;
->myFoo : Symbol(i1.myFoo, Decl(commentsdoNotEmitComments.ts, 58, 24))
+>myFoo : Symbol(myFoo, Decl(commentsdoNotEmitComments.ts, 58, 24))
 >a : Symbol(a, Decl(commentsdoNotEmitComments.ts, 61, 10))
 
     /** prop*/
     prop: string;
->prop : Symbol(i1.prop, Decl(commentsdoNotEmitComments.ts, 61, 43))
+>prop : Symbol(prop, Decl(commentsdoNotEmitComments.ts, 61, 43))
 }
 
 /**interface instance comments*/
@@= skipped -22, +22 lines =@@
 >b : Symbol(b, Decl(commentsdoNotEmitComments.ts, 71, 11))
 
         constructor(public x: number) {
->x : Symbol(b.x, Decl(commentsdoNotEmitComments.ts, 74, 20))
+>x : Symbol(x, Decl(commentsdoNotEmitComments.ts, 74, 20))
            
         }
     }
@@= skipped -19, +19 lines =@@
 /** const enum member value comment (generated by TS) */
 const enum color { red, green, blue }
 >color : Symbol(color, Decl(commentsdoNotEmitComments.ts, 85, 14))
->red : Symbol(color.red, Decl(commentsdoNotEmitComments.ts, 89, 18))
->green : Symbol(color.green, Decl(commentsdoNotEmitComments.ts, 89, 23))
->blue : Symbol(color.blue, Decl(commentsdoNotEmitComments.ts, 89, 30))
+>red : Symbol(red, Decl(commentsdoNotEmitComments.ts, 89, 18))
+>green : Symbol(green, Decl(commentsdoNotEmitComments.ts, 89, 23))
+>blue : Symbol(blue, Decl(commentsdoNotEmitComments.ts, 89, 30))
 
 var shade: color = color.green;
 >shade : Symbol(shade, Decl(commentsdoNotEmitComments.ts, 90, 3))
 >color : Symbol(color, Decl(commentsdoNotEmitComments.ts, 85, 14))
->color.green : Symbol(color.green, Decl(commentsdoNotEmitComments.ts, 89, 23))
+>color.green : Symbol(green, Decl(commentsdoNotEmitComments.ts, 89, 23))
 >color : Symbol(color, Decl(commentsdoNotEmitComments.ts, 85, 14))
->green : Symbol(color.green, Decl(commentsdoNotEmitComments.ts, 89, 23))
+>green : Symbol(green, Decl(commentsdoNotEmitComments.ts, 89, 23))
 
