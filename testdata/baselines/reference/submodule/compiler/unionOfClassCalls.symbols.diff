--- old.unionOfClassCalls.symbols
+++ new.unionOfClassCalls.symbols
@@ -7,11 +7,11 @@
 >T : Symbol(T, Decl(unionOfClassCalls.ts, 1, 19))
 
     obj: T;
->obj : Symbol(Test.obj, Decl(unionOfClassCalls.ts, 1, 23))
+>obj : Symbol(obj, Decl(unionOfClassCalls.ts, 1, 23))
 >T : Symbol(T, Decl(unionOfClassCalls.ts, 1, 19))
 
     get<K extends keyof T>(k: K): T[K];
->get : Symbol(Test.get, Decl(unionOfClassCalls.ts, 2, 11))
+>get : Symbol(get, Decl(unionOfClassCalls.ts, 2, 11))
 >K : Symbol(K, Decl(unionOfClassCalls.ts, 3, 8))
 >T : Symbol(T, Decl(unionOfClassCalls.ts, 1, 19))
 >k : Symbol(k, Decl(unionOfClassCalls.ts, 3, 27))
@@ -22,11 +22,11 @@
 
 interface A { t: "A" }
 >A : Symbol(A, Decl(unionOfClassCalls.ts, 4, 1))
->t : Symbol(A.t, Decl(unionOfClassCalls.ts, 6, 13))
+>t : Symbol(t, Decl(unionOfClassCalls.ts, 6, 13))
 
 interface B { t: "B" }
 >B : Symbol(B, Decl(unionOfClassCalls.ts, 6, 22))
->t : Symbol(B.t, Decl(unionOfClassCalls.ts, 7, 13))
+>t : Symbol(t, Decl(unionOfClassCalls.ts, 7, 13))
 
 declare const tmp: Test<A> | Test<B>;
 >tmp : Symbol(tmp, Decl(unionOfClassCalls.ts, 9, 13))
@@ -36,9 +36,9 @@
 >B : Symbol(B, Decl(unionOfClassCalls.ts, 6, 22))
 
 switch (tmp.get('t')) {
->tmp.get : Symbol(Test.get, Decl(unionOfClassCalls.ts, 2, 11), Decl(unionOfClassCalls.ts, 2, 11))
+>tmp.get : Symbol(get, Decl(unionOfClassCalls.ts, 2, 11), Decl(unionOfClassCalls.ts, 2, 11))
 >tmp : Symbol(tmp, Decl(unionOfClassCalls.ts, 9, 13))
->get : Symbol(Test.get, Decl(unionOfClassCalls.ts, 2, 11), Decl(unionOfClassCalls.ts, 2, 11))
+>get : Symbol(get, Decl(unionOfClassCalls.ts, 2, 11), Decl(unionOfClassCalls.ts, 2, 11))
 
     case 'A': break;
     case 'B': break;
@@ -56,9 +56,9 @@
 >arr2 : Symbol(arr2, Decl(unionOfClassCalls.ts, 20, 5))
 
 arr.map((a: number | string, index: number) => { 
->arr.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>arr.map : Symbol(map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >arr : Symbol(arr, Decl(unionOfClassCalls.ts, 18, 5))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 22, 9))
 >index : Symbol(index, Decl(unionOfClassCalls.ts, 22, 28))
 
@@ -69,9 +69,9 @@
 
 // This case still doesn't work because `reduce` has multiple overloads :(
 arr.reduce((acc: Array<string>, a: number | string, index: number) => { 
->arr.reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
+>arr.reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
 >arr : Symbol(arr, Decl(unionOfClassCalls.ts, 18, 5))
->reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
+>reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --) ... and 1 more)
 >acc : Symbol(acc, Decl(unionOfClassCalls.ts, 27, 12))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 27, 31))
@@ -81,9 +81,9 @@
 }, [])
 
 arr.forEach((a: number | string, index: number) => { 
->arr.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>arr.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >arr : Symbol(arr, Decl(unionOfClassCalls.ts, 18, 5))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 31, 13))
 >index : Symbol(index, Decl(unionOfClassCalls.ts, 31, 32))
 
@@ -93,9 +93,9 @@
 })
 
 arr1.map((a: number, index: number) => { 
->arr1.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>arr1.map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >arr1 : Symbol(arr1, Decl(unionOfClassCalls.ts, 19, 5))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 35, 10))
 >index : Symbol(index, Decl(unionOfClassCalls.ts, 35, 20))
 
@@ -105,9 +105,9 @@
 })
 
 arr1.reduce((acc: number[], a: number, index: number) => { 
->arr1.reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>arr1.reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >arr1 : Symbol(arr1, Decl(unionOfClassCalls.ts, 19, 5))
->reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >acc : Symbol(acc, Decl(unionOfClassCalls.ts, 39, 13))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 39, 27))
 >index : Symbol(index, Decl(unionOfClassCalls.ts, 39, 38))
@@ -118,9 +118,9 @@
 }, [])
 
 arr1.forEach((a: number, index: number) => { 
->arr1.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>arr1.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >arr1 : Symbol(arr1, Decl(unionOfClassCalls.ts, 19, 5))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 43, 14))
 >index : Symbol(index, Decl(unionOfClassCalls.ts, 43, 24))
 
@@ -129,9 +129,9 @@
 
 })
 arr2.map((a:  string, index: number) => { 
->arr2.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>arr2.map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >arr2 : Symbol(arr2, Decl(unionOfClassCalls.ts, 20, 5))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 46, 10))
 >index : Symbol(index, Decl(unionOfClassCalls.ts, 46, 21))
 
@@ -141,9 +141,9 @@
 })
 
 arr2.reduce((acc: string[], a: string, index: number) => { 
->arr2.reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>arr2.reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >arr2 : Symbol(arr2, Decl(unionOfClassCalls.ts, 20, 5))
->reduce : Symbol(Array.reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>reduce : Symbol(reduce, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >acc : Symbol(acc, Decl(unionOfClassCalls.ts, 50, 13))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 50, 27))
 >index : Symbol(index, Decl(unionOfClassCalls.ts, 50, 38))
@@ -152,9 +152,9 @@
 }, [])
 
 arr2.forEach((a: string, index: number) => { 
->arr2.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>arr2.forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >arr2 : Symbol(arr2, Decl(unionOfClassCalls.ts, 20, 5))
->forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --))
+>forEach : Symbol(forEach, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 54, 14))
 >index : Symbol(index, Decl(unionOfClassCalls.ts, 54, 24))
 
@@ -169,7 +169,7 @@
 >Foo : Symbol(Foo, Decl(unionOfClassCalls.ts, 56, 2))
 
     doThing(): Promise<this>
->doThing : Symbol(Foo.doThing, Decl(unionOfClassCalls.ts, 60, 19))
+>doThing : Symbol(doThing, Decl(unionOfClassCalls.ts, 60, 19))
 >Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --))
 }
 
@@ -178,14 +178,14 @@
 >Foo : Symbol(Foo, Decl(unionOfClassCalls.ts, 56, 2))
 
     bar: number;
->bar : Symbol(Bar.bar, Decl(unionOfClassCalls.ts, 64, 31))
+>bar : Symbol(bar, Decl(unionOfClassCalls.ts, 64, 31))
 }
 declare class Baz extends Foo {
 >Baz : Symbol(Baz, Decl(unionOfClassCalls.ts, 66, 1))
 >Foo : Symbol(Foo, Decl(unionOfClassCalls.ts, 56, 2))
 
     baz: number;
->baz : Symbol(Baz.baz, Decl(unionOfClassCalls.ts, 67, 31))
+>baz : Symbol(baz, Decl(unionOfClassCalls.ts, 67, 31))
 }
 
 declare var a: Bar | Baz;
@@ -195,11 +195,11 @@
 
 // note, you must annotate `result` for now
 a.doThing().then((result: Bar | Baz) => {
->a.doThing().then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->a.doThing : Symbol(Foo.doThing, Decl(unionOfClassCalls.ts, 60, 19), Decl(unionOfClassCalls.ts, 60, 19))
+>a.doThing().then : Symbol(then, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>a.doThing : Symbol(doThing, Decl(unionOfClassCalls.ts, 60, 19), Decl(unionOfClassCalls.ts, 60, 19))
 >a : Symbol(a, Decl(unionOfClassCalls.ts, 71, 11))
->doThing : Symbol(Foo.doThing, Decl(unionOfClassCalls.ts, 60, 19), Decl(unionOfClassCalls.ts, 60, 19))
->then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>doThing : Symbol(doThing, Decl(unionOfClassCalls.ts, 60, 19), Decl(unionOfClassCalls.ts, 60, 19))
+>then : Symbol(then, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >result : Symbol(result, Decl(unionOfClassCalls.ts, 73, 18))
 >Bar : Symbol(Bar, Decl(unionOfClassCalls.ts, 62, 1))
 >Baz : Symbol(Baz, Decl(unionOfClassCalls.ts, 66, 1))
