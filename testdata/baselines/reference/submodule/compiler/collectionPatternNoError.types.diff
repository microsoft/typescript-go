--- old.collectionPatternNoError.types
+++ new.collectionPatternNoError.types
@@= skipped -1, +1 lines =@@
 
 === collectionPatternNoError.ts ===
 interface MsgConstructor<T extends Message> {
+>MsgConstructor : MsgConstructor<T>
+>T : T
+
   new(data: Array<{}>): T;
 >data : {}[]
 }
@@= skipped -14, +17 lines =@@
   }
 }
 interface MessageList<T extends Message> extends Message {
+>MessageList : MessageList<T>
+>T : T
+
   methodOnMessageList(): T[];
 >methodOnMessageList : () => T[]
 }
 
 function fetchMsg<V extends Message>(protoCtor: MsgConstructor<V>): V {
 >fetchMsg : <V extends Message>(protoCtor: MsgConstructor<V>) => V
+>V : V
 >protoCtor : MsgConstructor<V>
 
   return null!;
@@= skipped -14, +18 lines =@@
 
 class DataProvider<T extends Message, U extends MessageList<T>> {
 >DataProvider : DataProvider<T, U>
+>T : T
+>U : U
 
   constructor(
     private readonly message: MsgConstructor<T>,
@@= skipped -35, +37 lines =@@
 >f : <U extends { TType: MessageList<T>; }, T extends Message>(message: MsgConstructor<T>, messageList: MsgConstructor<U["TType"]>) => void
 
   U extends {TType: MessageList<T>},
+>U : U
 >TType : MessageList<T>
 
   T extends Message
+>T : T
+
 >(message: MsgConstructor<T>, messageList: MsgConstructor<U["TType"]>) {
 >message : MsgConstructor<T>
 >messageList : MsgConstructor<U["TType"]>
