//// [tests/cases/compiler/declarationEmitUsingAlternativeContainingModules2.ts] ////

=== node_modules/@tanstack/vue-query/build/modern/useQuery-CPqkvEsh.d.ts ===
type QueryKey = ReadonlyArray<unknown>;
>QueryKey : QueryKey

interface Register {}
>Register : Register

type DefaultError = Register extends {
>DefaultError : Error

  defaultError: infer TError;
>defaultError : TError
>TError : TError
}
  ? TError
  : Error;

type ShouldRetryFunction<TError = DefaultError> = (
>ShouldRetryFunction : ShouldRetryFunction<TError>
>TError : TError

  failureCount: number,
>failureCount : number

  error: TError,
>error : TError

) => boolean;
type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>;
>RetryValue : RetryValue<TError>
>TError : TError

type QueryFunctionContext<
>QueryFunctionContext : QueryFunctionContext<TQueryKey, TPageParam>

  TQueryKey extends QueryKey = QueryKey,
>TQueryKey : TQueryKey

  TPageParam = never,
>TPageParam : TPageParam

> = [TPageParam] extends [never]
  ? {
      queryKey: TQueryKey;
>queryKey : TQueryKey
    }
  : {
      queryKey: TQueryKey;
>queryKey : TQueryKey

      pageParam: TPageParam;
>pageParam : TPageParam

    };

type QueryFunction<
>QueryFunction : QueryFunction<T, TQueryKey, TPageParam>

  T = unknown,
>T : T

  TQueryKey extends QueryKey = QueryKey,
>TQueryKey : TQueryKey

  TPageParam = never,
>TPageParam : TPageParam

> = (context: QueryFunctionContext<TQueryKey, TPageParam>) => T | Promise<T>;
>context : QueryFunctionContext<TQueryKey, TPageParam>

interface QueryOptions<
>QueryOptions : QueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>

  TQueryFnData = unknown,
>TQueryFnData : TQueryFnData

  TError = DefaultError,
>TError : TError

  TData = TQueryFnData,
>TData : TData

  TQueryKey extends QueryKey = QueryKey,
>TQueryKey : TQueryKey

  TPageParam = never,
>TPageParam : TPageParam

> {
  retry?: RetryValue<TError>;
>retry : RetryValue<TError> | undefined

  queryFn?: QueryFunction<TQueryFnData, TQueryKey, TPageParam>;
>queryFn : QueryFunction<TQueryFnData, TQueryKey, TPageParam> | undefined

  queryKey?: TQueryKey;
>queryKey : TQueryKey | undefined

  initialData?: TData;
>initialData : TData | undefined

  initialDataUpdatedAt?: number | (() => number | undefined);
>initialDataUpdatedAt : number | () => number | undefined | undefined
}

interface QueryObserverOptions<
>QueryObserverOptions : QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey, TPageParam>

  TQueryFnData = unknown,
>TQueryFnData : TQueryFnData

  TError = DefaultError,
>TError : TError

  TData = TQueryFnData,
>TData : TData

  TQueryData = TQueryFnData,
>TQueryData : TQueryData

  TQueryKey extends QueryKey = QueryKey,
>TQueryKey : TQueryKey

  TPageParam = never,
>TPageParam : TPageParam

> extends QueryOptions<
    TQueryFnData,
    TError,
    TQueryData,
    TQueryKey,
    TPageParam
  > {
  enabled?: boolean;
>enabled : boolean | undefined

  refetchInterval?: number;
>refetchInterval : number | undefined

  select?: (data: TQueryData) => TData;
>select : (data: TQueryData) => TData | undefined
>data : TQueryData
}

type UseQueryOptions<
>UseQueryOptions : UseQueryOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>

  TQueryFnData = unknown,
>TQueryFnData : TQueryFnData

  TError = DefaultError,
>TError : TError

  TData = TQueryFnData,
>TData : TData

  TQueryData = TQueryFnData,
>TQueryData : TQueryData

  TQueryKey extends QueryKey = QueryKey,
>TQueryKey : TQueryKey

> = {
  [Property in keyof QueryObserverOptions<
>Property : Property

    TQueryFnData,
    TError,
    TData,
    TQueryData,
    TQueryKey
  >]: QueryObserverOptions<
    TQueryFnData,
    TError,
    TData,
    TQueryData,
    TQueryKey
  >[Property];
};

type UndefinedInitialQueryOptions<
>UndefinedInitialQueryOptions : UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>

  TQueryFnData = unknown,
>TQueryFnData : TQueryFnData

  TError = DefaultError,
>TError : TError

  TData = TQueryFnData,
>TData : TData

  TQueryKey extends QueryKey = QueryKey,
>TQueryKey : TQueryKey

> = UseQueryOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey> & {
  initialData?: undefined;
>initialData : undefined

};

interface QueryObserverBaseResult<TData = unknown, TError = DefaultError> {
>QueryObserverBaseResult : QueryObserverBaseResult<TData, TError>
>TData : TData
>TError : TError

  data: TData | undefined;
>data : TData | undefined

  dataUpdatedAt: number;
>dataUpdatedAt : number

  error: TError | null;
>error : TError | null

  errorUpdatedAt: number;
>errorUpdatedAt : number

  failureCount: number;
>failureCount : number

  failureReason: TError | null;
>failureReason : TError | null

  errorUpdateCount: number;
>errorUpdateCount : number

  isError: boolean;
>isError : boolean

  isFetched: boolean;
>isFetched : boolean

  isFetchedAfterMount: boolean;
>isFetchedAfterMount : boolean

  isFetching: boolean;
>isFetching : boolean

  isLoading: boolean;
>isLoading : boolean

  isPending: boolean;
>isPending : boolean

  isLoadingError: boolean;
>isLoadingError : boolean

  isInitialLoading: boolean;
>isInitialLoading : boolean

  isPaused: boolean;
>isPaused : boolean

  isPlaceholderData: boolean;
>isPlaceholderData : boolean

  isRefetchError: boolean;
>isRefetchError : boolean

  isRefetching: boolean;
>isRefetching : boolean

  isStale: boolean;
>isStale : boolean

  isSuccess: boolean;
>isSuccess : boolean
}

interface QueryObserverSuccessResult<TData = unknown, TError = DefaultError>
>QueryObserverSuccessResult : QueryObserverSuccessResult<TData, TError>
>TData : TData
>TError : TError

  extends QueryObserverBaseResult<TData, TError> {
  data: TData;
>data : TData

  error: null;
>error : null

  isError: false;
>isError : false
>false : false

  isPending: false;
>isPending : false
>false : false

  isLoadingError: false;
>isLoadingError : false
>false : false

  isRefetchError: false;
>isRefetchError : false
>false : false

  isSuccess: true;
>isSuccess : true
>true : true

  status: "success";
>status : "success"
}

type DefinedQueryObserverResult<
>DefinedQueryObserverResult : DefinedQueryObserverResult<TData, TError>

  TData = unknown,
>TData : TData

  TError = DefaultError,
>TError : TError

> = QueryObserverSuccessResult<TData, TError>;
type QueryObserverResult<
>QueryObserverResult : QueryObserverResult<TData, TError>

  TData = unknown,
>TData : TData

  TError = DefaultError,
>TError : TError

> = DefinedQueryObserverResult<TData, TError>;

type ToRef<T> = {
>ToRef : ToRef<T>
>T : T

  value: T;
>value : T

};

type UseBaseQueryReturnType<
>UseBaseQueryReturnType : UseBaseQueryReturnType<TData, TError, Result>

  TData,
>TData : TData

  TError,
>TError : TError

  Result = QueryObserverResult<TData, TError>,
>Result : Result

> = {
  [K in keyof Result]: K extends
>K : K

    | "fetchNextPage"
    | "fetchPreviousPage"
    | "refetch"
    ? Result[K]
    : ToRef<Readonly<Result>[K]>;
} & {
  suspense: () => Promise<Result>;
>suspense : () => Promise<Result>

};

type UseQueryReturnType<TData, TError> = UseBaseQueryReturnType<TData, TError>;
>UseQueryReturnType : UseQueryReturnType<TData, TError>
>TData : TData
>TError : TError

declare function useQuery<
>useQuery : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>

  TQueryFnData = unknown,
>TQueryFnData : TQueryFnData

  TError = DefaultError,
>TError : TError

  TData = TQueryFnData,
>TData : TData

  TQueryKey extends QueryKey = QueryKey,
>TQueryKey : TQueryKey

>(
  options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>,
>options : UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>

): UseQueryReturnType<TData, TError>;

export { type UseQueryReturnType as b, useQuery as u };
>UseQueryReturnType : any
>b : any
>useQuery : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
>u : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>

=== node_modules/@tanstack/vue-query/build/modern/index.d.ts ===
export { b as UseQueryReturnType, u as useQuery } from './useQuery-CPqkvEsh.js';
>b : any
>UseQueryReturnType : any
>u : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>
>useQuery : <TQueryFnData, TError, TData, TQueryKey extends QueryKey>(options: UndefinedInitialQueryOptions<TQueryFnData, TError, TData, TQueryKey>) => UseQueryReturnType<TData, TError>

=== src/index.mts ===
import { useQuery } from '@tanstack/vue-query'
>useQuery : any

const baseUrl = 'https://api.publicapis.org/'
>baseUrl : "https://api.publicapis.org/"
>'https://api.publicapis.org/' : "https://api.publicapis.org/"

interface IEntry {
>IEntry : IEntry

  API: string
>API : string

  Description: string
>Description : string

  Auth: string
>Auth : string

  HTTPS: boolean
>HTTPS : boolean

  Cors: string
>Cors : string

  Link: string
>Link : string

  Category: string
>Category : string
}

const testApi = {
>testApi : { getEntries: () => Promise<IEntry[]>; }
>{  getEntries: (): Promise<IEntry[]> => {    return fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch((err) => console.log(err))  }} : { getEntries: () => Promise<IEntry[]>; }

  getEntries: (): Promise<IEntry[]> => {
>getEntries : () => Promise<IEntry[]>
>(): Promise<IEntry[]> => {    return fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch((err) => console.log(err))  } : () => Promise<IEntry[]>

    return fetch(baseUrl + 'entries')
>fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch((err) => console.log(err)) : Promise<any>
>fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries)      .catch : <TResult>(onrejected?: (reason: any) => TResult | PromiseLike<TResult> | null | undefined) => Promise<any>
>fetch(baseUrl + 'entries')      .then((res) => res.json())      .then((data) => data.entries) : Promise<any>
>fetch(baseUrl + 'entries')      .then((res) => res.json())      .then : <TResult1, TResult2>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
>fetch(baseUrl + 'entries')      .then((res) => res.json()) : Promise<any>
>fetch(baseUrl + 'entries')      .then : <TResult1, TResult2>(onfulfilled?: (value: Response) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
>fetch(baseUrl + 'entries') : Promise<Response>
>fetch : (input: URL | RequestInfo, init?: RequestInit | undefined) => Promise<Response>
>baseUrl + 'entries' : string
>baseUrl : "https://api.publicapis.org/"
>'entries' : "entries"

      .then((res) => res.json())
>then : <TResult1, TResult2>(onfulfilled?: (value: Response) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
>(res) => res.json() : (res: Response) => Promise<any>
>res : Response
>res.json() : Promise<any>
>res.json : () => Promise<any>
>res : Response
>json : () => Promise<any>

      .then((data) => data.entries)
>then : <TResult1, TResult2>(onfulfilled?: (value: any) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
>(data) => data.entries : (data: any) => any
>data : any
>data.entries : any
>data : any
>entries : any

      .catch((err) => console.log(err))
>catch : <TResult>(onrejected?: (reason: any) => TResult | PromiseLike<TResult> | null | undefined) => Promise<any>
>(err) => console.log(err) : (err: any) => void
>err : any
>console.log(err) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>err : any
  }
}

const entryKeys = {
>entryKeys : { all: ["entries"]; list: () => ["entries", "list"]; }
>{  all: ['entries'] as const,  list: () => [...entryKeys.all, 'list'] as const} : { all: ["entries"]; list: () => ["entries", "list"]; }

  all: ['entries'] as const,
>all : ["entries"]
>['entries'] as const : ["entries"]
>['entries'] : ["entries"]
>'entries' : "entries"

  list: () => [...entryKeys.all, 'list'] as const
>list : () => ["entries", "list"]
>() => [...entryKeys.all, 'list'] as const : () => ["entries", "list"]
>[...entryKeys.all, 'list'] as const : ["entries", "list"]
>[...entryKeys.all, 'list'] : ["entries", "list"]
>...entryKeys.all : "entries"
>entryKeys.all : ["entries"]
>entryKeys : { all: ["entries"]; list: () => ["entries", "list"]; }
>all : ["entries"]
>'list' : "list"
}

export const useEntries = () => {
>useEntries : () => any
>() => {  return useQuery({    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  })} : () => any

  return useQuery({
>useQuery({    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  }) : any
>useQuery : any
>{    queryKey: entryKeys.list(),    queryFn: testApi.getEntries,    select: (data) => data.slice(0, 10)  } : { queryKey: ["entries", "list"]; queryFn: () => Promise<IEntry[]>; select: (data: any) => any; }

    queryKey: entryKeys.list(),
>queryKey : ["entries", "list"]
>entryKeys.list() : ["entries", "list"]
>entryKeys.list : () => ["entries", "list"]
>entryKeys : { all: ["entries"]; list: () => ["entries", "list"]; }
>list : () => ["entries", "list"]

    queryFn: testApi.getEntries,
>queryFn : () => Promise<IEntry[]>
>testApi.getEntries : () => Promise<IEntry[]>
>testApi : { getEntries: () => Promise<IEntry[]>; }
>getEntries : () => Promise<IEntry[]>

    select: (data) => data.slice(0, 10)
>select : (data: any) => any
>(data) => data.slice(0, 10) : (data: any) => any
>data : any
>data.slice(0, 10) : any
>data.slice : any
>data : any
>slice : any
>0 : 0
>10 : 10

  })
}

