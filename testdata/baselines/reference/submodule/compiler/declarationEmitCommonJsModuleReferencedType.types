//// [tests/cases/compiler/declarationEmitCommonJsModuleReferencedType.ts] ////

=== r/node_modules/foo/node_modules/nested/index.d.ts ===

export interface NestedProps {}
=== r/node_modules/foo/other/index.d.ts ===

export interface OtherIndexProps {}
=== r/node_modules/foo/other.d.ts ===

export interface OtherProps {}
=== r/node_modules/foo/index.d.ts ===
import { OtherProps } from "./other";
>OtherProps : any

import { OtherIndexProps } from "./other/index";
>OtherIndexProps : any

import { NestedProps } from "nested";
>NestedProps : any

export interface SomeProps {}

export function foo(): [SomeProps, OtherProps, OtherIndexProps, NestedProps];
>foo : () => [SomeProps, OtherProps, OtherIndexProps, NestedProps]

=== node_modules/root/index.d.ts ===
export interface RootProps {}

export function bar(): RootProps;
>bar : () => RootProps

=== r/entry.ts ===
import { foo } from "foo";
>foo : () => [import("foo").SomeProps, import("foo").OtherProps, import("foo").OtherIndexProps, import("foo/node_modules/nested").NestedProps]

import { bar } from "root";
>bar : () => import("root").RootProps

export const x = foo();
>x : [import("foo").SomeProps, import("foo").OtherProps, import("foo").OtherIndexProps, import("foo/node_modules/nested").NestedProps]
>foo() : [import("foo").SomeProps, import("foo").OtherProps, import("foo").OtherIndexProps, import("foo/node_modules/nested").NestedProps]
>foo : () => [import("foo").SomeProps, import("foo").OtherProps, import("foo").OtherIndexProps, import("foo/node_modules/nested").NestedProps]

export const y = bar();
>y : import("root").RootProps
>bar() : import("root").RootProps
>bar : () => import("root").RootProps

