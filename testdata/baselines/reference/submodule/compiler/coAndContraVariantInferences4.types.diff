--- old.coAndContraVariantInferences4.types
+++ new.coAndContraVariantInferences4.types
@@= skipped -11, +11 lines =@@
 }
 
 interface Node {
+>Node : Node
+
     kind: SyntaxKind;
 >kind : SyntaxKind
 }
 
 interface Modifier extends Node { kind: SyntaxKind.Modifier; }
+>Modifier : Modifier
 >kind : SyntaxKind.Modifier
 >SyntaxKind : any
 
 interface Decorator extends Node { kind: SyntaxKind.Decorator; }
+>Decorator : Decorator
 >kind : SyntaxKind.Decorator
 >SyntaxKind : any
 
@@= skipped -22, +26 lines =@@
 
 declare function every<T, U extends T>(array: readonly T[], callback: (element: T) => element is U): array is readonly U[];
 >every : <T, U extends T>(array: readonly T[], callback: (element: T) => element is U) => array is readonly U[]
+>T : T
+>U : U
 >array : readonly T[]
 >callback : (element: T) => element is U
 >element : T
