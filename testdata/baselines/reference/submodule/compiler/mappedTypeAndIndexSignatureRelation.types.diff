--- old.mappedTypeAndIndexSignatureRelation.types
+++ new.mappedTypeAndIndexSignatureRelation.types
@@= skipped -2, +2 lines =@@
 === mappedTypeAndIndexSignatureRelation.ts ===
 type Same<T> = { [P in keyof T]: T[P] };
 >Same : Same<T>
+>T : T
+>P : P
 
 type T1<T extends Record<PropertyKey, number>> = T;
 >T1 : T
+>T : T
 
 type T2<U extends Record<PropertyKey, number>> = T1<Same<U>>;
 >T2 : Same<U>
+>U : U
 
 // Repro from #38235
 
 type Foo<IdentifierT extends Record<PropertyKey, PropertyKey>> =
 >Foo : IdentifierT
+>IdentifierT : IdentifierT
 
     IdentifierT
 ;
 
 type Bar<IdentifierT extends Record<PropertyKey, PropertyKey>, T> =
 >Bar : Bar<IdentifierT, T>
+>IdentifierT : IdentifierT
+>T : T
     {
         [k in keyof T] : Foo<IdentifierT & { k : k }>
 >k : k
+>k : k
     }
 ;
 
 type Merge2<T> = { [k in keyof T] : T[k] }
 >Merge2 : Merge2<T>
+>T : T
+>k : k
 
 type Bar2<IdentifierT extends Record<PropertyKey, PropertyKey>, T> =
 >Bar2 : Bar2<IdentifierT, T>
+>IdentifierT : IdentifierT
+>T : T
     {
         [k in keyof T]: Foo<Merge2<IdentifierT & { k: k }>>
 >k : k
+>k : k
     }
 ;
 
 type Identity<T> = T;
 >Identity : T
+>T : T
 
 type Merge3<T> = Identity<{ [k in keyof T] : T[k] }>
->Merge3 : { [k in keyof T]: T[k]; }
+>Merge3 : { [k in keyof T]: T[k] }
+>T : T
+>k : k
 
 type Bar3<IdentifierT extends Record<PropertyKey, PropertyKey>, T> =
 >Bar3 : Bar3<IdentifierT, T>
+>IdentifierT : IdentifierT
+>T : T
     {
         [k in keyof T]: Foo<Merge3<IdentifierT & { k: k }>>
 >k : k
+>k : k
     }
 ;
 
