--- old.forwardRefInTypeDeclaration(strict=true).symbols
+++ new.forwardRefInTypeDeclaration(strict=true).symbols
@@= skipped -11, +11 lines =@@
 // ignored anywhere in an interface (#35947)
 interface Foo2 { [s2]: number; }
 >Foo2 : Symbol(Foo2, Decl(forwardRefInTypeDeclaration.ts, 2, 15))
->[s2] : Symbol(Foo2[s2], Decl(forwardRefInTypeDeclaration.ts, 5, 16))
+>[s2] : Symbol([s2], Decl(forwardRefInTypeDeclaration.ts, 5, 16))
 >s2 : Symbol(s2, Decl(forwardRefInTypeDeclaration.ts, 6, 5))

 const s2 = "x";
@@= skipped -27, +27 lines =@@
 // or in a declared class
 declare class Foo5 { [s5]: number; }
 >Foo5 : Symbol(Foo5, Decl(forwardRefInTypeDeclaration.ts, 14, 15))
->[s5] : Symbol(Foo5[s5], Decl(forwardRefInTypeDeclaration.ts, 17, 20))
+>[s5] : Symbol([s5], Decl(forwardRefInTypeDeclaration.ts, 17, 20))
 >s5 : Symbol(s5, Decl(forwardRefInTypeDeclaration.ts, 18, 5))

 const s5 = "x";
@@= skipped -9, +9 lines =@@
 // or with qualified names
 interface Foo6 { [Cls1.a]: number; [Cls2.b]: number; [obj1.c]: number; [obj2.d]: number }
 >Foo6 : Symbol(Foo6, Decl(forwardRefInTypeDeclaration.ts, 18, 15))
->[Cls1.a] : Symbol(Foo6[Cls1.a], Decl(forwardRefInTypeDeclaration.ts, 21, 16))
->Cls1.a : Symbol(Cls1.a, Decl(forwardRefInTypeDeclaration.ts, 22, 20))
+>[Cls1.a] : Symbol([Cls1.a], Decl(forwardRefInTypeDeclaration.ts, 21, 16))
+>Cls1.a : Symbol(a, Decl(forwardRefInTypeDeclaration.ts, 22, 20))
 >Cls1 : Symbol(Cls1, Decl(forwardRefInTypeDeclaration.ts, 21, 89))
->a : Symbol(Cls1.a, Decl(forwardRefInTypeDeclaration.ts, 22, 20))
->[Cls2.b] : Symbol(Foo6[Cls2.b], Decl(forwardRefInTypeDeclaration.ts, 21, 34))
->Cls2.b : Symbol(Cls2.b, Decl(forwardRefInTypeDeclaration.ts, 23, 12))
+>a : Symbol(a, Decl(forwardRefInTypeDeclaration.ts, 22, 20))
+>[Cls2.b] : Symbol([Cls2.b], Decl(forwardRefInTypeDeclaration.ts, 21, 34))
+>Cls2.b : Symbol(b, Decl(forwardRefInTypeDeclaration.ts, 23, 12))
 >Cls2 : Symbol(Cls2, Decl(forwardRefInTypeDeclaration.ts, 22, 37))
->b : Symbol(Cls2.b, Decl(forwardRefInTypeDeclaration.ts, 23, 12))
->[obj1.c] : Symbol(Foo6[obj1.c], Decl(forwardRefInTypeDeclaration.ts, 21, 52))
+>b : Symbol(b, Decl(forwardRefInTypeDeclaration.ts, 23, 12))
+>[obj1.c] : Symbol([obj1.c], Decl(forwardRefInTypeDeclaration.ts, 21, 52))
 >obj1.c : Symbol(c, Decl(forwardRefInTypeDeclaration.ts, 24, 21))
 >obj1 : Symbol(obj1, Decl(forwardRefInTypeDeclaration.ts, 24, 13))
 >c : Symbol(c, Decl(forwardRefInTypeDeclaration.ts, 24, 21))
->[obj2.d] : Symbol(Foo6[obj2.d], Decl(forwardRefInTypeDeclaration.ts, 21, 70))
+>[obj2.d] : Symbol([obj2.d], Decl(forwardRefInTypeDeclaration.ts, 21, 70))
 >obj2.d : Symbol(d, Decl(forwardRefInTypeDeclaration.ts, 25, 14))
 >obj2 : Symbol(obj2, Decl(forwardRefInTypeDeclaration.ts, 25, 5))
 >d : Symbol(d, Decl(forwardRefInTypeDeclaration.ts, 25, 14))

 declare class Cls1 { static a: "a"; }
 >Cls1 : Symbol(Cls1, Decl(forwardRefInTypeDeclaration.ts, 21, 89))
->a : Symbol(Cls1.a, Decl(forwardRefInTypeDeclaration.ts, 22, 20))
+>a : Symbol(a, Decl(forwardRefInTypeDeclaration.ts, 22, 20))

 class Cls2 { static b = "b" as const; }
 >Cls2 : Symbol(Cls2, Decl(forwardRefInTypeDeclaration.ts, 22, 37))
->b : Symbol(Cls2.b, Decl(forwardRefInTypeDeclaration.ts, 23, 12))
+>b : Symbol(b, Decl(forwardRefInTypeDeclaration.ts, 23, 12))
 >const : Symbol(const)

 declare const obj1: { c: 'c' }