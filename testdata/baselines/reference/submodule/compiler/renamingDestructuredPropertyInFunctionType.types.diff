--- old.renamingDestructuredPropertyInFunctionType.types
+++ new.renamingDestructuredPropertyInFunctionType.types
@@= skipped -202, +202 lines =@@
 >c : number

 const f4 = function({ a: string }: O): typeof string { return string; };
->f4 : ({ a: string }: O) => typeof string
->function({ a: string }: O): typeof string { return string; } : ({ a: string }: O) => typeof string
+>f4 : ({ a: string }: O) => string
+>function({ a: string }: O): typeof string { return string; } : ({ a: string }: O) => string
 >a : any
 >string : string
 >string : string
 >string : string

 const f5 = ({ a: string, b, c }: O): typeof string => '';
->f5 : ({ a: string, b, c }: O) => typeof string
->({ a: string, b, c }: O): typeof string => '' : ({ a: string, b, c }: O) => typeof string
+>f5 : ({ a: string, b, c }: O) => string
+>({ a: string, b, c }: O): typeof string => '' : ({ a: string, b, c }: O) => string
 >a : any
 >string : string
 >b : number
@@= skipped -28, +28 lines =@@

 };
 const obj2 = {
->obj2 : { method({ a: string }: O): typeof string; }
->{  method({ a: string }: O): typeof string { return string; }} : { method({ a: string }: O): typeof string; }
+>obj2 : { method({ a: string }: O): string; }
+>{  method({ a: string }: O): typeof string { return string; }} : { method({ a: string }: O): string; }

   method({ a: string }: O): typeof string { return string; }
->method : ({ a: string }: O) => typeof string
+>method : ({ a: string }: O) => string
 >a : any
 >string : string
 >string : string
@@= skipped -12, +12 lines =@@

 };
 function f6({ a: string = "" }: O) { }
->f6 : ({ a: string }: O) => void
+>f6 : ({ a: string = "" }: O) => void
 >a : any
 >string : string
 >"" : ""

 const f7 = ({ a: string = "", b, c }: O) => { };
->f7 : ({ a: string, b, c }: O) => void
->({ a: string = "", b, c }: O) => { } : ({ a: string, b, c }: O) => void
+>f7 : ({ a: string = "", b, c }: O) => void
+>({ a: string = "", b, c }: O) => { } : ({ a: string = "", b, c }: O) => void
 >a : any
 >string : string
 >"" : ""
@@= skipped -36, +36 lines =@@

 // In below case `string` should be kept because it is used
 function f12({ a: string = "" }: O): typeof string { return "a"; }
->f12 : ({ a: string }: O) => typeof string
+>f12 : ({ a: string = "" }: O) => string
 >a : any
 >string : string
 >"" : ""