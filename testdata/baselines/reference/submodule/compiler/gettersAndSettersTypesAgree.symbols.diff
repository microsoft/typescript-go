--- old.gettersAndSettersTypesAgree.symbols
+++ new.gettersAndSettersTypesAgree.symbols
@@= skipped -4, +4 lines =@@
 >C : Symbol(C, Decl(gettersAndSettersTypesAgree.ts, 0, 0))
 
     public get Foo() { return "foo";} // ok
->Foo : Symbol(C.Foo, Decl(gettersAndSettersTypesAgree.ts, 0, 9), Decl(gettersAndSettersTypesAgree.ts, 1, 37))
+>Foo : Symbol(Foo, Decl(gettersAndSettersTypesAgree.ts, 0, 9), Decl(gettersAndSettersTypesAgree.ts, 1, 37))
 
     public set Foo(foo) {} // ok - type inferred from getter return statement
->Foo : Symbol(C.Foo, Decl(gettersAndSettersTypesAgree.ts, 0, 9), Decl(gettersAndSettersTypesAgree.ts, 1, 37))
+>Foo : Symbol(Foo, Decl(gettersAndSettersTypesAgree.ts, 0, 9), Decl(gettersAndSettersTypesAgree.ts, 1, 37))
 >foo : Symbol(foo, Decl(gettersAndSettersTypesAgree.ts, 2, 19))
 
     public get Bar() { return "foo";} // ok
->Bar : Symbol(C.Bar, Decl(gettersAndSettersTypesAgree.ts, 2, 26), Decl(gettersAndSettersTypesAgree.ts, 4, 37))
+>Bar : Symbol(Bar, Decl(gettersAndSettersTypesAgree.ts, 2, 26), Decl(gettersAndSettersTypesAgree.ts, 4, 37))
 
     public set Bar(bar:string) {} // ok - type must be declared
->Bar : Symbol(C.Bar, Decl(gettersAndSettersTypesAgree.ts, 2, 26), Decl(gettersAndSettersTypesAgree.ts, 4, 37))
+>Bar : Symbol(Bar, Decl(gettersAndSettersTypesAgree.ts, 2, 26), Decl(gettersAndSettersTypesAgree.ts, 4, 37))
 >bar : Symbol(bar, Decl(gettersAndSettersTypesAgree.ts, 5, 19))
 }
 
