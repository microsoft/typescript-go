--- old.typeGuardConstructorClassAndNumber.symbols
+++ new.typeGuardConstructorClassAndNumber.symbols
@@= skipped -5, +5 lines =@@
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     property1: string;
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 
 let var1: C1 | number;
@@= skipped -8, +8 lines =@@
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
 if (var1.constructor == C1) {
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     var1; // C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 
     var1.property1; // string
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 else {
     var1; // number | C1
@@= skipped -19, +19 lines =@@
 }
 if (var1["constructor"] == C1) {
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>"constructor" : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     var1; // C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 
     var1.property1; // string
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 else {
     var1; // number | C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 }
 if (var1.constructor === C1) {
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     var1; // C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 
     var1.property1; // string
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 else {
     var1; // number | C1
@@= skipped -35, +35 lines =@@
 }
 if (var1["constructor"] === C1) {
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>"constructor" : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     var1; // C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 
     var1.property1; // string
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 else {
     var1; // number | C1
@@= skipped -17, +17 lines =@@
 }
 if (C1 == var1.constructor) {
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 
     var1; // C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 
     var1.property1; // string
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 else {
     var1; // number | C1
@@= skipped -19, +19 lines =@@
 if (C1 == var1["constructor"]) {
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>"constructor" : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 
     var1; // C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 
     var1.property1; // string
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 else {
     var1; // number | C1
@@= skipped -16, +16 lines =@@
 }
 if (C1 === var1.constructor) {
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 
     var1; // C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 
     var1.property1; // string
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 else {
     var1; // number | C1
@@= skipped -19, +19 lines =@@
 if (C1 === var1["constructor"]) {
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>"constructor" : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 
     var1; // C1
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 
     var1.property1; // string
->var1.property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>var1.property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->property1 : Symbol(C1.property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
+>property1 : Symbol(property1, Decl(typeGuardConstructorClassAndNumber.ts, 1, 10))
 }
 else {
     var1; // number | C1
@@= skipped -16, +16 lines =@@
 }
 
 if (var1.constructor != C1) {
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     var1; // C1 | number
@@= skipped -17, +17 lines =@@
 }
 if (var1["constructor"] != C1) {
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>"constructor" : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     var1; // C1 | number
@@= skipped -14, +14 lines =@@
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
 }
 if (var1.constructor !== C1) {
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     var1; // C1 | number
@@= skipped -17, +17 lines =@@
 }
 if (var1["constructor"] !== C1) {
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>"constructor" : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 
     var1; // C1 | number
@@= skipped -15, +15 lines =@@
 }
 if (C1 != var1.constructor) {
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 
     var1; // C1 | number
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
@@= skipped -17, +17 lines =@@
 if (C1 != var1["constructor"]) {
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>"constructor" : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 
     var1; // C1 | number
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
@@= skipped -14, +14 lines =@@
 }
 if (C1 !== var1.constructor) {
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
->var1.constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>var1.constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->constructor : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>constructor : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 
     var1; // C1 | number
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
@@= skipped -17, +17 lines =@@
 if (C1 !== var1["constructor"]) {
 >C1 : Symbol(C1, Decl(typeGuardConstructorClassAndNumber.ts, 0, 0))
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
->"constructor" : Symbol(Object.constructor, Decl(lib.es5.d.ts, --, --))
+>"constructor" : Symbol(constructor, Decl(lib.es5.d.ts, --, --))
 
     var1; // C1 | number
 >var1 : Symbol(var1, Decl(typeGuardConstructorClassAndNumber.ts, 5, 3))
@@= skipped -24, +24 lines =@@
 >instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))
 
         if (instance.prototype == null || instance.prototype.constructor == null) {
->instance.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
+>instance.prototype : Symbol(prototype, Decl(lib.es5.d.ts, --, --))
 >instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))
->prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
->instance.prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
+>prototype : Symbol(prototype, Decl(lib.es5.d.ts, --, --))
+>instance.prototype : Symbol(prototype, Decl(lib.es5.d.ts, --, --))
 >instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))
->prototype : Symbol(Function.prototype, Decl(lib.es5.d.ts, --, --))
+>prototype : Symbol(prototype, Decl(lib.es5.d.ts, --, --))
 
             return instance.length;
->instance.length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
+>instance.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >instance : Symbol(instance, Decl(typeGuardConstructorClassAndNumber.ts, 122, 13))
->length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
         }
     }
 }
