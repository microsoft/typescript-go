--- old.overloadresolutionWithConstraintCheckingDeferred.symbols
+++ new.overloadresolutionWithConstraintCheckingDeferred.symbols
@@= skipped -2, +2 lines =@@
 === overloadresolutionWithConstraintCheckingDeferred.ts ===
 interface A { x }
 >A : Symbol(A, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 0, 0))
->x : Symbol(A.x, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 0, 13))
+>x : Symbol(x, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 0, 13))
 
 interface B { x; y }
 >B : Symbol(B, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 0, 17))
->x : Symbol(B.x, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 1, 13))
->y : Symbol(B.y, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 1, 16))
+>x : Symbol(x, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 1, 13))
+>y : Symbol(y, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 1, 16))
 
 interface C { z }
 >C : Symbol(C, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 1, 20))
->z : Symbol(C.z, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 2, 13))
+>z : Symbol(z, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 2, 13))
 
 interface D { q }
 >D : Symbol(D, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 2, 17))
->q : Symbol(D.q, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 3, 13))
+>q : Symbol(q, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 3, 13))
 
 class G<T extends A> {
 >G : Symbol(G, Decl(overloadresolutionWithConstraintCheckingDeferred.ts, 3, 17))
