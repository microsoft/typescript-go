--- old.inferFromNestedSameShapeTuple.types
+++ new.inferFromNestedSameShapeTuple.types
@@= skipped -25, +25 lines =@@
 >items : readonly Recursive<Id>[]
 
 const items = [{
->items : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
->[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const satisfies readonly Recursive<string>[] : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
->[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
->[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
->{    id: 'a',    children: [{        id: 'b',        children: []    }]} : { readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }
+>items : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
+>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const satisfies readonly Recursive<string>[] : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
+>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
+>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
+>{    id: 'a',    children: [{        id: 'b',        children: []    }]} : { readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }
 
     id: 'a',
 >id : "a"
 >'a' : "a"
 
     children: [{
->children : readonly [{ readonly id: "b"; readonly children: readonly []; }]
->[{        id: 'b',        children: []    }] : readonly [{ readonly id: "b"; readonly children: readonly []; }]
->{        id: 'b',        children: []    } : { readonly id: "b"; readonly children: readonly []; }
+>children : [{ readonly id: "b"; readonly children: []; }]
+>[{        id: 'b',        children: []    }] : [{ readonly id: "b"; readonly children: []; }]
+>{        id: 'b',        children: []    } : { readonly id: "b"; readonly children: []; }
 
         id: 'b',
 >id : "b"
 >'b' : "b"
 
         children: []
->children : readonly []
->[] : readonly []
+>children : []
+>[] : []
 
     }]
 }] as const satisfies readonly Recursive<string>[]
@@= skipped -30, +30 lines =@@
 >foo : ("a" | "b")[]
 >getIds(items) : ("a" | "b")[]
 >getIds : <Id>(items: readonly Recursive<Id>[]) => Id[]
->items : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
+>items : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
 
 // variant with a fresh argument
 const foo2 = getIds([{
 >foo2 : ("a" | "b")[]
 >getIds([{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const) : ("a" | "b")[]
 >getIds : <Id>(items: readonly Recursive<Id>[]) => Id[]
->[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
->[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
->{    id: 'a',    children: [{        id: 'b',        children: []    }]} : { readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }
+>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
+>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] : [{ readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }]
+>{    id: 'a',    children: [{        id: 'b',        children: []    }]} : { readonly id: "a"; readonly children: [{ readonly id: "b"; readonly children: []; }]; }
 
     id: 'a',
 >id : "a"
 >'a' : "a"
 
     children: [{
->children : readonly [{ readonly id: "b"; readonly children: readonly []; }]
->[{        id: 'b',        children: []    }] : readonly [{ readonly id: "b"; readonly children: readonly []; }]
->{        id: 'b',        children: []    } : { readonly id: "b"; readonly children: readonly []; }
+>children : [{ readonly id: "b"; readonly children: []; }]
+>[{        id: 'b',        children: []    }] : [{ readonly id: "b"; readonly children: []; }]
+>{        id: 'b',        children: []    } : { readonly id: "b"; readonly children: []; }
 
         id: 'b',
 >id : "b"
 >'b' : "b"
 
         children: []
->children : readonly []
->[] : readonly []
+>children : []
+>[] : []
 
     }]
 }] as const)
