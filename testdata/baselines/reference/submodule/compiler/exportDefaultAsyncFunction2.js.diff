--- old.exportDefaultAsyncFunction2.js
+++ new.exportDefaultAsyncFunction2.js
@@= skipped -26, +26 lines =@@
 
 export function foo() { }
 
-//// [asyncawait.js]
-export function async(...args) { }
-export function await(...args) { }
-//// [a.js]
-import { async, await } from 'asyncawait';
-export default async(() => await(Promise.resolve(1)));
-//// [b.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-export default () => __awaiter(void 0, void 0, void 0, function* () { return 0; });
-//// [c.js]
+//// [e.js]
 import { async } from 'asyncawait';
-export default async();
+export default async;
+export function foo() { }
 //// [d.js]
 import { async } from 'asyncawait';
 export default async;
-//// [e.js]
+//// [c.js]
 import { async } from 'asyncawait';
-export default async;
-export function foo() { }
+export default async();
+//// [b.js]
+export default async () => { return 0; };
+//// [a.js]
+import { async, await } from 'asyncawait';
+export default async(() => await(Promise.resolve(1)));
+//// [asyncawait.js]
+export function async(...args) { }
+export function await(...args) { }
