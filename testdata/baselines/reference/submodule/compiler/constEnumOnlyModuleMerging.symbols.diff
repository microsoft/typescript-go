--- old.constEnumOnlyModuleMerging.symbols
+++ new.constEnumOnlyModuleMerging.symbols
@@= skipped -12, +12 lines =@@
 
     export const enum A { X }
 >A : Symbol(A, Decl(constEnumOnlyModuleMerging.ts, 4, 14))
->X : Symbol(A.X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))
+>X : Symbol(X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))
 }
 
 module B {
@@= skipped -8, +8 lines =@@
 
     import O = Outer;
 >O : Symbol(O, Decl(constEnumOnlyModuleMerging.ts, 8, 10))
->Outer : Symbol(O, Decl(constEnumOnlyModuleMerging.ts, 0, 0), Decl(constEnumOnlyModuleMerging.ts, 2, 1))
+>Outer : Symbol(Outer, Decl(constEnumOnlyModuleMerging.ts, 0, 0), Decl(constEnumOnlyModuleMerging.ts, 2, 1))
 
     var x = O.A.X;
 >x : Symbol(x, Decl(constEnumOnlyModuleMerging.ts, 10, 7))
->O.A.X : Symbol(O.A.X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))
->O.A : Symbol(O.A, Decl(constEnumOnlyModuleMerging.ts, 4, 14))
+>O.A.X : Symbol(X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))
+>O.A : Symbol(A, Decl(constEnumOnlyModuleMerging.ts, 4, 14))
 >O : Symbol(O, Decl(constEnumOnlyModuleMerging.ts, 8, 10))
->A : Symbol(O.A, Decl(constEnumOnlyModuleMerging.ts, 4, 14))
->X : Symbol(O.A.X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))
+>A : Symbol(A, Decl(constEnumOnlyModuleMerging.ts, 4, 14))
+>X : Symbol(X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))
 
     var y = O.x;
 >y : Symbol(y, Decl(constEnumOnlyModuleMerging.ts, 11, 7))
->O.x : Symbol(O.x, Decl(constEnumOnlyModuleMerging.ts, 1, 14))
+>O.x : Symbol(x, Decl(constEnumOnlyModuleMerging.ts, 1, 14))
 >O : Symbol(O, Decl(constEnumOnlyModuleMerging.ts, 8, 10))
->x : Symbol(O.x, Decl(constEnumOnlyModuleMerging.ts, 1, 14))
+>x : Symbol(x, Decl(constEnumOnlyModuleMerging.ts, 1, 14))
 }
