--- old.contextualTypingOfOptionalMembers.types
+++ new.contextualTypingOfOptionalMembers.types
@@= skipped -1, +1 lines =@@
 
 === index.tsx ===
 interface ActionsObject<State> {
+>ActionsObject : ActionsObject<State>
+>State : State
+
     [prop: string]: (state: State) => State;
 >prop : string
 >state : State
 }
 
 interface Options<State, Actions> {
+>Options : Options<State, Actions>
+>State : State
+>Actions : Actions
+
     state?: State;
 >state : State | undefined
 
     view?: (state: State, actions: Actions) => any;
->view : ((state: State, actions: Actions) => any) | undefined
+>view : (state: State, actions: Actions) => any | undefined
 >state : State
 >actions : Actions
 
@@= skipped -20, +27 lines =@@
 
 declare function app<State, Actions extends ActionsObject<State>>(obj: Options<State, Actions>): void;
 >app : <State, Actions extends ActionsObject<State>>(obj: Options<State, Actions>) => void
+>State : State
+>Actions : Actions
 >obj : Options<State, Actions>
 
 app({
@@= skipped -34, +36 lines =@@
 
 
 interface Bar {
+>Bar : Bar
+
     bar: (a: number) => void;
 >bar : (a: number) => void
 >a : number
@@= skipped -7, +9 lines =@@
 
 declare function foo<T extends Bar>(x: string | T): T;
 >foo : <T extends Bar>(x: string | T) => T
+>T : T
 >x : string | T
 
 const y = foo({
->y : { bar(x: number): void; }
->foo({    bar(x) { // Should be typed number => void    }}) : { bar(x: number): void; }
+>y : { bar: (x: number) => void; }
+>foo({    bar(x) { // Should be typed number => void    }}) : { bar: (x: number) => void; }
 >foo : <T extends Bar>(x: string | T) => T
->{    bar(x) { // Should be typed number => void    }} : { bar(x: number): void; }
+>{    bar(x) { // Should be typed number => void    }} : { bar: (x: number) => void; }
 
     bar(x) { // Should be typed number => void
 >bar : (x: number) => void
@@= skipped -15, +16 lines =@@
 });
 
 interface Options2<State, Actions> {
+>Options2 : Options2<State, Actions>
+>State : State
+>Actions : Actions
+
     state?: State;
 >state : State | undefined
 
     view?: (state: State, actions: Actions) => any;
->view : ((state: State, actions: Actions) => any) | undefined
+>view : (state: State, actions: Actions) => any | undefined
 >state : State
 >actions : Actions
 
@@= skipped -14, +18 lines =@@
 
 declare function app2<State, Actions extends ActionsObject<State>>(obj: Options2<State, Actions>): void;
 >app2 : <State, Actions extends ActionsObject<State>>(obj: Options2<State, Actions>) => void
+>State : State
+>Actions : Actions
 >obj : Options2<State, Actions>
 
 app2({
@@= skipped -35, +37 lines =@@
 
 type ActionsArray<State> = ((state: State) => State)[];
 >ActionsArray : ActionsArray<State>
+>State : State
 >state : State
 
 declare function app3<State, Actions extends ActionsArray<State>>(obj: Options<State, Actions>): void;
 >app3 : <State, Actions extends ActionsArray<State>>(obj: Options<State, Actions>) => void
+>State : State
+>Actions : Actions
 >obj : Options<State, Actions>
 
 app3({
 >app3({    state: 100,    actions: [        s => s // Should be typed number => number    ],    view: (s, a) => undefined as any,}) : void
 >app3 : <State, Actions extends ActionsArray<State>>(obj: Options<State, Actions>) => void
->{    state: 100,    actions: [        s => s // Should be typed number => number    ],    view: (s, a) => undefined as any,} : { state: number; actions: ((s: number) => number)[]; view: (s: number, a: ((s: number) => number)[]) => any; }
+>{    state: 100,    actions: [        s => s // Should be typed number => number    ],    view: (s, a) => undefined as any,} : { state: number; actions: (s: number) => number[]; view: (s: number, a: (s: number) => number[]) => any; }
 
     state: 100,
 >state : number
 >100 : 100
 
     actions: [
->actions : ((s: number) => number)[]
->[        s => s // Should be typed number => number    ] : ((s: number) => number)[]
+>actions : (s: number) => number[]
+>[        s => s // Should be typed number => number    ] : (s: number) => number[]
 
         s => s // Should be typed number => number
 >s => s : (s: number) => number
@@= skipped -26, +29 lines =@@
 
     ],
     view: (s, a) => undefined as any,
->view : (s: number, a: ((s: number) => number)[]) => any
->(s, a) => undefined as any : (s: number, a: ((s: number) => number)[]) => any
+>view : (s: number, a: (s: number) => number[]) => any
+>(s, a) => undefined as any : (s: number, a: (s: number) => number[]) => any
 >s : number
->a : ((s: number) => number)[]
+>a : (s: number) => number[]
 >undefined as any : any
 >undefined : undefined
 
 });
 
 namespace JSX {
+>JSX : any
+
     export interface Element {}
+>Element : Element
+
     export interface IntrinsicElements {}
+>IntrinsicElements : IntrinsicElements
 }
 
 interface ActionsObjectOr<State> {
+>ActionsObjectOr : ActionsObjectOr<State>
+>State : State
+
     [prop: string]: ((state: State) => State) | State;
 >prop : string
 >state : State
 }
 
 declare function App4<State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State }): JSX.Element;
->App4 : <State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State; }) => JSX.Element
+>App4 : <State, Actions extends ActionsObjectOr<State>>(props: (string | Actions) & { state: State; }) => Element
+>State : State
+>Actions : Actions
 >props : (string | Actions) & { state: State; }
 >state : State
 >JSX : any
 
 const a = <App4 state={100} foo={s => s} />; // TODO: should be number => number, but JSX resolution is missing an inferential pass
->a : JSX.Element
-><App4 state={100} foo={s => s} /> : JSX.Element
->App4 : <State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State; }) => JSX.Element
->state : number
+>a : any
+><App4 state={100} foo={s => s} /> : any
+>App4 : <State, Actions extends ActionsObjectOr<State>>(props: (string | Actions) & { state: State; }) => Element
+>state : any
 >100 : 100
->foo : (s: number) => number
->s => s : (s: number) => number
->s : number
->s : number
+>foo : any
+>s => s : (s: any) => any
+>s : any
+>s : any
 
