--- old.tsxAttributeQuickinfoTypesSameAsObjectLiteral.types
+++ new.tsxAttributeQuickinfoTypesSameAsObjectLiteral.types
@@= skipped -1, +1 lines =@@
 
 === tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx ===
 namespace JSX {
+>JSX : any
+
     export interface IntrinsicElements {
+>IntrinsicElements : IntrinsicElements
+
         span: {};
 >span : {}
     }
     export interface Element {
+>Element : Element
+
 		something?: any;
 >something : any
     }
 }
 
 const Foo = (props: { foo: "A" | "B" | "C" }) => <span>{props.foo}</span>;
->Foo : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
->(props: { foo: "A" | "B" | "C" }) => <span>{props.foo}</span> : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
+>Foo : (props: { foo: "A" | "B" | "C"; }) => any
+>(props: { foo: "A" | "B" | "C" }) => <span>{props.foo}</span> : (props: { foo: "A" | "B" | "C"; }) => any
 >props : { foo: "A" | "B" | "C"; }
 >foo : "A" | "B" | "C"
-><span>{props.foo}</span> : JSX.Element
+><span>{props.foo}</span> : any
 >span : any
 >props.foo : "A" | "B" | "C"
 >props : { foo: "A" | "B" | "C"; }
@@= skipped -23, +29 lines =@@
 >span : any
 
 Foo({
->Foo({    foo: "B"}) : JSX.Element
->Foo : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
+>Foo({    foo: "B"}) : any
+>Foo : (props: { foo: "A" | "B" | "C"; }) => any
 >{    foo: "B"} : { foo: "B"; }
 
     foo: "B"
@@= skipped -11, +11 lines =@@
 });
 
 <Foo foo="B" />
-><Foo foo="B" /> : JSX.Element
->Foo : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
->foo : "B"
+><Foo foo="B" /> : any
+>Foo : (props: { foo: "A" | "B" | "C"; }) => any
+>foo : any
 
