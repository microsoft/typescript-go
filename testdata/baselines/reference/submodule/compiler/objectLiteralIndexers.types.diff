--- old.objectLiteralIndexers.types
+++ new.objectLiteralIndexers.types
@@= skipped -1, +1 lines =@@
 
 === objectLiteralIndexers.ts ===
 interface A {
+>A : A
+
     x: number;
 >x : number
 }
 
 interface B extends A {
+>B : B
+
     y: string;
 >y : string
 }
@@= skipped -22, +26 lines =@@
 >o1 : { [s: string]: A; [n: number]: B; }
 >s : string
 >n : number
->{ x: a, 0: b } : { x: A; 0: B; }
+>{ x: a, 0: b } : { 0: B; x: A; }
 >x : A
 >a : A
 >0 : B
 >b : B
 
 o1 = { x: b, 0: c }; // both indexers are any
->o1 = { x: b, 0: c } : { x: B; 0: any; }
+>o1 = { x: b, 0: c } : { 0: any; x: B; }
 >o1 : { [s: string]: A; [n: number]: B; }
->{ x: b, 0: c } : { x: B; 0: any; }
+>{ x: b, 0: c } : { 0: any; x: B; }
 >x : B
 >b : B
 >0 : any
 >c : any
 
 o1 = { x: c, 0: b }; // string indexer is any, number indexer is B
->o1 = { x: c, 0: b } : { x: any; 0: B; }
+>o1 = { x: c, 0: b } : { 0: B; x: any; }
 >o1 : { [s: string]: A; [n: number]: B; }
->{ x: c, 0: b } : { x: any; 0: B; }
+>{ x: c, 0: b } : { 0: B; x: any; }
 >x : any
 >c : any
 >0 : B
