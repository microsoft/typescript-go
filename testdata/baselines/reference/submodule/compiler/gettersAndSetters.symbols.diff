--- old.gettersAndSetters.symbols
+++ new.gettersAndSetters.symbols
@@= skipped -5, +5 lines =@@
 >C : Symbol(C, Decl(gettersAndSetters.ts, 0, 0))
 
     public fooBack = "";
->fooBack : Symbol(C.fooBack, Decl(gettersAndSetters.ts, 1, 9))
+>fooBack : Symbol(fooBack, Decl(gettersAndSetters.ts, 1, 9))
 
     static barBack:string = "";
->barBack : Symbol(C.barBack, Decl(gettersAndSetters.ts, 2, 24))
+>barBack : Symbol(barBack, Decl(gettersAndSetters.ts, 2, 24))
 
     public bazBack = "";
->bazBack : Symbol(C.bazBack, Decl(gettersAndSetters.ts, 3, 31))
+>bazBack : Symbol(bazBack, Decl(gettersAndSetters.ts, 3, 31))
     
     public get Foo() { return this.fooBack;} // ok
->Foo : Symbol(C.Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
->this.fooBack : Symbol(C.fooBack, Decl(gettersAndSetters.ts, 1, 9))
+>Foo : Symbol(Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
+>this.fooBack : Symbol(fooBack, Decl(gettersAndSetters.ts, 1, 9))
 >this : Symbol(C, Decl(gettersAndSetters.ts, 0, 0))
->fooBack : Symbol(C.fooBack, Decl(gettersAndSetters.ts, 1, 9))
+>fooBack : Symbol(fooBack, Decl(gettersAndSetters.ts, 1, 9))
 
     public set Foo(foo:string) {this.fooBack = foo;} // ok
->Foo : Symbol(C.Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
+>Foo : Symbol(Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
 >foo : Symbol(foo, Decl(gettersAndSetters.ts, 7, 19))
->this.fooBack : Symbol(C.fooBack, Decl(gettersAndSetters.ts, 1, 9))
+>this.fooBack : Symbol(fooBack, Decl(gettersAndSetters.ts, 1, 9))
 >this : Symbol(C, Decl(gettersAndSetters.ts, 0, 0))
->fooBack : Symbol(C.fooBack, Decl(gettersAndSetters.ts, 1, 9))
+>fooBack : Symbol(fooBack, Decl(gettersAndSetters.ts, 1, 9))
 >foo : Symbol(foo, Decl(gettersAndSetters.ts, 7, 19))
 
     static get Bar() {return C.barBack;} // ok
->Bar : Symbol(C.Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
->C.barBack : Symbol(C.barBack, Decl(gettersAndSetters.ts, 2, 24))
+>Bar : Symbol(Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
+>C.barBack : Symbol(barBack, Decl(gettersAndSetters.ts, 2, 24))
 >C : Symbol(C, Decl(gettersAndSetters.ts, 0, 0))
->barBack : Symbol(C.barBack, Decl(gettersAndSetters.ts, 2, 24))
+>barBack : Symbol(barBack, Decl(gettersAndSetters.ts, 2, 24))
 
     static set Bar(bar:string) {C.barBack = bar;} // ok
->Bar : Symbol(C.Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
+>Bar : Symbol(Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
 >bar : Symbol(bar, Decl(gettersAndSetters.ts, 10, 19))
->C.barBack : Symbol(C.barBack, Decl(gettersAndSetters.ts, 2, 24))
+>C.barBack : Symbol(barBack, Decl(gettersAndSetters.ts, 2, 24))
 >C : Symbol(C, Decl(gettersAndSetters.ts, 0, 0))
->barBack : Symbol(C.barBack, Decl(gettersAndSetters.ts, 2, 24))
+>barBack : Symbol(barBack, Decl(gettersAndSetters.ts, 2, 24))
 >bar : Symbol(bar, Decl(gettersAndSetters.ts, 10, 19))
 
     public get = function() {} // ok
->get : Symbol(C.get, Decl(gettersAndSetters.ts, 10, 49))
+>get : Symbol(get, Decl(gettersAndSetters.ts, 10, 49))
 
     public set = function() {} // ok
->set : Symbol(C.set, Decl(gettersAndSetters.ts, 12, 30))
+>set : Symbol(set, Decl(gettersAndSetters.ts, 12, 30))
 }
 
 var c = new C();
@@= skipped -49, +49 lines =@@
 
 var foo = c.Foo;
 >foo : Symbol(foo, Decl(gettersAndSetters.ts, 18, 3))
->c.Foo : Symbol(C.Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
+>c.Foo : Symbol(Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
 >c : Symbol(c, Decl(gettersAndSetters.ts, 16, 3))
->Foo : Symbol(C.Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
+>Foo : Symbol(Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
 
 c.Foo = "foov";
->c.Foo : Symbol(C.Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
+>c.Foo : Symbol(Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
 >c : Symbol(c, Decl(gettersAndSetters.ts, 16, 3))
->Foo : Symbol(C.Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
+>Foo : Symbol(Foo, Decl(gettersAndSetters.ts, 4, 24), Decl(gettersAndSetters.ts, 6, 44))
 
 var bar = C.Bar;
 >bar : Symbol(bar, Decl(gettersAndSetters.ts, 21, 3))
->C.Bar : Symbol(C.Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
+>C.Bar : Symbol(Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
 >C : Symbol(C, Decl(gettersAndSetters.ts, 0, 0))
->Bar : Symbol(C.Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
+>Bar : Symbol(Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
 
 C.Bar = "barv";
->C.Bar : Symbol(C.Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
+>C.Bar : Symbol(Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
 >C : Symbol(C, Decl(gettersAndSetters.ts, 0, 0))
->Bar : Symbol(C.Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
+>Bar : Symbol(Bar, Decl(gettersAndSetters.ts, 7, 52), Decl(gettersAndSetters.ts, 9, 40))
 
 var baz = c.Baz;
 >baz : Symbol(baz, Decl(gettersAndSetters.ts, 24, 3))
@@= skipped -64, +64 lines =@@
 // Repro from #45006
 const x: string | number = Math.random() < 0.5 ? "str" : 123;
 >x : Symbol(x, Decl(gettersAndSetters.ts, 41, 5))
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>Math.random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
+>random : Symbol(random, Decl(lib.es5.d.ts, --, --))
 
 if (typeof x === "string") {
 >x : Symbol(x, Decl(gettersAndSetters.ts, 41, 5))
@@= skipped -13, +13 lines =@@
     set prop(_: any) { x.toUpperCase(); },
 >prop : Symbol(prop, Decl(gettersAndSetters.ts, 43, 13), Decl(gettersAndSetters.ts, 44, 42))
 >_ : Symbol(_, Decl(gettersAndSetters.ts, 44, 13))
->x.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
+>x.toUpperCase : Symbol(toUpperCase, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(gettersAndSetters.ts, 41, 5))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
+>toUpperCase : Symbol(toUpperCase, Decl(lib.es5.d.ts, --, --))
 
     get prop() { return x.toUpperCase() },
 >prop : Symbol(prop, Decl(gettersAndSetters.ts, 43, 13), Decl(gettersAndSetters.ts, 44, 42))
->x.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
+>x.toUpperCase : Symbol(toUpperCase, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(gettersAndSetters.ts, 41, 5))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
+>toUpperCase : Symbol(toUpperCase, Decl(lib.es5.d.ts, --, --))
 
     method() { return x.toUpperCase() }
 >method : Symbol(method, Decl(gettersAndSetters.ts, 45, 42))
->x.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
+>x.toUpperCase : Symbol(toUpperCase, Decl(lib.es5.d.ts, --, --))
 >x : Symbol(x, Decl(gettersAndSetters.ts, 41, 5))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
+>toUpperCase : Symbol(toUpperCase, Decl(lib.es5.d.ts, --, --))
   }
 }
 
