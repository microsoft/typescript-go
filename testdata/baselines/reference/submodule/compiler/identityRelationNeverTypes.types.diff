--- old.identityRelationNeverTypes.types
+++ new.identityRelationNeverTypes.types
@@= skipped -4, +4 lines =@@
 
 type Equals<A, B> = (<T>() => T extends B ? 1 : 0) extends (<T>() => T extends A ? 1 : 0) ? true : false;
 >Equals : Equals<A, B>
+>A : A
+>B : B
+>T : T
+>T : T
 >true : true
 >false : false
 
 declare class State<TContext> {
 >State : State<TContext>
+>TContext : TContext
 
     _context: TContext;
 >_context : TContext
@@= skipped -14, +19 lines =@@
 
     matches<TSV extends string>(stateValue: TSV): this is State<TContext> & { value: TSV };
 >matches : <TSV extends string>(stateValue: TSV) => this is State<TContext> & { value: TSV; }
+>TSV : TSV
 >stateValue : TSV
 >value : TSV
 }
@@= skipped -23, +24 lines =@@
 >'a.b' : "a.b"
 
         state;  // never
->state : never
+>state : State<{ foo: number; }> & { value: "a"; } & { value: "a.b"; }
 
         type T1 = Equals<typeof state, never>;  // true
 >T1 : true
->state : never
 
         type T2 = Equals<never, never>;  // true
 >T2 : true
