--- old.observableInferenceCanBeMade.types
+++ new.observableInferenceCanBeMade.types
@@= skipped -4, +4 lines =@@
 
 declare function of<T>(a: T): Observable<T>;
 >of : <T>(a: T) => Observable<T>
+>T : T
 >a : T
 
 declare function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;
 >from : <O extends ObservableInput<any>>(input: O) => Observable<ObservedValueOf<O>>
+>O : O
 >input : O
 
 type ObservedValueOf<O> = O extends ObservableInput<infer T> ? T : never;
 >ObservedValueOf : ObservedValueOf<O>
+>O : O
+>T : T
 
 interface Subscribable<T> {
+>Subscribable : Subscribable<T>
+>T : T
+
     subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): void;
->subscribe : (next?: (value: T) => void, error?: (error: any) => void, complete?: () => void) => void
->next : ((value: T) => void) | undefined
+>subscribe : (next?: (value: T) => void | undefined, error?: (error: any) => void | undefined, complete?: () => void | undefined) => void
+>next : (value: T) => void | undefined
 >value : T
->error : ((error: any) => void) | undefined
+>error : (error: any) => void | undefined
 >error : any
->complete : (() => void) | undefined
+>complete : () => void | undefined
 }
 type ObservableInput<T> = Subscribable<T> | Subscribable<never>;
 >ObservableInput : ObservableInput<T>
+>T : T
 
 
 declare class Observable<T> implements Subscribable<T> {
 >Observable : Observable<T>
+>T : T
 
     subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): void;
->subscribe : (next?: (value: T) => void, error?: (error: any) => void, complete?: () => void) => void
->next : ((value: T) => void) | undefined
+>subscribe : (next?: (value: T) => void | undefined, error?: (error: any) => void | undefined, complete?: () => void | undefined) => void
+>next : (value: T) => void | undefined
 >value : T
->error : ((error: any) => void) | undefined
+>error : (error: any) => void | undefined
 >error : any
->complete : (() => void) | undefined
+>complete : () => void | undefined
 }
 
 function asObservable(input: string | ObservableInput<string>): Observable<string> {
@@= skipped -41, +50 lines =@@
     return typeof input === 'string' ? of(input) : from(input)
 >typeof input === 'string' ? of(input) : from(input) : Observable<string>
 >typeof input === 'string' : boolean
->typeof input : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof input : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >input : string | ObservableInput<string>
 >'string' : "string"
 >of(input) : Observable<string>
