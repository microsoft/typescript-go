--- old.exportPrivateType.symbols
+++ new.exportPrivateType.symbols
@@= skipped -7, +7 lines =@@
 >C1 : Symbol(C1, Decl(exportPrivateType.ts, 0, 12))
 
         x: string;
->x : Symbol(C1.x, Decl(exportPrivateType.ts, 1, 14))
+>x : Symbol(x, Decl(exportPrivateType.ts, 1, 14))
 
         y: C1;
->y : Symbol(C1.y, Decl(exportPrivateType.ts, 2, 18))
+>y : Symbol(y, Decl(exportPrivateType.ts, 2, 18))
 >C1 : Symbol(C1, Decl(exportPrivateType.ts, 0, 12))
     }
  
@@= skipped -11, +11 lines =@@
 >C2 : Symbol(C2, Decl(exportPrivateType.ts, 4, 5))
 
         test() { return true; }
->test : Symbol(C2.test, Decl(exportPrivateType.ts, 6, 14))
+>test : Symbol(test, Decl(exportPrivateType.ts, 6, 14))
     }
  
     interface I1 {
@@= skipped -20, +20 lines =@@
 >I2 : Symbol(I2, Decl(exportPrivateType.ts, 13, 5))
 
         x: string;
->x : Symbol(I2.x, Decl(exportPrivateType.ts, 15, 18))
+>x : Symbol(x, Decl(exportPrivateType.ts, 15, 18))
 
         y: number;
->y : Symbol(I2.y, Decl(exportPrivateType.ts, 16, 18))
+>y : Symbol(y, Decl(exportPrivateType.ts, 16, 18))
     }
  
     // None of the types are exported, so per section 10.3, should all be errors
@@= skipped -26, +26 lines =@@
  
 var y = foo.g; // Exported variable 'y' has or is using private type 'foo.C2'.
 >y : Symbol(y, Decl(exportPrivateType.ts, 27, 3))
->foo.g : Symbol(foo.g, Decl(exportPrivateType.ts, 23, 14))
+>foo.g : Symbol(g, Decl(exportPrivateType.ts, 23, 14))
 >foo : Symbol(foo, Decl(exportPrivateType.ts, 0, 0))
->g : Symbol(foo.g, Decl(exportPrivateType.ts, 23, 14))
+>g : Symbol(g, Decl(exportPrivateType.ts, 23, 14))
 
 
