--- old.arrayFrom.symbols
+++ new.arrayFrom.symbols
@@ -8,14 +8,14 @@
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
 
   a: string;
->a : Symbol(A.a, Decl(arrayFrom.ts, 3, 13))
+>a : Symbol(a, Decl(arrayFrom.ts, 3, 13))
 }
 
 interface B {
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
 
   b: string;
->b : Symbol(B.b, Decl(arrayFrom.ts, 7, 13))
+>b : Symbol(b, Decl(arrayFrom.ts, 7, 13))
 }
 
 const inputA: A[] = [];
@@ -28,7 +28,7 @@
 
 const inputALike: ArrayLike<A> = { length: 0 };
 >inputALike : Symbol(inputALike, Decl(arrayFrom.ts, 13, 5))
->ArrayLike : Symbol(ArrayLike, Decl(lib.es5.d.ts, --, --))
+>ArrayLike : Symbol(ArrayLike)
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
 >length : Symbol(length, Decl(arrayFrom.ts, 13, 34))
 
@@ -40,43 +40,26 @@
 
 const inputASet = new Set<A>();
 >inputASet : Symbol(inputASet, Decl(arrayFrom.ts, 15, 5))
->Set : Symbol(Set, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
 
 const result1: A[] = Array.from(inputA);
 >result1 : Symbol(result1, Decl(arrayFrom.ts, 17, 5))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >inputA : Symbol(inputA, Decl(arrayFrom.ts, 11, 5))
 
 const result2: A[] = Array.from(inputA.values());
 >result2 : Symbol(result2, Decl(arrayFrom.ts, 18, 5))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->inputA.values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
 >inputA : Symbol(inputA, Decl(arrayFrom.ts, 11, 5))
->values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const result3: B[] = Array.from(inputA.values()); // expect error
 >result3 : Symbol(result3, Decl(arrayFrom.ts, 19, 5))
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->inputA.values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
 >inputA : Symbol(inputA, Decl(arrayFrom.ts, 11, 5))
->values : Symbol(Array.values, Decl(lib.es2015.iterable.d.ts, --, --))
 
 const result4: A[] = Array.from(inputB, ({ b }): A => ({ a: b }));
 >result4 : Symbol(result4, Decl(arrayFrom.ts, 20, 5))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >inputB : Symbol(inputB, Decl(arrayFrom.ts, 12, 5))
 >b : Symbol(b, Decl(arrayFrom.ts, 20, 42))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
@@ -86,25 +69,16 @@
 const result5: A[] = Array.from(inputALike);
 >result5 : Symbol(result5, Decl(arrayFrom.ts, 21, 5))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >inputALike : Symbol(inputALike, Decl(arrayFrom.ts, 13, 5))
 
 const result6: B[] = Array.from(inputALike); // expect error
 >result6 : Symbol(result6, Decl(arrayFrom.ts, 22, 5))
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >inputALike : Symbol(inputALike, Decl(arrayFrom.ts, 13, 5))
 
 const result7: B[] = Array.from(inputALike, ({ a }): B => ({ b: a }));
 >result7 : Symbol(result7, Decl(arrayFrom.ts, 23, 5))
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >inputALike : Symbol(inputALike, Decl(arrayFrom.ts, 13, 5))
 >a : Symbol(a, Decl(arrayFrom.ts, 23, 46))
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
@@ -114,17 +88,11 @@
 const result8: A[] = Array.from(inputARand);
 >result8 : Symbol(result8, Decl(arrayFrom.ts, 24, 5))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >inputARand : Symbol(inputARand, Decl(arrayFrom.ts, 14, 5))
 
 const result9: B[] = Array.from(inputARand, ({ a }): B => ({ b: a }));
 >result9 : Symbol(result9, Decl(arrayFrom.ts, 25, 5))
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >inputARand : Symbol(inputARand, Decl(arrayFrom.ts, 14, 5))
 >a : Symbol(a, Decl(arrayFrom.ts, 25, 46))
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
@@ -134,18 +102,11 @@
 const result10: A[] = Array.from(new Set<A>());
 >result10 : Symbol(result10, Decl(arrayFrom.ts, 26, 5))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Set : Symbol(Set, Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.collection.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
 >A : Symbol(A, Decl(arrayFrom.ts, 0, 0))
 
 const result11: B[] = Array.from(inputASet, ({ a }): B => ({ b: a }));
 >result11 : Symbol(result11, Decl(arrayFrom.ts, 27, 5))
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
->Array.from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
->Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->from : Symbol(ArrayConstructor.from, Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
 >inputASet : Symbol(inputASet, Decl(arrayFrom.ts, 15, 5))
 >a : Symbol(a, Decl(arrayFrom.ts, 27, 46))
 >B : Symbol(B, Decl(arrayFrom.ts, 5, 1))
@@ -159,16 +120,13 @@
 >getEither : Symbol(getEither, Decl(arrayFrom.ts, 27, 70))
 >T : Symbol(T, Decl(arrayFrom.ts, 32, 19))
 >in1 : Symbol(in1, Decl(arrayFrom.ts, 32, 23))
->Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))
+>Iterable : Symbol(Iterable)
 >T : Symbol(T, Decl(arrayFrom.ts, 32, 19))
 >in2 : Symbol(in2, Decl(arrayFrom.ts, 32, 40))
->ArrayLike : Symbol(ArrayLike, Decl(lib.es5.d.ts, --, --))
+>ArrayLike : Symbol(ArrayLike)
 >T : Symbol(T, Decl(arrayFrom.ts, 32, 19))
 
   return Math.random() > 0.5 ? in1 : in2;
->Math.random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
->Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->random : Symbol(Math.random, Decl(lib.es5.d.ts, --, --))
 >in1 : Symbol(in1, Decl(arrayFrom.ts, 32, 23))
 >in2 : Symbol(in2, Decl(arrayFrom.ts, 32, 40))
 }
