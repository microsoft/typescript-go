--- old.inferTypeConstraintInstantiationCircularity.types
+++ new.inferTypeConstraintInstantiationCircularity.types
@@= skipped -2, +2 lines =@@
 === inferTypeConstraintInstantiationCircularity.ts ===
 type AMappedType<T> = { [KeyType in keyof T]: number };
 >AMappedType : AMappedType<T>
+>T : T
+>KeyType : KeyType
 
 type HasM = {
 >HasM : HasM
@@= skipped -12, +14 lines =@@
 // Simplified repro from #48059
 
 interface X1<
+>X1 : X1<T, Output>
+
   T extends HasM,
+>T : T
+
   Output = AMappedType<{ s: number; } & { [k in keyof T]: number; }>
+>Output : Output
 >s : number
+>k : k
 
 > {
   tee: T;
@@= skipped -14, +20 lines =@@
 
 type F1<T> = T extends X1<infer U> ? U : never;
 >F1 : F1<T>
+>T : T
+>U : U
 
 // With default inlined
 
 interface X2<
+>X2 : X2<T, Output>
+
   T extends HasM,
+>T : T
+
   Output
+>Output : Output
+
 > {
   tee: T;
 >tee : T
@@= skipped -16, +24 lines =@@
 
 type F2<T> = T extends X2<infer U, AMappedType<{ s: number; } & { [k in keyof (infer U)]: number; }>> ? U : never;
 >F2 : F2<T>
+>T : T
+>U : U
 >s : number
+>k : k
+>U : U
 
 // Original repro
 
 type Simplify<T> = {[KeyType in keyof T]: T[KeyType]};
 >Simplify : Simplify<T>
+>T : T
+>KeyType : KeyType
 
 type optionalKeys<T extends object> = {
 >optionalKeys : optionalKeys<T>
+>T : T
 
     [k in keyof T]: undefined extends T[k] ? k : never;
+>k : k
+
 }[keyof T];
 
 type requiredKeys<T extends object> = Exclude<keyof T, optionalKeys<T>>;
 >requiredKeys : requiredKeys<T>
+>T : T
 
 export type addQuestionMarks<T extends object> = {
 >addQuestionMarks : addQuestionMarks<T>
+>T : T
 
     [k in optionalKeys<T>]?: T[k];
+>k : k
+
 } & {
     [k in requiredKeys<T>]: T[k];
+>k : k
+
 };
 
 type ZodRawShape = {
@@= skipped -33, +48 lines =@@
 };
 
 interface ZodType<Output> {
+>ZodType : ZodType<Output>
+>Output : Output
+
   _type: Output;
 >_type : Output
 }
 
 interface ZodObject<
+>ZodObject : ZodObject<T, Output>
+
   T extends ZodRawShape,
+>T : T
+
   Output = Simplify<
+>Output : Output
     {
       [k in optionalKeys<T>]?: T[k];
+>k : k
+
     } & {
       [k in requiredKeys<T>]: T[k];
+>k : k
     }
   >
 > extends ZodType<Output> {
@@= skipped -20, +31 lines =@@
 
 type MyObject<T> = T extends ZodObject<infer U>
 >MyObject : MyObject<T>
+>T : T
+>U : U
 
   ? U extends ZodRawShape
     ? U
@@= skipped -10, +12 lines =@@
 
 type Cell<Value extends BaseValue = any, BaseValue = unknown> = {
 >Cell : Cell<Value, BaseValue>
+>Value : Value
+>BaseValue : BaseValue
 
   id: string
 >id : string
@@= skipped -7, +9 lines =@@
 
 type Items<Type extends Cell = Cell> = {
 >Items : Items<Type>
+>Type : Type
 
   type: Type
 >type : Type
@@= skipped -10, +11 lines =@@
 
 type InferIOItemToJSType<T extends Items> =
 >InferIOItemToJSType : InferIOItemToJSType<T>
+>T : T
 
   T extends { type: infer U }
 >type : U
+>U : U
 
     ? U extends Cell<infer V/**, infer _ or unknown, or any valid type **/>
+>V : V
+
       ? V
       : never
     : never
