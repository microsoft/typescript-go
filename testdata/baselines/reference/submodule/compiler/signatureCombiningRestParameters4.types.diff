--- old.signatureCombiningRestParameters4.types
+++ new.signatureCombiningRestParameters4.types
@@= skipped -21, +21 lines =@@

 interface NodeConfig<Options = any> {
   extendMarkSchema?:
->extendMarkSchema : ((this: { name: string; options: Options; }, extension: Node) => Record<string, any>) | null | undefined
+>extendMarkSchema : ((this: { name: string; options: Options; }, extension: Node<any>) => Record<string, any>) | null | undefined

     | ((
         this: {
@@= skipped -32, +32 lines =@@

 interface MarkConfig<Options = any> {
   extendMarkSchema?:
->extendMarkSchema : ((this: { name: string; options: Options; }, extension: Mark) => Record<string, any>) | null | undefined
+>extendMarkSchema : ((this: { name: string; options: Options; }, extension: Mark<any>) => Record<string, any>) | null | undefined

     | ((
         this: {
@@= skipped -50, +50 lines =@@
 ): RemoveThis<T>;

 const extendMarkSchema = getExtensionField<AnyConfig["extendMarkSchema"]>(
->extendMarkSchema : ((extension: Node<any>) => Record<string, any>) | ((extension: Mark<any>) => Record<string, any>) | null | undefined
->getExtensionField<AnyConfig["extendMarkSchema"]>(  e,  "extendMarkSchema",) : ((extension: Node<any>) => Record<string, any>) | ((extension: Mark<any>) => Record<string, any>) | null | undefined
+>extendMarkSchema : ((...args: [extension: Node<any>]) => Record<string, any>) | ((...args: [extension: Mark<any>]) => Record<string, any>) | null | undefined
+>getExtensionField<AnyConfig["extendMarkSchema"]>(  e,  "extendMarkSchema",) : ((...args: [extension: Node<any>]) => Record<string, any>) | ((...args: [extension: Mark<any>]) => Record<string, any>) | null | undefined
 >getExtensionField : <T = any>(extension: AnyExtension, field: string) => RemoveThis<T>

   e,
@@= skipped -16, +16 lines =@@
 >extension : Mark<any>

 if (extendMarkSchema) {
->extendMarkSchema : ((extension: Node<any>) => Record<string, any>) | ((extension: Mark<any>) => Record<string, any>) | null | undefined
+>extendMarkSchema : ((...args: [extension: Node<any>]) => Record<string, any>) | ((...args: [extension: Mark<any>]) => Record<string, any>) | null | undefined

   extendMarkSchema(extension); // error
 >extendMarkSchema(extension) : Record<string, any>
->extendMarkSchema : ((extension: Node<any>) => Record<string, any>) | ((extension: Mark<any>) => Record<string, any>)
+>extendMarkSchema : ((...args: [extension: Node<any>]) => Record<string, any>) | ((...args: [extension: Mark<any>]) => Record<string, any>)
 >extension : Mark<any>
 }
