--- old.fillInMissingTypeArgsOnJSConstructCalls.symbols
+++ new.fillInMissingTypeArgsOnJSConstructCalls.symbols
@@= skipped -1, +1 lines =@@
 
 === BaseA.js ===
 export default class BaseA {
->BaseA : Symbol(BaseA, Decl(BaseA.js, 0, 0))
+>BaseA : Symbol(default, Decl(BaseA.js, 0, 0))
 }
 === SubA.js ===
 import BaseA from './BaseA';
 >BaseA : Symbol(BaseA, Decl(SubA.js, 0, 6))
 
 export default class SubA extends BaseA {
->SubA : Symbol(SubA, Decl(SubA.js, 0, 28))
+>SubA : Symbol(default, Decl(SubA.js, 0, 28))
 >BaseA : Symbol(BaseA, Decl(SubA.js, 0, 6))
 }
 === BaseB.js ===
@@= skipped -15, +15 lines =@@
 >BaseA : Symbol(BaseA, Decl(BaseB.js, 0, 6))
 
 export default class B<T: BaseA> {
->B : Symbol(B, Decl(BaseB.js, 0, 28))
+>B : Symbol(default, Decl(BaseB.js, 0, 28))
 >T : Symbol(T, Decl(BaseB.js, 1, 23))
 >BaseA : Symbol(BaseA, Decl(BaseB.js, 1, 25))
 
     _AClass: Class<T>;
->_AClass : Symbol(B._AClass, Decl(BaseB.js, 1, 34))
+>_AClass : Symbol(_AClass, Decl(BaseB.js, 1, 34))
 >Class : Symbol(Class)
 >T : Symbol(T, Decl(BaseB.js, 1, 23))
 
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(BaseB.js, 1, 23))
 
         this._AClass = AClass;
->this._AClass : Symbol(B._AClass, Decl(BaseB.js, 1, 34))
->this : Symbol(B, Decl(BaseB.js, 0, 28))
->_AClass : Symbol(B._AClass, Decl(BaseB.js, 1, 34))
+>this._AClass : Symbol(_AClass, Decl(BaseB.js, 1, 34))
+>this : Symbol(default, Decl(BaseB.js, 0, 28))
+>_AClass : Symbol(_AClass, Decl(BaseB.js, 1, 34))
 >AClass : Symbol(AClass, Decl(BaseB.js, 3, 16))
     }
 }
@@= skipped -14, +14 lines =@@
 >BaseB : Symbol(BaseB, Decl(SubB.js, 1, 6))
 
 export default class SubB extends BaseB<SubA> {
->SubB : Symbol(SubB, Decl(SubB.js, 1, 28))
+>SubB : Symbol(default, Decl(SubB.js, 1, 28))
 >BaseB : Symbol(BaseB, Decl(SubB.js, 1, 6))
 >SubA : Symbol(SubA, Decl(SubB.js, 0, 6))
 
     constructor() {
         super(SubA);
->super : Symbol(BaseB, Decl(BaseB.js, 0, 28))
 >SubA : Symbol(SubA, Decl(SubB.js, 0, 6))
     }
 }
