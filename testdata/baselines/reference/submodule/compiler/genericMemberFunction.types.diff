--- old.genericMemberFunction.types
+++ new.genericMemberFunction.types
@@= skipped -2, +2 lines =@@
 === genericMemberFunction.ts ===
 export class BuildError<A, B, C>{
 >BuildError : BuildError<A, B, C>
+>A : A
+>B : B
+>C : C
 
   public parent<A, B extends A, C>(): FileWithErrors<A, B, C> {
 >parent : <A, B extends A, C>() => FileWithErrors<A, B, C>
+>A : A
+>B : B
+>C : C
 
     return undefined;
 >undefined : undefined
@@= skipped -10, +16 lines =@@
 }
 export class FileWithErrors<A, B, C>{
 >FileWithErrors : FileWithErrors<A, B, C>
+>A : A
+>B : B
+>C : C
 
   public errors<A, B extends A, C>(): BuildError<A, B, C>[] {
 >errors : <A, B extends A, C>() => BuildError<A, B, C>[]
+>A : A
+>B : B
+>C : C
 
     return undefined;
 >undefined : undefined
   }
   public parent<A, B extends A, C>(): BuildResult<A, B, C> {
 >parent : <A, B extends A, C>() => BuildResult<A, B, C>
+>A : A
+>B : B
+>C : C
 
     return undefined;
 >undefined : undefined
@@= skipped -16, +25 lines =@@
 }
 export class BuildResult<A, B, C>{
 >BuildResult : BuildResult<A, B, C>
+>A : A
+>B : B
+>C : C
 
   public merge<A, B extends A, C>(other: BuildResult<A, B, C>): void {
 >merge : <A, B extends A, C>(other: BuildResult<A, B, C>) => void
+>A : A
+>B : B
+>C : C
 >other : BuildResult<A, B, C>
 
     a.b.c.d.e.f.g = 0;
@@= skipped -27, +33 lines =@@
 >removedFiles.forEach : any
 >removedFiles : any
 >forEach : any
-><A, B extends A, C>(each: FileWithErrors<A, B, C>) => {      this.removeFile(each);    } : <A_1, B_1 extends A_1, C_1>(each: FileWithErrors<A_1, B_1, C_1>) => void
+><A, B extends A, C>(each: FileWithErrors<A, B, C>) => {      this.removeFile(each);    } : <A, B extends A, C>(each: FileWithErrors<A, B, C>) => void
+>A : A
+>B : B
+>C : C
 >each : FileWithErrors<A, B, C>
 
       this.removeFile(each);
