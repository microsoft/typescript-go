--- old.tailRecursiveConditionalTypes.types
+++ new.tailRecursiveConditionalTypes.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/tailRecursiveConditionalTypes.ts] ////
 
-=== Performance Stats ===
-Type Count: 25,000
-Instantiation count: 25,000
-Symbol count: 50,000
-
 === tailRecursiveConditionalTypes.ts ===
 type Trim<S extends string> =
 >Trim : Trim<S>
+>S : S
 
     S extends ` ${infer T}` ? Trim<T> :
+>T : T
+
     S extends `${infer T} ` ? Trim<T> :
+>T : T
+
     S;
 
 type T10 = Trim<'                                                                                                                                                hello '>;
@@= skipped -20, +20 lines =@@
 
 type GetChars<S> = GetCharsRec<S, never>;
 >GetChars : GetChars<S>
+>S : S
 
 type GetCharsRec<S, Acc> =
 >GetCharsRec : GetCharsRec<S, Acc>
+>S : S
+>Acc : Acc
 
     S extends `${infer Char}${infer Rest}` ? GetCharsRec<Rest, Char | Acc> : Acc;
+>Char : Char
+>Rest : Rest
 
 type T20 = GetChars<'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'>;
->T20 : "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
+>T20 : "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
 
 type Reverse<T> = any[] extends T ? T : ReverseRec<T, []>;
 >Reverse : Reverse<T>
+>T : T
 
 type ReverseRec<T, Acc extends unknown[]> =
 >ReverseRec : ReverseRec<T, Acc>
+>T : T
+>Acc : Acc
 
     T extends [infer Head, ...infer Tail] ? ReverseRec<Tail, [Head, ...Acc]> : Acc;
+>Head : Head
+>Tail : Tail
 
 type T30 = Reverse<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]>;
 >T30 : [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
@@= skipped -25, +35 lines =@@
 
 type TupleOf<T, N extends number> = number extends N ? T[] : TupleOfRec<T, N, []>;
 >TupleOf : TupleOf<T, N>
+>T : T
+>N : N
 
 type TupleOfRec<T, N extends number, Acc extends unknown[]> =
 >TupleOfRec : TupleOfRec<T, N, Acc>
+>T : T
+>N : N
+>Acc : Acc
 
     Acc["length"] extends N ? Acc : TupleOfRec<T, N, [T, ...Acc]>;
 
