//// [tests/cases/compiler/varianceCallbacksAndIndexedAccesses.ts] ////

=== varianceCallbacksAndIndexedAccesses.ts ===
type Source = {
>Source : Source

    <K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
>K : K
>type : K
>listener : (ev: WindowEventMap[K]) => any
>this : Window
>ev : WindowEventMap[K]
>options : boolean | AddEventListenerOptions

  (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
>type : string
>listener : EventListenerOrEventListenerObject
>options : boolean | AddEventListenerOptions
}

interface Action1<T> {
>Action1 : Action1<T>
>T : T

    (arg: T): void;
>arg : T
}
interface MessageEventLike<T> {
>MessageEventLike : MessageEventLike<T>
>T : T

    source: WindowLike<T>;
>source : WindowLike<T>

    origin: string;
>origin : string

    data: T;
>data : T
}
interface PostMessageObject<T> {
>PostMessageObject : PostMessageObject<T>
>T : T

    postMessage(message: T, host: string): void;
>postMessage : (message: T, host: string) => void
>message : T
>host : string
}
interface WindowLike<T> extends PostMessageObject<T> {
>WindowLike : WindowLike<T>
>T : T

    addEventListener(type: "message", handler: Action1<MessageEventLike<T>>): void;
>addEventListener : { (type: "message", handler: Action1<MessageEventLike<T>>): void; (type: string, handler: Action1<any>): void; }
>type : "message"
>handler : Action1<MessageEventLike<T>>

    addEventListener(type: string, handler: Action1<any>): void;
>addEventListener : { (type: "message", handler: Action1<MessageEventLike<T>>): void; (type: string, handler: Action1<any>): void; }
>type : string
>handler : Action1<any>

    removeEventListener(type: "message", handler: Action1<MessageEventLike<T>>): void;
>removeEventListener : { (type: "message", handler: Action1<MessageEventLike<T>>): void; (type: string, handler: Action1<any>): void; }
>type : "message"
>handler : Action1<MessageEventLike<T>>

    removeEventListener(type: string, handler: Action1<any>): void;
>removeEventListener : { (type: "message", handler: Action1<MessageEventLike<T>>): void; (type: string, handler: Action1<any>): void; }
>type : string
>handler : Action1<any>
}
type Target = {
>Target : Target

    (type: "message", handler: Action1<MessageEventLike<any>>): void;
>type : "message"
>handler : Action1<MessageEventLike<any>>

    (type: string, handler: Action1<any>): void;
>type : string
>handler : Action1<any>

};

function f1(s: Source, t: Target) {
>f1 : (s: Source, t: Target) => void
>s : Source
>t : Target

    t = s;
>t = s : Source
>t : Target
>s : Source
}
