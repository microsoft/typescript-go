--- old.isolatedModulesGlobalNamespacesAndEnums.symbols
+++ new.isolatedModulesGlobalNamespacesAndEnums.symbols
@@= skipped -30, +30 lines =@@
 === enum1.ts ===
 enum Enum { A, B, C }
 >Enum : Symbol(Enum, Decl(enum1.ts, 0, 0), Decl(enum1.ts, 0, 21), Decl(enum2.ts, 0, 0), Decl(enum2.ts, 5, 1))
->A : Symbol(Enum.A, Decl(enum1.ts, 0, 11))
->B : Symbol(Enum.B, Decl(enum1.ts, 0, 14))
->C : Symbol(Enum.C, Decl(enum1.ts, 0, 17))
+>A : Symbol(A, Decl(enum1.ts, 0, 11))
+>B : Symbol(B, Decl(enum1.ts, 0, 14))
+>C : Symbol(C, Decl(enum1.ts, 0, 17))
 
 declare enum Enum { X = 1_000_000 }
 >Enum : Symbol(Enum, Decl(enum1.ts, 0, 0), Decl(enum1.ts, 0, 21), Decl(enum2.ts, 0, 0), Decl(enum2.ts, 5, 1))
->X : Symbol(Enum.X, Decl(enum1.ts, 1, 19))
+>X : Symbol(X, Decl(enum1.ts, 1, 19))
 
 const d = 'd';
 >d : Symbol(d, Decl(enum1.ts, 2, 5))
@@= skipped -16, +16 lines =@@
 >Enum : Symbol(Enum, Decl(enum1.ts, 0, 0), Decl(enum1.ts, 0, 21), Decl(enum2.ts, 0, 0), Decl(enum2.ts, 5, 1))
 
     D = d,
->D : Symbol(Enum.D, Decl(enum2.ts, 0, 11))
+>D : Symbol(D, Decl(enum2.ts, 0, 11))
 >d : Symbol(d, Decl(enum1.ts, 2, 5))
 
     E = A, // error
->E : Symbol(Enum.E, Decl(enum2.ts, 1, 10))
->A : Symbol(Enum.A, Decl(enum1.ts, 0, 11))
+>E : Symbol(E, Decl(enum2.ts, 1, 10))
+>A : Symbol(A, Decl(enum1.ts, 0, 11))
 
     Y = X, // error
->Y : Symbol(Enum.Y, Decl(enum2.ts, 2, 10))
->X : Symbol(Enum.X, Decl(enum1.ts, 1, 19))
+>Y : Symbol(Y, Decl(enum2.ts, 2, 10))
+>X : Symbol(X, Decl(enum1.ts, 1, 19))
 
     Z = Enum.A
->Z : Symbol(Enum.Z, Decl(enum2.ts, 3, 10))
->Enum.A : Symbol(Enum.A, Decl(enum1.ts, 0, 11))
+>Z : Symbol(Z, Decl(enum2.ts, 3, 10))
+>Enum.A : Symbol(A, Decl(enum1.ts, 0, 11))
 >Enum : Symbol(Enum, Decl(enum1.ts, 0, 0), Decl(enum1.ts, 0, 21), Decl(enum2.ts, 0, 0), Decl(enum2.ts, 5, 1))
->A : Symbol(Enum.A, Decl(enum1.ts, 0, 11))
+>A : Symbol(A, Decl(enum1.ts, 0, 11))
 }
 
 declare enum Enum {
 >Enum : Symbol(Enum, Decl(enum1.ts, 0, 0), Decl(enum1.ts, 0, 21), Decl(enum2.ts, 0, 0), Decl(enum2.ts, 5, 1))
 
     F = A
->F : Symbol(Enum.F, Decl(enum2.ts, 7, 19))
->A : Symbol(Enum.A, Decl(enum1.ts, 0, 11))
+>F : Symbol(F, Decl(enum2.ts, 7, 19))
+>A : Symbol(A, Decl(enum1.ts, 0, 11))
 }
