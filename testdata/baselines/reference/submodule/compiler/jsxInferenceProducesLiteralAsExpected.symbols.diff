--- old.jsxInferenceProducesLiteralAsExpected.symbols
+++ new.jsxInferenceProducesLiteralAsExpected.symbols
@@= skipped -10, +10 lines =@@
 >T : Symbol(T, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 1, 27))
 >T : Symbol(T, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 1, 27))
 >K : Symbol(K, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 1, 35))
->Function : Symbol(Function, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
+>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >K : Symbol(K, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 1, 35))
 >T : Symbol(T, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 1, 27))
 
@@= skipped -8, +8 lines =@@
 >TestObject : Symbol(TestObject, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 1, 95))
 
     a: string = '';
->a : Symbol(TestObject.a, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 2, 18))
+>a : Symbol(a, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 2, 18))
 
     b: number = 1;
->b : Symbol(TestObject.b, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 3, 19))
+>b : Symbol(b, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 3, 19))
 
     c: () => void = () => { };
->c : Symbol(TestObject.c, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 4, 18))
+>c : Symbol(c, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 4, 18))
 }
 interface TestProps<T> {
 >TestProps : Symbol(TestProps, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 6, 1))
 >T : Symbol(T, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 7, 20))
 
     model: T;
->model : Symbol(TestProps.model, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 7, 24))
+>model : Symbol(model, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 7, 24))
 >T : Symbol(T, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 7, 20))
 
     foo: FunctionPropertyNames<T>;
->foo : Symbol(TestProps.foo, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 8, 13))
+>foo : Symbol(foo, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 8, 13))
 >FunctionPropertyNames : Symbol(FunctionPropertyNames, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 0, 32))
 >T : Symbol(T, Decl(jsxInferenceProducesLiteralAsExpected.tsx, 7, 20))
 }
