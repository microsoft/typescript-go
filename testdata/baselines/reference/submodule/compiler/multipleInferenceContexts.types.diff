--- old.multipleInferenceContexts.types
+++ new.multipleInferenceContexts.types
@@= skipped -2, +2 lines =@@
 === multipleInferenceContexts.ts ===
 type ConstructorOptions<Data> =
 >ConstructorOptions : ConstructorOptions<Data>
+>Data : Data
 
     & ComponentOptionsProperties<Data>
     & ThisType<Instance<Data>>;
 
 interface ComponentOptionsProperties<Data> {
+>ComponentOptionsProperties : ComponentOptionsProperties<Data>
+>Data : Data
+
     data: Data;
 >data : Data
 
@@= skipped -13, +17 lines =@@
 }
 
 interface Instance<Data> {
+>Instance : Instance<Data>
+>Data : Data
+
     get<K extends keyof Data>(name: K): unknown;
 >get : <K extends keyof Data>(name: K) => unknown
+>K : K
 >name : K
 }
 
 declare var Moon: {
->Moon : <Data>(options?: ConstructorOptions<Data>) => Instance<Data>
+>Moon : <Data>(options?: ConstructorOptions<Data> | undefined) => Instance<Data>
 
     <Data>(options?: ConstructorOptions<Data>): Instance<Data>;
+>Data : Data
 >options : ConstructorOptions<Data> | undefined
 
 };
@@= skipped -16, +21 lines =@@
 const r2 = Moon({
 >r2 : Instance<{ msg: string; }>
 >Moon({    data: { msg: "" },    render() {        const h = (x: unknown) => x;        return h(this.get("msg"));    },}) : Instance<{ msg: string; }>
->Moon : <Data>(options?: ConstructorOptions<Data>) => Instance<Data>
->{    data: { msg: "" },    render() {        const h = (x: unknown) => x;        return h(this.get("msg"));    },} : { data: { msg: string; }; render(): unknown; }
+>Moon : <Data>(options?: ConstructorOptions<Data> | undefined) => Instance<Data>
+>{    data: { msg: "" },    render() {        const h = (x: unknown) => x;        return h(this.get("msg"));    },} : { data: { msg: string; }; render: () => unknown; }
 
     data: { msg: "" },
 >data : { msg: string; }
