--- old.genericsWithoutTypeParameters1.types
+++ new.genericsWithoutTypeParameters1.types
@@= skipped -2, +2 lines =@@
 === genericsWithoutTypeParameters1.ts ===
 class C<T> {
 >C : C<T>
+>T : T
 
     foo(): T { return null }
 >foo : () => T
 }
 
 interface I<T> {
+>I : I<T>
+>T : T
+
     bar(): T;
 >bar : () => T
 }
@@= skipped -23, +27 lines =@@
 >i2 : I<any>
 
 function foo(x: C, y: I) { }
->foo : (x: C, y: I) => void
+>foo : (x: any, y: any) => void
 >x : any
 >y : any
 
 function foo2(x: C<I>, y: I<C>) { }
->foo2 : (x: C<I>, y: I<C>) => void
+>foo2 : (x: C<any>, y: I<any>) => void
 >x : C<any>
 >y : I<any>
 
 var x: { a: C } = { a: new C<number>() };
->x : { a: C; }
+>x : { a: any; }
 >a : any
 >{ a: new C<number>() } : { a: C<number>; }
 >a : C<number>
@@= skipped -18, +18 lines =@@
 >C : typeof C
 
 var x2: { a: I } = { a: { bar() { return 1 } } };
->x2 : { a: I; }
+>x2 : { a: any; }
 >a : any
->{ a: { bar() { return 1 } } } : { a: { bar(): number; }; }
->a : { bar(): number; }
->{ bar() { return 1 } } : { bar(): number; }
+>{ a: { bar() { return 1 } } } : { a: { bar: () => number; }; }
+>a : { bar: () => number; }
+>{ bar() { return 1 } } : { bar: () => number; }
 >bar : () => number
 >1 : 1
 
 class D<T> {
 >D : D<T>
+>T : T
 
     x: C;
 >x : any
@@= skipped -19, +20 lines =@@
 }
 
 interface J<T> {
+>J : J<T>
+>T : T
+
     x: I;
 >x : any
 
@@= skipped -9, +12 lines =@@
 
 class A<T> { }
 >A : A<T>
+>T : T
 
 function f<T>(x: T): A {
->f : <T>(x: T) => A
+>f : <T>(x: T) => any
+>T : T
 >x : T
 
     return null;
