--- old.instantiateContextualTypes.symbols
+++ new.instantiateContextualTypes.symbols
@@= skipped -7, +7 lines =@@
 >a : Symbol(a, Decl(instantiateContextualTypes.ts, 2, 19))
 
     value: a;
->value : Symbol(A.value, Decl(instantiateContextualTypes.ts, 2, 23))
+>value : Symbol(value, Decl(instantiateContextualTypes.ts, 2, 23))
 >a : Symbol(a, Decl(instantiateContextualTypes.ts, 2, 19))
 }
 
@@= skipped -23, +23 lines =@@
 >fn : Symbol(fn, Decl(instantiateContextualTypes.ts, 4, 1))
 >handlers : Symbol(handlers, Decl(instantiateContextualTypes.ts, 9, 11))
 >value : Symbol(value, Decl(instantiateContextualTypes.ts, 10, 12))
->alert : Symbol(alert, Decl(lib.dom.d.ts, --, --))
 >value : Symbol(value, Decl(instantiateContextualTypes.ts, 10, 12))
 
 // #21382
@@= skipped -10, +9 lines =@@
 >T : Symbol(T, Decl(instantiateContextualTypes.ts, 14, 20))
 
   initialValues: T;
->initialValues : Symbol(BaseProps.initialValues, Decl(instantiateContextualTypes.ts, 14, 24))
+>initialValues : Symbol(initialValues, Decl(instantiateContextualTypes.ts, 14, 24))
 >T : Symbol(T, Decl(instantiateContextualTypes.ts, 14, 20))
 
   nextValues: (cur: T) => T;
->nextValues : Symbol(BaseProps.nextValues, Decl(instantiateContextualTypes.ts, 15, 19))
+>nextValues : Symbol(nextValues, Decl(instantiateContextualTypes.ts, 15, 19))
 >cur : Symbol(cur, Decl(instantiateContextualTypes.ts, 16, 15))
 >T : Symbol(T, Decl(instantiateContextualTypes.ts, 14, 20))
 >T : Symbol(T, Decl(instantiateContextualTypes.ts, 14, 20))
@@= skipped -14, +14 lines =@@
 >P : Symbol(P, Decl(instantiateContextualTypes.ts, 18, 24))
 >props : Symbol(props, Decl(instantiateContextualTypes.ts, 18, 41))
 >P : Symbol(P, Decl(instantiateContextualTypes.ts, 18, 24))
->props : Symbol(Component.props, Decl(instantiateContextualTypes.ts, 18, 51))
+>props : Symbol(props, Decl(instantiateContextualTypes.ts, 18, 51))
 >P : Symbol(P, Decl(instantiateContextualTypes.ts, 18, 24))
 
 declare class GenericComponent<Props = {}, Values = object>
@@= skipped -15, +15 lines =@@
 >Values : Symbol(Values, Decl(instantiateContextualTypes.ts, 19, 42))
 
   iv: Values;
->iv : Symbol(GenericComponent.iv, Decl(instantiateContextualTypes.ts, 20, 50))
+>iv : Symbol(iv, Decl(instantiateContextualTypes.ts, 20, 50))
 >Values : Symbol(Values, Decl(instantiateContextualTypes.ts, 19, 42))
 }
 
@@= skipped -58, +58 lines =@@
 >P : Symbol(P, Decl(instantiateContextualTypes.ts, 39, 26))
 
     actionType: ActionType<P>
->actionType : Symbol(ActionHandler.actionType, Decl(instantiateContextualTypes.ts, 39, 31))
+>actionType : Symbol(actionType, Decl(instantiateContextualTypes.ts, 39, 31))
 >ActionType : Symbol(ActionType, Decl(instantiateContextualTypes.ts, 29, 33))
 >P : Symbol(P, Decl(instantiateContextualTypes.ts, 39, 26))
 
     handler: Handler<S, P>
->handler : Symbol(ActionHandler.handler, Decl(instantiateContextualTypes.ts, 40, 29))
+>handler : Symbol(handler, Decl(instantiateContextualTypes.ts, 40, 29))
 >Handler : Symbol(Handler, Decl(instantiateContextualTypes.ts, 33, 67))
 >S : Symbol(S, Decl(instantiateContextualTypes.ts, 39, 24))
 >P : Symbol(P, Decl(instantiateContextualTypes.ts, 39, 26))
@@= skipped -45, +45 lines =@@
 >AppState : Symbol(AppState, Decl(instantiateContextualTypes.ts, 49, 10))
 
     dummy: string
->dummy : Symbol(AppState.dummy, Decl(instantiateContextualTypes.ts, 51, 20))
+>dummy : Symbol(dummy, Decl(instantiateContextualTypes.ts, 51, 20))
 }
 
 const defaultState: AppState = {
@@= skipped -245, +245 lines =@@
 >Interesting : Symbol(Interesting, Decl(instantiateContextualTypes.ts, 142, 36))
 
 	public compiles = () : Promise<DooDad> => {
->compiles : Symbol(Interesting.compiles, Decl(instantiateContextualTypes.ts, 144, 19))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>compiles : Symbol(compiles, Decl(instantiateContextualTypes.ts, 144, 19))
+>Promise : Symbol(Promise)
 >DooDad : Symbol(DooDad, Decl(instantiateContextualTypes.ts, 138, 55))
 
 		return Promise.resolve().then(() => {
->Promise.resolve().then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
->Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
-
 			if (1 < 2) {
 				return 'SOMETHING';
 			}
@@= skipped -18, +12 lines =@@
 		});
 	};
 	public doesnt = () : Promise<DooDad> => {
->doesnt : Symbol(Interesting.doesnt, Decl(instantiateContextualTypes.ts, 152, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>doesnt : Symbol(doesnt, Decl(instantiateContextualTypes.ts, 152, 3))
+>Promise : Symbol(Promise)
 >DooDad : Symbol(DooDad, Decl(instantiateContextualTypes.ts, 138, 55))
 
 		return Promise.resolve().then(() => {
->Promise.resolve().then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
->Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
-
 			return 'ELSE';
 		});
 	};
 	public slightlyDifferentErrorMessage = () : Promise<DooDad> => {
->slightlyDifferentErrorMessage : Symbol(Interesting.slightlyDifferentErrorMessage, Decl(instantiateContextualTypes.ts, 157, 3))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
+>slightlyDifferentErrorMessage : Symbol(slightlyDifferentErrorMessage, Decl(instantiateContextualTypes.ts, 157, 3))
+>Promise : Symbol(Promise)
 >DooDad : Symbol(DooDad, Decl(instantiateContextualTypes.ts, 138, 55))
 
 		return Promise.resolve().then(() => {
->Promise.resolve().then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
->Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->then : Symbol(Promise.then, Decl(lib.es5.d.ts, --, --))
-
 			if (1 < 2) {
 				return 'SOMETHING';
 			}
@@= skipped -55, +43 lines =@@
 >target : Symbol(target, Decl(instantiateContextualTypes.ts, 176, 34))
 >T : Symbol(T, Decl(instantiateContextualTypes.ts, 176, 31))
 >partial : Symbol(partial, Decl(instantiateContextualTypes.ts, 176, 44))
->Partial : Symbol(Partial, Decl(lib.es5.d.ts, --, --))
+>Partial : Symbol(Partial)
 >T : Symbol(T, Decl(instantiateContextualTypes.ts, 176, 31))
 >T : Symbol(T, Decl(instantiateContextualTypes.ts, 176, 31))
 
