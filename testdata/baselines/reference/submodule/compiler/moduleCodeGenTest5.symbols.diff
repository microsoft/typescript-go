--- old.moduleCodeGenTest5.symbols
+++ new.moduleCodeGenTest5.symbols
@@= skipped -16, +16 lines =@@
 >C1 : Symbol(C1, Decl(moduleCodeGenTest5.ts, 4, 16))
 
 	public p1 = 0;
->p1 : Symbol(C1.p1, Decl(moduleCodeGenTest5.ts, 6, 17))
+>p1 : Symbol(p1, Decl(moduleCodeGenTest5.ts, 6, 17))
 
 	public p2() {}
->p2 : Symbol(C1.p2, Decl(moduleCodeGenTest5.ts, 7, 15))
+>p2 : Symbol(p2, Decl(moduleCodeGenTest5.ts, 7, 15))
 }
 class C2{
 >C2 : Symbol(C2, Decl(moduleCodeGenTest5.ts, 9, 1))
 
 	public p1 = 0;
->p1 : Symbol(C2.p1, Decl(moduleCodeGenTest5.ts, 10, 9))
+>p1 : Symbol(p1, Decl(moduleCodeGenTest5.ts, 10, 9))
 
 	public p2() {}	
->p2 : Symbol(C2.p2, Decl(moduleCodeGenTest5.ts, 11, 15))
+>p2 : Symbol(p2, Decl(moduleCodeGenTest5.ts, 11, 15))
 }
 
 export enum E1 {A=0}
 >E1 : Symbol(E1, Decl(moduleCodeGenTest5.ts, 13, 1))
->A : Symbol(E1.A, Decl(moduleCodeGenTest5.ts, 15, 16))
+>A : Symbol(A, Decl(moduleCodeGenTest5.ts, 15, 16))
 
 var u = E1.A;
 >u : Symbol(u, Decl(moduleCodeGenTest5.ts, 16, 3))
->E1.A : Symbol(E1.A, Decl(moduleCodeGenTest5.ts, 15, 16))
+>E1.A : Symbol(A, Decl(moduleCodeGenTest5.ts, 15, 16))
 >E1 : Symbol(E1, Decl(moduleCodeGenTest5.ts, 13, 1))
->A : Symbol(E1.A, Decl(moduleCodeGenTest5.ts, 15, 16))
+>A : Symbol(A, Decl(moduleCodeGenTest5.ts, 15, 16))
 
 enum E2 {B=0}
 >E2 : Symbol(E2, Decl(moduleCodeGenTest5.ts, 16, 13))
->B : Symbol(E2.B, Decl(moduleCodeGenTest5.ts, 17, 9))
+>B : Symbol(B, Decl(moduleCodeGenTest5.ts, 17, 9))
 
 var v = E2.B;
 >v : Symbol(v, Decl(moduleCodeGenTest5.ts, 18, 3))
->E2.B : Symbol(E2.B, Decl(moduleCodeGenTest5.ts, 17, 9))
+>E2.B : Symbol(B, Decl(moduleCodeGenTest5.ts, 17, 9))
 >E2 : Symbol(E2, Decl(moduleCodeGenTest5.ts, 16, 13))
->B : Symbol(E2.B, Decl(moduleCodeGenTest5.ts, 17, 9))
+>B : Symbol(B, Decl(moduleCodeGenTest5.ts, 17, 9))
 
 
