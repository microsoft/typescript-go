--- old.typeArgumentDefaultUsesConstraintOnCircularDefault.types
+++ new.typeArgumentDefaultUsesConstraintOnCircularDefault.types
@@= skipped -2, +2 lines =@@
 === typeArgumentDefaultUsesConstraintOnCircularDefault.ts ===
 type Test<T extends string = T> = { value: T };  // Error
 >Test : Test<T>
+>T : T
 >value : T
 
 let zz: Test = { foo: "abc" };  // should error on comparison with Test<string>
@@= skipped -18, +19 lines =@@
 
 class C1<T extends C1 = any> {}
 >C1 : C1<T>
+>T : T
 
 class C2<T extends C2<any> = any> {}
 >C2 : C2<T>
+>T : T
 
