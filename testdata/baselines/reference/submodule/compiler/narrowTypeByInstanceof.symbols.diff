--- old.narrowTypeByInstanceof.symbols
+++ new.narrowTypeByInstanceof.symbols
@@= skipped -4, +4 lines =@@
 >Match : Symbol(Match, Decl(narrowTypeByInstanceof.ts, 0, 0))
 
         public range(): any {
->range : Symbol(Match.range, Decl(narrowTypeByInstanceof.ts, 0, 17))
+>range : Symbol(range, Decl(narrowTypeByInstanceof.ts, 0, 17))
 
             return undefined;
 >undefined : Symbol(undefined)
@@= skipped -11, +11 lines =@@
 >FileMatch : Symbol(FileMatch, Decl(narrowTypeByInstanceof.ts, 4, 5))
 
         public resource(): any {
->resource : Symbol(FileMatch.resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
+>resource : Symbol(resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
 
             return undefined;
 >undefined : Symbol(undefined)
@@= skipped -27, +27 lines =@@
 
     let a = elementA.resource().path;
 >a : Symbol(a, Decl(narrowTypeByInstanceof.ts, 18, 7))
->elementA.resource : Symbol(FileMatch.resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
+>elementA.resource : Symbol(resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
 >elementA : Symbol(elementA, Decl(narrowTypeByInstanceof.ts, 15, 3))
->resource : Symbol(FileMatch.resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
+>resource : Symbol(resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
 
     let b = elementB.resource().path;
 >b : Symbol(b, Decl(narrowTypeByInstanceof.ts, 19, 7))
->elementB.resource : Symbol(FileMatch.resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
+>elementB.resource : Symbol(resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
 >elementB : Symbol(elementB, Decl(narrowTypeByInstanceof.ts, 15, 31))
->resource : Symbol(FileMatch.resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
+>resource : Symbol(resource, Decl(narrowTypeByInstanceof.ts, 6, 21))
 
 } else if (elementA instanceof Match && elementB instanceof Match) {
 >elementA : Symbol(elementA, Decl(narrowTypeByInstanceof.ts, 15, 3))
@@= skipped -18, +18 lines =@@
 
     let a = elementA.range();
 >a : Symbol(a, Decl(narrowTypeByInstanceof.ts, 21, 7))
->elementA.range : Symbol(Match.range, Decl(narrowTypeByInstanceof.ts, 0, 17))
+>elementA.range : Symbol(range, Decl(narrowTypeByInstanceof.ts, 0, 17))
 >elementA : Symbol(elementA, Decl(narrowTypeByInstanceof.ts, 15, 3))
->range : Symbol(Match.range, Decl(narrowTypeByInstanceof.ts, 0, 17))
+>range : Symbol(range, Decl(narrowTypeByInstanceof.ts, 0, 17))
 
     let b = elementB.range();
 >b : Symbol(b, Decl(narrowTypeByInstanceof.ts, 22, 7))
->elementB.range : Symbol(Match.range, Decl(narrowTypeByInstanceof.ts, 0, 17))
+>elementB.range : Symbol(range, Decl(narrowTypeByInstanceof.ts, 0, 17))
 >elementB : Symbol(elementB, Decl(narrowTypeByInstanceof.ts, 15, 31))
->range : Symbol(Match.range, Decl(narrowTypeByInstanceof.ts, 0, 17))
+>range : Symbol(range, Decl(narrowTypeByInstanceof.ts, 0, 17))
 }
 
