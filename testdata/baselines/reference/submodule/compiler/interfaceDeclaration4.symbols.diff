--- old.interfaceDeclaration4.symbols
+++ new.interfaceDeclaration4.symbols
@@= skipped -7, +7 lines =@@
 
     export interface I1 { item: string; }
 >I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
->item : Symbol(I1.item, Decl(interfaceDeclaration4.ts, 3, 25))
+>item : Symbol(item, Decl(interfaceDeclaration4.ts, 3, 25))
 
     export class C1 { }
 >C1 : Symbol(C1, Decl(interfaceDeclaration4.ts, 3, 41))
@@= skipped -8, +8 lines =@@
 
 class C1 implements Foo.I1 {
 >C1 : Symbol(C1, Decl(interfaceDeclaration4.ts, 5, 1))
->Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>Foo.I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 >Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
->I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 
 	public item:string;
->item : Symbol(C1.item, Decl(interfaceDeclaration4.ts, 7, 28))
+>item : Symbol(item, Decl(interfaceDeclaration4.ts, 7, 28))
 }
 
 // Allowed
 interface I2 extends Foo.I1 {
 >I2 : Symbol(I2, Decl(interfaceDeclaration4.ts, 9, 1))
->Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>Foo.I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 >Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
->I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 
 	item:string;
->item : Symbol(I2.item, Decl(interfaceDeclaration4.ts, 12, 29))
+>item : Symbol(item, Decl(interfaceDeclaration4.ts, 12, 29))
 }
 
 // Negative Case
 interface I3 extends Foo.I1 {
 >I3 : Symbol(I3, Decl(interfaceDeclaration4.ts, 14, 1))
->Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>Foo.I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 >Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
->I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 
     item:number;
->item : Symbol(I3.item, Decl(interfaceDeclaration4.ts, 17, 29))
+>item : Symbol(item, Decl(interfaceDeclaration4.ts, 17, 29))
 }
 
 interface I4 extends Foo.I1 {
 >I4 : Symbol(I4, Decl(interfaceDeclaration4.ts, 19, 1))
->Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>Foo.I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 >Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
->I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 
     token:string;
->token : Symbol(I4.token, Decl(interfaceDeclaration4.ts, 21, 29))
+>token : Symbol(token, Decl(interfaceDeclaration4.ts, 21, 29))
 }
 
 // Err - not implemented item
@@= skipped -46, +46 lines =@@
 >I4 : Symbol(I4, Decl(interfaceDeclaration4.ts, 19, 1))
 
     public token: string;
->token : Symbol(C2.token, Decl(interfaceDeclaration4.ts, 26, 24))
+>token : Symbol(token, Decl(interfaceDeclaration4.ts, 26, 24))
 }
 
 interface I5 extends Foo { }
@@= skipped -10, +10 lines =@@
 // Negative case
 interface I6 extends Foo.C1 { }
 >I6 : Symbol(I6, Decl(interfaceDeclaration4.ts, 30, 28))
->Foo.C1 : Symbol(Foo.C1, Decl(interfaceDeclaration4.ts, 3, 41))
+>Foo.C1 : Symbol(C1, Decl(interfaceDeclaration4.ts, 3, 41))
 >Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
->C1 : Symbol(Foo.C1, Decl(interfaceDeclaration4.ts, 3, 41))
+>C1 : Symbol(C1, Decl(interfaceDeclaration4.ts, 3, 41))
 
 class C3 implements Foo.I1 { }
 >C3 : Symbol(C3, Decl(interfaceDeclaration4.ts, 33, 31))
->Foo.I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>Foo.I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 >Foo : Symbol(Foo, Decl(interfaceDeclaration4.ts, 0, 0), Decl(interfaceDeclaration4.ts, 35, 30))
->I1 : Symbol(Foo.I1, Decl(interfaceDeclaration4.ts, 2, 12))
+>I1 : Symbol(I1, Decl(interfaceDeclaration4.ts, 2, 12))
 
 // Negative case 
 interface Foo.I1 { }
