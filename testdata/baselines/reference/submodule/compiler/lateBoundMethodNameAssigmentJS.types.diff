--- old.lateBoundMethodNameAssigmentJS.types
+++ new.lateBoundMethodNameAssigmentJS.types
@@= skipped -2, +2 lines =@@
 === lateBoundMethodNameAssigmentJS.js ===
 const _symbol = Symbol("_sym");
 >_symbol : unique symbol
->        : ^^^^^^^^^^^^^
 >Symbol("_sym") : unique symbol
->               : ^^^^^^^^^^^^^
 >Symbol : SymbolConstructor
->       : ^^^^^^^^^^^^^^^^^
 >"_sym" : "_sym"
->       : ^^^^^^
 
 export class MyClass {
 >MyClass : MyClass
->        : ^^^^^^^
 
     constructor() {
         this[_symbol] = this[_symbol].bind(this);
->this[_symbol] = this[_symbol].bind(this) : error
->this[_symbol] : error
+>this[_symbol] = this[_symbol].bind(this) : () => Promise<void>
+>this[_symbol] : () => Promise<void>
 >this : this
->     : ^^^^
 >_symbol : unique symbol
->        : ^^^^^^^^^^^^^
->this[_symbol].bind(this) : error
->this[_symbol].bind : error
->this[_symbol] : any
->              : ^^^
+>this[_symbol].bind(this) : () => Promise<void>
+>this[_symbol].bind : { <T>(thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(thisArg: T, ...args: A): (...args: B) => R; }
+>this[_symbol] : () => Promise<void>
 >this : this
->     : ^^^^
 >_symbol : unique symbol
->        : ^^^^^^^^^^^^^
->bind : any
->     : ^^^
+>bind : { <T>(thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(thisArg: T, ...args: A): (...args: B) => R; }
 >this : this
->     : ^^^^
     }
 
     async [_symbol]() { }
->[_symbol] : error
+>[_symbol] : () => Promise<void>
 >_symbol : unique symbol
->        : ^^^^^^^^^^^^^
 }
