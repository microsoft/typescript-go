//// [tests/cases/compiler/discriminateWithOptionalProperty2.ts] ////

=== discriminateWithOptionalProperty2.ts ===
// https://github.com/microsoft/TypeScript/issues/55532#issuecomment-1694744665

type PromiseOrValue<T> = Promise<T> | T;
>PromiseOrValue : Symbol(PromiseOrValue, Decl(discriminateWithOptionalProperty2.ts, 0, 0))
>T : Symbol(T, Decl(discriminateWithOptionalProperty2.ts, 2, 20))
>Promise : Symbol(Promise)
>T : Symbol(T, Decl(discriminateWithOptionalProperty2.ts, 2, 20))
>T : Symbol(T, Decl(discriminateWithOptionalProperty2.ts, 2, 20))

function mapAsyncIterable<T, U, R = undefined>(
>mapAsyncIterable : Symbol(mapAsyncIterable, Decl(discriminateWithOptionalProperty2.ts, 2, 40))
>T : Symbol(T, Decl(discriminateWithOptionalProperty2.ts, 4, 26))
>U : Symbol(U, Decl(discriminateWithOptionalProperty2.ts, 4, 28))
>R : Symbol(R, Decl(discriminateWithOptionalProperty2.ts, 4, 31))

  iterable: AsyncGenerator<T, R, undefined> | AsyncIterable<T, R, undefined>,
>iterable : Symbol(iterable, Decl(discriminateWithOptionalProperty2.ts, 4, 47))
>AsyncGenerator : Symbol(AsyncGenerator)
>T : Symbol(T, Decl(discriminateWithOptionalProperty2.ts, 4, 26))
>R : Symbol(R, Decl(discriminateWithOptionalProperty2.ts, 4, 31))
>AsyncIterable : Symbol(AsyncIterable)
>T : Symbol(T, Decl(discriminateWithOptionalProperty2.ts, 4, 26))
>R : Symbol(R, Decl(discriminateWithOptionalProperty2.ts, 4, 31))

  callback: (value: T) => PromiseOrValue<U>,
>callback : Symbol(callback, Decl(discriminateWithOptionalProperty2.ts, 5, 77))
>value : Symbol(value, Decl(discriminateWithOptionalProperty2.ts, 6, 13))
>T : Symbol(T, Decl(discriminateWithOptionalProperty2.ts, 4, 26))
>PromiseOrValue : Symbol(PromiseOrValue, Decl(discriminateWithOptionalProperty2.ts, 0, 0))
>U : Symbol(U, Decl(discriminateWithOptionalProperty2.ts, 4, 28))

): AsyncGenerator<U, R, void> {
>AsyncGenerator : Symbol(AsyncGenerator)
>U : Symbol(U, Decl(discriminateWithOptionalProperty2.ts, 4, 28))
>R : Symbol(R, Decl(discriminateWithOptionalProperty2.ts, 4, 31))

  const iterator = iterable[Symbol.asyncIterator]();
>iterator : Symbol(iterator, Decl(discriminateWithOptionalProperty2.ts, 8, 7))
>iterable : Symbol(iterable, Decl(discriminateWithOptionalProperty2.ts, 4, 47))

  async function mapResult(
>mapResult : Symbol(mapResult, Decl(discriminateWithOptionalProperty2.ts, 8, 52))

    result: IteratorResult<T, R>,
>result : Symbol(result, Decl(discriminateWithOptionalProperty2.ts, 10, 27))
>IteratorResult : Symbol(IteratorResult)
>T : Symbol(T, Decl(discriminateWithOptionalProperty2.ts, 4, 26))
>R : Symbol(R, Decl(discriminateWithOptionalProperty2.ts, 4, 31))

  ): Promise<IteratorResult<U, R>> {
>Promise : Symbol(Promise)
>IteratorResult : Symbol(IteratorResult)
>U : Symbol(U, Decl(discriminateWithOptionalProperty2.ts, 4, 28))
>R : Symbol(R, Decl(discriminateWithOptionalProperty2.ts, 4, 31))

    if (result.done) {
>result : Symbol(result, Decl(discriminateWithOptionalProperty2.ts, 10, 27))

      return result;
>result : Symbol(result, Decl(discriminateWithOptionalProperty2.ts, 10, 27))
    }

    try {
      return { value: await callback(result.value), done: false };
>value : Symbol(value, Decl(discriminateWithOptionalProperty2.ts, 18, 14))
>callback : Symbol(callback, Decl(discriminateWithOptionalProperty2.ts, 5, 77))
>result : Symbol(result, Decl(discriminateWithOptionalProperty2.ts, 10, 27))
>done : Symbol(done, Decl(discriminateWithOptionalProperty2.ts, 18, 51))

    } catch (error) {
>error : Symbol(error, Decl(discriminateWithOptionalProperty2.ts, 19, 13))

      if (typeof iterator.return === "function") {
>iterator : Symbol(iterator, Decl(discriminateWithOptionalProperty2.ts, 8, 7))

        try {
          await iterator.return();
>iterator : Symbol(iterator, Decl(discriminateWithOptionalProperty2.ts, 8, 7))

        } catch (_e) {}
>_e : Symbol(_e, Decl(discriminateWithOptionalProperty2.ts, 23, 17))
      }
      throw error;
>error : Symbol(error, Decl(discriminateWithOptionalProperty2.ts, 19, 13))
    }
  }

  return {
    async next() {
>next : Symbol(next, Decl(discriminateWithOptionalProperty2.ts, 29, 10))

      return mapResult(await iterator.next());
>mapResult : Symbol(mapResult, Decl(discriminateWithOptionalProperty2.ts, 8, 52))
>iterator : Symbol(iterator, Decl(discriminateWithOptionalProperty2.ts, 8, 7))

    },
    async return(value: R): Promise<IteratorResult<U, R>> {
>return : Symbol(return, Decl(discriminateWithOptionalProperty2.ts, 32, 6))
>value : Symbol(value, Decl(discriminateWithOptionalProperty2.ts, 33, 17))
>R : Symbol(R, Decl(discriminateWithOptionalProperty2.ts, 4, 31))
>Promise : Symbol(Promise)
>IteratorResult : Symbol(IteratorResult)
>U : Symbol(U, Decl(discriminateWithOptionalProperty2.ts, 4, 28))
>R : Symbol(R, Decl(discriminateWithOptionalProperty2.ts, 4, 31))

      return typeof iterator.return === "function"
>iterator : Symbol(iterator, Decl(discriminateWithOptionalProperty2.ts, 8, 7))

        ? mapResult(await iterator.return(value))
>mapResult : Symbol(mapResult, Decl(discriminateWithOptionalProperty2.ts, 8, 52))
>iterator : Symbol(iterator, Decl(discriminateWithOptionalProperty2.ts, 8, 7))
>value : Symbol(value, Decl(discriminateWithOptionalProperty2.ts, 33, 17))

        : { value: undefined as any, done: true };
>value : Symbol(value, Decl(discriminateWithOptionalProperty2.ts, 36, 11))
>undefined : Symbol(undefined)
>done : Symbol(done, Decl(discriminateWithOptionalProperty2.ts, 36, 36))

    },
    async throw(error?: unknown) {
>throw : Symbol(throw, Decl(discriminateWithOptionalProperty2.ts, 37, 6))
>error : Symbol(error, Decl(discriminateWithOptionalProperty2.ts, 38, 16))

      if (typeof iterator.throw === "function") {
>iterator : Symbol(iterator, Decl(discriminateWithOptionalProperty2.ts, 8, 7))

        return mapResult(await iterator.throw(error));
>mapResult : Symbol(mapResult, Decl(discriminateWithOptionalProperty2.ts, 8, 52))
>iterator : Symbol(iterator, Decl(discriminateWithOptionalProperty2.ts, 8, 7))
>error : Symbol(error, Decl(discriminateWithOptionalProperty2.ts, 38, 16))
      }
      throw error;
>error : Symbol(error, Decl(discriminateWithOptionalProperty2.ts, 38, 16))

    },
    [Symbol.asyncIterator]() {
>[Symbol.asyncIterator] : Symbol([Symbol.asyncIterator], Decl(discriminateWithOptionalProperty2.ts, 43, 6))

      return this;
    },
    async [Symbol.asyncDispose]() {
>[Symbol.asyncDispose] : Symbol([Symbol.asyncDispose], Decl(discriminateWithOptionalProperty2.ts, 46, 6))

      await this.return(undefined!);
>undefined : Symbol(undefined)
    }
  };
}

const items = [1, 2, 3];
>items : Symbol(items, Decl(discriminateWithOptionalProperty2.ts, 53, 5))

const iterable = {
>iterable : Symbol(iterable, Decl(discriminateWithOptionalProperty2.ts, 55, 5))

  [Symbol.asyncIterator]() {
>[Symbol.asyncIterator] : Symbol([Symbol.asyncIterator], Decl(discriminateWithOptionalProperty2.ts, 55, 18))

    return this;
>this : Symbol((Anonymous type), Decl(discriminateWithOptionalProperty2.ts, 55, 16))

  },
  next() {
>next : Symbol(next, Decl(discriminateWithOptionalProperty2.ts, 58, 4))

    const value = items[0];
>value : Symbol(value, Decl(discriminateWithOptionalProperty2.ts, 60, 9))
>items : Symbol(items, Decl(discriminateWithOptionalProperty2.ts, 53, 5))

    items.shift();
>items : Symbol(items, Decl(discriminateWithOptionalProperty2.ts, 53, 5))

    return Promise.resolve({
      done: items.length === 0,
>done : Symbol(done, Decl(discriminateWithOptionalProperty2.ts, 62, 28))
>items : Symbol(items, Decl(discriminateWithOptionalProperty2.ts, 53, 5))

      value,
>value : Symbol(value, Decl(discriminateWithOptionalProperty2.ts, 63, 31))

    });
  },
};

const doubles = mapAsyncIterable(iterable, (x) => x + x);
>doubles : Symbol(doubles, Decl(discriminateWithOptionalProperty2.ts, 69, 5))
>mapAsyncIterable : Symbol(mapAsyncIterable, Decl(discriminateWithOptionalProperty2.ts, 2, 40))
>iterable : Symbol(iterable, Decl(discriminateWithOptionalProperty2.ts, 55, 5))
>x : Symbol(x, Decl(discriminateWithOptionalProperty2.ts, 69, 44))
>x : Symbol(x, Decl(discriminateWithOptionalProperty2.ts, 69, 44))
>x : Symbol(x, Decl(discriminateWithOptionalProperty2.ts, 69, 44))

