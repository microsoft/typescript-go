--- old.lastPropertyInLiteralWins.symbols
+++ new.lastPropertyInLiteralWins.symbols
@@ -5,7 +5,7 @@
 >Thing : Symbol(Thing, Decl(lastPropertyInLiteralWins.ts, 0, 0))
 
     thunk: (str: string) => void;
->thunk : Symbol(Thing.thunk, Decl(lastPropertyInLiteralWins.ts, 0, 17))
+>thunk : Symbol(thunk, Decl(lastPropertyInLiteralWins.ts, 0, 17))
 >str : Symbol(str, Decl(lastPropertyInLiteralWins.ts, 1, 12))
 }
 function test(thing: Thing) {
@@ -14,9 +14,9 @@
 >Thing : Symbol(Thing, Decl(lastPropertyInLiteralWins.ts, 0, 0))
 
     thing.thunk("str");
->thing.thunk : Symbol(Thing.thunk, Decl(lastPropertyInLiteralWins.ts, 0, 17))
+>thing.thunk : Symbol(thunk, Decl(lastPropertyInLiteralWins.ts, 0, 17))
 >thing : Symbol(thing, Decl(lastPropertyInLiteralWins.ts, 3, 14))
->thunk : Symbol(Thing.thunk, Decl(lastPropertyInLiteralWins.ts, 0, 17))
+>thunk : Symbol(thunk, Decl(lastPropertyInLiteralWins.ts, 0, 17))
 }
 test({ // Should error, as last one wins, and is wrong type
 >test : Symbol(test, Decl(lastPropertyInLiteralWins.ts, 2, 1))
