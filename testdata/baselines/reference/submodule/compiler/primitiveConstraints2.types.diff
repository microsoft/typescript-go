--- old.primitiveConstraints2.types
+++ new.primitiveConstraints2.types
@@= skipped -2, +2 lines =@@
 === primitiveConstraints2.ts ===
 class C<T> {
 >C : C<T>
->  : ^^^^
+>T : T
 
    public bar2<U extends T>(x: T, y: U): T {
 >bar2 : <U extends T>(x: T, y: U) => T
->     : ^ ^^^^^^^^^ ^^ ^^ ^^ ^^ ^^^^^ 
+>U : U
 >x : T
->  : ^
 >y : U
->  : ^
 
       return null;
      }
@@= skipped -16, +14 lines =@@
  
 var x = new C<number>();
 >x : C<number>
->  : ^^^^^^^^^
 >new C<number>() : C<number>
->                : ^^^^^^^^^
 >C : typeof C
->  : ^^^^^^^^
 
 x.bar2(2, ""); // should error
 >x.bar2(2, "") : number
->              : ^^^^^^
 >x.bar2 : <U extends number>(x: number, y: U) => number
->       : ^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^
 >x : C<number>
->  : ^^^^^^^^^
 >bar2 : <U extends number>(x: number, y: U) => number
->     : ^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^
 >2 : 2
->  : ^
 >"" : ""
->   : ^^
 
 x.bar2<string>(2, ""); // should error
 >x.bar2<string>(2, "") : number
->                      : ^^^^^^
 >x.bar2 : <U extends number>(x: number, y: U) => number
->       : ^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^
 >x : C<number>
->  : ^^^^^^^^^
 >bar2 : <U extends number>(x: number, y: U) => number
->     : ^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^^^^^
 >2 : 2
->  : ^
 >"" : ""
->   : ^^
 
