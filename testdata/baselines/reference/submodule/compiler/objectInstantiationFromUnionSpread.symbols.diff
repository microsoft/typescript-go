--- old.objectInstantiationFromUnionSpread.symbols
+++ new.objectInstantiationFromUnionSpread.symbols
@@= skipped -6, +6 lines =@@
 >Success : Symbol(Success, Decl(objectInstantiationFromUnionSpread.ts, 0, 0))
 
   isSuccess: true;
->isSuccess : Symbol(Success.isSuccess, Decl(objectInstantiationFromUnionSpread.ts, 2, 19))
+>isSuccess : Symbol(isSuccess, Decl(objectInstantiationFromUnionSpread.ts, 2, 19))
 }
 
 interface Fail {
 >Fail : Symbol(Fail, Decl(objectInstantiationFromUnionSpread.ts, 4, 1))
 
   isSuccess: false;
->isSuccess : Symbol(Fail.isSuccess, Decl(objectInstantiationFromUnionSpread.ts, 6, 16))
+>isSuccess : Symbol(isSuccess, Decl(objectInstantiationFromUnionSpread.ts, 6, 16))
 }
 
 type Item = Success | Fail;
@@= skipped -21, +21 lines =@@
 >Item : Symbol(Item, Decl(objectInstantiationFromUnionSpread.ts, 8, 1))
 
   a.map(item => ({ ...item })).filter(value => {});
->a.map(item => ({ ...item })).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->a.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>a.map(item => ({ ...item })).filter : Symbol(filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>a.map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(objectInstantiationFromUnionSpread.ts, 12, 12))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >item : Symbol(item, Decl(objectInstantiationFromUnionSpread.ts, 13, 8))
 >item : Symbol(item, Decl(objectInstantiationFromUnionSpread.ts, 13, 8))
->filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>filter : Symbol(filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >value : Symbol(value, Decl(objectInstantiationFromUnionSpread.ts, 13, 38))
 }
 
@@= skipped -17, +17 lines =@@
 >Item : Symbol(Item, Decl(objectInstantiationFromUnionSpread.ts, 8, 1))
 
   a.map(item => ({ ...item })).filter(value => {});
->a.map(item => ({ ...item })).filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->a.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>a.map(item => ({ ...item })).filter : Symbol(filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>a.map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(objectInstantiationFromUnionSpread.ts, 16, 15))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >item : Symbol(item, Decl(objectInstantiationFromUnionSpread.ts, 17, 8))
 >item : Symbol(item, Decl(objectInstantiationFromUnionSpread.ts, 17, 8))
->filter : Symbol(Array.filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>filter : Symbol(filter, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >value : Symbol(value, Decl(objectInstantiationFromUnionSpread.ts, 17, 38))
 }
 
