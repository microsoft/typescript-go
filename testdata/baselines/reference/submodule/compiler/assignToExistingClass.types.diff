--- old.assignToExistingClass.types
+++ new.assignToExistingClass.types
@@= skipped -2, +2 lines =@@
 === assignToExistingClass.ts ===
 module Test {
 >Test : typeof Test
->     : ^^^^^^^^^^^
 
     class Mocked {
 >Mocked : Mocked
->       : ^^^^^^
 
         myProp: string;
 >myProp : string
->       : ^^^^^^
     }
 
     class Tester {
 >Tester : Tester
->       : ^^^^^^
 
         willThrowError() {
 >willThrowError : () => void
->               : ^^^^^^^^^^
 
             Mocked = Mocked || function () { // => Error: Invalid left-hand side of assignment expression.
->Mocked = Mocked || function () { // => Error: Invalid left-hand side of assignment expression.                return { myProp: "test" };            } : typeof Mocked | (() => { myProp: string; })
->                                                                                                                                                      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>Mocked = Mocked || function () { // => Error: Invalid left-hand side of assignment expression.                return { myProp: "test" };            } : typeof Mocked | () => { myProp: string; }
 >Mocked : any
->       : ^^^
->Mocked || function () { // => Error: Invalid left-hand side of assignment expression.                return { myProp: "test" };            } : typeof Mocked | (() => { myProp: string; })
->                                                                                                                                             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>Mocked || function () { // => Error: Invalid left-hand side of assignment expression.                return { myProp: "test" };            } : typeof Mocked | () => { myProp: string; }
 >Mocked : typeof Mocked
->       : ^^^^^^^^^^^^^
 >function () { // => Error: Invalid left-hand side of assignment expression.                return { myProp: "test" };            } : () => { myProp: string; }
->                                                                                                                                   : ^^^^^^^^^^^^^^^^^^^^^^^^^
 
                 return { myProp: "test" };
 >{ myProp: "test" } : { myProp: string; }
->                   : ^^^^^^^^^^^^^^^^^^^
 >myProp : string
->       : ^^^^^^
 >"test" : "test"
->       : ^^^^^^
 
             };
         }
