--- old.overloadModifiersMustAgree.symbols
+++ new.overloadModifiersMustAgree.symbols
@@ -5,10 +5,10 @@
 >baz : Symbol(baz, Decl(overloadModifiersMustAgree.ts, 0, 0))
 
     public foo();
->foo : Symbol(baz.foo, Decl(overloadModifiersMustAgree.ts, 0, 11), Decl(overloadModifiersMustAgree.ts, 1, 17))
+>foo : Symbol(foo, Decl(overloadModifiersMustAgree.ts, 0, 11), Decl(overloadModifiersMustAgree.ts, 1, 17))
 
     private foo(bar?: any) { } // error - access modifiers do not agree
->foo : Symbol(baz.foo, Decl(overloadModifiersMustAgree.ts, 0, 11), Decl(overloadModifiersMustAgree.ts, 1, 17))
+>foo : Symbol(foo, Decl(overloadModifiersMustAgree.ts, 0, 11), Decl(overloadModifiersMustAgree.ts, 1, 17))
 >bar : Symbol(bar, Decl(overloadModifiersMustAgree.ts, 2, 16))
 }
 
@@ -27,10 +27,10 @@
 >I : Symbol(I, Decl(overloadModifiersMustAgree.ts, 7, 28))
 
     foo? ();
->foo : Symbol(I.foo, Decl(overloadModifiersMustAgree.ts, 9, 13), Decl(overloadModifiersMustAgree.ts, 10, 12))
+>foo : Symbol(foo, Decl(overloadModifiersMustAgree.ts, 9, 13), Decl(overloadModifiersMustAgree.ts, 10, 12))
 
     foo(s: string);
->foo : Symbol(I.foo, Decl(overloadModifiersMustAgree.ts, 9, 13), Decl(overloadModifiersMustAgree.ts, 10, 12))
+>foo : Symbol(foo, Decl(overloadModifiersMustAgree.ts, 9, 13), Decl(overloadModifiersMustAgree.ts, 10, 12))
 >s : Symbol(s, Decl(overloadModifiersMustAgree.ts, 11, 8))
 }
 
