--- old.contextualTypeBasedOnIntersectionWithAnyInTheMix3.errors.txt
+++ new.contextualTypeBasedOnIntersectionWithAnyInTheMix3.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+contextualTypeBasedOnIntersectionWithAnyInTheMix3.ts(26,7): error TS2322: Type '() => { a: number; }' is not assignable to type '() => { a: 1; } & () => { a: any; }'.
+  Type '() => { a: number; }' is not assignable to type '() => { a: 1; }'.
+    Type '{ a: number; }' is not assignable to type '{ a: 1; }'.
+      Types of property 'a' are incompatible.
+        Type 'number' is not assignable to type '1'.
+
+
+==== contextualTypeBasedOnIntersectionWithAnyInTheMix3.ts (1 errors) ====
+    type TypeMap = {
+      str: "a" | "b" | "c";
+      num: 1 | 2 | 3;
+    };
+    
+    declare function test1<
+      T extends { [K in keyof TypeMap]: TypeMap[K][] } & { [k: string]: any[] },
+    >(arg: T): T;
+    
+    const result = test1({
+      num: [1, 2],
+      str: ["a", "b"],
+      bool: [true, false],
+    });
+    
+    declare function test2(a: { type: "foo" | "bar" } & { type: any }): void;
+    
+    test2({ type: "foo" });
+    
+    // https://github.com/microsoft/TypeScript/issues/59473
+    
+    const x: { ml: any } & { ml: 'edge' } = { ml: 'edge' };
+    const a: [any] & [1] = [1];
+    const b: any[] & 1[] = [1, 1];
+    const c: { a: any } & { a: 1 } = { a: 1 };
+    const d: (() => { a: 1 }) & (() => { a: any }) = () => ({
+          ~
+!!! error TS2322: Type '() => { a: number; }' is not assignable to type '() => { a: 1; } & () => { a: any; }'.
+!!! error TS2322:   Type '() => { a: number; }' is not assignable to type '() => { a: 1; }'.
+!!! error TS2322:     Type '{ a: number; }' is not assignable to type '{ a: 1; }'.
+!!! error TS2322:       Types of property 'a' are incompatible.
+!!! error TS2322:         Type 'number' is not assignable to type '1'.
+      a: 1,
+    });
+    
