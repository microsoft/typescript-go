--- old.emitClassExpressionInDeclarationFile.js
+++ new.emitClassExpressionInDeclarationFile.js
@@= skipped -41, +41 lines =@@
     tags() { }
 };
 exports.simpleExample = simpleExample;
-var circularReference = class C {
+exports.circularReference = class C {
     static getTags(c) { return c; }
     tags(c) { return c; }
 };
-exports.circularReference = circularReference;
 // repro from #15066
 class FooItem {
     foo() { }
+    name;
 }
 exports.FooItem = FooItem;
 function WithTags(Base) {
@@= skipped -38, +38 lines =@@
     getTags(c: {
         tags(c: /*elided*/ any): /*elided*/ any;
     }): {
-        tags(c: /*elided*/ any): /*elided*/ any;
+        tags(c: any): any;
     };
 };
 export declare class FooItem {
@@= skipped -10, +10 lines =@@
 export type Constructor<T> = new (...args: any[]) => T;
 export declare function WithTags<T extends Constructor<FooItem>>(Base: T): {
     new (...args: any[]): {
+        tags(): void;
         foo(): void;
         name?: string;
-        tags(): void;
     };
     getTags(): void;
 } & T;
 declare const Test_base: {
     new (...args: any[]): {
+        tags(): void;
         foo(): void;
         name?: string;
-        tags(): void;
     };
     getTags(): void;
 } & typeof FooItem;