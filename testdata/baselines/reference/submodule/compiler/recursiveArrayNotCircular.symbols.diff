--- old.recursiveArrayNotCircular.symbols
+++ new.recursiveArrayNotCircular.symbols
@@ -17,16 +17,16 @@
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
 
     Foo,
->Foo : Symbol(ActionType.Foo, Decl(recursiveArrayNotCircular.ts, 2, 17))
+>Foo : Symbol(Foo, Decl(recursiveArrayNotCircular.ts, 2, 17))
 
     Bar,
->Bar : Symbol(ActionType.Bar, Decl(recursiveArrayNotCircular.ts, 3, 8))
+>Bar : Symbol(Bar, Decl(recursiveArrayNotCircular.ts, 3, 8))
 
     Baz,
->Baz : Symbol(ActionType.Baz, Decl(recursiveArrayNotCircular.ts, 4, 8))
+>Baz : Symbol(Baz, Decl(recursiveArrayNotCircular.ts, 4, 8))
 
     Batch
->Batch : Symbol(ActionType.Batch, Decl(recursiveArrayNotCircular.ts, 5, 8))
+>Batch : Symbol(Batch, Decl(recursiveArrayNotCircular.ts, 5, 8))
 }
 
 type ReducerAction =
@@ -35,22 +35,22 @@
   | Action<ActionType.Bar, number>
 >Action : Symbol(Action, Decl(recursiveArrayNotCircular.ts, 0, 0))
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
->Bar : Symbol(ActionType.Bar, Decl(recursiveArrayNotCircular.ts, 3, 8))
+>Bar : Symbol(Bar, Decl(recursiveArrayNotCircular.ts, 3, 8))
 
   | Action<ActionType.Baz, boolean>
 >Action : Symbol(Action, Decl(recursiveArrayNotCircular.ts, 0, 0))
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
->Baz : Symbol(ActionType.Baz, Decl(recursiveArrayNotCircular.ts, 4, 8))
+>Baz : Symbol(Baz, Decl(recursiveArrayNotCircular.ts, 4, 8))
 
   | Action<ActionType.Foo, string>
 >Action : Symbol(Action, Decl(recursiveArrayNotCircular.ts, 0, 0))
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
->Foo : Symbol(ActionType.Foo, Decl(recursiveArrayNotCircular.ts, 2, 17))
+>Foo : Symbol(Foo, Decl(recursiveArrayNotCircular.ts, 2, 17))
 
   | Action<ActionType.Batch, ReducerAction[]>
 >Action : Symbol(Action, Decl(recursiveArrayNotCircular.ts, 0, 0))
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
->Batch : Symbol(ActionType.Batch, Decl(recursiveArrayNotCircular.ts, 5, 8))
+>Batch : Symbol(Batch, Decl(recursiveArrayNotCircular.ts, 5, 8))
 >ReducerAction : Symbol(ReducerAction, Decl(recursiveArrayNotCircular.ts, 7, 1))
 
 function assertNever(a: never): never {
@@ -72,9 +72,9 @@
 >type : Symbol(type, Decl(recursiveArrayNotCircular.ts, 0, 53), Decl(recursiveArrayNotCircular.ts, 0, 53), Decl(recursiveArrayNotCircular.ts, 0, 53), Decl(recursiveArrayNotCircular.ts, 0, 53), Decl(recursiveArrayNotCircular.ts, 0, 53))
 
         case ActionType.Bar:
->ActionType.Bar : Symbol(ActionType.Bar, Decl(recursiveArrayNotCircular.ts, 3, 8))
+>ActionType.Bar : Symbol(Bar, Decl(recursiveArrayNotCircular.ts, 3, 8))
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
->Bar : Symbol(ActionType.Bar, Decl(recursiveArrayNotCircular.ts, 3, 8))
+>Bar : Symbol(Bar, Decl(recursiveArrayNotCircular.ts, 3, 8))
 
             const x: number = action.payload;
 >x : Symbol(x, Decl(recursiveArrayNotCircular.ts, 22, 17))
@@ -84,9 +84,9 @@
 
             break;
         case ActionType.Baz:
->ActionType.Baz : Symbol(ActionType.Baz, Decl(recursiveArrayNotCircular.ts, 4, 8))
+>ActionType.Baz : Symbol(Baz, Decl(recursiveArrayNotCircular.ts, 4, 8))
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
->Baz : Symbol(ActionType.Baz, Decl(recursiveArrayNotCircular.ts, 4, 8))
+>Baz : Symbol(Baz, Decl(recursiveArrayNotCircular.ts, 4, 8))
 
             const y: boolean = action.payload;
 >y : Symbol(y, Decl(recursiveArrayNotCircular.ts, 25, 17))
@@ -96,9 +96,9 @@
 
             break;
         case ActionType.Foo:
->ActionType.Foo : Symbol(ActionType.Foo, Decl(recursiveArrayNotCircular.ts, 2, 17))
+>ActionType.Foo : Symbol(Foo, Decl(recursiveArrayNotCircular.ts, 2, 17))
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
->Foo : Symbol(ActionType.Foo, Decl(recursiveArrayNotCircular.ts, 2, 17))
+>Foo : Symbol(Foo, Decl(recursiveArrayNotCircular.ts, 2, 17))
 
             const z: string = action.payload;
 >z : Symbol(z, Decl(recursiveArrayNotCircular.ts, 28, 17))
@@ -108,16 +108,16 @@
 
             break;
         case ActionType.Batch:
->ActionType.Batch : Symbol(ActionType.Batch, Decl(recursiveArrayNotCircular.ts, 5, 8))
+>ActionType.Batch : Symbol(Batch, Decl(recursiveArrayNotCircular.ts, 5, 8))
 >ActionType : Symbol(ActionType, Decl(recursiveArrayNotCircular.ts, 0, 75))
->Batch : Symbol(ActionType.Batch, Decl(recursiveArrayNotCircular.ts, 5, 8))
+>Batch : Symbol(Batch, Decl(recursiveArrayNotCircular.ts, 5, 8))
 
             action.payload.map(reducer);
->action.payload.map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>action.payload.map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >action.payload : Symbol(payload, Decl(recursiveArrayNotCircular.ts, 0, 62))
 >action : Symbol(action, Decl(recursiveArrayNotCircular.ts, 19, 17))
 >payload : Symbol(payload, Decl(recursiveArrayNotCircular.ts, 0, 62))
->map : Symbol(Array.map, Decl(lib.es5.d.ts, --, --))
+>map : Symbol(map, Decl(lib.es5.d.ts, --, --))
 >reducer : Symbol(reducer, Decl(recursiveArrayNotCircular.ts, 17, 1))
 
             break;
