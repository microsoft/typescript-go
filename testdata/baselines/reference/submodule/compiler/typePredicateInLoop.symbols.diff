--- old.typePredicateInLoop.symbols
+++ new.typePredicateInLoop.symbols
@@= skipped -6, +6 lines =@@
 >Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))
 
   type: number;
->type : Symbol(Type.type, Decl(typePredicateInLoop.ts, 2, 16))
+>type : Symbol(type, Decl(typePredicateInLoop.ts, 2, 16))
 }
 
 interface TypeExt extends Type {
@@= skipped -8, +8 lines =@@
 >Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))
 
   arr: Type[];
->arr : Symbol(TypeExt.arr, Decl(typePredicateInLoop.ts, 6, 32))
+>arr : Symbol(arr, Decl(typePredicateInLoop.ts, 6, 32))
 >Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))
 }
 
@@= skipped -10, +10 lines =@@
 >Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))
 >arg : Symbol(arg, Decl(typePredicateInLoop.ts, 10, 15))
 >TypeExt : Symbol(TypeExt, Decl(typePredicateInLoop.ts, 4, 1))
->arg.type : Symbol(Type.type, Decl(typePredicateInLoop.ts, 2, 16))
+>arg.type : Symbol(type, Decl(typePredicateInLoop.ts, 2, 16))
 >arg : Symbol(arg, Decl(typePredicateInLoop.ts, 10, 15))
->type : Symbol(Type.type, Decl(typePredicateInLoop.ts, 2, 16))
+>type : Symbol(type, Decl(typePredicateInLoop.ts, 2, 16))
 
 const otherFunc = (arg1: Type, arg2: TypeExt): void => {};
 >otherFunc : Symbol(otherFunc, Decl(typePredicateInLoop.ts, 11, 5))
@@= skipped -22, +22 lines =@@
 
     for (const ITEM of arg.arr) {
 >ITEM : Symbol(ITEM, Decl(typePredicateInLoop.ts, 15, 14))
->arg.arr : Symbol(TypeExt.arr, Decl(typePredicateInLoop.ts, 6, 32))
+>arg.arr : Symbol(arr, Decl(typePredicateInLoop.ts, 6, 32))
 >arg : Symbol(arg, Decl(typePredicateInLoop.ts, 13, 18))
->arr : Symbol(TypeExt.arr, Decl(typePredicateInLoop.ts, 6, 32))
+>arr : Symbol(arr, Decl(typePredicateInLoop.ts, 6, 32))
 
       if (otherFunc(ITEM, arg)) {
 >otherFunc : Symbol(otherFunc, Decl(typePredicateInLoop.ts, 11, 5))
