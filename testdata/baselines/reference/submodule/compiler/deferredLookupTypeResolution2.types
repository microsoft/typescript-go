//// [tests/cases/compiler/deferredLookupTypeResolution2.ts] ////

=== deferredLookupTypeResolution2.ts ===
// Repro from #17456

type StringContains<S extends string, L extends string> = ({ [K in S]: 'true' } & { [key: string]: 'false'})[L];
>StringContains : StringContains<S, L>
>S : S
>L : L
>K : K
>key : string

type ObjectHasKey<O, L extends string> = StringContains<Extract<keyof O, string>, L>;
>ObjectHasKey : ObjectHasKey<O, L>
>O : O
>L : L

type A<T> = ObjectHasKey<T, '0'>;
>A : A<T>
>T : T

type B = ObjectHasKey<[string, number], '1'>;  // "true"
>B : "true"

type C = ObjectHasKey<[string, number], '2'>;  // "false"
>C : "false"

type D = A<[string]>;  // "true"
>D : "true"

// Error, "false" not handled
type E<T> = { true: 'true' }[ObjectHasKey<T, '1'>];
>E : E<T>
>T : T
>true : "true"

type Juxtapose<T> = ({ true: 'otherwise' } & { [k: string]: 'true' })[ObjectHasKey<T, '1'>];
>Juxtapose : Juxtapose<T>
>T : T
>true : "otherwise"
>k : string

// Error, "otherwise" is missing
type DeepError<T> = { true: 'true' }[Juxtapose<T>];
>DeepError : DeepError<T>
>T : T
>true : "true"

type DeepOK<T> = { true: 'true', otherwise: 'false' }[Juxtapose<T>];
>DeepOK : DeepOK<T>
>T : T
>true : "true"
>otherwise : "false"

