--- old.expandoFunctionSymbolProperty.types
+++ new.expandoFunctionSymbolProperty.types
@@= skipped -4, +4 lines =@@
 
 const symb = Symbol();
 >symb : unique symbol
->     : ^^^^^^^^^^^^^
 >Symbol() : unique symbol
->         : ^^^^^^^^^^^^^
 >Symbol : SymbolConstructor
->       : ^^^^^^^^^^^^^^^^^
 
 interface TestSymb {
+>TestSymb : TestSymb
+
   (): void;
   readonly [symb]: boolean;
 >[symb] : boolean
->       : ^^^^^^^
 >symb : unique symbol
->     : ^^^^^^^^^^^^^
 }
 
 export function test(): TestSymb {
 >test : () => TestSymb
->     : ^^^^^^        
 
   function inner() {}
->inner : { (): void; [symb]: boolean; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>inner : { (): void; inner[symb]: boolean; }
 
   inner[symb] = true;
 >inner[symb] = true : true
->                   : ^^^^
 >inner[symb] : boolean
->            : ^^^^^^^
->inner : { (): void; [symb]: boolean; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>inner : { (): void; inner[symb]: boolean; }
 >symb : unique symbol
->     : ^^^^^^^^^^^^^
 >true : true
->     : ^^^^
 
   return inner;
->inner : { (): void; [symb]: boolean; }
->      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+>inner : { (): void; inner[symb]: boolean; }
 }
 
