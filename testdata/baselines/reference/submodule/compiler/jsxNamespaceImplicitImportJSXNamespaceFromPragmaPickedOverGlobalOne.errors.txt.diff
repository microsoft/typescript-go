--- old.jsxNamespaceImplicitImportJSXNamespaceFromPragmaPickedOverGlobalOne.errors.txt
+++ new.jsxNamespaceImplicitImportJSXNamespaceFromPragmaPickedOverGlobalOne.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+/index.tsx(2,27): error TS2875: This JSX tag requires the module path '@emotion/react/jsx-runtime' to exist, but none could be found. Make sure you have types for the appropriate package installed.
+/index.tsx(2,28): error TS2708: Cannot use namespace 'React' as a value.
+/index.tsx(2,32): error TS2322: Type '{ css: string; }' is not assignable to type '{}'.
+  Property 'css' does not exist on type '{}'.
+
+
+==== /node_modules/react/index.d.ts (0 errors) ====
+    export = React;
+    export as namespace React;
+    
+    declare namespace React { }
+    
+    declare global {
+        namespace JSX {
+            interface Element { }
+            interface ElementClass { }
+            interface ElementAttributesProperty { }
+            interface ElementChildrenAttribute { }
+            type LibraryManagedAttributes<C, P> = {}
+            interface IntrinsicAttributes { }
+            interface IntrinsicClassAttributes<T> { }
+            interface IntrinsicElements {
+                div: {}
+            }
+        }
+    }
+==== /node_modules/@emotion/react/jsx-runtime/index.d.ts (0 errors) ====
+    export { EmotionJSX as JSX } from './jsx-namespace'
+    
+==== /node_modules/@emotion/react/jsx-runtime/jsx-namespace.d.ts (0 errors) ====
+    import 'react'
+    
+    type WithConditionalCSSProp<P> = 'className' extends keyof P
+        ? (P extends { className?: string } ? P & { css?: string } : P)
+        : P
+    
+    type ReactJSXElement = JSX.Element
+    type ReactJSXElementClass = JSX.ElementClass
+    type ReactJSXElementAttributesProperty = JSX.ElementAttributesProperty
+    type ReactJSXElementChildrenAttribute = JSX.ElementChildrenAttribute
+    type ReactJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>
+    type ReactJSXIntrinsicAttributes = JSX.IntrinsicAttributes
+    type ReactJSXIntrinsicClassAttributes<T> = JSX.IntrinsicClassAttributes<T>
+    type ReactJSXIntrinsicElements = JSX.IntrinsicElements
+    
+    export namespace EmotionJSX {
+        interface Element extends ReactJSXElement { }
+        interface ElementClass extends ReactJSXElementClass { }
+        interface ElementAttributesProperty
+            extends ReactJSXElementAttributesProperty { }
+        interface ElementChildrenAttribute extends ReactJSXElementChildrenAttribute { }
+    
+        type LibraryManagedAttributes<C, P> = WithConditionalCSSProp<P> &
+            ReactJSXLibraryManagedAttributes<C, P>
+    
+        interface IntrinsicAttributes extends ReactJSXIntrinsicAttributes { }
+        interface IntrinsicClassAttributes<T>
+            extends ReactJSXIntrinsicClassAttributes<T> { }
+    
+        type IntrinsicElements = {
+            [K in keyof ReactJSXIntrinsicElements]: ReactJSXIntrinsicElements[K] & {
+                css?: string
+            }
+        }
+    }
+    
+==== /index.tsx (3 errors) ====
+    /* @jsxImportSource @emotion/react */
+    export const Comp = () => <div css="color: hotpink;"></div>;
+                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+!!! error TS2875: This JSX tag requires the module path '@emotion/react/jsx-runtime' to exist, but none could be found. Make sure you have types for the appropriate package installed.
+                               ~~~
+!!! error TS2708: Cannot use namespace 'React' as a value.
+                                   ~~~
+!!! error TS2322: Type '{ css: string; }' is not assignable to type '{}'.
+!!! error TS2322:   Property 'css' does not exist on type '{}'.
+    
