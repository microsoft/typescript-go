--- old.jsFileCompilationAwaitModifier.symbols
+++ new.jsFileCompilationAwaitModifier.symbols
@@ -5,21 +5,15 @@
 >Foo : Symbol(Foo, Decl(a.js, 0, 0))
 
     async a() {
->a : Symbol(Foo.a, Decl(a.js, 0, 11))
+>a : Symbol(a, Decl(a.js, 0, 11))
 
         await Promise.resolve(1);
->Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
     }
 
     b = async () => {
->b : Symbol(Foo.b, Decl(a.js, 3, 5))
+>b : Symbol(b, Decl(a.js, 3, 5))
 
         await Promise.resolve(1);
->Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
->Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
->resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
     }
 }
 
