--- old.genericWithOpenTypeParameters1.types
+++ new.genericWithOpenTypeParameters1.types
@@= skipped -2, +2 lines =@@
 === genericWithOpenTypeParameters1.ts ===
 class B<T> {
 >B : B<T>
+>T : T
 
    foo(x: T): T { return null; }
 >foo : (x: T) => T
@@= skipped -19, +20 lines =@@
 var f = <T>(x: B<T>) => { return x.foo(1); } // error
 >f : <T>(x: B<T>) => T
 ><T>(x: B<T>) => { return x.foo(1); } : <T>(x: B<T>) => T
+>T : T
 >x : B<T>
 >x.foo(1) : T
 >x.foo : (x: T) => T
@@= skipped -10, +11 lines =@@
 var f2 = <T>(x: B<T>) => { return x.foo<T>(1); } // error
 >f2 : <T>(x: B<T>) => T
 ><T>(x: B<T>) => { return x.foo<T>(1); } : <T>(x: B<T>) => T
+>T : T
 >x : B<T>
 >x.foo<T>(1) : T
 >x.foo : (x: T) => T
@@= skipped -10, +11 lines =@@
 var f3 = <T>(x: B<T>) => { return x.foo<number>(1); } // error
 >f3 : <T>(x: B<T>) => T
 ><T>(x: B<T>) => { return x.foo<number>(1); } : <T>(x: B<T>) => T
+>T : T
 >x : B<T>
 >x.foo<number>(1) : T
 >x.foo : (x: T) => T
