--- old.lift.symbols
+++ new.lift.symbols
@@= skipped -4, +4 lines =@@
 >B : Symbol(B, Decl(lift.ts, 0, 0))
 
     constructor(public y:number) {
->y : Symbol(B.y, Decl(lift.ts, 1, 16))
+>y : Symbol(y, Decl(lift.ts, 1, 16))
     }
     public ll:number;  // to be shadowed
->ll : Symbol(B.ll, Decl(lift.ts, 2, 5))
+>ll : Symbol(ll, Decl(lift.ts, 2, 5))
 }
 
 class C extends B {
@@= skipped -30, +30 lines =@@
     }
 
     public liftxyz () { return x+z+this.y; }
->liftxyz : Symbol(C.liftxyz, Decl(lift.ts, 11, 5))
->this.y : Symbol(B.y, Decl(lift.ts, 1, 16))
+>liftxyz : Symbol(liftxyz, Decl(lift.ts, 11, 5))
+>this.y : Symbol(y, Decl(lift.ts, 1, 16))
 >this : Symbol(C, Decl(lift.ts, 4, 1))
->y : Symbol(B.y, Decl(lift.ts, 1, 16))
+>y : Symbol(y, Decl(lift.ts, 1, 16))
 
     public liftxylocllz () { return x+z+this.y+this.ll; }
->liftxylocllz : Symbol(C.liftxylocllz, Decl(lift.ts, 13, 44))
->this.y : Symbol(B.y, Decl(lift.ts, 1, 16))
+>liftxylocllz : Symbol(liftxylocllz, Decl(lift.ts, 13, 44))
+>this.y : Symbol(y, Decl(lift.ts, 1, 16))
 >this : Symbol(C, Decl(lift.ts, 4, 1))
->y : Symbol(B.y, Decl(lift.ts, 1, 16))
->this.ll : Symbol(B.ll, Decl(lift.ts, 2, 5))
+>y : Symbol(y, Decl(lift.ts, 1, 16))
+>this.ll : Symbol(ll, Decl(lift.ts, 2, 5))
 >this : Symbol(C, Decl(lift.ts, 4, 1))
->ll : Symbol(B.ll, Decl(lift.ts, 2, 5))
+>ll : Symbol(ll, Decl(lift.ts, 2, 5))
 }
 
