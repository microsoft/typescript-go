--- old.truthinessCallExpressionCoercion1.types
+++ new.truthinessCallExpressionCoercion1.types
@@= skipped -1, +1 lines =@@
 
 === truthinessCallExpressionCoercion1.ts ===
 function onlyErrorsWhenTestingNonNullableFunctionType(required: () => boolean, optional?: () => boolean) {
->onlyErrorsWhenTestingNonNullableFunctionType : (required: () => boolean, optional?: () => boolean) => void
+>onlyErrorsWhenTestingNonNullableFunctionType : (required: () => boolean, optional?: () => boolean | undefined) => void
 >required : () => boolean
->optional : (() => boolean) | undefined
+>optional : () => boolean | undefined
 
     // error
     required ? console.log('required') : undefined;
@@= skipped -18, +18 lines =@@
     // ok
     optional ? console.log('optional') : undefined;
 >optional ? console.log('optional') : undefined : void
->optional : (() => boolean) | undefined
+>optional : () => boolean | undefined
 >console.log('optional') : void
 >console.log : (...data: any[]) => void
 >console : Console
@@= skipped -83, +83 lines =@@
 
         ? [() => null].forEach(() => { test(); })
 >[() => null].forEach(() => { test(); }) : void
->[() => null].forEach : (callbackfn: (value: () => null, index: number, array: (() => null)[]) => void, thisArg?: any) => void
->[() => null] : (() => null)[]
+>[() => null].forEach : (callbackfn: (value: () => null, index: number, array: () => null[]) => void, thisArg?: any) => void
+>[() => null] : () => null[]
 >() => null : () => null
->forEach : (callbackfn: (value: () => null, index: number, array: (() => null)[]) => void, thisArg?: any) => void
+>forEach : (callbackfn: (value: () => null, index: number, array: () => null[]) => void, thisArg?: any) => void
 >() => { test(); } : () => void
 >test() : boolean
 >test : () => boolean
@@= skipped -18, +18 lines =@@
 
         ? [() => null].forEach(test => { test() })
 >[() => null].forEach(test => { test() }) : void
->[() => null].forEach : (callbackfn: (value: () => null, index: number, array: (() => null)[]) => void, thisArg?: any) => void
->[() => null] : (() => null)[]
+>[() => null].forEach : (callbackfn: (value: () => null, index: number, array: () => null[]) => void, thisArg?: any) => void
+>[() => null] : () => null[]
 >() => null : () => null
->forEach : (callbackfn: (value: () => null, index: number, array: (() => null)[]) => void, thisArg?: any) => void
+>forEach : (callbackfn: (value: () => null, index: number, array: () => null[]) => void, thisArg?: any) => void
 >test => { test() } : (test: () => null) => void
 >test : () => null
 >test() : null
@@= skipped -17, +17 lines =@@
 >checksPropertyAccess : () => void
 
     const x = {
->x : { foo: { bar(): boolean; }; }
->{        foo: {            bar() { return true; }        }    } : { foo: { bar(): boolean; }; }
+>x : { foo: { bar: () => boolean; }; }
+>{        foo: {            bar() { return true; }        }    } : { foo: { bar: () => boolean; }; }
 
         foo: {
->foo : { bar(): boolean; }
->{            bar() { return true; }        } : { bar(): boolean; }
+>foo : { bar: () => boolean; }
+>{            bar() { return true; }        } : { bar: () => boolean; }
 
             bar() { return true; }
 >bar : () => boolean
@@= skipped -17, +17 lines =@@
     x.foo.bar ? console.log('x.foo.bar') : undefined;
 >x.foo.bar ? console.log('x.foo.bar') : undefined : void
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >console.log('x.foo.bar') : void
 >console.log : (...data: any[]) => void
@@= skipped -13, +13 lines =@@
 
     // ok
     x.foo.bar ? x.foo.bar : undefined;
->x.foo.bar ? x.foo.bar : undefined : (() => boolean) | undefined
+>x.foo.bar ? x.foo.bar : undefined : () => boolean | undefined
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >undefined : undefined
 
     var chrome = {
->chrome : { platformKeys: { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }; }
->{        platformKeys: {            subtleCrypto() {                return {                    sign() {},                    exportKey() { return true }                }            }        }    } : { platformKeys: { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }; }
+>chrome : { platformKeys: { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }; }
+>{        platformKeys: {            subtleCrypto() {                return {                    sign() {},                    exportKey() { return true }                }            }        }    } : { platformKeys: { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }; }
 
         platformKeys: {
->platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->{            subtleCrypto() {                return {                    sign() {},                    exportKey() { return true }                }            }        } : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
+>platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>{            subtleCrypto() {                return {                    sign() {},                    exportKey() { return true }                }            }        } : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
 
             subtleCrypto() {
->subtleCrypto : () => { sign(): void; exportKey(): boolean; }
+>subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
 
                 return {
->{                    sign() {},                    exportKey() { return true }                } : { sign(): void; exportKey(): boolean; }
+>{                    sign() {},                    exportKey() { return true }                } : { sign: () => void; exportKey: () => boolean; }
 
                     sign() {},
 >sign : () => void
@@= skipped -40, +40 lines =@@
     // ok
     if (chrome.platformKeys.subtleCrypto().exportKey) {
 >chrome.platformKeys.subtleCrypto().exportKey : () => boolean
->chrome.platformKeys.subtleCrypto() : { sign(): void; exportKey(): boolean; }
->chrome.platformKeys.subtleCrypto : () => { sign(): void; exportKey(): boolean; }
->chrome.platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->chrome : { platformKeys: { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }; }
->platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->subtleCrypto : () => { sign(): void; exportKey(): boolean; }
+>chrome.platformKeys.subtleCrypto() : { sign: () => void; exportKey: () => boolean; }
+>chrome.platformKeys.subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
+>chrome.platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>chrome : { platformKeys: { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }; }
+>platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
 >exportKey : () => boolean
 
         chrome.platformKeys.subtleCrypto().exportKey
 >chrome.platformKeys.subtleCrypto().exportKey : () => boolean
->chrome.platformKeys.subtleCrypto() : { sign(): void; exportKey(): boolean; }
->chrome.platformKeys.subtleCrypto : () => { sign(): void; exportKey(): boolean; }
->chrome.platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->chrome : { platformKeys: { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }; }
->platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->subtleCrypto : () => { sign(): void; exportKey(): boolean; }
+>chrome.platformKeys.subtleCrypto() : { sign: () => void; exportKey: () => boolean; }
+>chrome.platformKeys.subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
+>chrome.platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>chrome : { platformKeys: { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }; }
+>platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
 >exportKey : () => boolean
     }
 }
@@= skipped -24, +24 lines =@@
 >Foo : Foo
 
     maybeIsUser?: () => boolean;
->maybeIsUser : (() => boolean) | undefined
+>maybeIsUser : () => boolean | undefined
 
     isUser() {
 >isUser : () => boolean
@@= skipped -28, +28 lines =@@
         // ok
         this.maybeIsUser ? console.log('this.maybeIsUser') : undefined;
 >this.maybeIsUser ? console.log('this.maybeIsUser') : undefined : void
->this.maybeIsUser : (() => boolean) | undefined
+>this.maybeIsUser : () => boolean | undefined
 >this : this
->maybeIsUser : (() => boolean) | undefined
+>maybeIsUser : () => boolean | undefined
 >console.log('this.maybeIsUser') : void
 >console.log : (...data: any[]) => void
 >console : Console
