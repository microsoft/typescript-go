--- old.underscoreTest1.symbols
+++ new.underscoreTest1.symbols
@@= skipped -10, +10 lines =@@
 >x : Symbol(x, Decl(underscoreTest1_underscoreTests.ts, 3, 23))
 
 _.each([1, 2, 3], (num) => alert(num.toString()));
->_.each : Symbol(Underscore.Static.each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
+>_.each : Symbol(each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->each : Symbol(Underscore.Static.each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 5, 19))
 >alert : Symbol(alert, Decl(lib.dom.d.ts, --, --), Decl(underscoreTest1_underscoreTests.ts, 2, 14))
->num.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>num.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 5, 19))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 
 _.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString()));
->_.each : Symbol(Underscore.Static.each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
+>_.each : Symbol(each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->each : Symbol(Underscore.Static.each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
 >one : Symbol(one, Decl(underscoreTest1_underscoreTests.ts, 6, 8))
 >two : Symbol(two, Decl(underscoreTest1_underscoreTests.ts, 6, 16))
 >three : Symbol(three, Decl(underscoreTest1_underscoreTests.ts, 6, 24))
 >value : Symbol(value, Decl(underscoreTest1_underscoreTests.ts, 6, 38))
 >key : Symbol(key, Decl(underscoreTest1_underscoreTests.ts, 6, 52))
 >alert : Symbol(alert, Decl(lib.dom.d.ts, --, --), Decl(underscoreTest1_underscoreTests.ts, 2, 14))
->value.toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>value.toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 >value : Symbol(value, Decl(underscoreTest1_underscoreTests.ts, 6, 38))
->toString : Symbol(Number.toString, Decl(lib.es5.d.ts, --, --))
+>toString : Symbol(toString, Decl(lib.es5.d.ts, --, --))
 
 _.map([1, 2, 3], (num) => num * 3);
->_.map : Symbol(Underscore.Static.map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
+>_.map : Symbol(map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->map : Symbol(Underscore.Static.map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 8, 18))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 8, 18))
 
 _.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3);
->_.map : Symbol(Underscore.Static.map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
+>_.map : Symbol(map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->map : Symbol(Underscore.Static.map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
 >one : Symbol(one, Decl(underscoreTest1_underscoreTests.ts, 9, 7))
 >two : Symbol(two, Decl(underscoreTest1_underscoreTests.ts, 9, 15))
 >three : Symbol(three, Decl(underscoreTest1_underscoreTests.ts, 9, 23))
@@= skipped -43, +43 lines =@@
 
 var sum = _.reduce([1, 2, 3], (memo, num) => memo + num, 0);
 >sum : Symbol(sum, Decl(underscoreTest1_underscoreTests.ts, 11, 3))
->_.reduce : Symbol(Underscore.Static.reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
+>_.reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->reduce : Symbol(Underscore.Static.reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
 >memo : Symbol(memo, Decl(underscoreTest1_underscoreTests.ts, 11, 31))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 11, 36))
 >memo : Symbol(memo, Decl(underscoreTest1_underscoreTests.ts, 11, 31))
@@= skipped -13, +13 lines =@@
 
 var flat = _.reduceRight(list, (a, b) => a.concat(b), []);
 >flat : Symbol(flat, Decl(underscoreTest1_underscoreTests.ts, 14, 3))
->_.reduceRight : Symbol(Underscore.Static.reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
+>_.reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->reduceRight : Symbol(Underscore.Static.reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
 >list : Symbol(list, Decl(underscoreTest1_underscoreTests.ts, 13, 3))
 >a : Symbol(a, Decl(underscoreTest1_underscoreTests.ts, 14, 32))
 >b : Symbol(b, Decl(underscoreTest1_underscoreTests.ts, 14, 34))
->a.concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>a.concat : Symbol(concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >a : Symbol(a, Decl(underscoreTest1_underscoreTests.ts, 14, 32))
->concat : Symbol(Array.concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
+>concat : Symbol(concat, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >b : Symbol(b, Decl(underscoreTest1_underscoreTests.ts, 14, 34))
 
 var even = _.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
 >even : Symbol(even, Decl(underscoreTest1_underscoreTests.ts, 16, 3))
->_.find : Symbol(Underscore.Static.find, Decl(underscoreTest1_underscore.ts, 427, 101), Decl(underscoreTest1_underscore.ts, 429, 78))
+>_.find : Symbol(find, Decl(underscoreTest1_underscore.ts, 427, 101), Decl(underscoreTest1_underscore.ts, 429, 78))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->find : Symbol(Underscore.Static.find, Decl(underscoreTest1_underscore.ts, 427, 101), Decl(underscoreTest1_underscore.ts, 429, 78))
+>find : Symbol(find, Decl(underscoreTest1_underscore.ts, 427, 101), Decl(underscoreTest1_underscore.ts, 429, 78))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 16, 39))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 16, 39))
 
 var evens = _.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
 >evens : Symbol(evens, Decl(underscoreTest1_underscoreTests.ts, 18, 3))
->_.filter : Symbol(Underscore.Static.filter, Decl(underscoreTest1_underscore.ts, 432, 90), Decl(underscoreTest1_underscore.ts, 434, 82))
+>_.filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 432, 90), Decl(underscoreTest1_underscore.ts, 434, 82))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->filter : Symbol(Underscore.Static.filter, Decl(underscoreTest1_underscore.ts, 432, 90), Decl(underscoreTest1_underscore.ts, 434, 82))
+>filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 432, 90), Decl(underscoreTest1_underscore.ts, 434, 82))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 18, 42))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 18, 42))
 
@@= skipped -40, +40 lines =@@
 >year : Symbol(year, Decl(underscoreTest1_underscoreTests.ts, 20, 183))
 
 _.where(listOfPlays, { author: "Shakespeare", year: 1611 });
->_.where : Symbol(Underscore.Static.where, Decl(underscoreTest1_underscore.ts, 437, 92), Decl(underscoreTest1_underscore.ts, 439, 53))
+>_.where : Symbol(where, Decl(underscoreTest1_underscore.ts, 437, 92), Decl(underscoreTest1_underscore.ts, 439, 53))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->where : Symbol(Underscore.Static.where, Decl(underscoreTest1_underscore.ts, 437, 92), Decl(underscoreTest1_underscore.ts, 439, 53))
+>where : Symbol(where, Decl(underscoreTest1_underscore.ts, 437, 92), Decl(underscoreTest1_underscore.ts, 439, 53))
 >listOfPlays : Symbol(listOfPlays, Decl(underscoreTest1_underscoreTests.ts, 20, 3))
 >author : Symbol(author, Decl(underscoreTest1_underscoreTests.ts, 21, 22))
 >year : Symbol(year, Decl(underscoreTest1_underscoreTests.ts, 21, 45))
 
 var odds = _.reject([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);
 >odds : Symbol(odds, Decl(underscoreTest1_underscoreTests.ts, 23, 3))
->_.reject : Symbol(Underscore.Static.reject, Decl(underscoreTest1_underscore.ts, 443, 65), Decl(underscoreTest1_underscore.ts, 445, 82))
+>_.reject : Symbol(reject, Decl(underscoreTest1_underscore.ts, 443, 65), Decl(underscoreTest1_underscore.ts, 445, 82))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->reject : Symbol(Underscore.Static.reject, Decl(underscoreTest1_underscore.ts, 443, 65), Decl(underscoreTest1_underscore.ts, 445, 82))
+>reject : Symbol(reject, Decl(underscoreTest1_underscore.ts, 443, 65), Decl(underscoreTest1_underscore.ts, 445, 82))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 23, 41))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 23, 41))
 
 _.all([true, 1, null, 'yes'], _.identity);
->_.all : Symbol(Underscore.Static.all, Decl(underscoreTest1_underscore.ts, 449, 96), Decl(underscoreTest1_underscore.ts, 450, 84))
+>_.all : Symbol(all, Decl(underscoreTest1_underscore.ts, 449, 96), Decl(underscoreTest1_underscore.ts, 450, 84))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->all : Symbol(Underscore.Static.all, Decl(underscoreTest1_underscore.ts, 449, 96), Decl(underscoreTest1_underscore.ts, 450, 84))
->_.identity : Symbol(Underscore.Static.identity, Decl(underscoreTest1_underscore.ts, 618, 29))
+>all : Symbol(all, Decl(underscoreTest1_underscore.ts, 449, 96), Decl(underscoreTest1_underscore.ts, 450, 84))
+>_.identity : Symbol(identity, Decl(underscoreTest1_underscore.ts, 618, 29))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->identity : Symbol(Underscore.Static.identity, Decl(underscoreTest1_underscore.ts, 618, 29))
+>identity : Symbol(identity, Decl(underscoreTest1_underscore.ts, 618, 29))
 
 _.any([null, 0, 'yes', false]);
->_.any : Symbol(Underscore.Static.any, Decl(underscoreTest1_underscore.ts, 454, 95), Decl(underscoreTest1_underscore.ts, 455, 84))
+>_.any : Symbol(any, Decl(underscoreTest1_underscore.ts, 454, 95), Decl(underscoreTest1_underscore.ts, 455, 84))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->any : Symbol(Underscore.Static.any, Decl(underscoreTest1_underscore.ts, 454, 95), Decl(underscoreTest1_underscore.ts, 455, 84))
+>any : Symbol(any, Decl(underscoreTest1_underscore.ts, 454, 95), Decl(underscoreTest1_underscore.ts, 455, 84))
 
 _.contains([1, 2, 3], 3);
->_.contains : Symbol(Underscore.Static.contains, Decl(underscoreTest1_underscore.ts, 456, 94), Decl(underscoreTest1_underscore.ts, 458, 50))
+>_.contains : Symbol(contains, Decl(underscoreTest1_underscore.ts, 456, 94), Decl(underscoreTest1_underscore.ts, 458, 50))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->contains : Symbol(Underscore.Static.contains, Decl(underscoreTest1_underscore.ts, 456, 94), Decl(underscoreTest1_underscore.ts, 458, 50))
+>contains : Symbol(contains, Decl(underscoreTest1_underscore.ts, 456, 94), Decl(underscoreTest1_underscore.ts, 458, 50))
 
 _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
->_.invoke : Symbol(Underscore.Static.invoke, Decl(underscoreTest1_underscore.ts, 461, 59), Decl(underscoreTest1_underscore.ts, 463, 71))
+>_.invoke : Symbol(invoke, Decl(underscoreTest1_underscore.ts, 461, 59), Decl(underscoreTest1_underscore.ts, 463, 71))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->invoke : Symbol(Underscore.Static.invoke, Decl(underscoreTest1_underscore.ts, 461, 59), Decl(underscoreTest1_underscore.ts, 463, 71))
+>invoke : Symbol(invoke, Decl(underscoreTest1_underscore.ts, 461, 59), Decl(underscoreTest1_underscore.ts, 463, 71))
 
 var stooges = [{ name: 'moe', age: 40 }, { name: 'larry', age: 50 }, { name: 'curly', age: 60 }];
 >stooges : Symbol(stooges, Decl(underscoreTest1_underscoreTests.ts, 33, 3))
@@= skipped -48, +48 lines =@@
 >age : Symbol(age, Decl(underscoreTest1_underscoreTests.ts, 33, 85))
 
 _.pluck(stooges, 'name');
->_.pluck : Symbol(Underscore.Static.pluck, Decl(underscoreTest1_underscore.ts, 464, 81), Decl(underscoreTest1_underscore.ts, 466, 56))
+>_.pluck : Symbol(pluck, Decl(underscoreTest1_underscore.ts, 464, 81), Decl(underscoreTest1_underscore.ts, 466, 56))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->pluck : Symbol(Underscore.Static.pluck, Decl(underscoreTest1_underscore.ts, 464, 81), Decl(underscoreTest1_underscore.ts, 466, 56))
+>pluck : Symbol(pluck, Decl(underscoreTest1_underscore.ts, 464, 81), Decl(underscoreTest1_underscore.ts, 466, 56))
 >stooges : Symbol(stooges, Decl(underscoreTest1_underscoreTests.ts, 33, 3))
 
 _.max(stooges, (stooge) => stooge.age);
->_.max : Symbol(Underscore.Static.max, Decl(underscoreTest1_underscore.ts, 467, 66), Decl(underscoreTest1_underscore.ts, 469, 74))
+>_.max : Symbol(max, Decl(underscoreTest1_underscore.ts, 467, 66), Decl(underscoreTest1_underscore.ts, 469, 74))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->max : Symbol(Underscore.Static.max, Decl(underscoreTest1_underscore.ts, 467, 66), Decl(underscoreTest1_underscore.ts, 469, 74))
+>max : Symbol(max, Decl(underscoreTest1_underscore.ts, 467, 66), Decl(underscoreTest1_underscore.ts, 469, 74))
 >stooges : Symbol(stooges, Decl(underscoreTest1_underscoreTests.ts, 33, 3))
 >stooge : Symbol(stooge, Decl(underscoreTest1_underscoreTests.ts, 36, 16))
 >stooge.age : Symbol(age, Decl(underscoreTest1_underscoreTests.ts, 33, 29))
@@= skipped -19, +19 lines =@@
 >numbers : Symbol(numbers, Decl(underscoreTest1_underscoreTests.ts, 38, 3))
 
 _.min(numbers);
->_.min : Symbol(Underscore.Static.min, Decl(underscoreTest1_underscore.ts, 470, 84), Decl(underscoreTest1_underscore.ts, 472, 74))
+>_.min : Symbol(min, Decl(underscoreTest1_underscore.ts, 470, 84), Decl(underscoreTest1_underscore.ts, 472, 74))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->min : Symbol(Underscore.Static.min, Decl(underscoreTest1_underscore.ts, 470, 84), Decl(underscoreTest1_underscore.ts, 472, 74))
+>min : Symbol(min, Decl(underscoreTest1_underscore.ts, 470, 84), Decl(underscoreTest1_underscore.ts, 472, 74))
 >numbers : Symbol(numbers, Decl(underscoreTest1_underscoreTests.ts, 38, 3))
 
 _.sortBy([1, 2, 3, 4, 5, 6], (num) => Math.sin(num));
->_.sortBy : Symbol(Underscore.Static.sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
+>_.sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->sortBy : Symbol(Underscore.Static.sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 41, 30))
->Math.sin : Symbol(Math.sin, Decl(lib.es5.d.ts, --, --))
+>Math.sin : Symbol(sin, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->sin : Symbol(Math.sin, Decl(lib.es5.d.ts, --, --))
+>sin : Symbol(sin, Decl(lib.es5.d.ts, --, --))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 41, 30))
 
 
 // not sure how this is typechecking at all.. Math.floor(e) is number not string..?
 _([1.3, 2.1, 2.4]).groupBy((e: number, i?: number, list?: number[]) => Math.floor(e));
->_([1.3, 2.1, 2.4]).groupBy : Symbol(Underscore.WrappedArray.groupBy, Decl(underscoreTest1_underscore.ts, 112, 42), Decl(underscoreTest1_underscore.ts, 113, 78))
+>_([1.3, 2.1, 2.4]).groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 112, 42), Decl(underscoreTest1_underscore.ts, 113, 78))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->groupBy : Symbol(Underscore.WrappedArray.groupBy, Decl(underscoreTest1_underscore.ts, 112, 42), Decl(underscoreTest1_underscore.ts, 113, 78))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 112, 42), Decl(underscoreTest1_underscore.ts, 113, 78))
 >e : Symbol(e, Decl(underscoreTest1_underscoreTests.ts, 45, 28))
 >i : Symbol(i, Decl(underscoreTest1_underscoreTests.ts, 45, 38))
 >list : Symbol(list, Decl(underscoreTest1_underscoreTests.ts, 45, 50))
->Math.floor : Symbol(Math.floor, Decl(lib.es5.d.ts, --, --))
+>Math.floor : Symbol(floor, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->floor : Symbol(Math.floor, Decl(lib.es5.d.ts, --, --))
+>floor : Symbol(floor, Decl(lib.es5.d.ts, --, --))
 >e : Symbol(e, Decl(underscoreTest1_underscoreTests.ts, 45, 28))
 
 _.groupBy([1.3, 2.1, 2.4], (num: number) => Math.floor(num));
->_.groupBy : Symbol(Underscore.Static.groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
+>_.groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->groupBy : Symbol(Underscore.Static.groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 46, 28))
->Math.floor : Symbol(Math.floor, Decl(lib.es5.d.ts, --, --))
+>Math.floor : Symbol(floor, Decl(lib.es5.d.ts, --, --))
 >Math : Symbol(Math, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->floor : Symbol(Math.floor, Decl(lib.es5.d.ts, --, --))
+>floor : Symbol(floor, Decl(lib.es5.d.ts, --, --))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 46, 28))
 
 _.groupBy(['one', 'two', 'three'], 'length');
->_.groupBy : Symbol(Underscore.Static.groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
+>_.groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->groupBy : Symbol(Underscore.Static.groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
 
 _.countBy([1, 2, 3, 4, 5], (num) => num % 2 == 0 ? 'even' : 'odd');
->_.countBy : Symbol(Underscore.Static.countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
+>_.countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->countBy : Symbol(Underscore.Static.countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 49, 28))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 49, 28))
 
 _.shuffle([1, 2, 3, 4, 5, 6]);
->_.shuffle : Symbol(Underscore.Static.shuffle, Decl(underscoreTest1_underscore.ts, 488, 82), Decl(underscoreTest1_underscore.ts, 490, 35))
+>_.shuffle : Symbol(shuffle, Decl(underscoreTest1_underscore.ts, 488, 82), Decl(underscoreTest1_underscore.ts, 490, 35))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->shuffle : Symbol(Underscore.Static.shuffle, Decl(underscoreTest1_underscore.ts, 488, 82), Decl(underscoreTest1_underscore.ts, 490, 35))
+>shuffle : Symbol(shuffle, Decl(underscoreTest1_underscore.ts, 488, 82), Decl(underscoreTest1_underscore.ts, 490, 35))
 
 // (function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
 
 _.size({ one: 1, two: 2, three: 3 });
->_.size : Symbol(Underscore.Static.size, Decl(underscoreTest1_underscore.ts, 494, 45), Decl(underscoreTest1_underscore.ts, 496, 35))
+>_.size : Symbol(size, Decl(underscoreTest1_underscore.ts, 494, 45), Decl(underscoreTest1_underscore.ts, 496, 35))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->size : Symbol(Underscore.Static.size, Decl(underscoreTest1_underscore.ts, 494, 45), Decl(underscoreTest1_underscore.ts, 496, 35))
+>size : Symbol(size, Decl(underscoreTest1_underscore.ts, 494, 45), Decl(underscoreTest1_underscore.ts, 496, 35))
 >one : Symbol(one, Decl(underscoreTest1_underscoreTests.ts, 55, 8))
 >two : Symbol(two, Decl(underscoreTest1_underscoreTests.ts, 55, 16))
 >three : Symbol(three, Decl(underscoreTest1_underscoreTests.ts, 55, 24))
@@= skipped -69, +69 lines =@@
 ///////////////////////////////////////////////////////////////////////////////////////
 
 _.first([5, 4, 3, 2, 1]);
->_.first : Symbol(Underscore.Static.first, Decl(underscoreTest1_underscore.ts, 497, 45), Decl(underscoreTest1_underscore.ts, 499, 31))
+>_.first : Symbol(first, Decl(underscoreTest1_underscore.ts, 497, 45), Decl(underscoreTest1_underscore.ts, 499, 31))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->first : Symbol(Underscore.Static.first, Decl(underscoreTest1_underscore.ts, 497, 45), Decl(underscoreTest1_underscore.ts, 499, 31))
+>first : Symbol(first, Decl(underscoreTest1_underscore.ts, 497, 45), Decl(underscoreTest1_underscore.ts, 499, 31))
 
 _.initial([5, 4, 3, 2, 1]);
->_.initial : Symbol(Underscore.Static.initial, Decl(underscoreTest1_underscore.ts, 504, 47), Decl(underscoreTest1_underscore.ts, 506, 33))
+>_.initial : Symbol(initial, Decl(underscoreTest1_underscore.ts, 504, 47), Decl(underscoreTest1_underscore.ts, 506, 33))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->initial : Symbol(Underscore.Static.initial, Decl(underscoreTest1_underscore.ts, 504, 47), Decl(underscoreTest1_underscore.ts, 506, 33))
+>initial : Symbol(initial, Decl(underscoreTest1_underscore.ts, 504, 47), Decl(underscoreTest1_underscore.ts, 506, 33))
 
 _.last([5, 4, 3, 2, 1]);
->_.last : Symbol(Underscore.Static.last, Decl(underscoreTest1_underscore.ts, 507, 50), Decl(underscoreTest1_underscore.ts, 509, 30))
+>_.last : Symbol(last, Decl(underscoreTest1_underscore.ts, 507, 50), Decl(underscoreTest1_underscore.ts, 509, 30))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->last : Symbol(Underscore.Static.last, Decl(underscoreTest1_underscore.ts, 507, 50), Decl(underscoreTest1_underscore.ts, 509, 30))
+>last : Symbol(last, Decl(underscoreTest1_underscore.ts, 507, 50), Decl(underscoreTest1_underscore.ts, 509, 30))
 
 _.rest([5, 4, 3, 2, 1]);
->_.rest : Symbol(Underscore.Static.rest, Decl(underscoreTest1_underscore.ts, 510, 47))
+>_.rest : Symbol(rest, Decl(underscoreTest1_underscore.ts, 510, 47))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->rest : Symbol(Underscore.Static.rest, Decl(underscoreTest1_underscore.ts, 510, 47))
+>rest : Symbol(rest, Decl(underscoreTest1_underscore.ts, 510, 47))
 
 _.compact([0, 1, false, 2, '', 3]);
->_.compact : Symbol(Underscore.Static.compact, Decl(underscoreTest1_underscore.ts, 512, 48))
+>_.compact : Symbol(compact, Decl(underscoreTest1_underscore.ts, 512, 48))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->compact : Symbol(Underscore.Static.compact, Decl(underscoreTest1_underscore.ts, 512, 48))
+>compact : Symbol(compact, Decl(underscoreTest1_underscore.ts, 512, 48))
 
 _.flatten([1, 2, 3, 4]);
->_.flatten : Symbol(Underscore.Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>_.flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->flatten : Symbol(Underscore.Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 
 _.flatten([1, [2]]);
->_.flatten : Symbol(Underscore.Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>_.flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->flatten : Symbol(Underscore.Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 
 // typescript doesn't like the elements being different
 _.flatten([1, [2], [3, [[4]]]]);
->_.flatten : Symbol(Underscore.Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>_.flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->flatten : Symbol(Underscore.Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 
 _.flatten([1, [2], [3, [[4]]]], true);
->_.flatten : Symbol(Underscore.Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>_.flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->flatten : Symbol(Underscore.Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 
 _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
->_.without : Symbol(Underscore.Static.without, Decl(underscoreTest1_underscore.ts, 517, 57))
+>_.without : Symbol(without, Decl(underscoreTest1_underscore.ts, 517, 57))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->without : Symbol(Underscore.Static.without, Decl(underscoreTest1_underscore.ts, 517, 57))
+>without : Symbol(without, Decl(underscoreTest1_underscore.ts, 517, 57))
 
 _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
->_.union : Symbol(Underscore.Static.union, Decl(underscoreTest1_underscore.ts, 519, 51))
+>_.union : Symbol(union, Decl(underscoreTest1_underscore.ts, 519, 51))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->union : Symbol(Underscore.Static.union, Decl(underscoreTest1_underscore.ts, 519, 51))
+>union : Symbol(union, Decl(underscoreTest1_underscore.ts, 519, 51))
 
 _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
->_.intersection : Symbol(Underscore.Static.intersection, Decl(underscoreTest1_underscore.ts, 521, 40))
+>_.intersection : Symbol(intersection, Decl(underscoreTest1_underscore.ts, 521, 40))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->intersection : Symbol(Underscore.Static.intersection, Decl(underscoreTest1_underscore.ts, 521, 40))
+>intersection : Symbol(intersection, Decl(underscoreTest1_underscore.ts, 521, 40))
 
 _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
->_.difference : Symbol(Underscore.Static.difference, Decl(underscoreTest1_underscore.ts, 523, 47))
+>_.difference : Symbol(difference, Decl(underscoreTest1_underscore.ts, 523, 47))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->difference : Symbol(Underscore.Static.difference, Decl(underscoreTest1_underscore.ts, 523, 47))
+>difference : Symbol(difference, Decl(underscoreTest1_underscore.ts, 523, 47))
 
 _.uniq([1, 2, 1, 3, 1, 4]);
->_.uniq : Symbol(Underscore.Static.uniq, Decl(underscoreTest1_underscore.ts, 525, 56), Decl(underscoreTest1_underscore.ts, 527, 52))
+>_.uniq : Symbol(uniq, Decl(underscoreTest1_underscore.ts, 525, 56), Decl(underscoreTest1_underscore.ts, 527, 52))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->uniq : Symbol(Underscore.Static.uniq, Decl(underscoreTest1_underscore.ts, 525, 56), Decl(underscoreTest1_underscore.ts, 527, 52))
+>uniq : Symbol(uniq, Decl(underscoreTest1_underscore.ts, 525, 56), Decl(underscoreTest1_underscore.ts, 527, 52))
 
 _.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
->_.zip : Symbol(Underscore.Static.zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
+>_.zip : Symbol(zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->zip : Symbol(Underscore.Static.zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
+>zip : Symbol(zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
 
 _.object(['moe', 'larry', 'curly'], [30, 40, 50]);
->_.object : Symbol(Underscore.Static.object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
+>_.object : Symbol(object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->object : Symbol(Underscore.Static.object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
+>object : Symbol(object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
 
 _.object([['moe', 30], ['larry', 40], ['curly', 50]]);
->_.object : Symbol(Underscore.Static.object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
+>_.object : Symbol(object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->object : Symbol(Underscore.Static.object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
+>object : Symbol(object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
 
 _.indexOf([1, 2, 3], 2);
->_.indexOf : Symbol(Underscore.Static.indexOf, Decl(underscoreTest1_underscore.ts, 538, 51))
+>_.indexOf : Symbol(indexOf, Decl(underscoreTest1_underscore.ts, 538, 51))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->indexOf : Symbol(Underscore.Static.indexOf, Decl(underscoreTest1_underscore.ts, 538, 51))
+>indexOf : Symbol(indexOf, Decl(underscoreTest1_underscore.ts, 538, 51))
 
 _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
->_.lastIndexOf : Symbol(Underscore.Static.lastIndexOf, Decl(underscoreTest1_underscore.ts, 540, 68))
+>_.lastIndexOf : Symbol(lastIndexOf, Decl(underscoreTest1_underscore.ts, 540, 68))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->lastIndexOf : Symbol(Underscore.Static.lastIndexOf, Decl(underscoreTest1_underscore.ts, 540, 68))
+>lastIndexOf : Symbol(lastIndexOf, Decl(underscoreTest1_underscore.ts, 540, 68))
 
 _.sortedIndex([10, 20, 30, 40, 50], 35);
->_.sortedIndex : Symbol(Underscore.Static.sortedIndex, Decl(underscoreTest1_underscore.ts, 542, 72), Decl(underscoreTest1_underscore.ts, 544, 72))
+>_.sortedIndex : Symbol(sortedIndex, Decl(underscoreTest1_underscore.ts, 542, 72), Decl(underscoreTest1_underscore.ts, 544, 72))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->sortedIndex : Symbol(Underscore.Static.sortedIndex, Decl(underscoreTest1_underscore.ts, 542, 72), Decl(underscoreTest1_underscore.ts, 544, 72))
+>sortedIndex : Symbol(sortedIndex, Decl(underscoreTest1_underscore.ts, 542, 72), Decl(underscoreTest1_underscore.ts, 544, 72))
 
 _.range(10);
->_.range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>_.range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 
 _.range(1, 11);
->_.range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>_.range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 
 _.range(0, 30, 5);
->_.range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>_.range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 
 _.range(0, 30, 5);
->_.range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>_.range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 
 _.range(0);
->_.range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>_.range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->range : Symbol(Underscore.Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 
 ///////////////////////////////////////////////////////////////////////////////////////
 
@@= skipped -136, +136 lines =@@
 // instead of the newly returned _bind => func type.
 var func2 = _.bind(func, { name: 'moe' }, 'hi');
 >func2 : Symbol(func2, Decl(underscoreTest1_underscoreTests.ts, 93, 3))
->_.bind : Symbol(Underscore.Static.bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
+>_.bind : Symbol(bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->bind : Symbol(Underscore.Static.bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
+>bind : Symbol(bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
 >func : Symbol(func, Decl(underscoreTest1_underscoreTests.ts, 90, 3))
 >name : Symbol(name, Decl(underscoreTest1_underscoreTests.ts, 93, 26))
 
@@= skipped -25, +25 lines =@@
 
 };
 _.bindAll(buttonView);
->_.bindAll : Symbol(Underscore.Static.bindAll, Decl(underscoreTest1_underscore.ts, 551, 68))
+>_.bindAll : Symbol(bindAll, Decl(underscoreTest1_underscore.ts, 551, 68))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->bindAll : Symbol(Underscore.Static.bindAll, Decl(underscoreTest1_underscore.ts, 551, 68))
+>bindAll : Symbol(bindAll, Decl(underscoreTest1_underscore.ts, 551, 68))
 >buttonView : Symbol(buttonView, Decl(underscoreTest1_underscoreTests.ts, 96, 3))
 
 $('#underscore_button').bind('click', buttonView.onClick);
@@= skipped -13, +13 lines =@@
 
 var fibonacci = _.memoize(function (n) {
 >fibonacci : Symbol(fibonacci, Decl(underscoreTest1_underscoreTests.ts, 104, 3))
->_.memoize : Symbol(Underscore.Static.memoize, Decl(underscoreTest1_underscore.ts, 555, 58))
+>_.memoize : Symbol(memoize, Decl(underscoreTest1_underscore.ts, 555, 58))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->memoize : Symbol(Underscore.Static.memoize, Decl(underscoreTest1_underscore.ts, 555, 58))
+>memoize : Symbol(memoize, Decl(underscoreTest1_underscore.ts, 555, 58))
 >n : Symbol(n, Decl(underscoreTest1_underscoreTests.ts, 104, 36))
 
     return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
@@= skipped -17, +17 lines =@@
 
 var log = _.bind((message?: string, ...rest: string[]) => { }, Date);
 >log : Symbol(log, Decl(underscoreTest1_underscoreTests.ts, 108, 3))
->_.bind : Symbol(Underscore.Static.bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
+>_.bind : Symbol(bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->bind : Symbol(Underscore.Static.bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
+>bind : Symbol(bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
 >message : Symbol(message, Decl(underscoreTest1_underscoreTests.ts, 108, 18))
 >rest : Symbol(rest, Decl(underscoreTest1_underscoreTests.ts, 108, 35))
 >Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))
 
 _.delay(log, 1000, 'logged later');
->_.delay : Symbol(Underscore.Static.delay, Decl(underscoreTest1_underscore.ts, 557, 73))
+>_.delay : Symbol(delay, Decl(underscoreTest1_underscore.ts, 557, 73))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->delay : Symbol(Underscore.Static.delay, Decl(underscoreTest1_underscore.ts, 557, 73))
+>delay : Symbol(delay, Decl(underscoreTest1_underscore.ts, 557, 73))
 >log : Symbol(log, Decl(underscoreTest1_underscoreTests.ts, 108, 3))
 
 _.defer(function () { alert('deferred'); });
->_.defer : Symbol(Underscore.Static.defer, Decl(underscoreTest1_underscore.ts, 559, 68))
+>_.defer : Symbol(defer, Decl(underscoreTest1_underscore.ts, 559, 68))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->defer : Symbol(Underscore.Static.defer, Decl(underscoreTest1_underscore.ts, 559, 68))
+>defer : Symbol(defer, Decl(underscoreTest1_underscore.ts, 559, 68))
 >alert : Symbol(alert, Decl(lib.dom.d.ts, --, --), Decl(underscoreTest1_underscoreTests.ts, 2, 14))
 
 var updatePosition = () => alert('updating position...');
@@= skipped -25, +25 lines =@@
 
 var throttled = _.throttle(updatePosition, 100);
 >throttled : Symbol(throttled, Decl(underscoreTest1_underscoreTests.ts, 114, 3))
->_.throttle : Symbol(Underscore.Static.throttle, Decl(underscoreTest1_underscore.ts, 561, 54))
+>_.throttle : Symbol(throttle, Decl(underscoreTest1_underscore.ts, 561, 54))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->throttle : Symbol(Underscore.Static.throttle, Decl(underscoreTest1_underscore.ts, 561, 54))
+>throttle : Symbol(throttle, Decl(underscoreTest1_underscore.ts, 561, 54))
 >updatePosition : Symbol(updatePosition, Decl(underscoreTest1_underscoreTests.ts, 113, 3))
 
 $(null).scroll(throttled);
@@= skipped -15, +15 lines =@@
 
 var lazyLayout = _.debounce(calculateLayout, 300);
 >lazyLayout : Symbol(lazyLayout, Decl(underscoreTest1_underscoreTests.ts, 118, 3))
->_.debounce : Symbol(Underscore.Static.debounce, Decl(underscoreTest1_underscore.ts, 563, 63))
+>_.debounce : Symbol(debounce, Decl(underscoreTest1_underscore.ts, 563, 63))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->debounce : Symbol(Underscore.Static.debounce, Decl(underscoreTest1_underscore.ts, 563, 63))
+>debounce : Symbol(debounce, Decl(underscoreTest1_underscore.ts, 563, 63))
 >calculateLayout : Symbol(calculateLayout, Decl(underscoreTest1_underscoreTests.ts, 117, 3))
 
 $(null).resize(lazyLayout);
@@= skipped -15, +15 lines =@@
 
 var initialize = _.once(createApplication);
 >initialize : Symbol(initialize, Decl(underscoreTest1_underscoreTests.ts, 122, 3))
->_.once : Symbol(Underscore.Static.once, Decl(underscoreTest1_underscore.ts, 565, 84))
+>_.once : Symbol(once, Decl(underscoreTest1_underscore.ts, 565, 84))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->once : Symbol(Underscore.Static.once, Decl(underscoreTest1_underscore.ts, 565, 84))
+>once : Symbol(once, Decl(underscoreTest1_underscore.ts, 565, 84))
 >createApplication : Symbol(createApplication, Decl(underscoreTest1_underscoreTests.ts, 121, 3))
 
 initialize();
@@= skipped -20, +20 lines =@@
 
 var renderNotes = _.after(notes.length, render);
 >renderNotes : Symbol(renderNotes, Decl(underscoreTest1_underscoreTests.ts, 128, 3))
->_.after : Symbol(Underscore.Static.after, Decl(underscoreTest1_underscore.ts, 567, 45))
+>_.after : Symbol(after, Decl(underscoreTest1_underscore.ts, 567, 45))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->after : Symbol(Underscore.Static.after, Decl(underscoreTest1_underscore.ts, 567, 45))
->notes.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>after : Symbol(after, Decl(underscoreTest1_underscore.ts, 567, 45))
+>notes.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >notes : Symbol(notes, Decl(underscoreTest1_underscoreTests.ts, 126, 3))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >render : Symbol(render, Decl(underscoreTest1_underscoreTests.ts, 127, 3))
 
 _.each(notes, (note) => note.asyncSave({ success: renderNotes }));
->_.each : Symbol(Underscore.Static.each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
+>_.each : Symbol(each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->each : Symbol(Underscore.Static.each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
 >notes : Symbol(notes, Decl(underscoreTest1_underscoreTests.ts, 126, 3))
 >note : Symbol(note, Decl(underscoreTest1_underscoreTests.ts, 129, 15))
 >note : Symbol(note, Decl(underscoreTest1_underscoreTests.ts, 129, 15))
@@= skipped -25, +25 lines =@@
 
 hello = _.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; });
 >hello : Symbol(hello, Decl(underscoreTest1_underscoreTests.ts, 131, 3))
->_.wrap : Symbol(Underscore.Static.wrap, Decl(underscoreTest1_underscore.ts, 569, 61))
+>_.wrap : Symbol(wrap, Decl(underscoreTest1_underscore.ts, 569, 61))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->wrap : Symbol(Underscore.Static.wrap, Decl(underscoreTest1_underscore.ts, 569, 61))
+>wrap : Symbol(wrap, Decl(underscoreTest1_underscore.ts, 569, 61))
 >hello : Symbol(hello, Decl(underscoreTest1_underscoreTests.ts, 131, 3))
 >func : Symbol(func, Decl(underscoreTest1_underscoreTests.ts, 132, 23))
 >arg : Symbol(arg, Decl(underscoreTest1_underscoreTests.ts, 132, 28))
@@= skipped -24, +24 lines =@@
 
 var welcome = _.compose(exclaim, greet);
 >welcome : Symbol(welcome, Decl(underscoreTest1_underscoreTests.ts, 137, 3))
->_.compose : Symbol(Underscore.Static.compose, Decl(underscoreTest1_underscore.ts, 571, 88))
+>_.compose : Symbol(compose, Decl(underscoreTest1_underscore.ts, 571, 88))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->compose : Symbol(Underscore.Static.compose, Decl(underscoreTest1_underscore.ts, 571, 88))
+>compose : Symbol(compose, Decl(underscoreTest1_underscore.ts, 571, 88))
 >exclaim : Symbol(exclaim, Decl(underscoreTest1_underscoreTests.ts, 136, 3))
 >greet : Symbol(greet, Decl(underscoreTest1_underscoreTests.ts, 135, 3))
 
@@= skipped -12, +12 lines =@@
 ///////////////////////////////////////////////////////////////////////////////////////
 
 _.keys({ one: 1, two: 2, three: 3 });
->_.keys : Symbol(Underscore.Static.keys, Decl(underscoreTest1_underscore.ts, 573, 48))
+>_.keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 573, 48))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->keys : Symbol(Underscore.Static.keys, Decl(underscoreTest1_underscore.ts, 573, 48))
+>keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 573, 48))
 >one : Symbol(one, Decl(underscoreTest1_underscoreTests.ts, 142, 8))
 >two : Symbol(two, Decl(underscoreTest1_underscoreTests.ts, 142, 16))
 >three : Symbol(three, Decl(underscoreTest1_underscoreTests.ts, 142, 24))
 
 _.values({ one: 1, two: 2, three: 3 });
->_.values : Symbol(Underscore.Static.values, Decl(underscoreTest1_underscore.ts, 575, 36))
+>_.values : Symbol(values, Decl(underscoreTest1_underscore.ts, 575, 36))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->values : Symbol(Underscore.Static.values, Decl(underscoreTest1_underscore.ts, 575, 36))
+>values : Symbol(values, Decl(underscoreTest1_underscore.ts, 575, 36))
 >one : Symbol(one, Decl(underscoreTest1_underscoreTests.ts, 143, 10))
 >two : Symbol(two, Decl(underscoreTest1_underscoreTests.ts, 143, 18))
 >three : Symbol(three, Decl(underscoreTest1_underscoreTests.ts, 143, 26))
 
 _.pairs({ one: 1, two: 2, three: 3 });
->_.pairs : Symbol(Underscore.Static.pairs, Decl(underscoreTest1_underscore.ts, 577, 35))
+>_.pairs : Symbol(pairs, Decl(underscoreTest1_underscore.ts, 577, 35))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->pairs : Symbol(Underscore.Static.pairs, Decl(underscoreTest1_underscore.ts, 577, 35))
+>pairs : Symbol(pairs, Decl(underscoreTest1_underscore.ts, 577, 35))
 >one : Symbol(one, Decl(underscoreTest1_underscoreTests.ts, 144, 9))
 >two : Symbol(two, Decl(underscoreTest1_underscoreTests.ts, 144, 17))
 >three : Symbol(three, Decl(underscoreTest1_underscoreTests.ts, 144, 25))
 
 _.invert({ Moe: "Moses", Larry: "Louis", Curly: "Jerome" });
->_.invert : Symbol(Underscore.Static.invert, Decl(underscoreTest1_underscore.ts, 579, 36))
+>_.invert : Symbol(invert, Decl(underscoreTest1_underscore.ts, 579, 36))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->invert : Symbol(Underscore.Static.invert, Decl(underscoreTest1_underscore.ts, 579, 36))
+>invert : Symbol(invert, Decl(underscoreTest1_underscore.ts, 579, 36))
 >Moe : Symbol(Moe, Decl(underscoreTest1_underscoreTests.ts, 145, 10))
 >Larry : Symbol(Larry, Decl(underscoreTest1_underscoreTests.ts, 145, 24))
 >Curly : Symbol(Curly, Decl(underscoreTest1_underscoreTests.ts, 145, 40))
 
 _.functions(_);
->_.functions : Symbol(Underscore.Static.functions, Decl(underscoreTest1_underscore.ts, 581, 33))
+>_.functions : Symbol(functions, Decl(underscoreTest1_underscore.ts, 581, 33))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->functions : Symbol(Underscore.Static.functions, Decl(underscoreTest1_underscore.ts, 581, 33))
+>functions : Symbol(functions, Decl(underscoreTest1_underscore.ts, 581, 33))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
 
 _.extend({ name: 'moe' }, { age: 50 });
->_.extend : Symbol(Underscore.Static.extend, Decl(underscoreTest1_underscore.ts, 584, 39))
+>_.extend : Symbol(extend, Decl(underscoreTest1_underscore.ts, 584, 39))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->extend : Symbol(Underscore.Static.extend, Decl(underscoreTest1_underscore.ts, 584, 39))
+>extend : Symbol(extend, Decl(underscoreTest1_underscore.ts, 584, 39))
 >name : Symbol(name, Decl(underscoreTest1_underscoreTests.ts, 147, 10))
 >age : Symbol(age, Decl(underscoreTest1_underscoreTests.ts, 147, 27))
 
 _.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age');
->_.pick : Symbol(Underscore.Static.pick, Decl(underscoreTest1_underscore.ts, 586, 56))
+>_.pick : Symbol(pick, Decl(underscoreTest1_underscore.ts, 586, 56))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->pick : Symbol(Underscore.Static.pick, Decl(underscoreTest1_underscore.ts, 586, 56))
+>pick : Symbol(pick, Decl(underscoreTest1_underscore.ts, 586, 56))
 >name : Symbol(name, Decl(underscoreTest1_underscoreTests.ts, 148, 8))
 >age : Symbol(age, Decl(underscoreTest1_underscoreTests.ts, 148, 21))
 >userid : Symbol(userid, Decl(underscoreTest1_underscoreTests.ts, 148, 30))
 
 _.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid');
->_.omit : Symbol(Underscore.Static.omit, Decl(underscoreTest1_underscore.ts, 588, 49))
+>_.omit : Symbol(omit, Decl(underscoreTest1_underscore.ts, 588, 49))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->omit : Symbol(Underscore.Static.omit, Decl(underscoreTest1_underscore.ts, 588, 49))
+>omit : Symbol(omit, Decl(underscoreTest1_underscore.ts, 588, 49))
 >name : Symbol(name, Decl(underscoreTest1_underscoreTests.ts, 149, 8))
 >age : Symbol(age, Decl(underscoreTest1_underscoreTests.ts, 149, 21))
 >userid : Symbol(userid, Decl(underscoreTest1_underscoreTests.ts, 149, 30))
@@= skipped -65, +65 lines =@@
 >flavor : Symbol(flavor, Decl(underscoreTest1_underscoreTests.ts, 151, 16))
 
 _.defaults(iceCream, { flavor: "vanilla", sprinkles: "lots" });
->_.defaults : Symbol(Underscore.Static.defaults, Decl(underscoreTest1_underscore.ts, 590, 49))
+>_.defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 590, 49))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->defaults : Symbol(Underscore.Static.defaults, Decl(underscoreTest1_underscore.ts, 590, 49))
+>defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 590, 49))
 >iceCream : Symbol(iceCream, Decl(underscoreTest1_underscoreTests.ts, 151, 3))
 >flavor : Symbol(flavor, Decl(underscoreTest1_underscoreTests.ts, 152, 22))
 >sprinkles : Symbol(sprinkles, Decl(underscoreTest1_underscoreTests.ts, 152, 41))
 
 _.clone({ name: 'moe' });
->_.clone : Symbol(Underscore.Static.clone, Decl(underscoreTest1_underscore.ts, 592, 54))
+>_.clone : Symbol(clone, Decl(underscoreTest1_underscore.ts, 592, 54))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->clone : Symbol(Underscore.Static.clone, Decl(underscoreTest1_underscore.ts, 592, 54))
+>clone : Symbol(clone, Decl(underscoreTest1_underscore.ts, 592, 54))
 >name : Symbol(name, Decl(underscoreTest1_underscoreTests.ts, 154, 9))
 
 _.chain([1, 2, 3, 200])
->_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num })    .value : Symbol(Underscore.ChainedObject.value, Decl(underscoreTest1_underscore.ts, 234, 46))
->_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map : Symbol(Underscore.ChainedArray.map, Decl(underscoreTest1_underscore.ts, 240, 82))
->_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap : Symbol(Underscore.ChainedArray.tap, Decl(underscoreTest1_underscore.ts, 325, 33))
->_.chain([1, 2, 3, 200])    .filter : Symbol(Underscore.ChainedArray.filter, Decl(underscoreTest1_underscore.ts, 254, 81))
->_.chain : Symbol(Underscore.Static.chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
+>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num })    .value : Symbol(value, Decl(underscoreTest1_underscore.ts, 234, 46))
+>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map : Symbol(map, Decl(underscoreTest1_underscore.ts, 240, 82))
+>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap : Symbol(tap, Decl(underscoreTest1_underscore.ts, 325, 33))
+>_.chain([1, 2, 3, 200])    .filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 254, 81))
+>_.chain : Symbol(chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->chain : Symbol(Underscore.Static.chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
+>chain : Symbol(chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
 
     .filter(function (num) { return num % 2 == 0; })
->filter : Symbol(Underscore.ChainedArray.filter, Decl(underscoreTest1_underscore.ts, 254, 81))
+>filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 254, 81))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 157, 22))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 157, 22))
 
     .tap(<any>alert)
->tap : Symbol(Underscore.ChainedArray.tap, Decl(underscoreTest1_underscore.ts, 325, 33))
+>tap : Symbol(tap, Decl(underscoreTest1_underscore.ts, 325, 33))
 >alert : Symbol(alert, Decl(lib.dom.d.ts, --, --), Decl(underscoreTest1_underscoreTests.ts, 2, 14))
 
     .map(function (num) { return num * num })
->map : Symbol(Underscore.ChainedArray.map, Decl(underscoreTest1_underscore.ts, 240, 82))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 240, 82))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 159, 19))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 159, 19))
 >num : Symbol(num, Decl(underscoreTest1_underscoreTests.ts, 159, 19))
 
     .value();
->value : Symbol(Underscore.ChainedObject.value, Decl(underscoreTest1_underscore.ts, 234, 46))
+>value : Symbol(value, Decl(underscoreTest1_underscore.ts, 234, 46))
 
 _.has({ a: 1, b: 2, c: 3 }, "b");
->_.has : Symbol(Underscore.Static.has, Decl(underscoreTest1_underscore.ts, 596, 63))
+>_.has : Symbol(has, Decl(underscoreTest1_underscore.ts, 596, 63))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->has : Symbol(Underscore.Static.has, Decl(underscoreTest1_underscore.ts, 596, 63))
+>has : Symbol(has, Decl(underscoreTest1_underscore.ts, 596, 63))
 >a : Symbol(a, Decl(underscoreTest1_underscoreTests.ts, 162, 7))
 >b : Symbol(b, Decl(underscoreTest1_underscoreTests.ts, 162, 13))
 >c : Symbol(c, Decl(underscoreTest1_underscoreTests.ts, 162, 19))
@@= skipped -63, +63 lines =@@
 >clone : Symbol(clone, Decl(underscoreTest1_underscoreTests.ts, 165, 3))
 
 _.isEqual(moe, clone);
->_.isEqual : Symbol(Underscore.Static.isEqual, Decl(underscoreTest1_underscore.ts, 598, 47))
+>_.isEqual : Symbol(isEqual, Decl(underscoreTest1_underscore.ts, 598, 47))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isEqual : Symbol(Underscore.Static.isEqual, Decl(underscoreTest1_underscore.ts, 598, 47))
+>isEqual : Symbol(isEqual, Decl(underscoreTest1_underscore.ts, 598, 47))
 >moe : Symbol(moe, Decl(underscoreTest1_underscoreTests.ts, 164, 3))
 >clone : Symbol(clone, Decl(underscoreTest1_underscoreTests.ts, 165, 3))
 
 _.isEmpty([1, 2, 3]);
->_.isEmpty : Symbol(Underscore.Static.isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
+>_.isEmpty : Symbol(isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isEmpty : Symbol(Underscore.Static.isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
+>isEmpty : Symbol(isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
 
 _.isEmpty({});
->_.isEmpty : Symbol(Underscore.Static.isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
+>_.isEmpty : Symbol(isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isEmpty : Symbol(Underscore.Static.isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
+>isEmpty : Symbol(isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
 
 _.isElement($('body')[0]);
->_.isElement : Symbol(Underscore.Static.isElement, Decl(underscoreTest1_underscore.ts, 602, 38))
+>_.isElement : Symbol(isElement, Decl(underscoreTest1_underscore.ts, 602, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isElement : Symbol(Underscore.Static.isElement, Decl(underscoreTest1_underscore.ts, 602, 38))
+>isElement : Symbol(isElement, Decl(underscoreTest1_underscore.ts, 602, 38))
 >$ : Symbol($, Decl(underscoreTest1_underscoreTests.ts, 2, 11))
 
 (function () { return _.isArray(arguments); })();
->_.isArray : Symbol(Underscore.Static.isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
+>_.isArray : Symbol(isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isArray : Symbol(Underscore.Static.isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
+>isArray : Symbol(isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
 >arguments : Symbol(arguments)
 
 _.isArray([1, 2, 3]);
->_.isArray : Symbol(Underscore.Static.isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
+>_.isArray : Symbol(isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isArray : Symbol(Underscore.Static.isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
+>isArray : Symbol(isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
 
 _.isObject({});
->_.isObject : Symbol(Underscore.Static.isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
+>_.isObject : Symbol(isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isObject : Symbol(Underscore.Static.isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
+>isObject : Symbol(isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
 
 _.isObject(1);
->_.isObject : Symbol(Underscore.Static.isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
+>_.isObject : Symbol(isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isObject : Symbol(Underscore.Static.isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
+>isObject : Symbol(isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
 
 
 // (() => { return _.isArguments(arguments); })(1, 2, 3);
 _.isArguments([1, 2, 3]);
->_.isArguments : Symbol(Underscore.Static.isArguments, Decl(underscoreTest1_underscore.ts, 605, 38))
+>_.isArguments : Symbol(isArguments, Decl(underscoreTest1_underscore.ts, 605, 38))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isArguments : Symbol(Underscore.Static.isArguments, Decl(underscoreTest1_underscore.ts, 605, 38))
+>isArguments : Symbol(isArguments, Decl(underscoreTest1_underscore.ts, 605, 38))
 
 _.isFunction(alert);
->_.isFunction : Symbol(Underscore.Static.isFunction, Decl(underscoreTest1_underscore.ts, 606, 42))
+>_.isFunction : Symbol(isFunction, Decl(underscoreTest1_underscore.ts, 606, 42))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isFunction : Symbol(Underscore.Static.isFunction, Decl(underscoreTest1_underscore.ts, 606, 42))
+>isFunction : Symbol(isFunction, Decl(underscoreTest1_underscore.ts, 606, 42))
 >alert : Symbol(alert, Decl(lib.dom.d.ts, --, --), Decl(underscoreTest1_underscoreTests.ts, 2, 14))
 
 _.isString("moe");
->_.isString : Symbol(Underscore.Static.isString, Decl(underscoreTest1_underscore.ts, 607, 41))
+>_.isString : Symbol(isString, Decl(underscoreTest1_underscore.ts, 607, 41))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isString : Symbol(Underscore.Static.isString, Decl(underscoreTest1_underscore.ts, 607, 41))
+>isString : Symbol(isString, Decl(underscoreTest1_underscore.ts, 607, 41))
 
 _.isNumber(8.4 * 5);
->_.isNumber : Symbol(Underscore.Static.isNumber, Decl(underscoreTest1_underscore.ts, 608, 39))
+>_.isNumber : Symbol(isNumber, Decl(underscoreTest1_underscore.ts, 608, 39))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isNumber : Symbol(Underscore.Static.isNumber, Decl(underscoreTest1_underscore.ts, 608, 39))
+>isNumber : Symbol(isNumber, Decl(underscoreTest1_underscore.ts, 608, 39))
 
 _.isFinite(-101);
->_.isFinite : Symbol(Underscore.Static.isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
+>_.isFinite : Symbol(isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isFinite : Symbol(Underscore.Static.isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
+>isFinite : Symbol(isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
 
 _.isFinite(-Infinity);
->_.isFinite : Symbol(Underscore.Static.isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
+>_.isFinite : Symbol(isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isFinite : Symbol(Underscore.Static.isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
+>isFinite : Symbol(isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
 >Infinity : Symbol(Infinity, Decl(lib.es5.d.ts, --, --))
 
 _.isBoolean(null);
->_.isBoolean : Symbol(Underscore.Static.isBoolean, Decl(underscoreTest1_underscore.ts, 610, 39))
+>_.isBoolean : Symbol(isBoolean, Decl(underscoreTest1_underscore.ts, 610, 39))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isBoolean : Symbol(Underscore.Static.isBoolean, Decl(underscoreTest1_underscore.ts, 610, 39))
+>isBoolean : Symbol(isBoolean, Decl(underscoreTest1_underscore.ts, 610, 39))
 
 _.isDate(new Date());
->_.isDate : Symbol(Underscore.Static.isDate, Decl(underscoreTest1_underscore.ts, 611, 40))
+>_.isDate : Symbol(isDate, Decl(underscoreTest1_underscore.ts, 611, 40))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isDate : Symbol(Underscore.Static.isDate, Decl(underscoreTest1_underscore.ts, 611, 40))
+>isDate : Symbol(isDate, Decl(underscoreTest1_underscore.ts, 611, 40))
 >Date : Symbol(Date, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.scripthost.d.ts, --, --))
 
 _.isRegExp(/moe/);
->_.isRegExp : Symbol(Underscore.Static.isRegExp, Decl(underscoreTest1_underscore.ts, 612, 37))
+>_.isRegExp : Symbol(isRegExp, Decl(underscoreTest1_underscore.ts, 612, 37))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isRegExp : Symbol(Underscore.Static.isRegExp, Decl(underscoreTest1_underscore.ts, 612, 37))
+>isRegExp : Symbol(isRegExp, Decl(underscoreTest1_underscore.ts, 612, 37))
 
 _.isNaN(NaN);
->_.isNaN : Symbol(Underscore.Static.isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
+>_.isNaN : Symbol(isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isNaN : Symbol(Underscore.Static.isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
+>isNaN : Symbol(isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
 >NaN : Symbol(NaN, Decl(lib.es5.d.ts, --, --))
 
 isNaN(undefined);
@@= skipped -104, +104 lines =@@
 >undefined : Symbol(undefined)
 
 _.isNaN(undefined);
->_.isNaN : Symbol(Underscore.Static.isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
+>_.isNaN : Symbol(isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isNaN : Symbol(Underscore.Static.isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
+>isNaN : Symbol(isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
 >undefined : Symbol(undefined)
 
 _.isNull(null);
->_.isNull : Symbol(Underscore.Static.isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
+>_.isNull : Symbol(isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isNull : Symbol(Underscore.Static.isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
+>isNull : Symbol(isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
 
 _.isNull(undefined);
->_.isNull : Symbol(Underscore.Static.isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
+>_.isNull : Symbol(isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isNull : Symbol(Underscore.Static.isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
+>isNull : Symbol(isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
 >undefined : Symbol(undefined)
 
 _.isUndefined((<any>null).missingVariable);
->_.isUndefined : Symbol(Underscore.Static.isUndefined, Decl(underscoreTest1_underscore.ts, 615, 37))
+>_.isUndefined : Symbol(isUndefined, Decl(underscoreTest1_underscore.ts, 615, 37))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->isUndefined : Symbol(Underscore.Static.isUndefined, Decl(underscoreTest1_underscore.ts, 615, 37))
+>isUndefined : Symbol(isUndefined, Decl(underscoreTest1_underscore.ts, 615, 37))
 
 ///////////////////////////////////////////////////////////////////////////////////////
 
 var underscore = _.noConflict();
 >underscore : Symbol(underscore, Decl(underscoreTest1_underscoreTests.ts, 211, 3))
->_.noConflict : Symbol(Underscore.Static.noConflict, Decl(underscoreTest1_underscore.ts, 616, 41))
+>_.noConflict : Symbol(noConflict, Decl(underscoreTest1_underscore.ts, 616, 41))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->noConflict : Symbol(Underscore.Static.noConflict, Decl(underscoreTest1_underscore.ts, 616, 41))
+>noConflict : Symbol(noConflict, Decl(underscoreTest1_underscore.ts, 616, 41))
 
 var moe2 = { name: 'moe' };
 >moe2 : Symbol(moe2, Decl(underscoreTest1_underscoreTests.ts, 213, 3))
@@= skipped -35, +35 lines =@@
 
 moe2 === _.identity(moe);
 >moe2 : Symbol(moe2, Decl(underscoreTest1_underscoreTests.ts, 213, 3))
->_.identity : Symbol(Underscore.Static.identity, Decl(underscoreTest1_underscore.ts, 618, 29))
+>_.identity : Symbol(identity, Decl(underscoreTest1_underscore.ts, 618, 29))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->identity : Symbol(Underscore.Static.identity, Decl(underscoreTest1_underscore.ts, 618, 29))
+>identity : Symbol(identity, Decl(underscoreTest1_underscore.ts, 618, 29))
 >moe : Symbol(moe, Decl(underscoreTest1_underscoreTests.ts, 164, 3))
 
 var genie;
 >genie : Symbol(genie, Decl(underscoreTest1_underscoreTests.ts, 216, 3))
 
 _.times(3, function (n) { genie.grantWishNumber(n); });
->_.times : Symbol(Underscore.Static.times, Decl(underscoreTest1_underscore.ts, 620, 33))
+>_.times : Symbol(times, Decl(underscoreTest1_underscore.ts, 620, 33))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->times : Symbol(Underscore.Static.times, Decl(underscoreTest1_underscore.ts, 620, 33))
+>times : Symbol(times, Decl(underscoreTest1_underscore.ts, 620, 33))
 >n : Symbol(n, Decl(underscoreTest1_underscoreTests.ts, 218, 21))
 >genie : Symbol(genie, Decl(underscoreTest1_underscoreTests.ts, 216, 3))
 >n : Symbol(n, Decl(underscoreTest1_underscoreTests.ts, 218, 21))
 
 _.random(0, 100);
->_.random : Symbol(Underscore.Static.random, Decl(underscoreTest1_underscore.ts, 622, 80), Decl(underscoreTest1_underscore.ts, 624, 36))
+>_.random : Symbol(random, Decl(underscoreTest1_underscore.ts, 622, 80), Decl(underscoreTest1_underscore.ts, 624, 36))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->random : Symbol(Underscore.Static.random, Decl(underscoreTest1_underscore.ts, 622, 80), Decl(underscoreTest1_underscore.ts, 624, 36))
+>random : Symbol(random, Decl(underscoreTest1_underscore.ts, 622, 80), Decl(underscoreTest1_underscore.ts, 624, 36))
 
 _.mixin({
->_.mixin : Symbol(Underscore.Static.mixin, Decl(underscoreTest1_underscore.ts, 625, 49))
+>_.mixin : Symbol(mixin, Decl(underscoreTest1_underscore.ts, 625, 49))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->mixin : Symbol(Underscore.Static.mixin, Decl(underscoreTest1_underscore.ts, 625, 49))
+>mixin : Symbol(mixin, Decl(underscoreTest1_underscore.ts, 625, 49))
 
     capitalize: function (string) {
 >capitalize : Symbol(capitalize, Decl(underscoreTest1_underscoreTests.ts, 222, 9))
@@= skipped -39, +39 lines =@@
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
 
 _.uniqueId('contact_');
->_.uniqueId : Symbol(Underscore.Static.uniqueId, Decl(underscoreTest1_underscore.ts, 627, 33), Decl(underscoreTest1_underscore.ts, 629, 27))
+>_.uniqueId : Symbol(uniqueId, Decl(underscoreTest1_underscore.ts, 627, 33), Decl(underscoreTest1_underscore.ts, 629, 27))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->uniqueId : Symbol(Underscore.Static.uniqueId, Decl(underscoreTest1_underscore.ts, 627, 33), Decl(underscoreTest1_underscore.ts, 629, 27))
+>uniqueId : Symbol(uniqueId, Decl(underscoreTest1_underscore.ts, 627, 33), Decl(underscoreTest1_underscore.ts, 629, 27))
 
 _.escape('Curly, Larry & Moe');
->_.escape : Symbol(Underscore.Static.escape, Decl(underscoreTest1_underscore.ts, 630, 41))
+>_.escape : Symbol(escape, Decl(underscoreTest1_underscore.ts, 630, 41))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->escape : Symbol(Underscore.Static.escape, Decl(underscoreTest1_underscore.ts, 630, 41))
+>escape : Symbol(escape, Decl(underscoreTest1_underscore.ts, 630, 41))
 
 var object = { cheese: 'crumpets', stuff: function () { return 'nonsense'; } };
 >object : Symbol(object, Decl(underscoreTest1_underscoreTests.ts, 233, 3))
@@= skipped -15, +15 lines =@@
 >stuff : Symbol(stuff, Decl(underscoreTest1_underscoreTests.ts, 233, 34))
 
 _.result(object, 'cheese');
->_.result : Symbol(Underscore.Static.result, Decl(underscoreTest1_underscore.ts, 634, 36))
+>_.result : Symbol(result, Decl(underscoreTest1_underscore.ts, 634, 36))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->result : Symbol(Underscore.Static.result, Decl(underscoreTest1_underscore.ts, 634, 36))
+>result : Symbol(result, Decl(underscoreTest1_underscore.ts, 634, 36))
 >object : Symbol(object, Decl(underscoreTest1_underscoreTests.ts, 233, 3))
 
 _.result(object, 'stuff');
->_.result : Symbol(Underscore.Static.result, Decl(underscoreTest1_underscore.ts, 634, 36))
+>_.result : Symbol(result, Decl(underscoreTest1_underscore.ts, 634, 36))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->result : Symbol(Underscore.Static.result, Decl(underscoreTest1_underscore.ts, 634, 36))
+>result : Symbol(result, Decl(underscoreTest1_underscore.ts, 634, 36))
 >object : Symbol(object, Decl(underscoreTest1_underscoreTests.ts, 233, 3))
 
 var compiled = _.template("hello: <%= name %>");
 >compiled : Symbol(compiled, Decl(underscoreTest1_underscoreTests.ts, 238, 3))
->_.template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>_.template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 
 compiled({ name: 'moe' });
 >compiled : Symbol(compiled, Decl(underscoreTest1_underscoreTests.ts, 238, 3))
@@= skipped -25, +25 lines =@@
 >list2 : Symbol(list2, Decl(underscoreTest1_underscoreTests.ts, 240, 3))
 
 _.template(list2, { people: ['moe', 'curly', 'larry'] });
->_.template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>_.template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >list2 : Symbol(list2, Decl(underscoreTest1_underscoreTests.ts, 240, 3))
 >people : Symbol(people, Decl(underscoreTest1_underscoreTests.ts, 241, 19))
 
 var template = _.template("<b><%- value %></b>");
 >template : Symbol(template, Decl(underscoreTest1_underscoreTests.ts, 242, 3))
->_.template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>_.template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 
 template({ value: '<script>' });
 >template : Symbol(template, Decl(underscoreTest1_underscoreTests.ts, 242, 3))
@@= skipped -18, +18 lines =@@
 
 var compiled2 = _.template("<% print('Hello ' + epithet); %>");
 >compiled2 : Symbol(compiled2, Decl(underscoreTest1_underscoreTests.ts, 244, 3))
->_.template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>_.template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 
 compiled2({ epithet: "stooge" });
 >compiled2 : Symbol(compiled2, Decl(underscoreTest1_underscoreTests.ts, 244, 3))
 >epithet : Symbol(epithet, Decl(underscoreTest1_underscoreTests.ts, 245, 11))
 
 _.templateSettings = {
->_.templateSettings : Symbol(Underscore.Static.templateSettings, Decl(underscoreTest1_underscore.ts, 636, 51))
+>_.templateSettings : Symbol(templateSettings, Decl(underscoreTest1_underscore.ts, 636, 51))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->templateSettings : Symbol(Underscore.Static.templateSettings, Decl(underscoreTest1_underscore.ts, 636, 51))
+>templateSettings : Symbol(templateSettings, Decl(underscoreTest1_underscore.ts, 636, 51))
 
     interpolate: /\{\{(.+?)\}\}/g
 >interpolate : Symbol(interpolate, Decl(underscoreTest1_underscoreTests.ts, 246, 22))
@@= skipped -19, +19 lines =@@
 };
 var template2 = _.template("Hello {{ name }}!");
 >template2 : Symbol(template2, Decl(underscoreTest1_underscoreTests.ts, 249, 3))
->_.template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>_.template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 
 template2({ name: "Mustache" });
 >template2 : Symbol(template2, Decl(underscoreTest1_underscoreTests.ts, 249, 3))
 >name : Symbol(name, Decl(underscoreTest1_underscoreTests.ts, 250, 11))
 
 _.template("Using 'with': <%= data.answer %>", { answer: 'no' }, { variable: 'data' });
->_.template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>_.template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
->template : Symbol(Underscore.Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >answer : Symbol(answer, Decl(underscoreTest1_underscoreTests.ts, 251, 48))
 >variable : Symbol(variable, Decl(underscoreTest1_underscoreTests.ts, 251, 66))
 
@@= skipped -60, +60 lines =@@
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     0: T0;
->0 : Symbol(Tuple2[0], Decl(underscoreTest1_underscore.ts, 12, 45))
+>0 : Symbol(0, Decl(underscoreTest1_underscore.ts, 12, 45))
 >T0 : Symbol(T0, Decl(underscoreTest1_underscore.ts, 12, 17))
 
     1: T1;
->1 : Symbol(Tuple2[1], Decl(underscoreTest1_underscore.ts, 13, 10))
+>1 : Symbol(1, Decl(underscoreTest1_underscore.ts, 13, 10))
 >T1 : Symbol(T1, Decl(underscoreTest1_underscore.ts, 12, 20))
 }
 
@@= skipped -16, +16 lines =@@
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     0: T0;
->0 : Symbol(Tuple3[0], Decl(underscoreTest1_underscore.ts, 17, 49))
+>0 : Symbol(0, Decl(underscoreTest1_underscore.ts, 17, 49))
 >T0 : Symbol(T0, Decl(underscoreTest1_underscore.ts, 17, 17))
 
     1: T1;
->1 : Symbol(Tuple3[1], Decl(underscoreTest1_underscore.ts, 18, 10))
+>1 : Symbol(1, Decl(underscoreTest1_underscore.ts, 18, 10))
 >T1 : Symbol(T1, Decl(underscoreTest1_underscore.ts, 17, 20))
 
     2: T2;
->2 : Symbol(Tuple3[2], Decl(underscoreTest1_underscore.ts, 19, 10))
+>2 : Symbol(2, Decl(underscoreTest1_underscore.ts, 19, 10))
 >T2 : Symbol(T2, Decl(underscoreTest1_underscore.ts, 17, 24))
 }
 
@@= skipped -21, +21 lines =@@
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     0: T0;
->0 : Symbol(Tuple4[0], Decl(underscoreTest1_underscore.ts, 23, 53))
+>0 : Symbol(0, Decl(underscoreTest1_underscore.ts, 23, 53))
 >T0 : Symbol(T0, Decl(underscoreTest1_underscore.ts, 23, 17))
 
     1: T1;
->1 : Symbol(Tuple4[1], Decl(underscoreTest1_underscore.ts, 24, 10))
+>1 : Symbol(1, Decl(underscoreTest1_underscore.ts, 24, 10))
 >T1 : Symbol(T1, Decl(underscoreTest1_underscore.ts, 23, 20))
 
     2: T2;
->2 : Symbol(Tuple4[2], Decl(underscoreTest1_underscore.ts, 25, 10))
+>2 : Symbol(2, Decl(underscoreTest1_underscore.ts, 25, 10))
 >T2 : Symbol(T2, Decl(underscoreTest1_underscore.ts, 23, 24))
 
     3: T3;
->3 : Symbol(Tuple4[3], Decl(underscoreTest1_underscore.ts, 26, 10))
+>3 : Symbol(3, Decl(underscoreTest1_underscore.ts, 26, 10))
 >T3 : Symbol(T3, Decl(underscoreTest1_underscore.ts, 23, 28))
 }
 
@@= skipped -24, +24 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 
         keys(): string[];
->keys : Symbol(WrappedObject.keys, Decl(underscoreTest1_underscore.ts, 31, 39))
+>keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 31, 39))
 
         values(): any[];
->values : Symbol(WrappedObject.values, Decl(underscoreTest1_underscore.ts, 32, 25))
+>values : Symbol(values, Decl(underscoreTest1_underscore.ts, 32, 25))
 
         pairs(): any[][];
->pairs : Symbol(WrappedObject.pairs, Decl(underscoreTest1_underscore.ts, 33, 24))
+>pairs : Symbol(pairs, Decl(underscoreTest1_underscore.ts, 33, 24))
 
         invert(): any;
->invert : Symbol(WrappedObject.invert, Decl(underscoreTest1_underscore.ts, 34, 25))
+>invert : Symbol(invert, Decl(underscoreTest1_underscore.ts, 34, 25))
 
         functions(): string[];
->functions : Symbol(WrappedObject.functions, Decl(underscoreTest1_underscore.ts, 35, 22))
+>functions : Symbol(functions, Decl(underscoreTest1_underscore.ts, 35, 22))
 
         methods(): string[];
->methods : Symbol(WrappedObject.methods, Decl(underscoreTest1_underscore.ts, 36, 30))
+>methods : Symbol(methods, Decl(underscoreTest1_underscore.ts, 36, 30))
 
         extend(...sources: any[]): T;
->extend : Symbol(WrappedObject.extend, Decl(underscoreTest1_underscore.ts, 37, 28))
+>extend : Symbol(extend, Decl(underscoreTest1_underscore.ts, 37, 28))
 >sources : Symbol(sources, Decl(underscoreTest1_underscore.ts, 38, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 
         pick(...keys: string[]): T;
->pick : Symbol(WrappedObject.pick, Decl(underscoreTest1_underscore.ts, 38, 37))
+>pick : Symbol(pick, Decl(underscoreTest1_underscore.ts, 38, 37))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 39, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 
         omit(...keys: string[]): T;
->omit : Symbol(WrappedObject.omit, Decl(underscoreTest1_underscore.ts, 39, 35))
+>omit : Symbol(omit, Decl(underscoreTest1_underscore.ts, 39, 35))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 40, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 
         defaults(...defaults: any[]): T;
->defaults : Symbol(WrappedObject.defaults, Decl(underscoreTest1_underscore.ts, 40, 35))
+>defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 40, 35))
 >defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 41, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 
         clone(): T;
->clone : Symbol(WrappedObject.clone, Decl(underscoreTest1_underscore.ts, 41, 40))
+>clone : Symbol(clone, Decl(underscoreTest1_underscore.ts, 41, 40))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 
         tap(interceptor: (object: T) => void): T;
->tap : Symbol(WrappedObject.tap, Decl(underscoreTest1_underscore.ts, 42, 19))
+>tap : Symbol(tap, Decl(underscoreTest1_underscore.ts, 42, 19))
 >interceptor : Symbol(interceptor, Decl(underscoreTest1_underscore.ts, 43, 12))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 43, 26))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 
         has(key: string): boolean;
->has : Symbol(WrappedObject.has, Decl(underscoreTest1_underscore.ts, 43, 49))
+>has : Symbol(has, Decl(underscoreTest1_underscore.ts, 43, 49))
 >key : Symbol(key, Decl(underscoreTest1_underscore.ts, 44, 12))
 
         isEqual(other: T): boolean;
->isEqual : Symbol(WrappedObject.isEqual, Decl(underscoreTest1_underscore.ts, 44, 34))
+>isEqual : Symbol(isEqual, Decl(underscoreTest1_underscore.ts, 44, 34))
 >other : Symbol(other, Decl(underscoreTest1_underscore.ts, 45, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
 
         isEmpty(): boolean;
->isEmpty : Symbol(WrappedObject.isEmpty, Decl(underscoreTest1_underscore.ts, 45, 35))
+>isEmpty : Symbol(isEmpty, Decl(underscoreTest1_underscore.ts, 45, 35))
 
         isElement(): boolean;
->isElement : Symbol(WrappedObject.isElement, Decl(underscoreTest1_underscore.ts, 46, 27))
+>isElement : Symbol(isElement, Decl(underscoreTest1_underscore.ts, 46, 27))
 
         isArray(): boolean;
->isArray : Symbol(WrappedObject.isArray, Decl(underscoreTest1_underscore.ts, 47, 29))
+>isArray : Symbol(isArray, Decl(underscoreTest1_underscore.ts, 47, 29))
 
         isObject(): boolean;
->isObject : Symbol(WrappedObject.isObject, Decl(underscoreTest1_underscore.ts, 48, 27))
+>isObject : Symbol(isObject, Decl(underscoreTest1_underscore.ts, 48, 27))
 
         isArguments(): boolean;
->isArguments : Symbol(WrappedObject.isArguments, Decl(underscoreTest1_underscore.ts, 49, 28))
+>isArguments : Symbol(isArguments, Decl(underscoreTest1_underscore.ts, 49, 28))
 
         isFunction(): boolean;
->isFunction : Symbol(WrappedObject.isFunction, Decl(underscoreTest1_underscore.ts, 50, 31))
+>isFunction : Symbol(isFunction, Decl(underscoreTest1_underscore.ts, 50, 31))
 
         isString(): boolean;
->isString : Symbol(WrappedObject.isString, Decl(underscoreTest1_underscore.ts, 51, 30))
+>isString : Symbol(isString, Decl(underscoreTest1_underscore.ts, 51, 30))
 
         isNumber(): boolean;
->isNumber : Symbol(WrappedObject.isNumber, Decl(underscoreTest1_underscore.ts, 52, 28))
+>isNumber : Symbol(isNumber, Decl(underscoreTest1_underscore.ts, 52, 28))
 
         isFinite(): boolean;
->isFinite : Symbol(WrappedObject.isFinite, Decl(underscoreTest1_underscore.ts, 53, 28))
+>isFinite : Symbol(isFinite, Decl(underscoreTest1_underscore.ts, 53, 28))
 
         isBoolean(): boolean;
->isBoolean : Symbol(WrappedObject.isBoolean, Decl(underscoreTest1_underscore.ts, 54, 28))
+>isBoolean : Symbol(isBoolean, Decl(underscoreTest1_underscore.ts, 54, 28))
 
         isDate(): boolean;
->isDate : Symbol(WrappedObject.isDate, Decl(underscoreTest1_underscore.ts, 55, 29))
+>isDate : Symbol(isDate, Decl(underscoreTest1_underscore.ts, 55, 29))
 
         isRegExp(): boolean;
->isRegExp : Symbol(WrappedObject.isRegExp, Decl(underscoreTest1_underscore.ts, 56, 26))
+>isRegExp : Symbol(isRegExp, Decl(underscoreTest1_underscore.ts, 56, 26))
 
         isNaN(): boolean;
->isNaN : Symbol(WrappedObject.isNaN, Decl(underscoreTest1_underscore.ts, 57, 28))
+>isNaN : Symbol(isNaN, Decl(underscoreTest1_underscore.ts, 57, 28))
 
         isNull(): boolean;
->isNull : Symbol(WrappedObject.isNull, Decl(underscoreTest1_underscore.ts, 58, 25))
+>isNull : Symbol(isNull, Decl(underscoreTest1_underscore.ts, 58, 25))
 
         isUndefined(): boolean;
->isUndefined : Symbol(WrappedObject.isUndefined, Decl(underscoreTest1_underscore.ts, 59, 26))
+>isUndefined : Symbol(isUndefined, Decl(underscoreTest1_underscore.ts, 59, 26))
 
         value(): T;
->value : Symbol(WrappedObject.value, Decl(underscoreTest1_underscore.ts, 60, 31))
+>value : Symbol(value, Decl(underscoreTest1_underscore.ts, 60, 31))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 31, 35))
     }
 
@@= skipped -115, +115 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
 
         bind(object: any): T;
->bind : Symbol(WrappedFunction.bind, Decl(underscoreTest1_underscore.ts, 64, 83), Decl(underscoreTest1_underscore.ts, 65, 29))
+>bind : Symbol(bind, Decl(underscoreTest1_underscore.ts, 64, 83), Decl(underscoreTest1_underscore.ts, 65, 29))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 65, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
 
         bind(object: any, ...args: any[]): Function;
->bind : Symbol(WrappedFunction.bind, Decl(underscoreTest1_underscore.ts, 64, 83), Decl(underscoreTest1_underscore.ts, 65, 29))
+>bind : Symbol(bind, Decl(underscoreTest1_underscore.ts, 64, 83), Decl(underscoreTest1_underscore.ts, 65, 29))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 66, 13))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 66, 25))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         bindAll(...methodNames: string[]): T;
->bindAll : Symbol(WrappedFunction.bindAll, Decl(underscoreTest1_underscore.ts, 66, 52))
+>bindAll : Symbol(bindAll, Decl(underscoreTest1_underscore.ts, 66, 52))
 >methodNames : Symbol(methodNames, Decl(underscoreTest1_underscore.ts, 67, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
 
         partial(...args: any[]): Function;
->partial : Symbol(WrappedFunction.partial, Decl(underscoreTest1_underscore.ts, 67, 45))
+>partial : Symbol(partial, Decl(underscoreTest1_underscore.ts, 67, 45))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 68, 16))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         memoize(hashFunction?: Function): T;
->memoize : Symbol(WrappedFunction.memoize, Decl(underscoreTest1_underscore.ts, 68, 42))
+>memoize : Symbol(memoize, Decl(underscoreTest1_underscore.ts, 68, 42))
 >hashFunction : Symbol(hashFunction, Decl(underscoreTest1_underscore.ts, 69, 16))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
 
         delay(wait: number, ...args: any[]): number;
->delay : Symbol(WrappedFunction.delay, Decl(underscoreTest1_underscore.ts, 69, 44))
+>delay : Symbol(delay, Decl(underscoreTest1_underscore.ts, 69, 44))
 >wait : Symbol(wait, Decl(underscoreTest1_underscore.ts, 70, 14))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 70, 27))
 
         defer(...args: any[]): number;
->defer : Symbol(WrappedFunction.defer, Decl(underscoreTest1_underscore.ts, 70, 52))
+>defer : Symbol(defer, Decl(underscoreTest1_underscore.ts, 70, 52))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 71, 14))
 
         throttle(wait: number): T;
->throttle : Symbol(WrappedFunction.throttle, Decl(underscoreTest1_underscore.ts, 71, 38))
+>throttle : Symbol(throttle, Decl(underscoreTest1_underscore.ts, 71, 38))
 >wait : Symbol(wait, Decl(underscoreTest1_underscore.ts, 72, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
 
         debounce(wait: number, immediate?: boolean): T;
->debounce : Symbol(WrappedFunction.debounce, Decl(underscoreTest1_underscore.ts, 72, 34))
+>debounce : Symbol(debounce, Decl(underscoreTest1_underscore.ts, 72, 34))
 >wait : Symbol(wait, Decl(underscoreTest1_underscore.ts, 73, 17))
 >immediate : Symbol(immediate, Decl(underscoreTest1_underscore.ts, 73, 30))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
 
         once(): T;
->once : Symbol(WrappedFunction.once, Decl(underscoreTest1_underscore.ts, 73, 55))
+>once : Symbol(once, Decl(underscoreTest1_underscore.ts, 73, 55))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
 
         wrap(wrapper: (func: T, ...args: any[]) => any): T;
->wrap : Symbol(WrappedFunction.wrap, Decl(underscoreTest1_underscore.ts, 74, 18))
+>wrap : Symbol(wrap, Decl(underscoreTest1_underscore.ts, 74, 18))
 >wrapper : Symbol(wrapper, Decl(underscoreTest1_underscore.ts, 75, 13))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 75, 23))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
@@= skipped -59, +59 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 64, 37))
 
         compose(...funcs: Function[]): Function;
->compose : Symbol(WrappedFunction.compose, Decl(underscoreTest1_underscore.ts, 75, 59))
+>compose : Symbol(compose, Decl(underscoreTest1_underscore.ts, 75, 59))
 >funcs : Symbol(funcs, Decl(underscoreTest1_underscore.ts, 76, 16))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         each(iterator: Iterator_<T, void>, context?: any): void;
->each : Symbol(WrappedArray.each, Decl(underscoreTest1_underscore.ts, 79, 70))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 79, 70))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 80, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 80, 42))
 
         forEach(iterator: Iterator_<T, void>, context?: any): void;
->forEach : Symbol(WrappedArray.forEach, Decl(underscoreTest1_underscore.ts, 80, 64))
+>forEach : Symbol(forEach, Decl(underscoreTest1_underscore.ts, 80, 64))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 81, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 81, 45))
 
         map<U>(iterator: Iterator_<T, U>, context?: any): U[];
->map : Symbol(WrappedArray.map, Decl(underscoreTest1_underscore.ts, 81, 67))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 81, 67))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 82, 12))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 82, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
@@= skipped -24, +24 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 82, 12))
 
         collect<U>(iterator: Iterator_<T, U>, context?: any): U[];
->collect : Symbol(WrappedArray.collect, Decl(underscoreTest1_underscore.ts, 82, 62))
+>collect : Symbol(collect, Decl(underscoreTest1_underscore.ts, 82, 62))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 83, 16))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 83, 19))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
@@= skipped -10, +10 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 83, 16))
 
         reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduce : Symbol(WrappedArray.reduce, Decl(underscoreTest1_underscore.ts, 83, 66), Decl(underscoreTest1_underscore.ts, 84, 76))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 83, 66), Decl(underscoreTest1_underscore.ts, 84, 76))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 84, 15))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduce : Symbol(WrappedArray.reduce, Decl(underscoreTest1_underscore.ts, 83, 66), Decl(underscoreTest1_underscore.ts, 84, 76))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 83, 66), Decl(underscoreTest1_underscore.ts, 84, 76))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 85, 15))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 85, 18))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 85, 15))
 
         foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldl : Symbol(WrappedArray.foldl, Decl(underscoreTest1_underscore.ts, 85, 78), Decl(underscoreTest1_underscore.ts, 86, 75))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 85, 78), Decl(underscoreTest1_underscore.ts, 86, 75))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 86, 14))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldl : Symbol(WrappedArray.foldl, Decl(underscoreTest1_underscore.ts, 85, 78), Decl(underscoreTest1_underscore.ts, 86, 75))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 85, 78), Decl(underscoreTest1_underscore.ts, 86, 75))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 87, 14))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 87, 17))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 87, 14))
 
         inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->inject : Symbol(WrappedArray.inject, Decl(underscoreTest1_underscore.ts, 87, 77), Decl(underscoreTest1_underscore.ts, 88, 76))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 87, 77), Decl(underscoreTest1_underscore.ts, 88, 76))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 88, 15))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->inject : Symbol(WrappedArray.inject, Decl(underscoreTest1_underscore.ts, 87, 77), Decl(underscoreTest1_underscore.ts, 88, 76))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 87, 77), Decl(underscoreTest1_underscore.ts, 88, 76))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 89, 15))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 89, 18))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 89, 15))
 
         reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduceRight : Symbol(WrappedArray.reduceRight, Decl(underscoreTest1_underscore.ts, 89, 78), Decl(underscoreTest1_underscore.ts, 90, 81))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 89, 78), Decl(underscoreTest1_underscore.ts, 90, 81))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 90, 20))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduceRight : Symbol(WrappedArray.reduceRight, Decl(underscoreTest1_underscore.ts, 89, 78), Decl(underscoreTest1_underscore.ts, 90, 81))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 89, 78), Decl(underscoreTest1_underscore.ts, 90, 81))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 91, 20))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 91, 23))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 91, 20))
 
         foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldr : Symbol(WrappedArray.foldr, Decl(underscoreTest1_underscore.ts, 91, 83), Decl(underscoreTest1_underscore.ts, 92, 75))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 91, 83), Decl(underscoreTest1_underscore.ts, 92, 75))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 92, 14))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldr : Symbol(WrappedArray.foldr, Decl(underscoreTest1_underscore.ts, 91, 83), Decl(underscoreTest1_underscore.ts, 92, 75))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 91, 83), Decl(underscoreTest1_underscore.ts, 92, 75))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 93, 14))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 93, 17))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 93, 14))
 
         find(iterator: Iterator_<T, boolean>, context?: any): T;
->find : Symbol(WrappedArray.find, Decl(underscoreTest1_underscore.ts, 93, 77))
+>find : Symbol(find, Decl(underscoreTest1_underscore.ts, 93, 77))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 94, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         detect(iterator: Iterator_<T, boolean>, context?: any): T;
->detect : Symbol(WrappedArray.detect, Decl(underscoreTest1_underscore.ts, 94, 64))
+>detect : Symbol(detect, Decl(underscoreTest1_underscore.ts, 94, 64))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 95, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         filter(iterator: Iterator_<T, boolean>, context?: any): T[];
->filter : Symbol(WrappedArray.filter, Decl(underscoreTest1_underscore.ts, 95, 66))
+>filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 95, 66))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 96, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         select(iterator: Iterator_<T, boolean>, context?: any): T[];
->select : Symbol(WrappedArray.select, Decl(underscoreTest1_underscore.ts, 96, 68))
+>select : Symbol(select, Decl(underscoreTest1_underscore.ts, 96, 68))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 97, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         where(properties: Object): T[];
->where : Symbol(WrappedArray.where, Decl(underscoreTest1_underscore.ts, 97, 68))
+>where : Symbol(where, Decl(underscoreTest1_underscore.ts, 97, 68))
 >properties : Symbol(properties, Decl(underscoreTest1_underscore.ts, 98, 14))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         findWhere(properties: Object): T;
->findWhere : Symbol(WrappedArray.findWhere, Decl(underscoreTest1_underscore.ts, 98, 39))
+>findWhere : Symbol(findWhere, Decl(underscoreTest1_underscore.ts, 98, 39))
 >properties : Symbol(properties, Decl(underscoreTest1_underscore.ts, 99, 18))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         reject(iterator: Iterator_<T, boolean>, context?: any): T[];
->reject : Symbol(WrappedArray.reject, Decl(underscoreTest1_underscore.ts, 99, 41))
+>reject : Symbol(reject, Decl(underscoreTest1_underscore.ts, 99, 41))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 100, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -20, +20 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         every(iterator?: Iterator_<T, boolean>, context?: any): boolean;
->every : Symbol(WrappedArray.every, Decl(underscoreTest1_underscore.ts, 100, 68))
+>every : Symbol(every, Decl(underscoreTest1_underscore.ts, 100, 68))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 101, 14))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 101, 47))
 
         all(iterator?: Iterator_<T, boolean>, context?: any): boolean;
->all : Symbol(WrappedArray.all, Decl(underscoreTest1_underscore.ts, 101, 72))
+>all : Symbol(all, Decl(underscoreTest1_underscore.ts, 101, 72))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 102, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 102, 45))
 
         some(iterator?: Iterator_<T, boolean>, context?: any): boolean;
->some : Symbol(WrappedArray.some, Decl(underscoreTest1_underscore.ts, 102, 70))
+>some : Symbol(some, Decl(underscoreTest1_underscore.ts, 102, 70))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 103, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 103, 46))
 
         any(iterator?: Iterator_<T, boolean>, context?: any): boolean;
->any : Symbol(WrappedArray.any, Decl(underscoreTest1_underscore.ts, 103, 71))
+>any : Symbol(any, Decl(underscoreTest1_underscore.ts, 103, 71))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 104, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 104, 45))
 
         contains(value: T): boolean;
->contains : Symbol(WrappedArray.contains, Decl(underscoreTest1_underscore.ts, 104, 70))
+>contains : Symbol(contains, Decl(underscoreTest1_underscore.ts, 104, 70))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 105, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         include(value: T): boolean;
->include : Symbol(WrappedArray.include, Decl(underscoreTest1_underscore.ts, 105, 36))
+>include : Symbol(include, Decl(underscoreTest1_underscore.ts, 105, 36))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 106, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         invoke(methodName: string, ...args: any[]): any[];
->invoke : Symbol(WrappedArray.invoke, Decl(underscoreTest1_underscore.ts, 106, 35))
+>invoke : Symbol(invoke, Decl(underscoreTest1_underscore.ts, 106, 35))
 >methodName : Symbol(methodName, Decl(underscoreTest1_underscore.ts, 107, 15))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 107, 34))
 
         pluck(propertyName: string): any[];
->pluck : Symbol(WrappedArray.pluck, Decl(underscoreTest1_underscore.ts, 107, 58))
+>pluck : Symbol(pluck, Decl(underscoreTest1_underscore.ts, 107, 58))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 108, 14))
 
         max(iterator?: Iterator_<T, any>, context?: any): T;
->max : Symbol(WrappedArray.max, Decl(underscoreTest1_underscore.ts, 108, 43))
+>max : Symbol(max, Decl(underscoreTest1_underscore.ts, 108, 43))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 109, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -55, +55 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         min(iterator?: Iterator_<T, any>, context?: any): T;
->min : Symbol(WrappedArray.min, Decl(underscoreTest1_underscore.ts, 109, 60))
+>min : Symbol(min, Decl(underscoreTest1_underscore.ts, 109, 60))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 110, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         sortBy(iterator: Iterator_<T, any>, context?: any): T[];
->sortBy : Symbol(WrappedArray.sortBy, Decl(underscoreTest1_underscore.ts, 110, 60), Decl(underscoreTest1_underscore.ts, 111, 64))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 110, 60), Decl(underscoreTest1_underscore.ts, 111, 64))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 111, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         sortBy(propertyName: string): T[];
->sortBy : Symbol(WrappedArray.sortBy, Decl(underscoreTest1_underscore.ts, 110, 60), Decl(underscoreTest1_underscore.ts, 111, 64))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 110, 60), Decl(underscoreTest1_underscore.ts, 111, 64))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 112, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         groupBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
->groupBy : Symbol(WrappedArray.groupBy, Decl(underscoreTest1_underscore.ts, 112, 42), Decl(underscoreTest1_underscore.ts, 113, 78))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 112, 42), Decl(underscoreTest1_underscore.ts, 113, 78))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 113, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         groupBy(propertyName: string): Dictionary<T[]>;
->groupBy : Symbol(WrappedArray.groupBy, Decl(underscoreTest1_underscore.ts, 112, 42), Decl(underscoreTest1_underscore.ts, 113, 78))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 112, 42), Decl(underscoreTest1_underscore.ts, 113, 78))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 114, 16))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         countBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
->countBy : Symbol(WrappedArray.countBy, Decl(underscoreTest1_underscore.ts, 114, 55), Decl(underscoreTest1_underscore.ts, 115, 81))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 114, 55), Decl(underscoreTest1_underscore.ts, 115, 81))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 115, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -14, +14 lines =@@
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 
         countBy(propertyName: string): Dictionary<number>;
->countBy : Symbol(WrappedArray.countBy, Decl(underscoreTest1_underscore.ts, 114, 55), Decl(underscoreTest1_underscore.ts, 115, 81))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 114, 55), Decl(underscoreTest1_underscore.ts, 115, 81))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 116, 16))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 
         shuffle(): T[];
->shuffle : Symbol(WrappedArray.shuffle, Decl(underscoreTest1_underscore.ts, 116, 58))
+>shuffle : Symbol(shuffle, Decl(underscoreTest1_underscore.ts, 116, 58))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         toArray(): T[];
->toArray : Symbol(WrappedArray.toArray, Decl(underscoreTest1_underscore.ts, 117, 23))
+>toArray : Symbol(toArray, Decl(underscoreTest1_underscore.ts, 117, 23))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         size(): number;
->size : Symbol(WrappedArray.size, Decl(underscoreTest1_underscore.ts, 118, 23))
+>size : Symbol(size, Decl(underscoreTest1_underscore.ts, 118, 23))
 
         first(): T;
->first : Symbol(WrappedArray.first, Decl(underscoreTest1_underscore.ts, 119, 23), Decl(underscoreTest1_underscore.ts, 120, 19))
+>first : Symbol(first, Decl(underscoreTest1_underscore.ts, 119, 23), Decl(underscoreTest1_underscore.ts, 120, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         first(count: number): T[];
->first : Symbol(WrappedArray.first, Decl(underscoreTest1_underscore.ts, 119, 23), Decl(underscoreTest1_underscore.ts, 120, 19))
+>first : Symbol(first, Decl(underscoreTest1_underscore.ts, 119, 23), Decl(underscoreTest1_underscore.ts, 120, 19))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 121, 14))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         head(): T;
->head : Symbol(WrappedArray.head, Decl(underscoreTest1_underscore.ts, 121, 34), Decl(underscoreTest1_underscore.ts, 122, 18))
+>head : Symbol(head, Decl(underscoreTest1_underscore.ts, 121, 34), Decl(underscoreTest1_underscore.ts, 122, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         head(count: number): T[];
->head : Symbol(WrappedArray.head, Decl(underscoreTest1_underscore.ts, 121, 34), Decl(underscoreTest1_underscore.ts, 122, 18))
+>head : Symbol(head, Decl(underscoreTest1_underscore.ts, 121, 34), Decl(underscoreTest1_underscore.ts, 122, 18))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 123, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         take(): T;
->take : Symbol(WrappedArray.take, Decl(underscoreTest1_underscore.ts, 123, 33), Decl(underscoreTest1_underscore.ts, 124, 18))
+>take : Symbol(take, Decl(underscoreTest1_underscore.ts, 123, 33), Decl(underscoreTest1_underscore.ts, 124, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         take(count: number): T[];
->take : Symbol(WrappedArray.take, Decl(underscoreTest1_underscore.ts, 123, 33), Decl(underscoreTest1_underscore.ts, 124, 18))
+>take : Symbol(take, Decl(underscoreTest1_underscore.ts, 123, 33), Decl(underscoreTest1_underscore.ts, 124, 18))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 125, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         initial(): T;
->initial : Symbol(WrappedArray.initial, Decl(underscoreTest1_underscore.ts, 125, 33), Decl(underscoreTest1_underscore.ts, 126, 21))
+>initial : Symbol(initial, Decl(underscoreTest1_underscore.ts, 125, 33), Decl(underscoreTest1_underscore.ts, 126, 21))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         initial(count: number): T[];
->initial : Symbol(WrappedArray.initial, Decl(underscoreTest1_underscore.ts, 125, 33), Decl(underscoreTest1_underscore.ts, 126, 21))
+>initial : Symbol(initial, Decl(underscoreTest1_underscore.ts, 125, 33), Decl(underscoreTest1_underscore.ts, 126, 21))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 127, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         last(): T;
->last : Symbol(WrappedArray.last, Decl(underscoreTest1_underscore.ts, 127, 36), Decl(underscoreTest1_underscore.ts, 128, 18))
+>last : Symbol(last, Decl(underscoreTest1_underscore.ts, 127, 36), Decl(underscoreTest1_underscore.ts, 128, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         last(count: number): T[];
->last : Symbol(WrappedArray.last, Decl(underscoreTest1_underscore.ts, 127, 36), Decl(underscoreTest1_underscore.ts, 128, 18))
+>last : Symbol(last, Decl(underscoreTest1_underscore.ts, 127, 36), Decl(underscoreTest1_underscore.ts, 128, 18))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 129, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         rest(index?: number): T[];
->rest : Symbol(WrappedArray.rest, Decl(underscoreTest1_underscore.ts, 129, 33))
+>rest : Symbol(rest, Decl(underscoreTest1_underscore.ts, 129, 33))
 >index : Symbol(index, Decl(underscoreTest1_underscore.ts, 130, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         compact(): T[];
->compact : Symbol(WrappedArray.compact, Decl(underscoreTest1_underscore.ts, 130, 34))
+>compact : Symbol(compact, Decl(underscoreTest1_underscore.ts, 130, 34))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         flatten<U>(shallow?: boolean): U[];
->flatten : Symbol(WrappedArray.flatten, Decl(underscoreTest1_underscore.ts, 131, 23))
+>flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 131, 23))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 132, 16))
 >shallow : Symbol(shallow, Decl(underscoreTest1_underscore.ts, 132, 19))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 132, 16))
 
         without(...values: T[]): T[];
->without : Symbol(WrappedArray.without, Decl(underscoreTest1_underscore.ts, 132, 43))
+>without : Symbol(without, Decl(underscoreTest1_underscore.ts, 132, 43))
 >values : Symbol(values, Decl(underscoreTest1_underscore.ts, 133, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         union(...arrays: T[][]): T[];
->union : Symbol(WrappedArray.union, Decl(underscoreTest1_underscore.ts, 133, 37))
+>union : Symbol(union, Decl(underscoreTest1_underscore.ts, 133, 37))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 134, 14))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         intersection(...arrays: T[][]): T[];
->intersection : Symbol(WrappedArray.intersection, Decl(underscoreTest1_underscore.ts, 134, 37))
+>intersection : Symbol(intersection, Decl(underscoreTest1_underscore.ts, 134, 37))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 135, 21))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         difference(...others: T[][]): T[];
->difference : Symbol(WrappedArray.difference, Decl(underscoreTest1_underscore.ts, 135, 44))
+>difference : Symbol(difference, Decl(underscoreTest1_underscore.ts, 135, 44))
 >others : Symbol(others, Decl(underscoreTest1_underscore.ts, 136, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         uniq(isSorted?: boolean): T[];
->uniq : Symbol(WrappedArray.uniq, Decl(underscoreTest1_underscore.ts, 136, 42), Decl(underscoreTest1_underscore.ts, 137, 38))
+>uniq : Symbol(uniq, Decl(underscoreTest1_underscore.ts, 136, 42), Decl(underscoreTest1_underscore.ts, 137, 38))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 137, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         uniq<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
->uniq : Symbol(WrappedArray.uniq, Decl(underscoreTest1_underscore.ts, 136, 42), Decl(underscoreTest1_underscore.ts, 137, 38))
+>uniq : Symbol(uniq, Decl(underscoreTest1_underscore.ts, 136, 42), Decl(underscoreTest1_underscore.ts, 137, 38))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 138, 13))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 138, 16))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 138, 34))
@@= skipped -116, +116 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 138, 13))
 
         unique(isSorted?: boolean): T[];
->unique : Symbol(WrappedArray.unique, Decl(underscoreTest1_underscore.ts, 138, 82), Decl(underscoreTest1_underscore.ts, 139, 40))
+>unique : Symbol(unique, Decl(underscoreTest1_underscore.ts, 138, 82), Decl(underscoreTest1_underscore.ts, 139, 40))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 139, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         unique<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
->unique : Symbol(WrappedArray.unique, Decl(underscoreTest1_underscore.ts, 138, 82), Decl(underscoreTest1_underscore.ts, 139, 40))
+>unique : Symbol(unique, Decl(underscoreTest1_underscore.ts, 138, 82), Decl(underscoreTest1_underscore.ts, 139, 40))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 140, 15))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 140, 18))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 140, 36))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 140, 15))
 
         zip(...arrays: any[][]): any[][];
->zip : Symbol(WrappedArray.zip, Decl(underscoreTest1_underscore.ts, 140, 84))
+>zip : Symbol(zip, Decl(underscoreTest1_underscore.ts, 140, 84))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 141, 12))
 
         object(): any;
->object : Symbol(WrappedArray.object, Decl(underscoreTest1_underscore.ts, 141, 41), Decl(underscoreTest1_underscore.ts, 142, 22))
+>object : Symbol(object, Decl(underscoreTest1_underscore.ts, 141, 41), Decl(underscoreTest1_underscore.ts, 142, 22))
 
         object(values: any[]): any;
->object : Symbol(WrappedArray.object, Decl(underscoreTest1_underscore.ts, 141, 41), Decl(underscoreTest1_underscore.ts, 142, 22))
+>object : Symbol(object, Decl(underscoreTest1_underscore.ts, 141, 41), Decl(underscoreTest1_underscore.ts, 142, 22))
 >values : Symbol(values, Decl(underscoreTest1_underscore.ts, 143, 15))
 
         indexOf(value: T, isSorted?: boolean): number;
->indexOf : Symbol(WrappedArray.indexOf, Decl(underscoreTest1_underscore.ts, 143, 35))
+>indexOf : Symbol(indexOf, Decl(underscoreTest1_underscore.ts, 143, 35))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 144, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 144, 25))
 
         lastIndexOf(value: T, fromIndex?: number): number;
->lastIndexOf : Symbol(WrappedArray.lastIndexOf, Decl(underscoreTest1_underscore.ts, 144, 54))
+>lastIndexOf : Symbol(lastIndexOf, Decl(underscoreTest1_underscore.ts, 144, 54))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 145, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >fromIndex : Symbol(fromIndex, Decl(underscoreTest1_underscore.ts, 145, 29))
 
         sortedIndex(obj: T, propertyName: string): number;
->sortedIndex : Symbol(WrappedArray.sortedIndex, Decl(underscoreTest1_underscore.ts, 145, 58), Decl(underscoreTest1_underscore.ts, 146, 58))
+>sortedIndex : Symbol(sortedIndex, Decl(underscoreTest1_underscore.ts, 145, 58), Decl(underscoreTest1_underscore.ts, 146, 58))
 >obj : Symbol(obj, Decl(underscoreTest1_underscore.ts, 146, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 146, 27))
 
         sortedIndex(obj: T, iterator?: Iterator_<T, any>, context?: any): number;
->sortedIndex : Symbol(WrappedArray.sortedIndex, Decl(underscoreTest1_underscore.ts, 145, 58), Decl(underscoreTest1_underscore.ts, 146, 58))
+>sortedIndex : Symbol(sortedIndex, Decl(underscoreTest1_underscore.ts, 145, 58), Decl(underscoreTest1_underscore.ts, 146, 58))
 >obj : Symbol(obj, Decl(underscoreTest1_underscore.ts, 147, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 147, 27))
@@= skipped -39, +39 lines =@@
 
         // Methods from Array
         concat(...items: T[]): T[];
->concat : Symbol(WrappedArray.concat, Decl(underscoreTest1_underscore.ts, 147, 81))
+>concat : Symbol(concat, Decl(underscoreTest1_underscore.ts, 147, 81))
 >items : Symbol(items, Decl(underscoreTest1_underscore.ts, 149, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         join(separator?: string): string;
->join : Symbol(WrappedArray.join, Decl(underscoreTest1_underscore.ts, 149, 35))
+>join : Symbol(join, Decl(underscoreTest1_underscore.ts, 149, 35))
 >separator : Symbol(separator, Decl(underscoreTest1_underscore.ts, 150, 13))
 
         pop(): T;
->pop : Symbol(WrappedArray.pop, Decl(underscoreTest1_underscore.ts, 150, 41))
+>pop : Symbol(pop, Decl(underscoreTest1_underscore.ts, 150, 41))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         push(...items: T[]): number;
->push : Symbol(WrappedArray.push, Decl(underscoreTest1_underscore.ts, 151, 17))
+>push : Symbol(push, Decl(underscoreTest1_underscore.ts, 151, 17))
 >items : Symbol(items, Decl(underscoreTest1_underscore.ts, 152, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         reverse(): T[];
->reverse : Symbol(WrappedArray.reverse, Decl(underscoreTest1_underscore.ts, 152, 36))
+>reverse : Symbol(reverse, Decl(underscoreTest1_underscore.ts, 152, 36))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         shift(): T;
->shift : Symbol(WrappedArray.shift, Decl(underscoreTest1_underscore.ts, 153, 23))
+>shift : Symbol(shift, Decl(underscoreTest1_underscore.ts, 153, 23))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         slice(start: number, end?: number): T[];
->slice : Symbol(WrappedArray.slice, Decl(underscoreTest1_underscore.ts, 154, 19))
+>slice : Symbol(slice, Decl(underscoreTest1_underscore.ts, 154, 19))
 >start : Symbol(start, Decl(underscoreTest1_underscore.ts, 155, 14))
 >end : Symbol(end, Decl(underscoreTest1_underscore.ts, 155, 28))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         sort(compareFn?: (a: T, b: T) => number): T[];
->sort : Symbol(WrappedArray.sort, Decl(underscoreTest1_underscore.ts, 155, 48))
+>sort : Symbol(sort, Decl(underscoreTest1_underscore.ts, 155, 48))
 >compareFn : Symbol(compareFn, Decl(underscoreTest1_underscore.ts, 156, 13))
 >a : Symbol(a, Decl(underscoreTest1_underscore.ts, 156, 26))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
@@= skipped -42, +42 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         splice(start: number): T[];
->splice : Symbol(WrappedArray.splice, Decl(underscoreTest1_underscore.ts, 156, 54), Decl(underscoreTest1_underscore.ts, 157, 35))
+>splice : Symbol(splice, Decl(underscoreTest1_underscore.ts, 156, 54), Decl(underscoreTest1_underscore.ts, 157, 35))
 >start : Symbol(start, Decl(underscoreTest1_underscore.ts, 157, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         splice(start: number, deleteCount: number, ...items: T[]): T[];
->splice : Symbol(WrappedArray.splice, Decl(underscoreTest1_underscore.ts, 156, 54), Decl(underscoreTest1_underscore.ts, 157, 35))
+>splice : Symbol(splice, Decl(underscoreTest1_underscore.ts, 156, 54), Decl(underscoreTest1_underscore.ts, 157, 35))
 >start : Symbol(start, Decl(underscoreTest1_underscore.ts, 158, 15))
 >deleteCount : Symbol(deleteCount, Decl(underscoreTest1_underscore.ts, 158, 29))
 >items : Symbol(items, Decl(underscoreTest1_underscore.ts, 158, 50))
@@= skipped -13, +13 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
 
         unshift(...items: T[]): number;
->unshift : Symbol(WrappedArray.unshift, Decl(underscoreTest1_underscore.ts, 158, 71))
+>unshift : Symbol(unshift, Decl(underscoreTest1_underscore.ts, 158, 71))
 >items : Symbol(items, Decl(underscoreTest1_underscore.ts, 159, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 79, 34))
     }
@@= skipped -13, +13 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         each(iterator: Iterator_<T, void>, context?: any): void;
->each : Symbol(WrappedDictionary.each, Decl(underscoreTest1_underscore.ts, 162, 80))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 162, 80))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 163, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 163, 42))
 
         forEach(iterator: Iterator_<T, void>, context?: any): void;
->forEach : Symbol(WrappedDictionary.forEach, Decl(underscoreTest1_underscore.ts, 163, 64))
+>forEach : Symbol(forEach, Decl(underscoreTest1_underscore.ts, 163, 64))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 164, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 164, 45))
 
         map<U>(iterator: Iterator_<T, U>, context?: any): U[];
->map : Symbol(WrappedDictionary.map, Decl(underscoreTest1_underscore.ts, 164, 67))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 164, 67))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 165, 12))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 165, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
@@= skipped -24, +24 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 165, 12))
 
         collect<U>(iterator: Iterator_<T, U>, context?: any): U[];
->collect : Symbol(WrappedDictionary.collect, Decl(underscoreTest1_underscore.ts, 165, 62))
+>collect : Symbol(collect, Decl(underscoreTest1_underscore.ts, 165, 62))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 166, 16))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 166, 19))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
@@= skipped -10, +10 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 166, 16))
 
         reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduce : Symbol(WrappedDictionary.reduce, Decl(underscoreTest1_underscore.ts, 166, 66), Decl(underscoreTest1_underscore.ts, 167, 76))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 166, 66), Decl(underscoreTest1_underscore.ts, 167, 76))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 167, 15))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduce : Symbol(WrappedDictionary.reduce, Decl(underscoreTest1_underscore.ts, 166, 66), Decl(underscoreTest1_underscore.ts, 167, 76))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 166, 66), Decl(underscoreTest1_underscore.ts, 167, 76))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 168, 15))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 168, 18))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 168, 15))
 
         foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldl : Symbol(WrappedDictionary.foldl, Decl(underscoreTest1_underscore.ts, 168, 78), Decl(underscoreTest1_underscore.ts, 169, 75))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 168, 78), Decl(underscoreTest1_underscore.ts, 169, 75))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 169, 14))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldl : Symbol(WrappedDictionary.foldl, Decl(underscoreTest1_underscore.ts, 168, 78), Decl(underscoreTest1_underscore.ts, 169, 75))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 168, 78), Decl(underscoreTest1_underscore.ts, 169, 75))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 170, 14))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 170, 17))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 170, 14))
 
         inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->inject : Symbol(WrappedDictionary.inject, Decl(underscoreTest1_underscore.ts, 170, 77), Decl(underscoreTest1_underscore.ts, 171, 76))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 170, 77), Decl(underscoreTest1_underscore.ts, 171, 76))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 171, 15))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->inject : Symbol(WrappedDictionary.inject, Decl(underscoreTest1_underscore.ts, 170, 77), Decl(underscoreTest1_underscore.ts, 171, 76))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 170, 77), Decl(underscoreTest1_underscore.ts, 171, 76))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 172, 15))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 172, 18))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 172, 15))
 
         reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduceRight : Symbol(WrappedDictionary.reduceRight, Decl(underscoreTest1_underscore.ts, 172, 78), Decl(underscoreTest1_underscore.ts, 173, 81))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 172, 78), Decl(underscoreTest1_underscore.ts, 173, 81))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 173, 20))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduceRight : Symbol(WrappedDictionary.reduceRight, Decl(underscoreTest1_underscore.ts, 172, 78), Decl(underscoreTest1_underscore.ts, 173, 81))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 172, 78), Decl(underscoreTest1_underscore.ts, 173, 81))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 174, 20))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 174, 23))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 174, 20))
 
         foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldr : Symbol(WrappedDictionary.foldr, Decl(underscoreTest1_underscore.ts, 174, 83), Decl(underscoreTest1_underscore.ts, 175, 75))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 174, 83), Decl(underscoreTest1_underscore.ts, 175, 75))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 175, 14))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldr : Symbol(WrappedDictionary.foldr, Decl(underscoreTest1_underscore.ts, 174, 83), Decl(underscoreTest1_underscore.ts, 175, 75))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 174, 83), Decl(underscoreTest1_underscore.ts, 175, 75))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 176, 14))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 176, 17))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -12, +12 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 176, 14))
 
         find(iterator: Iterator_<T, boolean>, context?: any): T;
->find : Symbol(WrappedDictionary.find, Decl(underscoreTest1_underscore.ts, 176, 77))
+>find : Symbol(find, Decl(underscoreTest1_underscore.ts, 176, 77))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 177, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         detect(iterator: Iterator_<T, boolean>, context?: any): T;
->detect : Symbol(WrappedDictionary.detect, Decl(underscoreTest1_underscore.ts, 177, 64))
+>detect : Symbol(detect, Decl(underscoreTest1_underscore.ts, 177, 64))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 178, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         filter(iterator: Iterator_<T, boolean>, context?: any): T[];
->filter : Symbol(WrappedDictionary.filter, Decl(underscoreTest1_underscore.ts, 178, 66))
+>filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 178, 66))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 179, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         select(iterator: Iterator_<T, boolean>, context?: any): T[];
->select : Symbol(WrappedDictionary.select, Decl(underscoreTest1_underscore.ts, 179, 68))
+>select : Symbol(select, Decl(underscoreTest1_underscore.ts, 179, 68))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 180, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         where(properties: Object): T[];
->where : Symbol(WrappedDictionary.where, Decl(underscoreTest1_underscore.ts, 180, 68))
+>where : Symbol(where, Decl(underscoreTest1_underscore.ts, 180, 68))
 >properties : Symbol(properties, Decl(underscoreTest1_underscore.ts, 181, 14))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         findWhere(properties: Object): T;
->findWhere : Symbol(WrappedDictionary.findWhere, Decl(underscoreTest1_underscore.ts, 181, 39))
+>findWhere : Symbol(findWhere, Decl(underscoreTest1_underscore.ts, 181, 39))
 >properties : Symbol(properties, Decl(underscoreTest1_underscore.ts, 182, 18))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         reject(iterator: Iterator_<T, boolean>, context?: any): T[];
->reject : Symbol(WrappedDictionary.reject, Decl(underscoreTest1_underscore.ts, 182, 41))
+>reject : Symbol(reject, Decl(underscoreTest1_underscore.ts, 182, 41))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 183, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -20, +20 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         every(iterator?: Iterator_<T, boolean>, context?: any): boolean;
->every : Symbol(WrappedDictionary.every, Decl(underscoreTest1_underscore.ts, 183, 68))
+>every : Symbol(every, Decl(underscoreTest1_underscore.ts, 183, 68))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 184, 14))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 184, 47))
 
         all(iterator?: Iterator_<T, boolean>, context?: any): boolean;
->all : Symbol(WrappedDictionary.all, Decl(underscoreTest1_underscore.ts, 184, 72))
+>all : Symbol(all, Decl(underscoreTest1_underscore.ts, 184, 72))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 185, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 185, 45))
 
         some(iterator?: Iterator_<T, boolean>, context?: any): boolean;
->some : Symbol(WrappedDictionary.some, Decl(underscoreTest1_underscore.ts, 185, 70))
+>some : Symbol(some, Decl(underscoreTest1_underscore.ts, 185, 70))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 186, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 186, 46))
 
         any(iterator?: Iterator_<T, boolean>, context?: any): boolean;
->any : Symbol(WrappedDictionary.any, Decl(underscoreTest1_underscore.ts, 186, 71))
+>any : Symbol(any, Decl(underscoreTest1_underscore.ts, 186, 71))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 187, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 187, 45))
 
         contains(value: T): boolean;
->contains : Symbol(WrappedDictionary.contains, Decl(underscoreTest1_underscore.ts, 187, 70))
+>contains : Symbol(contains, Decl(underscoreTest1_underscore.ts, 187, 70))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 188, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         include(value: T): boolean;
->include : Symbol(WrappedDictionary.include, Decl(underscoreTest1_underscore.ts, 188, 36))
+>include : Symbol(include, Decl(underscoreTest1_underscore.ts, 188, 36))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 189, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         invoke(methodName: string, ...args: any[]): any[];
->invoke : Symbol(WrappedDictionary.invoke, Decl(underscoreTest1_underscore.ts, 189, 35))
+>invoke : Symbol(invoke, Decl(underscoreTest1_underscore.ts, 189, 35))
 >methodName : Symbol(methodName, Decl(underscoreTest1_underscore.ts, 190, 15))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 190, 34))
 
         pluck(propertyName: string): any[];
->pluck : Symbol(WrappedDictionary.pluck, Decl(underscoreTest1_underscore.ts, 190, 58))
+>pluck : Symbol(pluck, Decl(underscoreTest1_underscore.ts, 190, 58))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 191, 14))
 
         max(iterator?: Iterator_<T, any>, context?: any): T;
->max : Symbol(WrappedDictionary.max, Decl(underscoreTest1_underscore.ts, 191, 43))
+>max : Symbol(max, Decl(underscoreTest1_underscore.ts, 191, 43))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 192, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -55, +55 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         min(iterator?: Iterator_<T, any>, context?: any): T;
->min : Symbol(WrappedDictionary.min, Decl(underscoreTest1_underscore.ts, 192, 60))
+>min : Symbol(min, Decl(underscoreTest1_underscore.ts, 192, 60))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 193, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         sortBy(iterator: Iterator_<T, any>, context?: any): T[];
->sortBy : Symbol(WrappedDictionary.sortBy, Decl(underscoreTest1_underscore.ts, 193, 60), Decl(underscoreTest1_underscore.ts, 194, 64))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 193, 60), Decl(underscoreTest1_underscore.ts, 194, 64))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 194, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         sortBy(propertyName: string): T[];
->sortBy : Symbol(WrappedDictionary.sortBy, Decl(underscoreTest1_underscore.ts, 193, 60), Decl(underscoreTest1_underscore.ts, 194, 64))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 193, 60), Decl(underscoreTest1_underscore.ts, 194, 64))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 195, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         groupBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
->groupBy : Symbol(WrappedDictionary.groupBy, Decl(underscoreTest1_underscore.ts, 195, 42), Decl(underscoreTest1_underscore.ts, 196, 78))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 195, 42), Decl(underscoreTest1_underscore.ts, 196, 78))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 196, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         groupBy(propertyName: string): Dictionary<T[]>;
->groupBy : Symbol(WrappedDictionary.groupBy, Decl(underscoreTest1_underscore.ts, 195, 42), Decl(underscoreTest1_underscore.ts, 196, 78))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 195, 42), Decl(underscoreTest1_underscore.ts, 196, 78))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 197, 16))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         countBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
->countBy : Symbol(WrappedDictionary.countBy, Decl(underscoreTest1_underscore.ts, 197, 55), Decl(underscoreTest1_underscore.ts, 198, 81))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 197, 55), Decl(underscoreTest1_underscore.ts, 198, 81))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 198, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
@@= skipped -14, +14 lines =@@
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 
         countBy(propertyName: string): Dictionary<number>;
->countBy : Symbol(WrappedDictionary.countBy, Decl(underscoreTest1_underscore.ts, 197, 55), Decl(underscoreTest1_underscore.ts, 198, 81))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 197, 55), Decl(underscoreTest1_underscore.ts, 198, 81))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 199, 16))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 
         shuffle(): T[];
->shuffle : Symbol(WrappedDictionary.shuffle, Decl(underscoreTest1_underscore.ts, 199, 58))
+>shuffle : Symbol(shuffle, Decl(underscoreTest1_underscore.ts, 199, 58))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         toArray(): T[];
->toArray : Symbol(WrappedDictionary.toArray, Decl(underscoreTest1_underscore.ts, 200, 23))
+>toArray : Symbol(toArray, Decl(underscoreTest1_underscore.ts, 200, 23))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 162, 39))
 
         size(): number;
->size : Symbol(WrappedDictionary.size, Decl(underscoreTest1_underscore.ts, 201, 23))
+>size : Symbol(size, Decl(underscoreTest1_underscore.ts, 201, 23))
     }
 
     export interface ChainedObject<T> {
@@= skipped -21, +21 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
 
         keys(): ChainedArray<string>;
->keys : Symbol(ChainedObject.keys, Decl(underscoreTest1_underscore.ts, 205, 39))
+>keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 205, 39))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         values(): ChainedArray<any>;
->values : Symbol(ChainedObject.values, Decl(underscoreTest1_underscore.ts, 206, 37))
+>values : Symbol(values, Decl(underscoreTest1_underscore.ts, 206, 37))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         pairs(): ChainedArray<any[]>;
->pairs : Symbol(ChainedObject.pairs, Decl(underscoreTest1_underscore.ts, 207, 36))
+>pairs : Symbol(pairs, Decl(underscoreTest1_underscore.ts, 207, 36))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         invert(): ChainedObject<any>;
->invert : Symbol(ChainedObject.invert, Decl(underscoreTest1_underscore.ts, 208, 37))
+>invert : Symbol(invert, Decl(underscoreTest1_underscore.ts, 208, 37))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         functions(): ChainedArray<string>;
->functions : Symbol(ChainedObject.functions, Decl(underscoreTest1_underscore.ts, 209, 37))
+>functions : Symbol(functions, Decl(underscoreTest1_underscore.ts, 209, 37))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         methods(): ChainedArray<string>;
->methods : Symbol(ChainedObject.methods, Decl(underscoreTest1_underscore.ts, 210, 42))
+>methods : Symbol(methods, Decl(underscoreTest1_underscore.ts, 210, 42))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         extend(...sources: any[]): ChainedObject<T>;
->extend : Symbol(ChainedObject.extend, Decl(underscoreTest1_underscore.ts, 211, 40))
+>extend : Symbol(extend, Decl(underscoreTest1_underscore.ts, 211, 40))
 >sources : Symbol(sources, Decl(underscoreTest1_underscore.ts, 212, 15))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
 
         pick(...keys: string[]): ChainedObject<T>;
->pick : Symbol(ChainedObject.pick, Decl(underscoreTest1_underscore.ts, 212, 52))
+>pick : Symbol(pick, Decl(underscoreTest1_underscore.ts, 212, 52))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 213, 13))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
 
         omit(...keys: string[]): ChainedObject<T>;
->omit : Symbol(ChainedObject.omit, Decl(underscoreTest1_underscore.ts, 213, 50))
+>omit : Symbol(omit, Decl(underscoreTest1_underscore.ts, 213, 50))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 214, 13))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
 
         defaults(...defaults: any[]): ChainedObject<T>;
->defaults : Symbol(ChainedObject.defaults, Decl(underscoreTest1_underscore.ts, 214, 50))
+>defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 214, 50))
 >defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 215, 17))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
 
         clone(): ChainedObject<T>;
->clone : Symbol(ChainedObject.clone, Decl(underscoreTest1_underscore.ts, 215, 55))
+>clone : Symbol(clone, Decl(underscoreTest1_underscore.ts, 215, 55))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
 
         tap(interceptor: (object: T) => void): ChainedObject<T>;
->tap : Symbol(ChainedObject.tap, Decl(underscoreTest1_underscore.ts, 216, 34))
+>tap : Symbol(tap, Decl(underscoreTest1_underscore.ts, 216, 34))
 >interceptor : Symbol(interceptor, Decl(underscoreTest1_underscore.ts, 217, 12))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 217, 26))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
@@= skipped -61, +61 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
 
         has(key: string): ChainedObject<boolean>;
->has : Symbol(ChainedObject.has, Decl(underscoreTest1_underscore.ts, 217, 64))
+>has : Symbol(has, Decl(underscoreTest1_underscore.ts, 217, 64))
 >key : Symbol(key, Decl(underscoreTest1_underscore.ts, 218, 12))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isEqual(other: T): ChainedObject<boolean>;
->isEqual : Symbol(ChainedObject.isEqual, Decl(underscoreTest1_underscore.ts, 218, 49))
+>isEqual : Symbol(isEqual, Decl(underscoreTest1_underscore.ts, 218, 49))
 >other : Symbol(other, Decl(underscoreTest1_underscore.ts, 219, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isEmpty(): ChainedObject<boolean>;
->isEmpty : Symbol(ChainedObject.isEmpty, Decl(underscoreTest1_underscore.ts, 219, 50))
+>isEmpty : Symbol(isEmpty, Decl(underscoreTest1_underscore.ts, 219, 50))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isElement(): ChainedObject<boolean>;
->isElement : Symbol(ChainedObject.isElement, Decl(underscoreTest1_underscore.ts, 220, 42))
+>isElement : Symbol(isElement, Decl(underscoreTest1_underscore.ts, 220, 42))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isArray(): ChainedObject<boolean>;
->isArray : Symbol(ChainedObject.isArray, Decl(underscoreTest1_underscore.ts, 221, 44))
+>isArray : Symbol(isArray, Decl(underscoreTest1_underscore.ts, 221, 44))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isObject(): ChainedObject<boolean>;
->isObject : Symbol(ChainedObject.isObject, Decl(underscoreTest1_underscore.ts, 222, 42))
+>isObject : Symbol(isObject, Decl(underscoreTest1_underscore.ts, 222, 42))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isArguments(): ChainedObject<boolean>;
->isArguments : Symbol(ChainedObject.isArguments, Decl(underscoreTest1_underscore.ts, 223, 43))
+>isArguments : Symbol(isArguments, Decl(underscoreTest1_underscore.ts, 223, 43))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isFunction(): ChainedObject<boolean>;
->isFunction : Symbol(ChainedObject.isFunction, Decl(underscoreTest1_underscore.ts, 224, 46))
+>isFunction : Symbol(isFunction, Decl(underscoreTest1_underscore.ts, 224, 46))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isString(): ChainedObject<boolean>;
->isString : Symbol(ChainedObject.isString, Decl(underscoreTest1_underscore.ts, 225, 45))
+>isString : Symbol(isString, Decl(underscoreTest1_underscore.ts, 225, 45))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isNumber(): ChainedObject<boolean>;
->isNumber : Symbol(ChainedObject.isNumber, Decl(underscoreTest1_underscore.ts, 226, 43))
+>isNumber : Symbol(isNumber, Decl(underscoreTest1_underscore.ts, 226, 43))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isFinite(): ChainedObject<boolean>;
->isFinite : Symbol(ChainedObject.isFinite, Decl(underscoreTest1_underscore.ts, 227, 43))
+>isFinite : Symbol(isFinite, Decl(underscoreTest1_underscore.ts, 227, 43))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isBoolean(): ChainedObject<boolean>;
->isBoolean : Symbol(ChainedObject.isBoolean, Decl(underscoreTest1_underscore.ts, 228, 43))
+>isBoolean : Symbol(isBoolean, Decl(underscoreTest1_underscore.ts, 228, 43))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isDate(): ChainedObject<boolean>;
->isDate : Symbol(ChainedObject.isDate, Decl(underscoreTest1_underscore.ts, 229, 44))
+>isDate : Symbol(isDate, Decl(underscoreTest1_underscore.ts, 229, 44))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isRegExp(): ChainedObject<boolean>;
->isRegExp : Symbol(ChainedObject.isRegExp, Decl(underscoreTest1_underscore.ts, 230, 41))
+>isRegExp : Symbol(isRegExp, Decl(underscoreTest1_underscore.ts, 230, 41))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isNaN(): ChainedObject<boolean>;
->isNaN : Symbol(ChainedObject.isNaN, Decl(underscoreTest1_underscore.ts, 231, 43))
+>isNaN : Symbol(isNaN, Decl(underscoreTest1_underscore.ts, 231, 43))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isNull(): ChainedObject<boolean>;
->isNull : Symbol(ChainedObject.isNull, Decl(underscoreTest1_underscore.ts, 232, 40))
+>isNull : Symbol(isNull, Decl(underscoreTest1_underscore.ts, 232, 40))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         isUndefined(): ChainedObject<boolean>;
->isUndefined : Symbol(ChainedObject.isUndefined, Decl(underscoreTest1_underscore.ts, 233, 41))
+>isUndefined : Symbol(isUndefined, Decl(underscoreTest1_underscore.ts, 233, 41))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         value(): T;
->value : Symbol(ChainedObject.value, Decl(underscoreTest1_underscore.ts, 234, 46))
+>value : Symbol(value, Decl(underscoreTest1_underscore.ts, 234, 46))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 205, 35))
     }
 
@@= skipped -83, +83 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         each(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
->each : Symbol(ChainedArray.each, Decl(underscoreTest1_underscore.ts, 238, 70))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 238, 70))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 239, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         forEach(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
->forEach : Symbol(ChainedArray.forEach, Decl(underscoreTest1_underscore.ts, 239, 79))
+>forEach : Symbol(forEach, Decl(underscoreTest1_underscore.ts, 239, 79))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 240, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         map<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
->map : Symbol(ChainedArray.map, Decl(underscoreTest1_underscore.ts, 240, 82))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 240, 82))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 241, 12))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 241, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
@@= skipped -11, +11 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 241, 12))
 
         collect<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
->collect : Symbol(ChainedArray.collect, Decl(underscoreTest1_underscore.ts, 241, 74))
+>collect : Symbol(collect, Decl(underscoreTest1_underscore.ts, 241, 74))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 242, 16))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 242, 19))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
@@= skipped -11, +11 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 242, 16))
 
         reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->reduce : Symbol(ChainedArray.reduce, Decl(underscoreTest1_underscore.ts, 242, 78), Decl(underscoreTest1_underscore.ts, 243, 91))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 242, 78), Decl(underscoreTest1_underscore.ts, 243, 91))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 243, 15))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->reduce : Symbol(ChainedArray.reduce, Decl(underscoreTest1_underscore.ts, 242, 78), Decl(underscoreTest1_underscore.ts, 243, 91))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 242, 78), Decl(underscoreTest1_underscore.ts, 243, 91))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 244, 15))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 244, 18))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 244, 15))
 
         foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->foldl : Symbol(ChainedArray.foldl, Decl(underscoreTest1_underscore.ts, 244, 93), Decl(underscoreTest1_underscore.ts, 245, 90))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 244, 93), Decl(underscoreTest1_underscore.ts, 245, 90))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 245, 14))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->foldl : Symbol(ChainedArray.foldl, Decl(underscoreTest1_underscore.ts, 244, 93), Decl(underscoreTest1_underscore.ts, 245, 90))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 244, 93), Decl(underscoreTest1_underscore.ts, 245, 90))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 246, 14))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 246, 17))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 246, 14))
 
         inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->inject : Symbol(ChainedArray.inject, Decl(underscoreTest1_underscore.ts, 246, 92), Decl(underscoreTest1_underscore.ts, 247, 91))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 246, 92), Decl(underscoreTest1_underscore.ts, 247, 91))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 247, 15))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->inject : Symbol(ChainedArray.inject, Decl(underscoreTest1_underscore.ts, 246, 92), Decl(underscoreTest1_underscore.ts, 247, 91))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 246, 92), Decl(underscoreTest1_underscore.ts, 247, 91))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 248, 15))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 248, 18))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 248, 15))
 
         reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->reduceRight : Symbol(ChainedArray.reduceRight, Decl(underscoreTest1_underscore.ts, 248, 93), Decl(underscoreTest1_underscore.ts, 249, 96))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 248, 93), Decl(underscoreTest1_underscore.ts, 249, 96))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 249, 20))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->reduceRight : Symbol(ChainedArray.reduceRight, Decl(underscoreTest1_underscore.ts, 248, 93), Decl(underscoreTest1_underscore.ts, 249, 96))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 248, 93), Decl(underscoreTest1_underscore.ts, 249, 96))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 250, 20))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 250, 23))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 250, 20))
 
         foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->foldr : Symbol(ChainedArray.foldr, Decl(underscoreTest1_underscore.ts, 250, 98), Decl(underscoreTest1_underscore.ts, 251, 90))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 250, 98), Decl(underscoreTest1_underscore.ts, 251, 90))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 251, 14))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->foldr : Symbol(ChainedArray.foldr, Decl(underscoreTest1_underscore.ts, 250, 98), Decl(underscoreTest1_underscore.ts, 251, 90))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 250, 98), Decl(underscoreTest1_underscore.ts, 251, 90))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 252, 14))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 252, 17))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 252, 14))
 
         find(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
->find : Symbol(ChainedArray.find, Decl(underscoreTest1_underscore.ts, 252, 92))
+>find : Symbol(find, Decl(underscoreTest1_underscore.ts, 252, 92))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 253, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         detect(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
->detect : Symbol(ChainedArray.detect, Decl(underscoreTest1_underscore.ts, 253, 79))
+>detect : Symbol(detect, Decl(underscoreTest1_underscore.ts, 253, 79))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 254, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         filter(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
->filter : Symbol(ChainedArray.filter, Decl(underscoreTest1_underscore.ts, 254, 81))
+>filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 254, 81))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 255, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
->select : Symbol(ChainedArray.select, Decl(underscoreTest1_underscore.ts, 255, 80))
+>select : Symbol(select, Decl(underscoreTest1_underscore.ts, 255, 80))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 256, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         where(properties: Object): ChainedArray<T>;
->where : Symbol(ChainedArray.where, Decl(underscoreTest1_underscore.ts, 256, 80))
+>where : Symbol(where, Decl(underscoreTest1_underscore.ts, 256, 80))
 >properties : Symbol(properties, Decl(underscoreTest1_underscore.ts, 257, 14))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         findWhere(properties: Object): ChainedObject<T>;
->findWhere : Symbol(ChainedArray.findWhere, Decl(underscoreTest1_underscore.ts, 257, 51))
+>findWhere : Symbol(findWhere, Decl(underscoreTest1_underscore.ts, 257, 51))
 >properties : Symbol(properties, Decl(underscoreTest1_underscore.ts, 258, 18))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
->reject : Symbol(ChainedArray.reject, Decl(underscoreTest1_underscore.ts, 258, 56))
+>reject : Symbol(reject, Decl(underscoreTest1_underscore.ts, 258, 56))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 259, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -23, +23 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
->every : Symbol(ChainedArray.every, Decl(underscoreTest1_underscore.ts, 259, 80))
+>every : Symbol(every, Decl(underscoreTest1_underscore.ts, 259, 80))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 260, 14))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
->all : Symbol(ChainedArray.all, Decl(underscoreTest1_underscore.ts, 260, 87))
+>all : Symbol(all, Decl(underscoreTest1_underscore.ts, 260, 87))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 261, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
->some : Symbol(ChainedArray.some, Decl(underscoreTest1_underscore.ts, 261, 85))
+>some : Symbol(some, Decl(underscoreTest1_underscore.ts, 261, 85))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 262, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
->any : Symbol(ChainedArray.any, Decl(underscoreTest1_underscore.ts, 262, 86))
+>any : Symbol(any, Decl(underscoreTest1_underscore.ts, 262, 86))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 263, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         contains(value: T): ChainedObject<boolean>;
->contains : Symbol(ChainedArray.contains, Decl(underscoreTest1_underscore.ts, 263, 85))
+>contains : Symbol(contains, Decl(underscoreTest1_underscore.ts, 263, 85))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 264, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         include(value: T): ChainedObject<boolean>;
->include : Symbol(ChainedArray.include, Decl(underscoreTest1_underscore.ts, 264, 51))
+>include : Symbol(include, Decl(underscoreTest1_underscore.ts, 264, 51))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 265, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         invoke(methodName: string, ...args: any[]): ChainedArray<any>;
->invoke : Symbol(ChainedArray.invoke, Decl(underscoreTest1_underscore.ts, 265, 50))
+>invoke : Symbol(invoke, Decl(underscoreTest1_underscore.ts, 265, 50))
 >methodName : Symbol(methodName, Decl(underscoreTest1_underscore.ts, 266, 15))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 266, 34))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         pluck(propertyName: string): ChainedArray<any>;
->pluck : Symbol(ChainedArray.pluck, Decl(underscoreTest1_underscore.ts, 266, 70))
+>pluck : Symbol(pluck, Decl(underscoreTest1_underscore.ts, 266, 70))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 267, 14))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
->max : Symbol(ChainedArray.max, Decl(underscoreTest1_underscore.ts, 267, 55))
+>max : Symbol(max, Decl(underscoreTest1_underscore.ts, 267, 55))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 268, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -32, +32 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
->min : Symbol(ChainedArray.min, Decl(underscoreTest1_underscore.ts, 268, 75))
+>min : Symbol(min, Decl(underscoreTest1_underscore.ts, 268, 75))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 269, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
->sortBy : Symbol(ChainedArray.sortBy, Decl(underscoreTest1_underscore.ts, 269, 75), Decl(underscoreTest1_underscore.ts, 270, 76))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 269, 75), Decl(underscoreTest1_underscore.ts, 270, 76))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 270, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         sortBy(propertyName: string): ChainedArray<T>;
->sortBy : Symbol(ChainedArray.sortBy, Decl(underscoreTest1_underscore.ts, 269, 75), Decl(underscoreTest1_underscore.ts, 270, 76))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 269, 75), Decl(underscoreTest1_underscore.ts, 270, 76))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 271, 15))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         // Should return ChainedDictionary<T[]>, but expansive recursion not allowed
         groupBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>;
->groupBy : Symbol(ChainedArray.groupBy, Decl(underscoreTest1_underscore.ts, 271, 54), Decl(underscoreTest1_underscore.ts, 273, 87))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 271, 54), Decl(underscoreTest1_underscore.ts, 273, 87))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 273, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -15, +15 lines =@@
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 
         groupBy(propertyName: string): ChainedDictionary<any[]>;
->groupBy : Symbol(ChainedArray.groupBy, Decl(underscoreTest1_underscore.ts, 271, 54), Decl(underscoreTest1_underscore.ts, 273, 87))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 271, 54), Decl(underscoreTest1_underscore.ts, 273, 87))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 274, 16))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 
         countBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>;
->countBy : Symbol(ChainedArray.countBy, Decl(underscoreTest1_underscore.ts, 274, 64), Decl(underscoreTest1_underscore.ts, 275, 88))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 274, 64), Decl(underscoreTest1_underscore.ts, 275, 88))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 275, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -13, +13 lines =@@
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 
         countBy(propertyName: string): ChainedDictionary<number>;
->countBy : Symbol(ChainedArray.countBy, Decl(underscoreTest1_underscore.ts, 274, 64), Decl(underscoreTest1_underscore.ts, 275, 88))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 274, 64), Decl(underscoreTest1_underscore.ts, 275, 88))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 276, 16))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 
         shuffle(): ChainedArray<T>;
->shuffle : Symbol(ChainedArray.shuffle, Decl(underscoreTest1_underscore.ts, 276, 65))
+>shuffle : Symbol(shuffle, Decl(underscoreTest1_underscore.ts, 276, 65))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         toArray(): ChainedArray<T>;
->toArray : Symbol(ChainedArray.toArray, Decl(underscoreTest1_underscore.ts, 277, 35))
+>toArray : Symbol(toArray, Decl(underscoreTest1_underscore.ts, 277, 35))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         size(): ChainedObject<number>;
->size : Symbol(ChainedArray.size, Decl(underscoreTest1_underscore.ts, 278, 35))
+>size : Symbol(size, Decl(underscoreTest1_underscore.ts, 278, 35))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         first(): ChainedObject<T>;
->first : Symbol(ChainedArray.first, Decl(underscoreTest1_underscore.ts, 279, 38), Decl(underscoreTest1_underscore.ts, 280, 34))
+>first : Symbol(first, Decl(underscoreTest1_underscore.ts, 279, 38), Decl(underscoreTest1_underscore.ts, 280, 34))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         first(count: number): ChainedArray<T>;
->first : Symbol(ChainedArray.first, Decl(underscoreTest1_underscore.ts, 279, 38), Decl(underscoreTest1_underscore.ts, 280, 34))
+>first : Symbol(first, Decl(underscoreTest1_underscore.ts, 279, 38), Decl(underscoreTest1_underscore.ts, 280, 34))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 281, 14))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         head(): ChainedObject<T>;
->head : Symbol(ChainedArray.head, Decl(underscoreTest1_underscore.ts, 281, 46), Decl(underscoreTest1_underscore.ts, 282, 33))
+>head : Symbol(head, Decl(underscoreTest1_underscore.ts, 281, 46), Decl(underscoreTest1_underscore.ts, 282, 33))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         head(count: number): ChainedArray<T>;
->head : Symbol(ChainedArray.head, Decl(underscoreTest1_underscore.ts, 281, 46), Decl(underscoreTest1_underscore.ts, 282, 33))
+>head : Symbol(head, Decl(underscoreTest1_underscore.ts, 281, 46), Decl(underscoreTest1_underscore.ts, 282, 33))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 283, 13))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         take(): ChainedObject<T>;
->take : Symbol(ChainedArray.take, Decl(underscoreTest1_underscore.ts, 283, 45), Decl(underscoreTest1_underscore.ts, 284, 33))
+>take : Symbol(take, Decl(underscoreTest1_underscore.ts, 283, 45), Decl(underscoreTest1_underscore.ts, 284, 33))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         take(count: number): ChainedArray<T>;
->take : Symbol(ChainedArray.take, Decl(underscoreTest1_underscore.ts, 283, 45), Decl(underscoreTest1_underscore.ts, 284, 33))
+>take : Symbol(take, Decl(underscoreTest1_underscore.ts, 283, 45), Decl(underscoreTest1_underscore.ts, 284, 33))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 285, 13))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         initial(): ChainedObject<T>;
->initial : Symbol(ChainedArray.initial, Decl(underscoreTest1_underscore.ts, 285, 45), Decl(underscoreTest1_underscore.ts, 286, 36))
+>initial : Symbol(initial, Decl(underscoreTest1_underscore.ts, 285, 45), Decl(underscoreTest1_underscore.ts, 286, 36))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         initial(count: number): ChainedArray<T>;
->initial : Symbol(ChainedArray.initial, Decl(underscoreTest1_underscore.ts, 285, 45), Decl(underscoreTest1_underscore.ts, 286, 36))
+>initial : Symbol(initial, Decl(underscoreTest1_underscore.ts, 285, 45), Decl(underscoreTest1_underscore.ts, 286, 36))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 287, 16))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         last(): ChainedObject<T>;
->last : Symbol(ChainedArray.last, Decl(underscoreTest1_underscore.ts, 287, 48), Decl(underscoreTest1_underscore.ts, 288, 33))
+>last : Symbol(last, Decl(underscoreTest1_underscore.ts, 287, 48), Decl(underscoreTest1_underscore.ts, 288, 33))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         last(count: number): ChainedArray<T>;
->last : Symbol(ChainedArray.last, Decl(underscoreTest1_underscore.ts, 287, 48), Decl(underscoreTest1_underscore.ts, 288, 33))
+>last : Symbol(last, Decl(underscoreTest1_underscore.ts, 287, 48), Decl(underscoreTest1_underscore.ts, 288, 33))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 289, 13))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         rest(index?: number): ChainedArray<T>;
->rest : Symbol(ChainedArray.rest, Decl(underscoreTest1_underscore.ts, 289, 45))
+>rest : Symbol(rest, Decl(underscoreTest1_underscore.ts, 289, 45))
 >index : Symbol(index, Decl(underscoreTest1_underscore.ts, 290, 13))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         compact(): ChainedArray<T>;
->compact : Symbol(ChainedArray.compact, Decl(underscoreTest1_underscore.ts, 290, 46))
+>compact : Symbol(compact, Decl(underscoreTest1_underscore.ts, 290, 46))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         flatten<U>(shallow?: boolean): ChainedArray<U>;
->flatten : Symbol(ChainedArray.flatten, Decl(underscoreTest1_underscore.ts, 291, 35))
+>flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 291, 35))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 292, 16))
 >shallow : Symbol(shallow, Decl(underscoreTest1_underscore.ts, 292, 19))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 292, 16))
 
         without(...values: T[]): ChainedArray<T>;
->without : Symbol(ChainedArray.without, Decl(underscoreTest1_underscore.ts, 292, 55))
+>without : Symbol(without, Decl(underscoreTest1_underscore.ts, 292, 55))
 >values : Symbol(values, Decl(underscoreTest1_underscore.ts, 293, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         union(...arrays: T[][]): ChainedArray<T>;
->union : Symbol(ChainedArray.union, Decl(underscoreTest1_underscore.ts, 293, 49))
+>union : Symbol(union, Decl(underscoreTest1_underscore.ts, 293, 49))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 294, 14))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         intersection(...arrays: T[][]): ChainedArray<T>;
->intersection : Symbol(ChainedArray.intersection, Decl(underscoreTest1_underscore.ts, 294, 49))
+>intersection : Symbol(intersection, Decl(underscoreTest1_underscore.ts, 294, 49))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 295, 21))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         difference(...others: T[][]): ChainedArray<T>;
->difference : Symbol(ChainedArray.difference, Decl(underscoreTest1_underscore.ts, 295, 56))
+>difference : Symbol(difference, Decl(underscoreTest1_underscore.ts, 295, 56))
 >others : Symbol(others, Decl(underscoreTest1_underscore.ts, 296, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         uniq(isSorted?: boolean): ChainedArray<T>;
->uniq : Symbol(ChainedArray.uniq, Decl(underscoreTest1_underscore.ts, 296, 54), Decl(underscoreTest1_underscore.ts, 297, 50))
+>uniq : Symbol(uniq, Decl(underscoreTest1_underscore.ts, 296, 54), Decl(underscoreTest1_underscore.ts, 297, 50))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 297, 13))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         uniq<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
->uniq : Symbol(ChainedArray.uniq, Decl(underscoreTest1_underscore.ts, 296, 54), Decl(underscoreTest1_underscore.ts, 297, 50))
+>uniq : Symbol(uniq, Decl(underscoreTest1_underscore.ts, 296, 54), Decl(underscoreTest1_underscore.ts, 297, 50))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 298, 13))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 298, 16))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 298, 34))
@@= skipped -138, +138 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 298, 13))
 
         unique(isSorted?: boolean): ChainedArray<T>;
->unique : Symbol(ChainedArray.unique, Decl(underscoreTest1_underscore.ts, 298, 94), Decl(underscoreTest1_underscore.ts, 299, 52))
+>unique : Symbol(unique, Decl(underscoreTest1_underscore.ts, 298, 94), Decl(underscoreTest1_underscore.ts, 299, 52))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 299, 15))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         unique<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
->unique : Symbol(ChainedArray.unique, Decl(underscoreTest1_underscore.ts, 298, 94), Decl(underscoreTest1_underscore.ts, 299, 52))
+>unique : Symbol(unique, Decl(underscoreTest1_underscore.ts, 298, 94), Decl(underscoreTest1_underscore.ts, 299, 52))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 300, 15))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 300, 18))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 300, 36))
@@= skipped -18, +18 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 300, 15))
 
         zip(...arrays: any[][]): ChainedArray<any[]>;
->zip : Symbol(ChainedArray.zip, Decl(underscoreTest1_underscore.ts, 300, 96))
+>zip : Symbol(zip, Decl(underscoreTest1_underscore.ts, 300, 96))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 301, 12))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         object(): ChainedObject<any>;
->object : Symbol(ChainedArray.object, Decl(underscoreTest1_underscore.ts, 301, 53), Decl(underscoreTest1_underscore.ts, 302, 37))
+>object : Symbol(object, Decl(underscoreTest1_underscore.ts, 301, 53), Decl(underscoreTest1_underscore.ts, 302, 37))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         object(values: any[]): ChainedObject<any>;
->object : Symbol(ChainedArray.object, Decl(underscoreTest1_underscore.ts, 301, 53), Decl(underscoreTest1_underscore.ts, 302, 37))
+>object : Symbol(object, Decl(underscoreTest1_underscore.ts, 301, 53), Decl(underscoreTest1_underscore.ts, 302, 37))
 >values : Symbol(values, Decl(underscoreTest1_underscore.ts, 303, 15))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         indexOf(value: T, isSorted?: boolean): ChainedObject<number>;
->indexOf : Symbol(ChainedArray.indexOf, Decl(underscoreTest1_underscore.ts, 303, 50))
+>indexOf : Symbol(indexOf, Decl(underscoreTest1_underscore.ts, 303, 50))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 304, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 304, 25))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         lastIndexOf(value: T, fromIndex?: number): ChainedObject<number>;
->lastIndexOf : Symbol(ChainedArray.lastIndexOf, Decl(underscoreTest1_underscore.ts, 304, 69))
+>lastIndexOf : Symbol(lastIndexOf, Decl(underscoreTest1_underscore.ts, 304, 69))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 305, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >fromIndex : Symbol(fromIndex, Decl(underscoreTest1_underscore.ts, 305, 29))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         sortedIndex(obj: T, propertyName: string): ChainedObject<number>;
->sortedIndex : Symbol(ChainedArray.sortedIndex, Decl(underscoreTest1_underscore.ts, 305, 73), Decl(underscoreTest1_underscore.ts, 306, 73))
+>sortedIndex : Symbol(sortedIndex, Decl(underscoreTest1_underscore.ts, 305, 73), Decl(underscoreTest1_underscore.ts, 306, 73))
 >obj : Symbol(obj, Decl(underscoreTest1_underscore.ts, 306, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 306, 27))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         sortedIndex(obj: T, iterator?: Iterator_<T, any>, context?: any): ChainedObject<number>;
->sortedIndex : Symbol(ChainedArray.sortedIndex, Decl(underscoreTest1_underscore.ts, 305, 73), Decl(underscoreTest1_underscore.ts, 306, 73))
+>sortedIndex : Symbol(sortedIndex, Decl(underscoreTest1_underscore.ts, 305, 73), Decl(underscoreTest1_underscore.ts, 306, 73))
 >obj : Symbol(obj, Decl(underscoreTest1_underscore.ts, 307, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 307, 27))
@@= skipped -46, +46 lines =@@
 
         // Methods from Array
         concat(...items: T[]): ChainedArray<T>;
->concat : Symbol(ChainedArray.concat, Decl(underscoreTest1_underscore.ts, 307, 96))
+>concat : Symbol(concat, Decl(underscoreTest1_underscore.ts, 307, 96))
 >items : Symbol(items, Decl(underscoreTest1_underscore.ts, 309, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         join(separator?: string): ChainedObject<string>;
->join : Symbol(ChainedArray.join, Decl(underscoreTest1_underscore.ts, 309, 47))
+>join : Symbol(join, Decl(underscoreTest1_underscore.ts, 309, 47))
 >separator : Symbol(separator, Decl(underscoreTest1_underscore.ts, 310, 13))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         pop(): ChainedObject<T>;
->pop : Symbol(ChainedArray.pop, Decl(underscoreTest1_underscore.ts, 310, 56))
+>pop : Symbol(pop, Decl(underscoreTest1_underscore.ts, 310, 56))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         push(...items: T[]): ChainedObject<number>;
->push : Symbol(ChainedArray.push, Decl(underscoreTest1_underscore.ts, 311, 32))
+>push : Symbol(push, Decl(underscoreTest1_underscore.ts, 311, 32))
 >items : Symbol(items, Decl(underscoreTest1_underscore.ts, 312, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         reverse(): ChainedArray<T>;
->reverse : Symbol(ChainedArray.reverse, Decl(underscoreTest1_underscore.ts, 312, 51))
+>reverse : Symbol(reverse, Decl(underscoreTest1_underscore.ts, 312, 51))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         shift(): ChainedObject<T>;
->shift : Symbol(ChainedArray.shift, Decl(underscoreTest1_underscore.ts, 313, 35))
+>shift : Symbol(shift, Decl(underscoreTest1_underscore.ts, 313, 35))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         slice(start: number, end?: number): ChainedArray<T>;
->slice : Symbol(ChainedArray.slice, Decl(underscoreTest1_underscore.ts, 314, 34))
+>slice : Symbol(slice, Decl(underscoreTest1_underscore.ts, 314, 34))
 >start : Symbol(start, Decl(underscoreTest1_underscore.ts, 315, 14))
 >end : Symbol(end, Decl(underscoreTest1_underscore.ts, 315, 28))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         sort(compareFn?: (a: T, b: T) => number): ChainedArray<T>;
->sort : Symbol(ChainedArray.sort, Decl(underscoreTest1_underscore.ts, 315, 60))
+>sort : Symbol(sort, Decl(underscoreTest1_underscore.ts, 315, 60))
 >compareFn : Symbol(compareFn, Decl(underscoreTest1_underscore.ts, 316, 13))
 >a : Symbol(a, Decl(underscoreTest1_underscore.ts, 316, 26))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -50, +50 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         splice(start: number): ChainedArray<T>;
->splice : Symbol(ChainedArray.splice, Decl(underscoreTest1_underscore.ts, 316, 66), Decl(underscoreTest1_underscore.ts, 317, 47))
+>splice : Symbol(splice, Decl(underscoreTest1_underscore.ts, 316, 66), Decl(underscoreTest1_underscore.ts, 317, 47))
 >start : Symbol(start, Decl(underscoreTest1_underscore.ts, 317, 15))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         splice(start: number, deleteCount: number, ...items: T[]): ChainedArray<T>;
->splice : Symbol(ChainedArray.splice, Decl(underscoreTest1_underscore.ts, 316, 66), Decl(underscoreTest1_underscore.ts, 317, 47))
+>splice : Symbol(splice, Decl(underscoreTest1_underscore.ts, 316, 66), Decl(underscoreTest1_underscore.ts, 317, 47))
 >start : Symbol(start, Decl(underscoreTest1_underscore.ts, 318, 15))
 >deleteCount : Symbol(deleteCount, Decl(underscoreTest1_underscore.ts, 318, 29))
 >items : Symbol(items, Decl(underscoreTest1_underscore.ts, 318, 50))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         unshift(...items: T[]): ChainedObject<number>;
->unshift : Symbol(ChainedArray.unshift, Decl(underscoreTest1_underscore.ts, 318, 83))
+>unshift : Symbol(unshift, Decl(underscoreTest1_underscore.ts, 318, 83))
 >items : Symbol(items, Decl(underscoreTest1_underscore.ts, 319, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         // Methods from ChainedObject with promoted return types
         extend(...sources: any[]): ChainedArray<T>;
->extend : Symbol(ChainedArray.extend, Decl(underscoreTest1_underscore.ts, 319, 54))
+>extend : Symbol(extend, Decl(underscoreTest1_underscore.ts, 319, 54))
 >sources : Symbol(sources, Decl(underscoreTest1_underscore.ts, 321, 15))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         pick(...keys: string[]): ChainedArray<T>;
->pick : Symbol(ChainedArray.pick, Decl(underscoreTest1_underscore.ts, 321, 51))
+>pick : Symbol(pick, Decl(underscoreTest1_underscore.ts, 321, 51))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 322, 13))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         omit(...keys: string[]): ChainedArray<T>;
->omit : Symbol(ChainedArray.omit, Decl(underscoreTest1_underscore.ts, 322, 49))
+>omit : Symbol(omit, Decl(underscoreTest1_underscore.ts, 322, 49))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 323, 13))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         defaults(...defaults: any[]): ChainedArray<T>;
->defaults : Symbol(ChainedArray.defaults, Decl(underscoreTest1_underscore.ts, 323, 49))
+>defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 323, 49))
 >defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 324, 17))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         clone(): ChainedArray<T>;
->clone : Symbol(ChainedArray.clone, Decl(underscoreTest1_underscore.ts, 324, 54))
+>clone : Symbol(clone, Decl(underscoreTest1_underscore.ts, 324, 54))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
 
         tap(interceptor: (object: T[]) => void): ChainedArray<T>;
->tap : Symbol(ChainedArray.tap, Decl(underscoreTest1_underscore.ts, 325, 33))
+>tap : Symbol(tap, Decl(underscoreTest1_underscore.ts, 325, 33))
 >interceptor : Symbol(interceptor, Decl(underscoreTest1_underscore.ts, 326, 12))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 326, 26))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 238, 34))
@@= skipped -52, +52 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         each(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
->each : Symbol(ChainedDictionary.each, Decl(underscoreTest1_underscore.ts, 329, 80))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 329, 80))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 330, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         forEach(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
->forEach : Symbol(ChainedDictionary.forEach, Decl(underscoreTest1_underscore.ts, 330, 79))
+>forEach : Symbol(forEach, Decl(underscoreTest1_underscore.ts, 330, 79))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 331, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         map<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
->map : Symbol(ChainedDictionary.map, Decl(underscoreTest1_underscore.ts, 331, 82))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 331, 82))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 332, 12))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 332, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
@@= skipped -11, +11 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 332, 12))
 
         collect<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
->collect : Symbol(ChainedDictionary.collect, Decl(underscoreTest1_underscore.ts, 332, 74))
+>collect : Symbol(collect, Decl(underscoreTest1_underscore.ts, 332, 74))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 333, 16))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 333, 19))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
@@= skipped -11, +11 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 333, 16))
 
         reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->reduce : Symbol(ChainedDictionary.reduce, Decl(underscoreTest1_underscore.ts, 333, 78), Decl(underscoreTest1_underscore.ts, 334, 91))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 333, 78), Decl(underscoreTest1_underscore.ts, 334, 91))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 334, 15))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->reduce : Symbol(ChainedDictionary.reduce, Decl(underscoreTest1_underscore.ts, 333, 78), Decl(underscoreTest1_underscore.ts, 334, 91))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 333, 78), Decl(underscoreTest1_underscore.ts, 334, 91))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 335, 15))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 335, 18))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 335, 15))
 
         foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->foldl : Symbol(ChainedDictionary.foldl, Decl(underscoreTest1_underscore.ts, 335, 93), Decl(underscoreTest1_underscore.ts, 336, 90))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 335, 93), Decl(underscoreTest1_underscore.ts, 336, 90))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 336, 14))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->foldl : Symbol(ChainedDictionary.foldl, Decl(underscoreTest1_underscore.ts, 335, 93), Decl(underscoreTest1_underscore.ts, 336, 90))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 335, 93), Decl(underscoreTest1_underscore.ts, 336, 90))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 337, 14))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 337, 17))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 337, 14))
 
         inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->inject : Symbol(ChainedDictionary.inject, Decl(underscoreTest1_underscore.ts, 337, 92), Decl(underscoreTest1_underscore.ts, 338, 91))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 337, 92), Decl(underscoreTest1_underscore.ts, 338, 91))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 338, 15))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->inject : Symbol(ChainedDictionary.inject, Decl(underscoreTest1_underscore.ts, 337, 92), Decl(underscoreTest1_underscore.ts, 338, 91))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 337, 92), Decl(underscoreTest1_underscore.ts, 338, 91))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 339, 15))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 339, 18))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 339, 15))
 
         reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->reduceRight : Symbol(ChainedDictionary.reduceRight, Decl(underscoreTest1_underscore.ts, 339, 93), Decl(underscoreTest1_underscore.ts, 340, 96))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 339, 93), Decl(underscoreTest1_underscore.ts, 340, 96))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 340, 20))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->reduceRight : Symbol(ChainedDictionary.reduceRight, Decl(underscoreTest1_underscore.ts, 339, 93), Decl(underscoreTest1_underscore.ts, 340, 96))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 339, 93), Decl(underscoreTest1_underscore.ts, 340, 96))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 341, 20))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 341, 23))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 341, 20))
 
         foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
->foldr : Symbol(ChainedDictionary.foldr, Decl(underscoreTest1_underscore.ts, 341, 98), Decl(underscoreTest1_underscore.ts, 342, 90))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 341, 98), Decl(underscoreTest1_underscore.ts, 342, 90))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 342, 14))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
->foldr : Symbol(ChainedDictionary.foldr, Decl(underscoreTest1_underscore.ts, 341, 98), Decl(underscoreTest1_underscore.ts, 342, 90))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 341, 98), Decl(underscoreTest1_underscore.ts, 342, 90))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 343, 14))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 343, 17))
 >Reducer : Symbol(Reducer, Decl(underscoreTest1_underscore.ts, 6, 1))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 343, 14))
 
         find(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
->find : Symbol(ChainedDictionary.find, Decl(underscoreTest1_underscore.ts, 343, 92))
+>find : Symbol(find, Decl(underscoreTest1_underscore.ts, 343, 92))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 344, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         detect(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
->detect : Symbol(ChainedDictionary.detect, Decl(underscoreTest1_underscore.ts, 344, 79))
+>detect : Symbol(detect, Decl(underscoreTest1_underscore.ts, 344, 79))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 345, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         filter(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
->filter : Symbol(ChainedDictionary.filter, Decl(underscoreTest1_underscore.ts, 345, 81))
+>filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 345, 81))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 346, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
->select : Symbol(ChainedDictionary.select, Decl(underscoreTest1_underscore.ts, 346, 80))
+>select : Symbol(select, Decl(underscoreTest1_underscore.ts, 346, 80))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 347, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         where(properties: Object): ChainedArray<T>;
->where : Symbol(ChainedDictionary.where, Decl(underscoreTest1_underscore.ts, 347, 80))
+>where : Symbol(where, Decl(underscoreTest1_underscore.ts, 347, 80))
 >properties : Symbol(properties, Decl(underscoreTest1_underscore.ts, 348, 14))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         findWhere(properties: Object): ChainedObject<T>;
->findWhere : Symbol(ChainedDictionary.findWhere, Decl(underscoreTest1_underscore.ts, 348, 51))
+>findWhere : Symbol(findWhere, Decl(underscoreTest1_underscore.ts, 348, 51))
 >properties : Symbol(properties, Decl(underscoreTest1_underscore.ts, 349, 18))
 >Object : Symbol(Object, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
->reject : Symbol(ChainedDictionary.reject, Decl(underscoreTest1_underscore.ts, 349, 56))
+>reject : Symbol(reject, Decl(underscoreTest1_underscore.ts, 349, 56))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 350, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -23, +23 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
->every : Symbol(ChainedDictionary.every, Decl(underscoreTest1_underscore.ts, 350, 80))
+>every : Symbol(every, Decl(underscoreTest1_underscore.ts, 350, 80))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 351, 14))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
->all : Symbol(ChainedDictionary.all, Decl(underscoreTest1_underscore.ts, 351, 87))
+>all : Symbol(all, Decl(underscoreTest1_underscore.ts, 351, 87))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 352, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
->some : Symbol(ChainedDictionary.some, Decl(underscoreTest1_underscore.ts, 352, 85))
+>some : Symbol(some, Decl(underscoreTest1_underscore.ts, 352, 85))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 353, 13))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
->any : Symbol(ChainedDictionary.any, Decl(underscoreTest1_underscore.ts, 353, 86))
+>any : Symbol(any, Decl(underscoreTest1_underscore.ts, 353, 86))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 354, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -8, +8 lines =@@
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         contains(value: T): ChainedObject<boolean>;
->contains : Symbol(ChainedDictionary.contains, Decl(underscoreTest1_underscore.ts, 354, 85))
+>contains : Symbol(contains, Decl(underscoreTest1_underscore.ts, 354, 85))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 355, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         include(value: T): ChainedObject<boolean>;
->include : Symbol(ChainedDictionary.include, Decl(underscoreTest1_underscore.ts, 355, 51))
+>include : Symbol(include, Decl(underscoreTest1_underscore.ts, 355, 51))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 356, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         invoke(methodName: string, ...args: any[]): ChainedArray<any>;
->invoke : Symbol(ChainedDictionary.invoke, Decl(underscoreTest1_underscore.ts, 356, 50))
+>invoke : Symbol(invoke, Decl(underscoreTest1_underscore.ts, 356, 50))
 >methodName : Symbol(methodName, Decl(underscoreTest1_underscore.ts, 357, 15))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 357, 34))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         pluck(propertyName: string): ChainedArray<any>;
->pluck : Symbol(ChainedDictionary.pluck, Decl(underscoreTest1_underscore.ts, 357, 70))
+>pluck : Symbol(pluck, Decl(underscoreTest1_underscore.ts, 357, 70))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 358, 14))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 
         max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
->max : Symbol(ChainedDictionary.max, Decl(underscoreTest1_underscore.ts, 358, 55))
+>max : Symbol(max, Decl(underscoreTest1_underscore.ts, 358, 55))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 359, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -32, +32 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
->min : Symbol(ChainedDictionary.min, Decl(underscoreTest1_underscore.ts, 359, 75))
+>min : Symbol(min, Decl(underscoreTest1_underscore.ts, 359, 75))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 360, 12))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
->sortBy : Symbol(ChainedDictionary.sortBy, Decl(underscoreTest1_underscore.ts, 360, 75), Decl(underscoreTest1_underscore.ts, 361, 76))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 360, 75), Decl(underscoreTest1_underscore.ts, 361, 76))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 361, 15))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         sortBy(propertyName: string): ChainedArray<T>;
->sortBy : Symbol(ChainedDictionary.sortBy, Decl(underscoreTest1_underscore.ts, 360, 75), Decl(underscoreTest1_underscore.ts, 361, 76))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 360, 75), Decl(underscoreTest1_underscore.ts, 361, 76))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 362, 15))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         // Should return ChainedDictionary<T[]>, but expansive recursion not allowed
         groupBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>;
->groupBy : Symbol(ChainedDictionary.groupBy, Decl(underscoreTest1_underscore.ts, 362, 54), Decl(underscoreTest1_underscore.ts, 364, 87))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 362, 54), Decl(underscoreTest1_underscore.ts, 364, 87))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 364, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -15, +15 lines =@@
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 
         groupBy(propertyName: string): ChainedDictionary<any[]>;
->groupBy : Symbol(ChainedDictionary.groupBy, Decl(underscoreTest1_underscore.ts, 362, 54), Decl(underscoreTest1_underscore.ts, 364, 87))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 362, 54), Decl(underscoreTest1_underscore.ts, 364, 87))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 365, 16))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 
         countBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>;
->countBy : Symbol(ChainedDictionary.countBy, Decl(underscoreTest1_underscore.ts, 365, 64), Decl(underscoreTest1_underscore.ts, 366, 88))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 365, 64), Decl(underscoreTest1_underscore.ts, 366, 88))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 366, 16))
 >Iterator_ : Symbol(Iterator_, Decl(underscoreTest1_underscore.ts, 2, 1))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
@@= skipped -13, +13 lines =@@
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 
         countBy(propertyName: string): ChainedDictionary<number>;
->countBy : Symbol(ChainedDictionary.countBy, Decl(underscoreTest1_underscore.ts, 365, 64), Decl(underscoreTest1_underscore.ts, 366, 88))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 365, 64), Decl(underscoreTest1_underscore.ts, 366, 88))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 367, 16))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 
         shuffle(): ChainedArray<T>;
->shuffle : Symbol(ChainedDictionary.shuffle, Decl(underscoreTest1_underscore.ts, 367, 65))
+>shuffle : Symbol(shuffle, Decl(underscoreTest1_underscore.ts, 367, 65))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         toArray(): ChainedArray<T>;
->toArray : Symbol(ChainedDictionary.toArray, Decl(underscoreTest1_underscore.ts, 368, 35))
+>toArray : Symbol(toArray, Decl(underscoreTest1_underscore.ts, 368, 35))
 >ChainedArray : Symbol(ChainedArray, Decl(underscoreTest1_underscore.ts, 236, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         size(): ChainedObject<number>;
->size : Symbol(ChainedDictionary.size, Decl(underscoreTest1_underscore.ts, 369, 35))
+>size : Symbol(size, Decl(underscoreTest1_underscore.ts, 369, 35))
 >ChainedObject : Symbol(ChainedObject, Decl(underscoreTest1_underscore.ts, 203, 5))
 
         // Methods from ChainedObject with promoted return types
         extend(...sources: any[]): ChainedDictionary<T>;
->extend : Symbol(ChainedDictionary.extend, Decl(underscoreTest1_underscore.ts, 370, 38))
+>extend : Symbol(extend, Decl(underscoreTest1_underscore.ts, 370, 38))
 >sources : Symbol(sources, Decl(underscoreTest1_underscore.ts, 372, 15))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         pick(...keys: string[]): ChainedDictionary<T>;
->pick : Symbol(ChainedDictionary.pick, Decl(underscoreTest1_underscore.ts, 372, 56))
+>pick : Symbol(pick, Decl(underscoreTest1_underscore.ts, 372, 56))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 373, 13))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         omit(...keys: string[]): ChainedDictionary<T>;
->omit : Symbol(ChainedDictionary.omit, Decl(underscoreTest1_underscore.ts, 373, 54))
+>omit : Symbol(omit, Decl(underscoreTest1_underscore.ts, 373, 54))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 374, 13))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         defaults(...defaults: any[]): ChainedDictionary<T>;
->defaults : Symbol(ChainedDictionary.defaults, Decl(underscoreTest1_underscore.ts, 374, 54))
+>defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 374, 54))
 >defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 375, 17))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         clone(): ChainedDictionary<T>;
->clone : Symbol(ChainedDictionary.clone, Decl(underscoreTest1_underscore.ts, 375, 59))
+>clone : Symbol(clone, Decl(underscoreTest1_underscore.ts, 375, 59))
 >ChainedDictionary : Symbol(ChainedDictionary, Decl(underscoreTest1_underscore.ts, 327, 5))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 329, 39))
 
         tap(interceptor: (object: Dictionary<T>) => void): ChainedDictionary<T>;
->tap : Symbol(ChainedDictionary.tap, Decl(underscoreTest1_underscore.ts, 376, 38))
+>tap : Symbol(tap, Decl(underscoreTest1_underscore.ts, 376, 38))
 >interceptor : Symbol(interceptor, Decl(underscoreTest1_underscore.ts, 377, 12))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 377, 26))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -62, +62 lines =@@
 >TemplateSettings : Symbol(TemplateSettings, Decl(underscoreTest1_underscore.ts, 378, 5))
 
         evaluate?: RegExp;
->evaluate : Symbol(TemplateSettings.evaluate, Decl(underscoreTest1_underscore.ts, 380, 39))
+>evaluate : Symbol(evaluate, Decl(underscoreTest1_underscore.ts, 380, 39))
 >RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         interpolate?: RegExp;
->interpolate : Symbol(TemplateSettings.interpolate, Decl(underscoreTest1_underscore.ts, 381, 26))
+>interpolate : Symbol(interpolate, Decl(underscoreTest1_underscore.ts, 381, 26))
 >RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         escape?: RegExp;
->escape : Symbol(TemplateSettings.escape, Decl(underscoreTest1_underscore.ts, 382, 29))
+>escape : Symbol(escape, Decl(underscoreTest1_underscore.ts, 382, 29))
 >RegExp : Symbol(RegExp, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         variable?: string;
->variable : Symbol(TemplateSettings.variable, Decl(underscoreTest1_underscore.ts, 383, 24))
+>variable : Symbol(variable, Decl(underscoreTest1_underscore.ts, 383, 24))
     }
 
     export interface Static {
@@= skipped -49, +49 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 391, 9))
 
         chain<T>(list: T[]): ChainedArray<T>;
->chain : Symbol(Static.chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
+>chain : Symbol(chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 393, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 393, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 393, 14))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 393, 14))
 
         chain<T>(list: Dictionary<T>): ChainedDictionary<T>;
->chain : Symbol(Static.chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
+>chain : Symbol(chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 394, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 394, 17))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 394, 14))
 
         chain<T>(obj: T): ChainedObject<T>;
->chain : Symbol(Static.chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
+>chain : Symbol(chain, Decl(underscoreTest1_underscore.ts, 391, 38), Decl(underscoreTest1_underscore.ts, 393, 45), Decl(underscoreTest1_underscore.ts, 394, 60))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 395, 14))
 >obj : Symbol(obj, Decl(underscoreTest1_underscore.ts, 395, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 395, 14))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 395, 14))
 
         each<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
->each : Symbol(Static.each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 397, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 397, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 397, 13))
@@= skipped -10, +10 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 397, 56))
 
         each<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
->each : Symbol(Static.each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
+>each : Symbol(each, Decl(underscoreTest1_underscore.ts, 395, 43), Decl(underscoreTest1_underscore.ts, 397, 78))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 398, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 398, 16))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -11, +11 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 398, 66))
 
         forEach<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
->forEach : Symbol(Static.forEach, Decl(underscoreTest1_underscore.ts, 398, 88), Decl(underscoreTest1_underscore.ts, 399, 81))
+>forEach : Symbol(forEach, Decl(underscoreTest1_underscore.ts, 398, 88), Decl(underscoreTest1_underscore.ts, 399, 81))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 399, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 399, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 399, 16))
@@= skipped -10, +10 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 399, 59))
 
         forEach<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
->forEach : Symbol(Static.forEach, Decl(underscoreTest1_underscore.ts, 398, 88), Decl(underscoreTest1_underscore.ts, 399, 81))
+>forEach : Symbol(forEach, Decl(underscoreTest1_underscore.ts, 398, 88), Decl(underscoreTest1_underscore.ts, 399, 81))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 400, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 400, 19))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -11, +11 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 400, 69))
 
         map<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
->map : Symbol(Static.map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 402, 12))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 402, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 402, 18))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 402, 14))
 
         map<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
->map : Symbol(Static.map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
+>map : Symbol(map, Decl(underscoreTest1_underscore.ts, 400, 91), Decl(underscoreTest1_underscore.ts, 402, 76))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 403, 12))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 403, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 403, 18))
@@= skipped -14, +14 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 403, 14))
 
         collect<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
->collect : Symbol(Static.collect, Decl(underscoreTest1_underscore.ts, 403, 86), Decl(underscoreTest1_underscore.ts, 404, 80))
+>collect : Symbol(collect, Decl(underscoreTest1_underscore.ts, 403, 86), Decl(underscoreTest1_underscore.ts, 404, 80))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 404, 16))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 404, 18))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 404, 22))
@@= skipped -13, +13 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 404, 18))
 
         collect<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
->collect : Symbol(Static.collect, Decl(underscoreTest1_underscore.ts, 403, 86), Decl(underscoreTest1_underscore.ts, 404, 80))
+>collect : Symbol(collect, Decl(underscoreTest1_underscore.ts, 403, 86), Decl(underscoreTest1_underscore.ts, 404, 80))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 405, 16))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 405, 18))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 405, 22))
@@= skipped -14, +14 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 405, 18))
 
         reduce<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduce : Symbol(Static.reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 407, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 407, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 407, 15))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 407, 15))
 
         reduce<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduce : Symbol(Static.reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 408, 15))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 408, 17))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 408, 21))
@@= skipped -15, +15 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 408, 17))
 
         reduce<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduce : Symbol(Static.reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 409, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 409, 18))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 409, 15))
 
         reduce<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduce : Symbol(Static.reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
+>reduce : Symbol(reduce, Decl(underscoreTest1_underscore.ts, 405, 90), Decl(underscoreTest1_underscore.ts, 407, 90), Decl(underscoreTest1_underscore.ts, 408, 92), Decl(underscoreTest1_underscore.ts, 409, 100))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 410, 15))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 410, 17))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 410, 21))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 410, 17))
 
         foldl<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldl : Symbol(Static.foldl, Decl(underscoreTest1_underscore.ts, 410, 102), Decl(underscoreTest1_underscore.ts, 411, 89), Decl(underscoreTest1_underscore.ts, 412, 91), Decl(underscoreTest1_underscore.ts, 413, 99))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 410, 102), Decl(underscoreTest1_underscore.ts, 411, 89), Decl(underscoreTest1_underscore.ts, 412, 91), Decl(underscoreTest1_underscore.ts, 413, 99))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 411, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 411, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 411, 14))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 411, 14))
 
         foldl<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldl : Symbol(Static.foldl, Decl(underscoreTest1_underscore.ts, 410, 102), Decl(underscoreTest1_underscore.ts, 411, 89), Decl(underscoreTest1_underscore.ts, 412, 91), Decl(underscoreTest1_underscore.ts, 413, 99))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 410, 102), Decl(underscoreTest1_underscore.ts, 411, 89), Decl(underscoreTest1_underscore.ts, 412, 91), Decl(underscoreTest1_underscore.ts, 413, 99))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 412, 14))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 412, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 412, 20))
@@= skipped -15, +15 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 412, 16))
 
         foldl<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldl : Symbol(Static.foldl, Decl(underscoreTest1_underscore.ts, 410, 102), Decl(underscoreTest1_underscore.ts, 411, 89), Decl(underscoreTest1_underscore.ts, 412, 91), Decl(underscoreTest1_underscore.ts, 413, 99))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 410, 102), Decl(underscoreTest1_underscore.ts, 411, 89), Decl(underscoreTest1_underscore.ts, 412, 91), Decl(underscoreTest1_underscore.ts, 413, 99))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 413, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 413, 17))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 413, 14))
 
         foldl<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldl : Symbol(Static.foldl, Decl(underscoreTest1_underscore.ts, 410, 102), Decl(underscoreTest1_underscore.ts, 411, 89), Decl(underscoreTest1_underscore.ts, 412, 91), Decl(underscoreTest1_underscore.ts, 413, 99))
+>foldl : Symbol(foldl, Decl(underscoreTest1_underscore.ts, 410, 102), Decl(underscoreTest1_underscore.ts, 411, 89), Decl(underscoreTest1_underscore.ts, 412, 91), Decl(underscoreTest1_underscore.ts, 413, 99))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 414, 14))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 414, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 414, 20))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 414, 16))
 
         inject<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->inject : Symbol(Static.inject, Decl(underscoreTest1_underscore.ts, 414, 101), Decl(underscoreTest1_underscore.ts, 415, 90), Decl(underscoreTest1_underscore.ts, 416, 92), Decl(underscoreTest1_underscore.ts, 417, 100))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 414, 101), Decl(underscoreTest1_underscore.ts, 415, 90), Decl(underscoreTest1_underscore.ts, 416, 92), Decl(underscoreTest1_underscore.ts, 417, 100))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 415, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 415, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 415, 15))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 415, 15))
 
         inject<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->inject : Symbol(Static.inject, Decl(underscoreTest1_underscore.ts, 414, 101), Decl(underscoreTest1_underscore.ts, 415, 90), Decl(underscoreTest1_underscore.ts, 416, 92), Decl(underscoreTest1_underscore.ts, 417, 100))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 414, 101), Decl(underscoreTest1_underscore.ts, 415, 90), Decl(underscoreTest1_underscore.ts, 416, 92), Decl(underscoreTest1_underscore.ts, 417, 100))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 416, 15))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 416, 17))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 416, 21))
@@= skipped -15, +15 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 416, 17))
 
         inject<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->inject : Symbol(Static.inject, Decl(underscoreTest1_underscore.ts, 414, 101), Decl(underscoreTest1_underscore.ts, 415, 90), Decl(underscoreTest1_underscore.ts, 416, 92), Decl(underscoreTest1_underscore.ts, 417, 100))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 414, 101), Decl(underscoreTest1_underscore.ts, 415, 90), Decl(underscoreTest1_underscore.ts, 416, 92), Decl(underscoreTest1_underscore.ts, 417, 100))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 417, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 417, 18))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 417, 15))
 
         inject<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->inject : Symbol(Static.inject, Decl(underscoreTest1_underscore.ts, 414, 101), Decl(underscoreTest1_underscore.ts, 415, 90), Decl(underscoreTest1_underscore.ts, 416, 92), Decl(underscoreTest1_underscore.ts, 417, 100))
+>inject : Symbol(inject, Decl(underscoreTest1_underscore.ts, 414, 101), Decl(underscoreTest1_underscore.ts, 415, 90), Decl(underscoreTest1_underscore.ts, 416, 92), Decl(underscoreTest1_underscore.ts, 417, 100))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 418, 15))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 418, 17))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 418, 21))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 418, 17))
 
         reduceRight<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduceRight : Symbol(Static.reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 420, 20))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 420, 23))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 420, 20))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 420, 20))
 
         reduceRight<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduceRight : Symbol(Static.reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 421, 20))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 421, 22))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 421, 26))
@@= skipped -15, +15 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 421, 22))
 
         reduceRight<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduceRight : Symbol(Static.reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 422, 20))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 422, 23))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 422, 20))
 
         reduceRight<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduceRight : Symbol(Static.reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
+>reduceRight : Symbol(reduceRight, Decl(underscoreTest1_underscore.ts, 418, 102), Decl(underscoreTest1_underscore.ts, 420, 95), Decl(underscoreTest1_underscore.ts, 421, 97), Decl(underscoreTest1_underscore.ts, 422, 105))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 423, 20))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 423, 22))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 423, 26))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 423, 22))
 
         foldr<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldr : Symbol(Static.foldr, Decl(underscoreTest1_underscore.ts, 423, 107), Decl(underscoreTest1_underscore.ts, 424, 89), Decl(underscoreTest1_underscore.ts, 425, 91), Decl(underscoreTest1_underscore.ts, 426, 99))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 423, 107), Decl(underscoreTest1_underscore.ts, 424, 89), Decl(underscoreTest1_underscore.ts, 425, 91), Decl(underscoreTest1_underscore.ts, 426, 99))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 424, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 424, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 424, 14))
@@= skipped -14, +14 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 424, 14))
 
         foldr<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldr : Symbol(Static.foldr, Decl(underscoreTest1_underscore.ts, 423, 107), Decl(underscoreTest1_underscore.ts, 424, 89), Decl(underscoreTest1_underscore.ts, 425, 91), Decl(underscoreTest1_underscore.ts, 426, 99))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 423, 107), Decl(underscoreTest1_underscore.ts, 424, 89), Decl(underscoreTest1_underscore.ts, 425, 91), Decl(underscoreTest1_underscore.ts, 426, 99))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 425, 14))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 425, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 425, 20))
@@= skipped -15, +15 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 425, 16))
 
         foldr<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldr : Symbol(Static.foldr, Decl(underscoreTest1_underscore.ts, 423, 107), Decl(underscoreTest1_underscore.ts, 424, 89), Decl(underscoreTest1_underscore.ts, 425, 91), Decl(underscoreTest1_underscore.ts, 426, 99))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 423, 107), Decl(underscoreTest1_underscore.ts, 424, 89), Decl(underscoreTest1_underscore.ts, 425, 91), Decl(underscoreTest1_underscore.ts, 426, 99))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 426, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 426, 17))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 426, 14))
 
         foldr<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldr : Symbol(Static.foldr, Decl(underscoreTest1_underscore.ts, 423, 107), Decl(underscoreTest1_underscore.ts, 424, 89), Decl(underscoreTest1_underscore.ts, 425, 91), Decl(underscoreTest1_underscore.ts, 426, 99))
+>foldr : Symbol(foldr, Decl(underscoreTest1_underscore.ts, 423, 107), Decl(underscoreTest1_underscore.ts, 424, 89), Decl(underscoreTest1_underscore.ts, 425, 91), Decl(underscoreTest1_underscore.ts, 426, 99))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 427, 14))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 427, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 427, 20))
@@= skipped -16, +16 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 427, 16))
 
         find<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
->find : Symbol(Static.find, Decl(underscoreTest1_underscore.ts, 427, 101), Decl(underscoreTest1_underscore.ts, 429, 78))
+>find : Symbol(find, Decl(underscoreTest1_underscore.ts, 427, 101), Decl(underscoreTest1_underscore.ts, 429, 78))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 429, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 429, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 429, 13))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 429, 13))
 
         find<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
->find : Symbol(Static.find, Decl(underscoreTest1_underscore.ts, 427, 101), Decl(underscoreTest1_underscore.ts, 429, 78))
+>find : Symbol(find, Decl(underscoreTest1_underscore.ts, 427, 101), Decl(underscoreTest1_underscore.ts, 429, 78))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 430, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 430, 16))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 430, 13))
 
         detect<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
->detect : Symbol(Static.detect, Decl(underscoreTest1_underscore.ts, 430, 88), Decl(underscoreTest1_underscore.ts, 431, 80))
+>detect : Symbol(detect, Decl(underscoreTest1_underscore.ts, 430, 88), Decl(underscoreTest1_underscore.ts, 431, 80))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 431, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 431, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 431, 15))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 431, 15))
 
         detect<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
->detect : Symbol(Static.detect, Decl(underscoreTest1_underscore.ts, 430, 88), Decl(underscoreTest1_underscore.ts, 431, 80))
+>detect : Symbol(detect, Decl(underscoreTest1_underscore.ts, 430, 88), Decl(underscoreTest1_underscore.ts, 431, 80))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 432, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 432, 18))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 432, 15))
 
         filter<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->filter : Symbol(Static.filter, Decl(underscoreTest1_underscore.ts, 432, 90), Decl(underscoreTest1_underscore.ts, 434, 82))
+>filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 432, 90), Decl(underscoreTest1_underscore.ts, 434, 82))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 434, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 434, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 434, 15))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 434, 15))
 
         filter<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->filter : Symbol(Static.filter, Decl(underscoreTest1_underscore.ts, 432, 90), Decl(underscoreTest1_underscore.ts, 434, 82))
+>filter : Symbol(filter, Decl(underscoreTest1_underscore.ts, 432, 90), Decl(underscoreTest1_underscore.ts, 434, 82))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 435, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 435, 18))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 435, 15))
 
         select<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->select : Symbol(Static.select, Decl(underscoreTest1_underscore.ts, 435, 92), Decl(underscoreTest1_underscore.ts, 436, 82))
+>select : Symbol(select, Decl(underscoreTest1_underscore.ts, 435, 92), Decl(underscoreTest1_underscore.ts, 436, 82))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 436, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 436, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 436, 15))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 436, 15))
 
         select<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->select : Symbol(Static.select, Decl(underscoreTest1_underscore.ts, 435, 92), Decl(underscoreTest1_underscore.ts, 436, 82))
+>select : Symbol(select, Decl(underscoreTest1_underscore.ts, 435, 92), Decl(underscoreTest1_underscore.ts, 436, 82))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 437, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 437, 18))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 437, 15))
 
         where<T>(list: T[], properties: Object): T[];
->where : Symbol(Static.where, Decl(underscoreTest1_underscore.ts, 437, 92), Decl(underscoreTest1_underscore.ts, 439, 53))
+>where : Symbol(where, Decl(underscoreTest1_underscore.ts, 437, 92), Decl(underscoreTest1_underscore.ts, 439, 53))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 439, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 439, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 439, 14))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 439, 14))
 
         where<T>(list: Dictionary<T>, properties: Object): T[];
->where : Symbol(Static.where, Decl(underscoreTest1_underscore.ts, 437, 92), Decl(underscoreTest1_underscore.ts, 439, 53))
+>where : Symbol(where, Decl(underscoreTest1_underscore.ts, 437, 92), Decl(underscoreTest1_underscore.ts, 439, 53))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 440, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 440, 17))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -10, +10 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 440, 14))
 
         findWhere<T>(list: T[], properties: Object): T;
->findWhere : Symbol(Static.findWhere, Decl(underscoreTest1_underscore.ts, 440, 63), Decl(underscoreTest1_underscore.ts, 442, 55))
+>findWhere : Symbol(findWhere, Decl(underscoreTest1_underscore.ts, 440, 63), Decl(underscoreTest1_underscore.ts, 442, 55))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 442, 18))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 442, 21))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 442, 18))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 442, 18))
 
         findWhere<T>(list: Dictionary<T>, properties: Object): T;
->findWhere : Symbol(Static.findWhere, Decl(underscoreTest1_underscore.ts, 440, 63), Decl(underscoreTest1_underscore.ts, 442, 55))
+>findWhere : Symbol(findWhere, Decl(underscoreTest1_underscore.ts, 440, 63), Decl(underscoreTest1_underscore.ts, 442, 55))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 443, 18))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 443, 21))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -10, +10 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 443, 18))
 
         reject<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->reject : Symbol(Static.reject, Decl(underscoreTest1_underscore.ts, 443, 65), Decl(underscoreTest1_underscore.ts, 445, 82))
+>reject : Symbol(reject, Decl(underscoreTest1_underscore.ts, 443, 65), Decl(underscoreTest1_underscore.ts, 445, 82))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 445, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 445, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 445, 15))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 445, 15))
 
         reject<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->reject : Symbol(Static.reject, Decl(underscoreTest1_underscore.ts, 443, 65), Decl(underscoreTest1_underscore.ts, 445, 82))
+>reject : Symbol(reject, Decl(underscoreTest1_underscore.ts, 443, 65), Decl(underscoreTest1_underscore.ts, 445, 82))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 446, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 446, 18))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 446, 15))
 
         every<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->every : Symbol(Static.every, Decl(underscoreTest1_underscore.ts, 446, 92), Decl(underscoreTest1_underscore.ts, 448, 86))
+>every : Symbol(every, Decl(underscoreTest1_underscore.ts, 446, 92), Decl(underscoreTest1_underscore.ts, 448, 86))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 448, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 448, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 448, 14))
@@= skipped -10, +10 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 448, 61))
 
         every<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->every : Symbol(Static.every, Decl(underscoreTest1_underscore.ts, 446, 92), Decl(underscoreTest1_underscore.ts, 448, 86))
+>every : Symbol(every, Decl(underscoreTest1_underscore.ts, 446, 92), Decl(underscoreTest1_underscore.ts, 448, 86))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 449, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 449, 17))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -11, +11 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 449, 71))
 
         all<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->all : Symbol(Static.all, Decl(underscoreTest1_underscore.ts, 449, 96), Decl(underscoreTest1_underscore.ts, 450, 84))
+>all : Symbol(all, Decl(underscoreTest1_underscore.ts, 449, 96), Decl(underscoreTest1_underscore.ts, 450, 84))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 450, 12))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 450, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 450, 12))
@@= skipped -10, +10 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 450, 59))
 
         all<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->all : Symbol(Static.all, Decl(underscoreTest1_underscore.ts, 449, 96), Decl(underscoreTest1_underscore.ts, 450, 84))
+>all : Symbol(all, Decl(underscoreTest1_underscore.ts, 449, 96), Decl(underscoreTest1_underscore.ts, 450, 84))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 451, 12))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 451, 15))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -11, +11 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 451, 69))
 
         some<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->some : Symbol(Static.some, Decl(underscoreTest1_underscore.ts, 451, 94), Decl(underscoreTest1_underscore.ts, 453, 85))
+>some : Symbol(some, Decl(underscoreTest1_underscore.ts, 451, 94), Decl(underscoreTest1_underscore.ts, 453, 85))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 453, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 453, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 453, 13))
@@= skipped -10, +10 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 453, 60))
 
         some<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->some : Symbol(Static.some, Decl(underscoreTest1_underscore.ts, 451, 94), Decl(underscoreTest1_underscore.ts, 453, 85))
+>some : Symbol(some, Decl(underscoreTest1_underscore.ts, 451, 94), Decl(underscoreTest1_underscore.ts, 453, 85))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 454, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 454, 16))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -11, +11 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 454, 70))
 
         any<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->any : Symbol(Static.any, Decl(underscoreTest1_underscore.ts, 454, 95), Decl(underscoreTest1_underscore.ts, 455, 84))
+>any : Symbol(any, Decl(underscoreTest1_underscore.ts, 454, 95), Decl(underscoreTest1_underscore.ts, 455, 84))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 455, 12))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 455, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 455, 12))
@@= skipped -10, +10 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 455, 59))
 
         any<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->any : Symbol(Static.any, Decl(underscoreTest1_underscore.ts, 454, 95), Decl(underscoreTest1_underscore.ts, 455, 84))
+>any : Symbol(any, Decl(underscoreTest1_underscore.ts, 454, 95), Decl(underscoreTest1_underscore.ts, 455, 84))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 456, 12))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 456, 15))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -11, +11 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 456, 69))
 
         contains<T>(list: T[], value: T): boolean;
->contains : Symbol(Static.contains, Decl(underscoreTest1_underscore.ts, 456, 94), Decl(underscoreTest1_underscore.ts, 458, 50))
+>contains : Symbol(contains, Decl(underscoreTest1_underscore.ts, 456, 94), Decl(underscoreTest1_underscore.ts, 458, 50))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 458, 17))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 458, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 458, 17))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 458, 17))
 
         contains<T>(list: Dictionary<T>, value: T): boolean;
->contains : Symbol(Static.contains, Decl(underscoreTest1_underscore.ts, 456, 94), Decl(underscoreTest1_underscore.ts, 458, 50))
+>contains : Symbol(contains, Decl(underscoreTest1_underscore.ts, 456, 94), Decl(underscoreTest1_underscore.ts, 458, 50))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 459, 17))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 459, 20))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 459, 17))
 
         include<T>(list: T[], value: T): boolean;
->include : Symbol(Static.include, Decl(underscoreTest1_underscore.ts, 459, 60), Decl(underscoreTest1_underscore.ts, 460, 49))
+>include : Symbol(include, Decl(underscoreTest1_underscore.ts, 459, 60), Decl(underscoreTest1_underscore.ts, 460, 49))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 460, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 460, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 460, 16))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 460, 16))
 
         include<T>(list: Dictionary<T>, value: T): boolean;
->include : Symbol(Static.include, Decl(underscoreTest1_underscore.ts, 459, 60), Decl(underscoreTest1_underscore.ts, 460, 49))
+>include : Symbol(include, Decl(underscoreTest1_underscore.ts, 459, 60), Decl(underscoreTest1_underscore.ts, 460, 49))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 461, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 461, 19))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 461, 16))
 
         invoke(list: any[], methodName: string, ...args: any[]): any[];
->invoke : Symbol(Static.invoke, Decl(underscoreTest1_underscore.ts, 461, 59), Decl(underscoreTest1_underscore.ts, 463, 71))
+>invoke : Symbol(invoke, Decl(underscoreTest1_underscore.ts, 461, 59), Decl(underscoreTest1_underscore.ts, 463, 71))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 463, 15))
 >methodName : Symbol(methodName, Decl(underscoreTest1_underscore.ts, 463, 27))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 463, 47))
 
         invoke(list: Dictionary<any>, methodName: string, ...args: any[]): any[];
->invoke : Symbol(Static.invoke, Decl(underscoreTest1_underscore.ts, 461, 59), Decl(underscoreTest1_underscore.ts, 463, 71))
+>invoke : Symbol(invoke, Decl(underscoreTest1_underscore.ts, 461, 59), Decl(underscoreTest1_underscore.ts, 463, 71))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 464, 15))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 >methodName : Symbol(methodName, Decl(underscoreTest1_underscore.ts, 464, 37))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 464, 57))
 
         pluck(list: any[], propertyName: string): any[];
->pluck : Symbol(Static.pluck, Decl(underscoreTest1_underscore.ts, 464, 81), Decl(underscoreTest1_underscore.ts, 466, 56))
+>pluck : Symbol(pluck, Decl(underscoreTest1_underscore.ts, 464, 81), Decl(underscoreTest1_underscore.ts, 466, 56))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 466, 14))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 466, 26))
 
         pluck(list: Dictionary<any>, propertyName: string): any[];
->pluck : Symbol(Static.pluck, Decl(underscoreTest1_underscore.ts, 464, 81), Decl(underscoreTest1_underscore.ts, 466, 56))
+>pluck : Symbol(pluck, Decl(underscoreTest1_underscore.ts, 464, 81), Decl(underscoreTest1_underscore.ts, 466, 56))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 467, 14))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 467, 36))
 
         max<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
->max : Symbol(Static.max, Decl(underscoreTest1_underscore.ts, 467, 66), Decl(underscoreTest1_underscore.ts, 469, 74))
+>max : Symbol(max, Decl(underscoreTest1_underscore.ts, 467, 66), Decl(underscoreTest1_underscore.ts, 469, 74))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 469, 12))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 469, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 469, 12))
@@= skipped -35, +35 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 469, 12))
 
         max<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
->max : Symbol(Static.max, Decl(underscoreTest1_underscore.ts, 467, 66), Decl(underscoreTest1_underscore.ts, 469, 74))
+>max : Symbol(max, Decl(underscoreTest1_underscore.ts, 467, 66), Decl(underscoreTest1_underscore.ts, 469, 74))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 470, 12))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 470, 15))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 470, 12))
 
         min<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
->min : Symbol(Static.min, Decl(underscoreTest1_underscore.ts, 470, 84), Decl(underscoreTest1_underscore.ts, 472, 74))
+>min : Symbol(min, Decl(underscoreTest1_underscore.ts, 470, 84), Decl(underscoreTest1_underscore.ts, 472, 74))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 472, 12))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 472, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 472, 12))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 472, 12))
 
         min<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
->min : Symbol(Static.min, Decl(underscoreTest1_underscore.ts, 470, 84), Decl(underscoreTest1_underscore.ts, 472, 74))
+>min : Symbol(min, Decl(underscoreTest1_underscore.ts, 470, 84), Decl(underscoreTest1_underscore.ts, 472, 74))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 473, 12))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 473, 15))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 473, 12))
 
         sortBy<T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[];
->sortBy : Symbol(Static.sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 475, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 475, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 475, 15))
@@= skipped -11, +11 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 475, 15))
 
         sortBy<T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[];
->sortBy : Symbol(Static.sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 476, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 476, 18))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 476, 15))
 
         sortBy<T>(list: T[], propertyName: string): T[];
->sortBy : Symbol(Static.sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 477, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 477, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 477, 15))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 477, 15))
 
         sortBy<T>(list: Dictionary<T>, propertyName: string): T[];
->sortBy : Symbol(Static.sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
+>sortBy : Symbol(sortBy, Decl(underscoreTest1_underscore.ts, 473, 84), Decl(underscoreTest1_underscore.ts, 475, 78), Decl(underscoreTest1_underscore.ts, 476, 88), Decl(underscoreTest1_underscore.ts, 477, 56))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 478, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 478, 18))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 478, 15))
 
         groupBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
->groupBy : Symbol(Static.groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 480, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 480, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 480, 16))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 480, 16))
 
         groupBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
->groupBy : Symbol(Static.groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 481, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 481, 19))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -13, +13 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 481, 16))
 
         groupBy<T>(list: T[], propertyName: string): Dictionary<T[]>;
->groupBy : Symbol(Static.groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 482, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 482, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 482, 16))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 482, 16))
 
         groupBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>;
->groupBy : Symbol(Static.groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
+>groupBy : Symbol(groupBy, Decl(underscoreTest1_underscore.ts, 478, 66), Decl(underscoreTest1_underscore.ts, 480, 92), Decl(underscoreTest1_underscore.ts, 481, 102), Decl(underscoreTest1_underscore.ts, 482, 69))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 483, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 483, 19))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -10, +10 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 483, 16))
 
         countBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
->countBy : Symbol(Static.countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 485, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 485, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 485, 16))
@@= skipped -11, +11 lines =@@
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 
         countBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
->countBy : Symbol(Static.countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 486, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 486, 19))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -12, +12 lines =@@
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 
         countBy<T>(list: T[], propertyName: string): Dictionary<number>;
->countBy : Symbol(Static.countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 487, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 487, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 487, 16))
@@= skipped -8, +8 lines =@@
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 
         countBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<number>;
->countBy : Symbol(Static.countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
+>countBy : Symbol(countBy, Decl(underscoreTest1_underscore.ts, 483, 79), Decl(underscoreTest1_underscore.ts, 485, 95), Decl(underscoreTest1_underscore.ts, 486, 105), Decl(underscoreTest1_underscore.ts, 487, 72))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 488, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 488, 19))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -9, +9 lines =@@
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 
         shuffle<T>(list: T[]): T[];
->shuffle : Symbol(Static.shuffle, Decl(underscoreTest1_underscore.ts, 488, 82), Decl(underscoreTest1_underscore.ts, 490, 35))
+>shuffle : Symbol(shuffle, Decl(underscoreTest1_underscore.ts, 488, 82), Decl(underscoreTest1_underscore.ts, 490, 35))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 490, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 490, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 490, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 490, 16))
 
         shuffle<T>(list: Dictionary<T>): T[];
->shuffle : Symbol(Static.shuffle, Decl(underscoreTest1_underscore.ts, 488, 82), Decl(underscoreTest1_underscore.ts, 490, 35))
+>shuffle : Symbol(shuffle, Decl(underscoreTest1_underscore.ts, 488, 82), Decl(underscoreTest1_underscore.ts, 490, 35))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 491, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 491, 19))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 491, 16))
 
         toArray<T>(list: T[]): T[];
->toArray : Symbol(Static.toArray, Decl(underscoreTest1_underscore.ts, 491, 45), Decl(underscoreTest1_underscore.ts, 493, 35))
+>toArray : Symbol(toArray, Decl(underscoreTest1_underscore.ts, 491, 45), Decl(underscoreTest1_underscore.ts, 493, 35))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 493, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 493, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 493, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 493, 16))
 
         toArray<T>(list: Dictionary<T>): T[];
->toArray : Symbol(Static.toArray, Decl(underscoreTest1_underscore.ts, 491, 45), Decl(underscoreTest1_underscore.ts, 493, 35))
+>toArray : Symbol(toArray, Decl(underscoreTest1_underscore.ts, 491, 45), Decl(underscoreTest1_underscore.ts, 493, 35))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 494, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 494, 19))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 494, 16))
 
         size<T>(list: T[]): number;
->size : Symbol(Static.size, Decl(underscoreTest1_underscore.ts, 494, 45), Decl(underscoreTest1_underscore.ts, 496, 35))
+>size : Symbol(size, Decl(underscoreTest1_underscore.ts, 494, 45), Decl(underscoreTest1_underscore.ts, 496, 35))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 496, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 496, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 496, 13))
 
         size<T>(list: Dictionary<T>): number;
->size : Symbol(Static.size, Decl(underscoreTest1_underscore.ts, 494, 45), Decl(underscoreTest1_underscore.ts, 496, 35))
+>size : Symbol(size, Decl(underscoreTest1_underscore.ts, 494, 45), Decl(underscoreTest1_underscore.ts, 496, 35))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 497, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 497, 16))
 >Dictionary : Symbol(Dictionary, Decl(underscoreTest1_underscore.ts, 0, 0))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 497, 13))
 
         first<T>(list: T[]): T;
->first : Symbol(Static.first, Decl(underscoreTest1_underscore.ts, 497, 45), Decl(underscoreTest1_underscore.ts, 499, 31))
+>first : Symbol(first, Decl(underscoreTest1_underscore.ts, 497, 45), Decl(underscoreTest1_underscore.ts, 499, 31))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 499, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 499, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 499, 14))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 499, 14))
 
         first<T>(list: T[], count: number): T[];
->first : Symbol(Static.first, Decl(underscoreTest1_underscore.ts, 497, 45), Decl(underscoreTest1_underscore.ts, 499, 31))
+>first : Symbol(first, Decl(underscoreTest1_underscore.ts, 497, 45), Decl(underscoreTest1_underscore.ts, 499, 31))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 500, 14))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 500, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 500, 14))
@@= skipped -28, +28 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 500, 14))
 
         head<T>(list: T[]): T;
->head : Symbol(Static.head, Decl(underscoreTest1_underscore.ts, 500, 48), Decl(underscoreTest1_underscore.ts, 501, 30))
+>head : Symbol(head, Decl(underscoreTest1_underscore.ts, 500, 48), Decl(underscoreTest1_underscore.ts, 501, 30))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 501, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 501, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 501, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 501, 13))
 
         head<T>(list: T[], count: number): T[];
->head : Symbol(Static.head, Decl(underscoreTest1_underscore.ts, 500, 48), Decl(underscoreTest1_underscore.ts, 501, 30))
+>head : Symbol(head, Decl(underscoreTest1_underscore.ts, 500, 48), Decl(underscoreTest1_underscore.ts, 501, 30))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 502, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 502, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 502, 13))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 502, 13))
 
         take<T>(list: T[]): T;
->take : Symbol(Static.take, Decl(underscoreTest1_underscore.ts, 502, 47), Decl(underscoreTest1_underscore.ts, 503, 30))
+>take : Symbol(take, Decl(underscoreTest1_underscore.ts, 502, 47), Decl(underscoreTest1_underscore.ts, 503, 30))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 503, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 503, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 503, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 503, 13))
 
         take<T>(list: T[], count: number): T[];
->take : Symbol(Static.take, Decl(underscoreTest1_underscore.ts, 502, 47), Decl(underscoreTest1_underscore.ts, 503, 30))
+>take : Symbol(take, Decl(underscoreTest1_underscore.ts, 502, 47), Decl(underscoreTest1_underscore.ts, 503, 30))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 504, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 504, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 504, 13))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 504, 13))
 
         initial<T>(list: T[]): T;
->initial : Symbol(Static.initial, Decl(underscoreTest1_underscore.ts, 504, 47), Decl(underscoreTest1_underscore.ts, 506, 33))
+>initial : Symbol(initial, Decl(underscoreTest1_underscore.ts, 504, 47), Decl(underscoreTest1_underscore.ts, 506, 33))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 506, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 506, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 506, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 506, 16))
 
         initial<T>(list: T[], count: number): T[];
->initial : Symbol(Static.initial, Decl(underscoreTest1_underscore.ts, 504, 47), Decl(underscoreTest1_underscore.ts, 506, 33))
+>initial : Symbol(initial, Decl(underscoreTest1_underscore.ts, 504, 47), Decl(underscoreTest1_underscore.ts, 506, 33))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 507, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 507, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 507, 16))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 507, 16))
 
         last<T>(list: T[]): T;
->last : Symbol(Static.last, Decl(underscoreTest1_underscore.ts, 507, 50), Decl(underscoreTest1_underscore.ts, 509, 30))
+>last : Symbol(last, Decl(underscoreTest1_underscore.ts, 507, 50), Decl(underscoreTest1_underscore.ts, 509, 30))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 509, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 509, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 509, 13))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 509, 13))
 
         last<T>(list: T[], count: number): T[];
->last : Symbol(Static.last, Decl(underscoreTest1_underscore.ts, 507, 50), Decl(underscoreTest1_underscore.ts, 509, 30))
+>last : Symbol(last, Decl(underscoreTest1_underscore.ts, 507, 50), Decl(underscoreTest1_underscore.ts, 509, 30))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 510, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 510, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 510, 13))
@@= skipped -15, +15 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 510, 13))
 
         rest<T>(list: T[], index?: number): T[];
->rest : Symbol(Static.rest, Decl(underscoreTest1_underscore.ts, 510, 47))
+>rest : Symbol(rest, Decl(underscoreTest1_underscore.ts, 510, 47))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 512, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 512, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 512, 13))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 512, 13))
 
         compact<T>(list: T[]): T[];
->compact : Symbol(Static.compact, Decl(underscoreTest1_underscore.ts, 512, 48))
+>compact : Symbol(compact, Decl(underscoreTest1_underscore.ts, 512, 48))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 514, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 514, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 514, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 514, 16))
 
         flatten<T>(list: T[][]): T[];
->flatten : Symbol(Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 516, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 516, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 516, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 516, 16))
 
         flatten<T>(array: any[], shallow?: boolean): T[];
->flatten : Symbol(Static.flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
+>flatten : Symbol(flatten, Decl(underscoreTest1_underscore.ts, 514, 35), Decl(underscoreTest1_underscore.ts, 516, 37))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 517, 16))
 >array : Symbol(array, Decl(underscoreTest1_underscore.ts, 517, 19))
 >shallow : Symbol(shallow, Decl(underscoreTest1_underscore.ts, 517, 32))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 517, 16))
 
         without<T>(list: T[], ...values: T[]): T[];
->without : Symbol(Static.without, Decl(underscoreTest1_underscore.ts, 517, 57))
+>without : Symbol(without, Decl(underscoreTest1_underscore.ts, 517, 57))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 519, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 519, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 519, 16))
@@= skipped -30, +30 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 519, 16))
 
         union<T>(...arrays: T[][]): T[];
->union : Symbol(Static.union, Decl(underscoreTest1_underscore.ts, 519, 51))
+>union : Symbol(union, Decl(underscoreTest1_underscore.ts, 519, 51))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 521, 14))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 521, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 521, 14))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 521, 14))
 
         intersection<T>(...arrays: T[][]): T[];
->intersection : Symbol(Static.intersection, Decl(underscoreTest1_underscore.ts, 521, 40))
+>intersection : Symbol(intersection, Decl(underscoreTest1_underscore.ts, 521, 40))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 523, 21))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 523, 24))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 523, 21))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 523, 21))
 
         difference<T>(list: T[], ...others: T[][]): T[];
->difference : Symbol(Static.difference, Decl(underscoreTest1_underscore.ts, 523, 47))
+>difference : Symbol(difference, Decl(underscoreTest1_underscore.ts, 523, 47))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 525, 19))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 525, 22))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 525, 19))
@@= skipped -23, +23 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 525, 19))
 
         uniq<T>(list: T[], isSorted?: boolean): T[];
->uniq : Symbol(Static.uniq, Decl(underscoreTest1_underscore.ts, 525, 56), Decl(underscoreTest1_underscore.ts, 527, 52))
+>uniq : Symbol(uniq, Decl(underscoreTest1_underscore.ts, 525, 56), Decl(underscoreTest1_underscore.ts, 527, 52))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 527, 13))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 527, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 527, 13))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 527, 13))
 
         uniq<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
->uniq : Symbol(Static.uniq, Decl(underscoreTest1_underscore.ts, 525, 56), Decl(underscoreTest1_underscore.ts, 527, 52))
+>uniq : Symbol(uniq, Decl(underscoreTest1_underscore.ts, 525, 56), Decl(underscoreTest1_underscore.ts, 527, 52))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 528, 13))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 528, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 528, 19))
@@= skipped -14, +14 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 528, 15))
 
         unique<T>(list: T[], isSorted?: boolean): T[];
->unique : Symbol(Static.unique, Decl(underscoreTest1_underscore.ts, 528, 96), Decl(underscoreTest1_underscore.ts, 529, 54))
+>unique : Symbol(unique, Decl(underscoreTest1_underscore.ts, 528, 96), Decl(underscoreTest1_underscore.ts, 529, 54))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 529, 15))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 529, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 529, 15))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 529, 15))
 
         unique<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
->unique : Symbol(Static.unique, Decl(underscoreTest1_underscore.ts, 528, 96), Decl(underscoreTest1_underscore.ts, 529, 54))
+>unique : Symbol(unique, Decl(underscoreTest1_underscore.ts, 528, 96), Decl(underscoreTest1_underscore.ts, 529, 54))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 530, 15))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 530, 17))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 530, 21))
@@= skipped -14, +14 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 530, 17))
 
         zip<T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[];
->zip : Symbol(Static.zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
+>zip : Symbol(zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
 >T0 : Symbol(T0, Decl(underscoreTest1_underscore.ts, 532, 12))
 >T1 : Symbol(T1, Decl(underscoreTest1_underscore.ts, 532, 15))
 >a0 : Symbol(a0, Decl(underscoreTest1_underscore.ts, 532, 20))
@@= skipped -12, +12 lines =@@
 >T1 : Symbol(T1, Decl(underscoreTest1_underscore.ts, 532, 15))
 
         zip<T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[];
->zip : Symbol(Static.zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
+>zip : Symbol(zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
 >T0 : Symbol(T0, Decl(underscoreTest1_underscore.ts, 533, 12))
 >T1 : Symbol(T1, Decl(underscoreTest1_underscore.ts, 533, 15))
 >T2 : Symbol(T2, Decl(underscoreTest1_underscore.ts, 533, 19))
@@= skipped -16, +16 lines =@@
 >T2 : Symbol(T2, Decl(underscoreTest1_underscore.ts, 533, 19))
 
         zip<T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[];
->zip : Symbol(Static.zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
+>zip : Symbol(zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
 >T0 : Symbol(T0, Decl(underscoreTest1_underscore.ts, 534, 12))
 >T1 : Symbol(T1, Decl(underscoreTest1_underscore.ts, 534, 15))
 >T2 : Symbol(T2, Decl(underscoreTest1_underscore.ts, 534, 19))
@@= skipped -20, +20 lines =@@
 >T3 : Symbol(T3, Decl(underscoreTest1_underscore.ts, 534, 23))
 
         zip(...arrays: any[][]): any[][];
->zip : Symbol(Static.zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
+>zip : Symbol(zip, Decl(underscoreTest1_underscore.ts, 530, 98), Decl(underscoreTest1_underscore.ts, 532, 58), Decl(underscoreTest1_underscore.ts, 533, 76), Decl(underscoreTest1_underscore.ts, 534, 94))
 >arrays : Symbol(arrays, Decl(underscoreTest1_underscore.ts, 535, 12))
 
         object(list: any[][]): any;
->object : Symbol(Static.object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
+>object : Symbol(object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 537, 15))
 
         object(keys: string[], values: any[]): any;
->object : Symbol(Static.object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
+>object : Symbol(object, Decl(underscoreTest1_underscore.ts, 535, 41), Decl(underscoreTest1_underscore.ts, 537, 35))
 >keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 538, 15))
 >values : Symbol(values, Decl(underscoreTest1_underscore.ts, 538, 30))
 
         indexOf<T>(list: T[], value: T, isSorted?: boolean): number;
->indexOf : Symbol(Static.indexOf, Decl(underscoreTest1_underscore.ts, 538, 51))
+>indexOf : Symbol(indexOf, Decl(underscoreTest1_underscore.ts, 538, 51))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 540, 16))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 540, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 540, 16))
@@= skipped -22, +22 lines =@@
 >isSorted : Symbol(isSorted, Decl(underscoreTest1_underscore.ts, 540, 39))
 
         lastIndexOf<T>(list: T[], value: T, fromIndex?: number): number;
->lastIndexOf : Symbol(Static.lastIndexOf, Decl(underscoreTest1_underscore.ts, 540, 68))
+>lastIndexOf : Symbol(lastIndexOf, Decl(underscoreTest1_underscore.ts, 540, 68))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 542, 20))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 542, 23))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 542, 20))
@@= skipped -9, +9 lines =@@
 >fromIndex : Symbol(fromIndex, Decl(underscoreTest1_underscore.ts, 542, 43))
 
         sortedIndex<T>(list: T[], obj: T, propertyName: string): number;
->sortedIndex : Symbol(Static.sortedIndex, Decl(underscoreTest1_underscore.ts, 542, 72), Decl(underscoreTest1_underscore.ts, 544, 72))
+>sortedIndex : Symbol(sortedIndex, Decl(underscoreTest1_underscore.ts, 542, 72), Decl(underscoreTest1_underscore.ts, 544, 72))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 544, 20))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 544, 23))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 544, 20))
@@= skipped -9, +9 lines =@@
 >propertyName : Symbol(propertyName, Decl(underscoreTest1_underscore.ts, 544, 41))
 
         sortedIndex<T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number;
->sortedIndex : Symbol(Static.sortedIndex, Decl(underscoreTest1_underscore.ts, 542, 72), Decl(underscoreTest1_underscore.ts, 544, 72))
+>sortedIndex : Symbol(sortedIndex, Decl(underscoreTest1_underscore.ts, 542, 72), Decl(underscoreTest1_underscore.ts, 544, 72))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 545, 20))
 >list : Symbol(list, Decl(underscoreTest1_underscore.ts, 545, 23))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 545, 20))
@@= skipped -12, +12 lines =@@
 >context : Symbol(context, Decl(underscoreTest1_underscore.ts, 545, 71))
 
         range(stop: number): number[];
->range : Symbol(Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 >stop : Symbol(stop, Decl(underscoreTest1_underscore.ts, 547, 14))
 
         range(start: number, stop: number, step?: number): number[];
->range : Symbol(Static.range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
+>range : Symbol(range, Decl(underscoreTest1_underscore.ts, 545, 95), Decl(underscoreTest1_underscore.ts, 547, 38))
 >start : Symbol(start, Decl(underscoreTest1_underscore.ts, 548, 14))
 >stop : Symbol(stop, Decl(underscoreTest1_underscore.ts, 548, 28))
 >step : Symbol(step, Decl(underscoreTest1_underscore.ts, 548, 42))
 
         bind<T extends Function>(func: T, object: any): T;
->bind : Symbol(Static.bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
+>bind : Symbol(bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 550, 13))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 550, 33))
@@= skipped -19, +19 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 550, 13))
 
         bind(func: Function, object: any, ...args: any[]): Function;
->bind : Symbol(Static.bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
+>bind : Symbol(bind, Decl(underscoreTest1_underscore.ts, 548, 68), Decl(underscoreTest1_underscore.ts, 550, 58))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 551, 13))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 551, 28))
@@= skipped -8, +8 lines =@@
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         bindAll<T>(object: T, ...methodNames: string[]): T;
->bindAll : Symbol(Static.bindAll, Decl(underscoreTest1_underscore.ts, 551, 68))
+>bindAll : Symbol(bindAll, Decl(underscoreTest1_underscore.ts, 551, 68))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 553, 16))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 553, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 553, 16))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 553, 16))
 
         partial(func: Function, ...args: any[]): Function;
->partial : Symbol(Static.partial, Decl(underscoreTest1_underscore.ts, 553, 59))
+>partial : Symbol(partial, Decl(underscoreTest1_underscore.ts, 553, 59))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 555, 16))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 555, 31))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         memoize<T extends Function>(func: T, hashFunction?: Function): T;
->memoize : Symbol(Static.memoize, Decl(underscoreTest1_underscore.ts, 555, 58))
+>memoize : Symbol(memoize, Decl(underscoreTest1_underscore.ts, 555, 58))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 557, 16))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 557, 36))
@@= skipped -17, +17 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 557, 16))
 
         delay(func: Function, wait: number, ...args: any[]): number;
->delay : Symbol(Static.delay, Decl(underscoreTest1_underscore.ts, 557, 73))
+>delay : Symbol(delay, Decl(underscoreTest1_underscore.ts, 557, 73))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 559, 14))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >wait : Symbol(wait, Decl(underscoreTest1_underscore.ts, 559, 29))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 559, 43))
 
         defer(func: Function, ...args: any[]): number;
->defer : Symbol(Static.defer, Decl(underscoreTest1_underscore.ts, 559, 68))
+>defer : Symbol(defer, Decl(underscoreTest1_underscore.ts, 559, 68))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 561, 14))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >args : Symbol(args, Decl(underscoreTest1_underscore.ts, 561, 29))
 
         throttle<T extends Function>(func: T, wait: number): T;
->throttle : Symbol(Static.throttle, Decl(underscoreTest1_underscore.ts, 561, 54))
+>throttle : Symbol(throttle, Decl(underscoreTest1_underscore.ts, 561, 54))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 563, 17))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 563, 37))
@@= skipped -22, +22 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 563, 17))
 
         debounce<T extends Function>(func: T, wait: number, immediate?: boolean): T;
->debounce : Symbol(Static.debounce, Decl(underscoreTest1_underscore.ts, 563, 63))
+>debounce : Symbol(debounce, Decl(underscoreTest1_underscore.ts, 563, 63))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 565, 17))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 565, 37))
@@= skipped -10, +10 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 565, 17))
 
         once<T extends Function>(func: T): T;
->once : Symbol(Static.once, Decl(underscoreTest1_underscore.ts, 565, 84))
+>once : Symbol(once, Decl(underscoreTest1_underscore.ts, 565, 84))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 567, 13))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 567, 33))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 567, 13))
 
         after<T extends Function>(count: number, func: T): T;
->after : Symbol(Static.after, Decl(underscoreTest1_underscore.ts, 567, 45))
+>after : Symbol(after, Decl(underscoreTest1_underscore.ts, 567, 45))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 569, 14))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >count : Symbol(count, Decl(underscoreTest1_underscore.ts, 569, 34))
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 569, 14))
 
         wrap<T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any): T;
->wrap : Symbol(Static.wrap, Decl(underscoreTest1_underscore.ts, 569, 61))
+>wrap : Symbol(wrap, Decl(underscoreTest1_underscore.ts, 569, 61))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 571, 13))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >func : Symbol(func, Decl(underscoreTest1_underscore.ts, 571, 33))
@@= skipped -12, +12 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 571, 13))
 
         compose(...funcs: Function[]): Function;
->compose : Symbol(Static.compose, Decl(underscoreTest1_underscore.ts, 571, 88))
+>compose : Symbol(compose, Decl(underscoreTest1_underscore.ts, 571, 88))
 >funcs : Symbol(funcs, Decl(underscoreTest1_underscore.ts, 573, 16))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
         keys(object: any): string[];
->keys : Symbol(Static.keys, Decl(underscoreTest1_underscore.ts, 573, 48))
+>keys : Symbol(keys, Decl(underscoreTest1_underscore.ts, 573, 48))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 575, 13))
 
         values(object: any): any[];
->values : Symbol(Static.values, Decl(underscoreTest1_underscore.ts, 575, 36))
+>values : Symbol(values, Decl(underscoreTest1_underscore.ts, 575, 36))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 577, 15))
 
         pairs(object: any): any[][];
->pairs : Symbol(Static.pairs, Decl(underscoreTest1_underscore.ts, 577, 35))
+>pairs : Symbol(pairs, Decl(underscoreTest1_underscore.ts, 577, 35))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 579, 14))
 
         invert(object: any): any;
->invert : Symbol(Static.invert, Decl(underscoreTest1_underscore.ts, 579, 36))
+>invert : Symbol(invert, Decl(underscoreTest1_underscore.ts, 579, 36))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 581, 15))
 
         functions(object: any): string[];
->functions : Symbol(Static.functions, Decl(underscoreTest1_underscore.ts, 581, 33))
+>functions : Symbol(functions, Decl(underscoreTest1_underscore.ts, 581, 33))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 583, 18))
 
         methods(object: any): string[];
->methods : Symbol(Static.methods, Decl(underscoreTest1_underscore.ts, 583, 41))
+>methods : Symbol(methods, Decl(underscoreTest1_underscore.ts, 583, 41))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 584, 16))
 
         extend<T>(destination: T, ...sources: any[]): T;
->extend : Symbol(Static.extend, Decl(underscoreTest1_underscore.ts, 584, 39))
+>extend : Symbol(extend, Decl(underscoreTest1_underscore.ts, 584, 39))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 586, 15))
 >destination : Symbol(destination, Decl(underscoreTest1_underscore.ts, 586, 18))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 586, 15))
@@= skipped -38, +38 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 586, 15))
 
         pick<T>(object: T, ...keys: string[]): T;
->pick : Symbol(Static.pick, Decl(underscoreTest1_underscore.ts, 586, 56))
+>pick : Symbol(pick, Decl(underscoreTest1_underscore.ts, 586, 56))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 588, 13))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 588, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 588, 13))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 588, 13))
 
         omit<T>(object: T, ...keys: string[]): T;
->omit : Symbol(Static.omit, Decl(underscoreTest1_underscore.ts, 588, 49))
+>omit : Symbol(omit, Decl(underscoreTest1_underscore.ts, 588, 49))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 590, 13))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 590, 16))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 590, 13))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 590, 13))
 
         defaults<T>(object: T, ...defaults: any[]): T;
->defaults : Symbol(Static.defaults, Decl(underscoreTest1_underscore.ts, 590, 49))
+>defaults : Symbol(defaults, Decl(underscoreTest1_underscore.ts, 590, 49))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 592, 17))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 592, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 592, 17))
@@= skipped -8, +8 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 592, 17))
 
         clone<T>(object: T): T;
->clone : Symbol(Static.clone, Decl(underscoreTest1_underscore.ts, 592, 54))
+>clone : Symbol(clone, Decl(underscoreTest1_underscore.ts, 592, 54))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 594, 14))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 594, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 594, 14))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 594, 14))
 
         tap<T>(object: T, interceptor: (object: T) => void): T;
->tap : Symbol(Static.tap, Decl(underscoreTest1_underscore.ts, 594, 31))
+>tap : Symbol(tap, Decl(underscoreTest1_underscore.ts, 594, 31))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 596, 12))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 596, 15))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 596, 12))
@@= skipped -17, +17 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 596, 12))
 
         has(object: any, key: string): boolean;
->has : Symbol(Static.has, Decl(underscoreTest1_underscore.ts, 596, 63))
+>has : Symbol(has, Decl(underscoreTest1_underscore.ts, 596, 63))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 598, 12))
 >key : Symbol(key, Decl(underscoreTest1_underscore.ts, 598, 24))
 
         isEqual<T>(object: T, other: T): boolean;
->isEqual : Symbol(Static.isEqual, Decl(underscoreTest1_underscore.ts, 598, 47))
+>isEqual : Symbol(isEqual, Decl(underscoreTest1_underscore.ts, 598, 47))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 600, 16))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 600, 19))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 600, 16))
@@= skipped -13, +13 lines =@@
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 600, 16))
 
         isEmpty(object: any): boolean;
->isEmpty : Symbol(Static.isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
+>isEmpty : Symbol(isEmpty, Decl(underscoreTest1_underscore.ts, 600, 49))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 602, 16))
 
         isElement(object: any): boolean;
->isElement : Symbol(Static.isElement, Decl(underscoreTest1_underscore.ts, 602, 38))
+>isElement : Symbol(isElement, Decl(underscoreTest1_underscore.ts, 602, 38))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 603, 18))
 
         isArray(object: any): boolean;
->isArray : Symbol(Static.isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
+>isArray : Symbol(isArray, Decl(underscoreTest1_underscore.ts, 603, 40))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 604, 16))
 
         isObject(value: any): boolean;
->isObject : Symbol(Static.isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
+>isObject : Symbol(isObject, Decl(underscoreTest1_underscore.ts, 604, 38))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 605, 17))
 
         isArguments(object: any): boolean;
->isArguments : Symbol(Static.isArguments, Decl(underscoreTest1_underscore.ts, 605, 38))
+>isArguments : Symbol(isArguments, Decl(underscoreTest1_underscore.ts, 605, 38))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 606, 20))
 
         isFunction(object: any): boolean;
->isFunction : Symbol(Static.isFunction, Decl(underscoreTest1_underscore.ts, 606, 42))
+>isFunction : Symbol(isFunction, Decl(underscoreTest1_underscore.ts, 606, 42))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 607, 19))
 
         isString(object: any): boolean;
->isString : Symbol(Static.isString, Decl(underscoreTest1_underscore.ts, 607, 41))
+>isString : Symbol(isString, Decl(underscoreTest1_underscore.ts, 607, 41))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 608, 17))
 
         isNumber(object: any): boolean;
->isNumber : Symbol(Static.isNumber, Decl(underscoreTest1_underscore.ts, 608, 39))
+>isNumber : Symbol(isNumber, Decl(underscoreTest1_underscore.ts, 608, 39))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 609, 17))
 
         isFinite(object: any): boolean;
->isFinite : Symbol(Static.isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
+>isFinite : Symbol(isFinite, Decl(underscoreTest1_underscore.ts, 609, 39))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 610, 17))
 
         isBoolean(object: any): boolean;
->isBoolean : Symbol(Static.isBoolean, Decl(underscoreTest1_underscore.ts, 610, 39))
+>isBoolean : Symbol(isBoolean, Decl(underscoreTest1_underscore.ts, 610, 39))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 611, 18))
 
         isDate(object: any): boolean;
->isDate : Symbol(Static.isDate, Decl(underscoreTest1_underscore.ts, 611, 40))
+>isDate : Symbol(isDate, Decl(underscoreTest1_underscore.ts, 611, 40))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 612, 15))
 
         isRegExp(object: any): boolean;
->isRegExp : Symbol(Static.isRegExp, Decl(underscoreTest1_underscore.ts, 612, 37))
+>isRegExp : Symbol(isRegExp, Decl(underscoreTest1_underscore.ts, 612, 37))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 613, 17))
 
         isNaN(object: any): boolean;
->isNaN : Symbol(Static.isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
+>isNaN : Symbol(isNaN, Decl(underscoreTest1_underscore.ts, 613, 39))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 614, 14))
 
         isNull(object: any): boolean;
->isNull : Symbol(Static.isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
+>isNull : Symbol(isNull, Decl(underscoreTest1_underscore.ts, 614, 36))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 615, 15))
 
         isUndefined(value: any): boolean;
->isUndefined : Symbol(Static.isUndefined, Decl(underscoreTest1_underscore.ts, 615, 37))
+>isUndefined : Symbol(isUndefined, Decl(underscoreTest1_underscore.ts, 615, 37))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 616, 20))
 
         noConflict(): Static;
->noConflict : Symbol(Static.noConflict, Decl(underscoreTest1_underscore.ts, 616, 41))
+>noConflict : Symbol(noConflict, Decl(underscoreTest1_underscore.ts, 616, 41))
 >Static : Symbol(Static, Decl(underscoreTest1_underscore.ts, 385, 5))
 
         identity<T>(value: T): T;
->identity : Symbol(Static.identity, Decl(underscoreTest1_underscore.ts, 618, 29))
+>identity : Symbol(identity, Decl(underscoreTest1_underscore.ts, 618, 29))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 620, 17))
 >value : Symbol(value, Decl(underscoreTest1_underscore.ts, 620, 20))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 620, 17))
 >T : Symbol(T, Decl(underscoreTest1_underscore.ts, 620, 17))
 
         times<U>(n: number, iterator: Iterator_<number, U>, context?: any): U[];
->times : Symbol(Static.times, Decl(underscoreTest1_underscore.ts, 620, 33))
+>times : Symbol(times, Decl(underscoreTest1_underscore.ts, 620, 33))
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 622, 14))
 >n : Symbol(n, Decl(underscoreTest1_underscore.ts, 622, 17))
 >iterator : Symbol(iterator, Decl(underscoreTest1_underscore.ts, 622, 27))
@@= skipped -81, +81 lines =@@
 >U : Symbol(U, Decl(underscoreTest1_underscore.ts, 622, 14))
 
         random(max: number): number;
->random : Symbol(Static.random, Decl(underscoreTest1_underscore.ts, 622, 80), Decl(underscoreTest1_underscore.ts, 624, 36))
+>random : Symbol(random, Decl(underscoreTest1_underscore.ts, 622, 80), Decl(underscoreTest1_underscore.ts, 624, 36))
 >max : Symbol(max, Decl(underscoreTest1_underscore.ts, 624, 15))
 
         random(min: number, max: number): number;
->random : Symbol(Static.random, Decl(underscoreTest1_underscore.ts, 622, 80), Decl(underscoreTest1_underscore.ts, 624, 36))
+>random : Symbol(random, Decl(underscoreTest1_underscore.ts, 622, 80), Decl(underscoreTest1_underscore.ts, 624, 36))
 >min : Symbol(min, Decl(underscoreTest1_underscore.ts, 625, 15))
 >max : Symbol(max, Decl(underscoreTest1_underscore.ts, 625, 27))
 
         mixin(object: any): void;
->mixin : Symbol(Static.mixin, Decl(underscoreTest1_underscore.ts, 625, 49))
+>mixin : Symbol(mixin, Decl(underscoreTest1_underscore.ts, 625, 49))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 627, 14))
 
         uniqueId(): number;
->uniqueId : Symbol(Static.uniqueId, Decl(underscoreTest1_underscore.ts, 627, 33), Decl(underscoreTest1_underscore.ts, 629, 27))
+>uniqueId : Symbol(uniqueId, Decl(underscoreTest1_underscore.ts, 627, 33), Decl(underscoreTest1_underscore.ts, 629, 27))
 
         uniqueId(prefix: string): string;
->uniqueId : Symbol(Static.uniqueId, Decl(underscoreTest1_underscore.ts, 627, 33), Decl(underscoreTest1_underscore.ts, 629, 27))
+>uniqueId : Symbol(uniqueId, Decl(underscoreTest1_underscore.ts, 627, 33), Decl(underscoreTest1_underscore.ts, 629, 27))
 >prefix : Symbol(prefix, Decl(underscoreTest1_underscore.ts, 630, 17))
 
         escape(s: string): string;
->escape : Symbol(Static.escape, Decl(underscoreTest1_underscore.ts, 630, 41))
+>escape : Symbol(escape, Decl(underscoreTest1_underscore.ts, 630, 41))
 >s : Symbol(s, Decl(underscoreTest1_underscore.ts, 632, 15))
 
         unescape(s: string): string;
->unescape : Symbol(Static.unescape, Decl(underscoreTest1_underscore.ts, 632, 34))
+>unescape : Symbol(unescape, Decl(underscoreTest1_underscore.ts, 632, 34))
 >s : Symbol(s, Decl(underscoreTest1_underscore.ts, 634, 17))
 
         result(object: any, property: string): any;
->result : Symbol(Static.result, Decl(underscoreTest1_underscore.ts, 634, 36))
+>result : Symbol(result, Decl(underscoreTest1_underscore.ts, 634, 36))
 >object : Symbol(object, Decl(underscoreTest1_underscore.ts, 636, 15))
 >property : Symbol(property, Decl(underscoreTest1_underscore.ts, 636, 27))
 
         templateSettings: TemplateSettings;
->templateSettings : Symbol(Static.templateSettings, Decl(underscoreTest1_underscore.ts, 636, 51))
+>templateSettings : Symbol(templateSettings, Decl(underscoreTest1_underscore.ts, 636, 51))
 >TemplateSettings : Symbol(TemplateSettings, Decl(underscoreTest1_underscore.ts, 378, 5))
 
         template(templateString: string): (data: any) => string;
->template : Symbol(Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >templateString : Symbol(templateString, Decl(underscoreTest1_underscore.ts, 640, 17))
 >data : Symbol(data, Decl(underscoreTest1_underscore.ts, 640, 43))
 
         template(templateString: string, data: any, settings?: TemplateSettings): string;
->template : Symbol(Static.template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
+>template : Symbol(template, Decl(underscoreTest1_underscore.ts, 638, 43), Decl(underscoreTest1_underscore.ts, 640, 64))
 >templateString : Symbol(templateString, Decl(underscoreTest1_underscore.ts, 641, 17))
 >data : Symbol(data, Decl(underscoreTest1_underscore.ts, 641, 40))
 >settings : Symbol(settings, Decl(underscoreTest1_underscore.ts, 641, 51))
@@= skipped -53, +53 lines =@@
 declare var _: Underscore.Static;
 >_ : Symbol(_, Decl(underscoreTest1_underscore.ts, 645, 11))
 >Underscore : Symbol(Underscore, Decl(underscoreTest1_underscore.ts, 28, 1))
->Static : Symbol(Underscore.Static, Decl(underscoreTest1_underscore.ts, 385, 5))
+>Static : Symbol(Static, Decl(underscoreTest1_underscore.ts, 385, 5))
 
