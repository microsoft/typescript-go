--- old.silentNeverPropagation.types
+++ new.silentNeverPropagation.types
@@= skipped -4, +4 lines =@@
 
 type ModuleWithState<TState> = {
 >ModuleWithState : ModuleWithState<TState>
+>TState : TState
 
     state: TState;
 >state : TState
@@= skipped -24, +25 lines =@@
 
 declare function createModule<TState, TActions>(state: TState, actions: TActions): ModuleWithState<TState> & TActions;
 >createModule : <TState, TActions>(state: TState, actions: TActions) => ModuleWithState<TState> & TActions
+>TState : TState
+>TActions : TActions
 >state : TState
 >actions : TActions
 
 declare function convert<TState, TActions>(m: ModuleWithState<TState> & TActions): ModuleWithState<TState & MoreState> & TActions;
 >convert : <TState, TActions>(m: ModuleWithState<TState> & TActions) => ModuleWithState<TState & MoreState> & TActions
+>TState : TState
+>TActions : TActions
 >m : ModuleWithState<TState> & TActions
 
 const breaks = convert(
->breaks : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo(): true; }
->convert(    createModule({ a: 12 }, { foo() { return true } })) : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo(): true; }
+>breaks : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo: () => true; }
+>convert(    createModule({ a: 12 }, { foo() { return true } })) : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo: () => true; }
 >convert : <TState, TActions>(m: ModuleWithState<TState> & TActions) => ModuleWithState<TState & MoreState> & TActions
 
     createModule({ a: 12 }, { foo() { return true } })
->createModule({ a: 12 }, { foo() { return true } }) : ModuleWithState<{ a: number; }> & { foo(): true; }
+>createModule({ a: 12 }, { foo() { return true } }) : ModuleWithState<{ a: number; }> & { foo: () => true; }
 >createModule : <TState, TActions>(state: TState, actions: TActions) => ModuleWithState<TState> & TActions
 >{ a: 12 } : { a: number; }
 >a : number
 >12 : 12
->{ foo() { return true } } : { foo(): true; }
+>{ foo() { return true } } : { foo: () => true; }
 >foo : () => true
 >true : true
 
@@= skipped -27, +31 lines =@@
 breaks.state.a
 >breaks.state.a : number
 >breaks.state : { a: number; } & MoreState
->breaks : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo(): true; }
+>breaks : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo: () => true; }
 >state : { a: number; } & MoreState
 >a : number
 
 breaks.state.z
 >breaks.state.z : string
 >breaks.state : { a: number; } & MoreState
->breaks : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo(): true; }
+>breaks : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo: () => true; }
 >state : { a: number; } & MoreState
 >z : string
 
 breaks.foo()
 >breaks.foo() : true
 >breaks.foo : () => true
->breaks : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo(): true; }
+>breaks : ModuleWithState<{ a: number; } & MoreState> & ModuleWithState<{ a: number; }> & { foo: () => true; }
 >foo : () => true
 
