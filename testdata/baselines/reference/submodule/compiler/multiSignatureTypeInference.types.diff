--- old.multiSignatureTypeInference.types
+++ new.multiSignatureTypeInference.types
@@= skipped -22, +22 lines =@@
 
 type AllParams<T> =
 >AllParams : AllParams<T>
+>T : T
 
     T extends { (...a: infer A1): any, (...a: infer A2): any, (...a: infer A3): any, (...a: infer A4): any } ? A1 | A2 | A3 | A4 : never;
 >a : A1
+>A1 : A1
 >a : A2
+>A2 : A2
 >a : A3
+>A3 : A3
 >a : A4
+>A4 : A4
 
 type AllReturns<T> =
 >AllReturns : AllReturns<T>
+>T : T
 
     T extends { (...a: any[]): infer R1, (...a: any[]): infer R2, (...a: any[]): infer R3, (...a: any[]): infer R4 } ? R1 | R2 | R3 | R4 : never;
 >a : any[]
+>R1 : R1
 >a : any[]
+>R2 : R2
 >a : any[]
+>R3 : R3
 >a : any[]
+>R4 : R4
 
 type Params1 = AllParams<typeof f1>;  // string[] | [arg: boolean] | [arg1: number, arg2: number]
 >Params1 : string[] | [arg: boolean] | [arg1: number, arg2: number]
->f1 : { (arg: boolean): string; (arg1: number, arg2: number): number; (...args: string[]): string[]; }
 
 type Params2 = AllParams<typeof f2>;  // [arg: unknown]
 >Params2 : [arg: unknown]
->f2 : (arg: unknown) => unknown
 
 type Params3 = AllParams<typeof f3>;  // []
 >Params3 : []
->f3 : () => string
 
 type Returns1 = AllReturns<typeof f1>  // string | number | string[]
 >Returns1 : string | number | string[]
->f1 : { (arg: boolean): string; (arg1: number, arg2: number): number; (...args: string[]): string[]; }
 
 type Returns2 = AllReturns<typeof f2>;  // unknown
 >Returns2 : unknown
->f2 : (arg: unknown) => unknown
 
 type Returns3 = AllReturns<typeof f3>;  // string
 >Returns3 : string
->f3 : () => string
 
 // Repro from #28867
 
 type InferTwoOverloads<F extends Function> = 
 >InferTwoOverloads : InferTwoOverloads<F>
+>F : F
 
   F extends { (...a1: infer A1): infer R1, (...a0: infer A0): infer R0 } ? 
 >a1 : A1
+>A1 : A1
+>R1 : R1
 >a0 : A0
+>A0 : A0
+>R0 : R0
 
     [(...a1: A1) => R1, (...a0: A0) => R0] : 
 >a1 : A1
@@= skipped -56, +65 lines =@@
     never;
 
 type Expected = InferTwoOverloads<((x: string) => number) & (() => string)>;  // [(x: string) => number, () => string]    
->Expected : [(x: string) => number, () => string]
+>Expected : [(...a1: [x: string]) => number, (...a0: []) => string]
 >x : string
 
 type JustOneSignature = InferTwoOverloads<((x: string) => number)>;  // [(x: string) => number, (x: string) => number]
->JustOneSignature : [(x: string) => number, (x: string) => number]
+>JustOneSignature : [(...a1: [x: string]) => number, (...a0: [x: string]) => number]
 >x : string
 
 type JustTheOtherSignature = InferTwoOverloads<(() => string)>;  // [() => string, () => string]
->JustTheOtherSignature : [() => string, () => string]
+>JustTheOtherSignature : [(...a1: []) => string, (...a0: []) => string]
 
 // Repro from #28867
 
 type Overloads<F> =
 >Overloads : Overloads<F>
+>F : F
 
     F extends {
           (...args: infer A1): infer R1
 >args : A1
+>A1 : A1
+>R1 : R1
 
           (...args: infer A2): infer R2;
 >args : A2
+>A2 : A2
+>R2 : R2
 
       } ? {rule: 2, variants: [A1, R1] | [A2, R2]} :
 >rule : 2
@@= skipped -29, +34 lines =@@
     F extends {
           (...args: infer A1): infer R1;
 >args : A1
+>A1 : A1
+>R1 : R1
 
       } ? {rule: 1, variants: [A1, R1]} :
 >rule : 1
