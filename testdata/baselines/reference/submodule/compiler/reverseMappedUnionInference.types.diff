--- old.reverseMappedUnionInference.types
+++ new.reverseMappedUnionInference.types
@@= skipped -1, +1 lines =@@
 
 === reverseMappedUnionInference.ts ===
 interface AnyExtractor<Result> {
+>AnyExtractor : AnyExtractor<Result>
+>Result : Result
+
   matches: (node: any) => boolean;
 >matches : (node: any) => boolean
 >node : any
@@= skipped -10, +13 lines =@@
 }
 
 interface Extractor<T, Result> {
+>Extractor : Extractor<T, Result>
+>T : T
+>Result : Result
+
   matches: (node: unknown) => node is T;
 >matches : (node: unknown) => node is T
 >node : unknown
@@= skipped -11, +15 lines =@@
 
 declare function createExtractor<T, Result>(params: {
 >createExtractor : <T, Result>(params: { matcher: (node: unknown) => node is T; extract: (node: T) => Result; }) => Extractor<T, Result>
+>T : T
+>Result : Result
 >params : { matcher: (node: unknown) => node is T; extract: (node: T) => Result; }
 
   matcher: (node: unknown) => node is T;
@@= skipped -13, +15 lines =@@
 }): Extractor<T, Result>;
 
 interface Identifier {
+>Identifier : Identifier
+
   kind: "identifier";
 >kind : "identifier"
 
@@= skipped -30, +32 lines =@@
 >{      node,      kind: "identifier" as const,      value: node.name,    } : { node: Identifier; kind: "identifier"; value: string; }
 
       node,
->node : Identifier
+>node : any
 
       kind: "identifier" as const,
 >kind : "identifier"
@@= skipped -18, +18 lines =@@
 });
 
 interface StringLiteral {
+>StringLiteral : StringLiteral
+
   kind: "stringLiteral";
 >kind : "stringLiteral"
 
@@= skipped -30, +32 lines =@@
 >{      node,      kind: "string" as const,      value: node.value,    } : { node: StringLiteral; kind: "string"; value: string; }
 
       node,
->node : StringLiteral
+>node : any
 
       kind: "string" as const,
 >kind : "string"
@@= skipped -18, +18 lines =@@
 });
 
 declare function unionType<Result extends readonly unknown[]>(parsers: {
->unionType : <Result extends readonly unknown[]>(parsers: { [K in keyof Result]: AnyExtractor<Result[K]>; }) => AnyExtractor<Result[number]>
->parsers : { [K in keyof Result]: AnyExtractor<Result[K]>; }
+>unionType : <Result extends readonly unknown[]>(parsers: { [K in keyof Result]: AnyExtractor<Result[K]> }) => AnyExtractor<Result[number]>
+>Result : Result
+>parsers : { [K in keyof Result]: AnyExtractor<Result[K]> }
 
   [K in keyof Result]: AnyExtractor<Result[K]>;
+>K : K
+
 }): AnyExtractor<Result[number]>;
 
 const myUnion = unionType([identifierExtractor, stringExtractor]);
 >myUnion : AnyExtractor<{ node: Identifier; kind: "identifier"; value: string; } | { node: StringLiteral; kind: "string"; value: string; }>
 >unionType([identifierExtractor, stringExtractor]) : AnyExtractor<{ node: Identifier; kind: "identifier"; value: string; } | { node: StringLiteral; kind: "string"; value: string; }>
->unionType : <Result extends readonly unknown[]>(parsers: { [K in keyof Result]: AnyExtractor<Result[K]>; }) => AnyExtractor<Result[number]>
+>unionType : <Result extends readonly unknown[]>(parsers: { [K in keyof Result]: AnyExtractor<Result[K]> }) => AnyExtractor<Result[number]>
 >[identifierExtractor, stringExtractor] : [Extractor<Identifier, { node: Identifier; kind: "identifier"; value: string; }>, Extractor<StringLiteral, { node: StringLiteral; kind: "string"; value: string; }>]
 >identifierExtractor : Extractor<Identifier, { node: Identifier; kind: "identifier"; value: string; }>
 >stringExtractor : Extractor<StringLiteral, { node: StringLiteral; kind: "string"; value: string; }>
