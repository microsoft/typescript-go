--- old.contextualTypesNegatedTypeLikeConstraintInGenericMappedType2.types
+++ new.contextualTypesNegatedTypeLikeConstraintInGenericMappedType2.types
@@= skipped -2, +2 lines =@@
 === contextualTypesNegatedTypeLikeConstraintInGenericMappedType2.ts ===
 type Tags<D extends string, P> = P extends Record<D, infer X> ? X : never;
 >Tags : Tags<D, P>
+>D : D
+>P : P
+>X : X
 
 declare const typeTags: <I>() => <
->typeTags : <I>() => <P extends { readonly [Tag in Tags<"_tag", I> & string]: (_: Extract<I, { readonly _tag: Tag; }>) => any; } & { readonly [Tag in Exclude<keyof P, Tags<"_tag", I>>]: never; }>(fields: P) => unknown
+>typeTags : <I>() => <P extends { readonly [Tag in Tags<"_tag", I> & string]: (_: Extract<I, { readonly _tag: Tag; }>) => any } & { readonly [Tag in Exclude<keyof P, Tags<"_tag", I>>]: never }>(fields: P) => unknown
+>I : I
 
   P extends {
+>P : P
+
     readonly [Tag in Tags<"_tag", I> & string]: (
+>Tag : Tag
+
       _: Extract<I, { readonly _tag: Tag }>,
 >_ : Extract<I, { readonly _tag: Tag; }>
 >_tag : Tag
 
     ) => any;
   } & { readonly [Tag in Exclude<keyof P, Tags<"_tag", I>>]: never },
+>Tag : Tag
+
 >(
   fields: P,
 >fields : P
@@= skipped -26, +36 lines =@@
 >b : number
 
 const matcher = typeTags<Value>();
->matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never; }>(fields: P) => unknown
->typeTags<Value>() : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never; }>(fields: P) => unknown
->typeTags : <I>() => <P extends { readonly [Tag in Tags<"_tag", I> & string]: (_: Extract<I, { readonly _tag: Tag; }>) => any; } & { readonly [Tag in Exclude<keyof P, Tags<"_tag", I>>]: never; }>(fields: P) => unknown
+>matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never }>(fields: P) => unknown
+>typeTags<Value>() : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never }>(fields: P) => unknown
+>typeTags : <I>() => <P extends { readonly [Tag in Tags<"_tag", I> & string]: (_: Extract<I, { readonly _tag: Tag; }>) => any } & { readonly [Tag in Exclude<keyof P, Tags<"_tag", I>>]: never }>(fields: P) => unknown
 
 matcher({
 >matcher({  A: (_) => _.a,  B: (_) => "fail",}) : unknown
->matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never; }>(fields: P) => unknown
+>matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never }>(fields: P) => unknown
 >{  A: (_) => _.a,  B: (_) => "fail",} : { A: (_: { _tag: "A"; a: number; }) => number; B: (_: { _tag: "B"; b: number; }) => string; }
 
   A: (_) => _.a,
@@= skipped -27, +27 lines =@@
 
 matcher({
 >matcher({  A: (_) => _.a,  B: (_) => "fail",  C: (_) => "fail",}) : unknown
->matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never; }>(fields: P) => unknown
+>matcher : <P extends { readonly A: (_: { _tag: "A"; a: number; }) => any; readonly B: (_: { _tag: "B"; b: number; }) => any; } & { readonly [Tag in Exclude<keyof P, "A" | "B">]: never }>(fields: P) => unknown
 >{  A: (_) => _.a,  B: (_) => "fail",  C: (_) => "fail",} : { A: (_: { _tag: "A"; a: number; }) => number; B: (_: { _tag: "B"; b: number; }) => string; C: (_: any) => string; }
 
   A: (_) => _.a,
