--- old.optionalParamArgsTest.symbols
+++ new.optionalParamArgsTest.symbols
@@= skipped -12, +12 lines =@@
 >I1 : Symbol(I1, Decl(optionalParamArgsTest.ts, 0, 0))
 
     C1M1():number;
->C1M1 : Symbol(I1.C1M1, Decl(optionalParamArgsTest.ts, 8, 14))
+>C1M1 : Symbol(C1M1, Decl(optionalParamArgsTest.ts, 8, 14))
 
     C1M2(C1M2A1:number):number;
->C1M2 : Symbol(I1.C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
+>C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
 >C1M2A1 : Symbol(C1M2A1, Decl(optionalParamArgsTest.ts, 10, 9))
 
     C1M3(C1M3A1?:number,C1M3A2?:number):number;
->C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 >C1M3A1 : Symbol(C1M3A1, Decl(optionalParamArgsTest.ts, 11, 9))
 >C1M3A2 : Symbol(C1M3A2, Decl(optionalParamArgsTest.ts, 11, 24))
 
     C1M4(C1M4A1:number,C1M4A2?:number):number;
->C1M4 : Symbol(I1.C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
+>C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
 >C1M4A1 : Symbol(C1M4A1, Decl(optionalParamArgsTest.ts, 12, 9))
 >C1M4A2 : Symbol(C1M4A2, Decl(optionalParamArgsTest.ts, 12, 23))
 }
@@= skipped -26, +26 lines =@@
 >p : Symbol(p, Decl(optionalParamArgsTest.ts, 17, 30))
 
     public n:number = 0;
->n : Symbol(C1.n, Decl(optionalParamArgsTest.ts, 17, 49))
+>n : Symbol(n, Decl(optionalParamArgsTest.ts, 17, 49))
 
     public C1M1() { return 0; } // returning C1M1A1 will result in "Unresolved symbol C1M1A1"
->C1M1 : Symbol(C1.C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
+>C1M1 : Symbol(C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
 
     public C1M2(C1M2A1:number) { return C1M2A1; } // will return C1M1A2 without complaint
->C1M2 : Symbol(C1.C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
+>C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
 >C1M2A1 : Symbol(C1M2A1, Decl(optionalParamArgsTest.ts, 22, 16))
 >C1M2A1 : Symbol(C1M2A1, Decl(optionalParamArgsTest.ts, 22, 16))
 
     // C1M3 contains all optional parameters
     public C1M3(C1M3A1:number=0,C1M3A2:number=C1M3A1) {return C1M3A1 + C1M3A2; }
->C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 >C1M3A1 : Symbol(C1M3A1, Decl(optionalParamArgsTest.ts, 25, 16))
 >C1M3A2 : Symbol(C1M3A2, Decl(optionalParamArgsTest.ts, 25, 32))
 >C1M3A1 : Symbol(C1M3A1, Decl(optionalParamArgsTest.ts, 25, 16))
@@= skipped -21, +21 lines =@@
 
     // C1M4 contains a mix of optional and non-optional parameters
     public C1M4(C1M4A1:number,C1M4A2?:number) { return C1M4A1 + C1M4A2; }
->C1M4 : Symbol(C1.C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
+>C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
 >C1M4A1 : Symbol(C1M4A1, Decl(optionalParamArgsTest.ts, 28, 16))
 >C1M4A2 : Symbol(C1M4A2, Decl(optionalParamArgsTest.ts, 28, 30))
 >C1M4A1 : Symbol(C1M4A1, Decl(optionalParamArgsTest.ts, 28, 16))
 >C1M4A2 : Symbol(C1M4A2, Decl(optionalParamArgsTest.ts, 28, 30))
 
     public C1M5(C1M5A1:number,C1M5A2:number=0,C1M5A3?:number) { return C1M5A1 + C1M5A2; }
->C1M5 : Symbol(C1.C1M5, Decl(optionalParamArgsTest.ts, 28, 73), Decl(optionalParamArgsTest.ts, 30, 89))
+>C1M5 : Symbol(C1M5, Decl(optionalParamArgsTest.ts, 28, 73), Decl(optionalParamArgsTest.ts, 30, 89))
 >C1M5A1 : Symbol(C1M5A1, Decl(optionalParamArgsTest.ts, 30, 16))
 >C1M5A2 : Symbol(C1M5A2, Decl(optionalParamArgsTest.ts, 30, 30))
 >C1M5A3 : Symbol(C1M5A3, Decl(optionalParamArgsTest.ts, 30, 46))
@@= skipped -16, +16 lines =@@
 
     // Uninitialized parameter makes the initialized one required
     public C1M5(C1M5A1:number,C1M5A2:number=0,C1M5A3:number) { return C1M5A1 + C1M5A2; }
->C1M5 : Symbol(C1.C1M5, Decl(optionalParamArgsTest.ts, 28, 73), Decl(optionalParamArgsTest.ts, 30, 89))
+>C1M5 : Symbol(C1M5, Decl(optionalParamArgsTest.ts, 28, 73), Decl(optionalParamArgsTest.ts, 30, 89))
 >C1M5A1 : Symbol(C1M5A1, Decl(optionalParamArgsTest.ts, 33, 16))
 >C1M5A2 : Symbol(C1M5A2, Decl(optionalParamArgsTest.ts, 33, 30))
 >C1M5A3 : Symbol(C1M5A3, Decl(optionalParamArgsTest.ts, 33, 46))
@@= skipped -80, +80 lines =@@
 
 // Valid
 c1o1.C1M1();
->c1o1.C1M1 : Symbol(C1.C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
+>c1o1.C1M1 : Symbol(C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M1 : Symbol(C1.C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
+>C1M1 : Symbol(C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
 
 var f1v1=F1();
 >f1v1 : Symbol(f1v1, Decl(optionalParamArgsTest.ts, 57, 3))
@@= skipped -14, +14 lines =@@
 
 // Valid
 c1o1.C1M2(1);
->c1o1.C1M2 : Symbol(C1.C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
+>c1o1.C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M2 : Symbol(C1.C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
+>C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
 
 i1o1.C1M2(1);
->i1o1.C1M2 : Symbol(I1.C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
+>i1o1.C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M2 : Symbol(I1.C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
+>C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
 
 var f2v1=F2(1);
 >f2v1 : Symbol(f2v1, Decl(optionalParamArgsTest.ts, 63, 3))
@@= skipped -19, +19 lines =@@
 
 // Valid
 c1o1.C1M3(1,2);
->c1o1.C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>c1o1.C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 
 i1o1.C1M3(1,2);
->i1o1.C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>i1o1.C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 
 var f3v1=F3(1,2);
 >f3v1 : Symbol(f3v1, Decl(optionalParamArgsTest.ts, 69, 3))
@@= skipped -19, +19 lines =@@
 
 // Valid
 c1o1.C1M4(1,2);
->c1o1.C1M4 : Symbol(C1.C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
+>c1o1.C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M4 : Symbol(C1.C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
+>C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
 
 i1o1.C1M4(1,2);
->i1o1.C1M4 : Symbol(I1.C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
+>i1o1.C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M4 : Symbol(I1.C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
+>C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
 
 var f4v1=F4(1,2);
 >f4v1 : Symbol(f4v1, Decl(optionalParamArgsTest.ts, 75, 3))
@@= skipped -19, +19 lines =@@
 
 // Valid
 c1o1.C1M3(1);
->c1o1.C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>c1o1.C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 
 i1o1.C1M3(1);
->i1o1.C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>i1o1.C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 
 var f3v2=F3(1);
 >f3v2 : Symbol(f3v2, Decl(optionalParamArgsTest.ts, 81, 3))
@@= skipped -19, +19 lines =@@
 
 // Valid 
 c1o1.C1M3();
->c1o1.C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>c1o1.C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 
 i1o1.C1M3();
->i1o1.C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>i1o1.C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 
 var f3v3=F3();
 >f3v3 : Symbol(f3v3, Decl(optionalParamArgsTest.ts, 87, 3))
@@= skipped -19, +19 lines =@@
 
 // Valid
 c1o1.C1M4(1);
->c1o1.C1M4 : Symbol(C1.C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
+>c1o1.C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M4 : Symbol(C1.C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
+>C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
 
 i1o1.C1M4(1);
->i1o1.C1M4 : Symbol(I1.C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
+>i1o1.C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M4 : Symbol(I1.C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
+>C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
 
 var f4v2=F4(1);
 >f4v2 : Symbol(f4v2, Decl(optionalParamArgsTest.ts, 93, 3))
@@= skipped -19, +19 lines =@@
 
 // Negative tests - we expect these cases to fail
 c1o1.C1M1(1);
->c1o1.C1M1 : Symbol(C1.C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
+>c1o1.C1M1 : Symbol(C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M1 : Symbol(C1.C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
+>C1M1 : Symbol(C1M1, Decl(optionalParamArgsTest.ts, 18, 24))
 
 i1o1.C1M1(1);
->i1o1.C1M1 : Symbol(I1.C1M1, Decl(optionalParamArgsTest.ts, 8, 14))
+>i1o1.C1M1 : Symbol(C1M1, Decl(optionalParamArgsTest.ts, 8, 14))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M1 : Symbol(I1.C1M1, Decl(optionalParamArgsTest.ts, 8, 14))
+>C1M1 : Symbol(C1M1, Decl(optionalParamArgsTest.ts, 8, 14))
 
 F1(1);
 >F1 : Symbol(F1, Decl(optionalParamArgsTest.ts, 40, 1))
@@= skipped -16, +16 lines =@@
 >L1 : Symbol(L1, Decl(optionalParamArgsTest.ts, 48, 3))
 
 c1o1.C1M2();
->c1o1.C1M2 : Symbol(C1.C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
+>c1o1.C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M2 : Symbol(C1.C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
+>C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
 
 i1o1.C1M2();
->i1o1.C1M2 : Symbol(I1.C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
+>i1o1.C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M2 : Symbol(I1.C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
+>C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
 
 F2();
 >F2 : Symbol(F2, Decl(optionalParamArgsTest.ts, 43, 27))
@@= skipped -16, +16 lines =@@
 >L2 : Symbol(L2, Decl(optionalParamArgsTest.ts, 49, 3))
 
 c1o1.C1M2(1,2);
->c1o1.C1M2 : Symbol(C1.C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
+>c1o1.C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M2 : Symbol(C1.C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
+>C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 20, 31))
 
 i1o1.C1M2(1,2);
->i1o1.C1M2 : Symbol(I1.C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
+>i1o1.C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M2 : Symbol(I1.C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
+>C1M2 : Symbol(C1M2, Decl(optionalParamArgsTest.ts, 9, 18))
 
 F2(1,2);
 >F2 : Symbol(F2, Decl(optionalParamArgsTest.ts, 43, 27))
@@= skipped -16, +16 lines =@@
 >L2 : Symbol(L2, Decl(optionalParamArgsTest.ts, 49, 3))
 
 c1o1.C1M3(1,2,3);
->c1o1.C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>c1o1.C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M3 : Symbol(C1.C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 22, 49))
 
 i1o1.C1M3(1,2,3);
->i1o1.C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>i1o1.C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M3 : Symbol(I1.C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
+>C1M3 : Symbol(C1M3, Decl(optionalParamArgsTest.ts, 10, 31))
 
 F3(1,2,3);
 >F3 : Symbol(F3, Decl(optionalParamArgsTest.ts, 44, 41))
@@= skipped -16, +16 lines =@@
 >L3 : Symbol(L3, Decl(optionalParamArgsTest.ts, 50, 3))
 
 c1o1.C1M4();
->c1o1.C1M4 : Symbol(C1.C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
+>c1o1.C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
 >c1o1 : Symbol(c1o1, Decl(optionalParamArgsTest.ts, 53, 3))
->C1M4 : Symbol(C1.C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
+>C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 25, 80))
 
 i1o1.C1M4();
->i1o1.C1M4 : Symbol(I1.C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
+>i1o1.C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
 >i1o1 : Symbol(i1o1, Decl(optionalParamArgsTest.ts, 54, 3))
->C1M4 : Symbol(I1.C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
+>C1M4 : Symbol(C1M4, Decl(optionalParamArgsTest.ts, 11, 47))
 
 F4();
 >F4 : Symbol(F4, Decl(optionalParamArgsTest.ts, 45, 52))
