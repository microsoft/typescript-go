--- old.unionOfEnumInference.types
+++ new.unionOfEnumInference.types
@@= skipped -9, +9 lines =@@
 >C : Enum.C
 
 interface Interface<T extends Enum> {
+>Interface : Interface<T>
+>T : T
+
 	type: T;
 >type : T
 }
 
 function foo<T extends Enum>(x: Interface<T>) { }
 >foo : <T extends Enum>(x: Interface<T>) => void
+>T : T
 >x : Interface<T>
 
 function bar(x: Interface<Enum.A | Enum.B> | Interface<Enum.C>) {
->bar : (x: Interface<Enum.A | Enum.B> | Interface<Enum.C>) => void
->x : Interface<Enum.A | Enum.B> | Interface<Enum.C>
+>bar : (x: Interface<Enum.C> | Interface<Enum.A | Enum.B>) => void
+>x : Interface<Enum.C> | Interface<Enum.A | Enum.B>
 >Enum : any
 >Enum : any
 >Enum : any
@@= skipped -18, +22 lines =@@
 	foo(x);
 >foo(x) : void
 >foo : <T extends Enum>(x: Interface<T>) => void
->x : Interface<Enum.A | Enum.B> | Interface<Enum.C>
+>x : Interface<Enum.C> | Interface<Enum.A | Enum.B>
 }
 
