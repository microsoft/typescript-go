--- old.declFileTypeAnnotationArrayType.js
+++ new.declFileTypeAnnotationArrayType.js
@@= skipped -52, +52 lines =@@
 }

 //// [declFileTypeAnnotationArrayType.js]
-var c = /** @class */ (function () {
-    function c() {
-    }
-    return c;
-}());
+class c {
+}
 var m;
 (function (m) {
-    var c = /** @class */ (function () {
-        function c() {
-        }
-        return c;
-    }());
+    class c {
+    }
     m.c = c;
-    var g = /** @class */ (function () {
-        function g() {
-        }
-        return g;
-    }());
+    class g {
+    }
     m.g = g;
 })(m || (m = {}));
-var g = /** @class */ (function () {
-    function g() {
-    }
-    return g;
-}());
+class g {
+}
 // Just the name
 function foo() {
     return [new c()];
@@= skipped -55, +43 lines =@@
 }
 // Array of function types
 function foo9() {
-    return [function () { return new c(); }];
+    return [() => new c()];
 }
 function foo10() {
-    return [function () { return new c(); }];
+    return [() => new c()];
 }


@@= skipped -18, +18 lines =@@
 }
 declare class g<T> {
 }
+// Just the name
 declare function foo(): c[];
 declare function foo2(): c[];
+// Qualified name
 declare function foo3(): m.c[];
 declare function foo4(): typeof m.c;
+// Just the name with type arguments
 declare function foo5(): g<string>[];
 declare function foo6(): g<string>[];
+// Qualified name with type arguments
 declare function foo7(): m.g<number>[];
 declare function foo8(): m.g<number>[];
+// Array of function types
 declare function foo9(): (() => c)[];
 declare function foo10(): (() => c)[];