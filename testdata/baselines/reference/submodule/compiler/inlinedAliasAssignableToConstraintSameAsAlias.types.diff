--- old.inlinedAliasAssignableToConstraintSameAsAlias.types
+++ new.inlinedAliasAssignableToConstraintSameAsAlias.types
@@= skipped -1, +1 lines =@@
 
 === inlinedAliasAssignableToConstraintSameAsAlias.ts ===
 interface RelationFields {
+>RelationFields : RelationFields
+
   x: A;
 >x : A
 
@@= skipped -14, +16 lines =@@
 
 type ShouldA<RF extends RelationFields, N extends Name> = RF[N] extends A[]
 >ShouldA : ShouldA<RF, N>
+>RF : RF
+>N : N
 
   ? RF[N][0]
   : never;
@@= skipped -17, +19 lines =@@
 >z : A[]
 
   whereRelated< // Works // Type is same as A1, but is not assignable to type A
->whereRelated : <RF extends RelationFields = RelationFields, N extends Name = keyof RelationFields, A1 extends A = RF[N] extends A[] ? RF[N][0] : never, A2 extends A = ShouldA<RF, N>>() => number
+>whereRelated : <RF extends RelationFields, N extends keyof RelationFields, A1 extends A, A2 extends A>() => number
 
     RF extends RelationFields = RelationFields,
+>RF : RF
+
     N extends Name = Name,
+>N : N
+
     A1 extends A = RF[N] extends A[] ? RF[N][0] : never,
+>A1 : A1
+
     A2 extends A = ShouldA<RF, N>
+>A2 : A2
+
   >(): number {
     return 1;
 >1 : 1
