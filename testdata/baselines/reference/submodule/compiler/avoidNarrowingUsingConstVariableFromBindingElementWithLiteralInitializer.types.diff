--- old.avoidNarrowingUsingConstVariableFromBindingElementWithLiteralInitializer.types
+++ new.avoidNarrowingUsingConstVariableFromBindingElementWithLiteralInitializer.types
@@= skipped -2, +2 lines =@@
 === avoidNarrowingUsingConstVariableFromBindingElementWithLiteralInitializer.ts ===
 declare const foo: ["a", string, number] | ["b", string, boolean];
 >foo : ["a", string, number] | ["b", string, boolean]
->    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 export function test(arg: { index?: number }) {
->test : (arg: { index?: number; }) => void
->     : ^   ^^                   ^^^^^^^^^
->arg : { index?: number; }
->    : ^^^^^^^^^^      ^^^
+>test : (arg: { index?: number | undefined; }) => void
+>arg : { index?: number | undefined; }
 >index : number | undefined
->      : ^^^^^^^^^^^^^^^^^^
 
   const { index = 0 } = arg;
 >index : number
->      : ^^^^^^
 >0 : 0
->  : ^
->arg : { index?: number; }
->    : ^^^^^^^^^^      ^^^
+>arg : { index?: number | undefined; }
 
   if (foo[index] === "a") {
 >foo[index] === "a" : boolean
->                   : ^^^^^^^
 >foo[index] : string | number | boolean
->           : ^^^^^^^^^^^^^^^^^^^^^^^^^
 >foo : ["a", string, number] | ["b", string, boolean]
->    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 >index : number
->      : ^^^^^^
 >"a" : "a"
->    : ^^^
 
     foo;
 >foo : ["a", string, number] | ["b", string, boolean]
->    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   }
 }
 
