--- old.functionLikeInParameterInitializer.types
+++ new.functionLikeInParameterInitializer.types
@@= skipped -2, +2 lines =@@
 === functionLikeInParameterInitializer.ts ===
 // error
 export function bar(func = () => foo) {
->bar : (func?: () => any) => void
->func : () => any
->() => foo : () => any
->foo : any
+>bar : (func?: () => string) => void
+>func : () => string
+>() => foo : () => string
+>foo : string

     let foo = "in";
 >foo : string
@@= skipped -11, +11 lines =@@
 }
 // error
 export function baz1(func = { f() { return foo } }) {
->baz1 : (func?: { f(): any; }) => void
->func : { f(): any; }
->{ f() { return foo } } : { f(): any; }
->f : () => any
->foo : any
+>baz1 : (func?: { f(): string; }) => void
+>func : { f(): string; }
+>{ f() { return foo } } : { f(): string; }
+>f : () => string
+>foo : string

     let foo = "in";
 >foo : string
@@= skipped -13, +13 lines =@@

 // error
 export function baz2(func = function () { return foo }) {
->baz2 : (func?: () => any) => void
->func : () => any
->function () { return foo } : () => any
->foo : any
+>baz2 : (func?: () => string) => void
+>func : () => string
+>function () { return foo } : () => string
+>foo : string

     let foo = "in";
 >foo : string
@@= skipped -15, +15 lines =@@
 >baz3 : (func?: typeof (Anonymous class)) => void
 >func : typeof (Anonymous class)
 >class { x = foo } : typeof (Anonymous class)
->x : any
->foo : any
+>x : string
+>foo : string

     let foo = "in";
 >foo : string