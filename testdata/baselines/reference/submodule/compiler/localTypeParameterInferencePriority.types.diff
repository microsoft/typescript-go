--- old.localTypeParameterInferencePriority.types
+++ new.localTypeParameterInferencePriority.types
@@= skipped -2, +2 lines =@@
 === localTypeParameterInferencePriority.ts ===
 export type UnrollOnHover<O extends object> = O extends object ?
 >UnrollOnHover : UnrollOnHover<O>
+>O : O
 
     { [K in keyof O]: O[K]; } :
+>K : K
+
     never;
 
 
@@= skipped -10, +13 lines =@@
 
 class Table<S extends Schema>  {
 >Table : Table<S>
+>S : S
 
     __schema!: S;
 >__schema : S
 
     // Removing this line, removes the error 
     getRows<C extends keyof S>(): Array<UnrollOnHover<Pick<S, C>>> {
->getRows : <C extends keyof S>() => Array<UnrollOnHover<Pick<S, C>>>
+>getRows : <C extends keyof S>() => UnrollOnHover<Pick<S, C>>[]
+>C : C
 
         return null!
 >null! : null
@@= skipped -15, +17 lines =@@
 
 class ColumnSelectViewImp<S extends Schema> extends Table<S> { }
 >ColumnSelectViewImp : ColumnSelectViewImp<S>
+>S : S
 >Table : Table<S>
 
 
 const ColumnSelectView1: new <S extends Schema>() => Table<UnrollOnHover<S>> = ColumnSelectViewImp;
 >ColumnSelectView1 : new <S extends Schema>() => Table<UnrollOnHover<S>>
+>S : S
 >ColumnSelectViewImp : typeof ColumnSelectViewImp
 
 const ColumnSelectView2: new <S extends Schema>() => Table<UnrollOnHover<S>> = Table;
 >ColumnSelectView2 : new <S extends Schema>() => Table<UnrollOnHover<S>>
+>S : S
 >Table : typeof Table
 
