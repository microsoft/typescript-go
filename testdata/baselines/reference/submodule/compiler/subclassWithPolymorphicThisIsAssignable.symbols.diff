--- old.subclassWithPolymorphicThisIsAssignable.symbols
+++ new.subclassWithPolymorphicThisIsAssignable.symbols
@@= skipped -5, +5 lines =@@
 >Document : Symbol(Document, Decl(subclassWithPolymorphicThisIsAssignable.ts, 0, 0))
 
     increment(): this;
->increment : Symbol(Document.increment, Decl(subclassWithPolymorphicThisIsAssignable.ts, 1, 20))
+>increment : Symbol(increment, Decl(subclassWithPolymorphicThisIsAssignable.ts, 1, 20))
 }
 
 /* our custom model extends the mongoose document */
@@= skipped -16, +16 lines =@@
     constructor() {
         // types of increment not compatible??
         this.test<Z>();
->this.test : Symbol(Example.test, Decl(subclassWithPolymorphicThisIsAssignable.ts, 12, 5))
+>this.test : Symbol(test, Decl(subclassWithPolymorphicThisIsAssignable.ts, 12, 5))
 >this : Symbol(Example, Decl(subclassWithPolymorphicThisIsAssignable.ts, 6, 45))
->test : Symbol(Example.test, Decl(subclassWithPolymorphicThisIsAssignable.ts, 12, 5))
+>test : Symbol(test, Decl(subclassWithPolymorphicThisIsAssignable.ts, 12, 5))
 >Z : Symbol(Z, Decl(subclassWithPolymorphicThisIsAssignable.ts, 8, 21))
     }
 
     public test<Z extends Document>() { }
->test : Symbol(Example.test, Decl(subclassWithPolymorphicThisIsAssignable.ts, 12, 5))
+>test : Symbol(test, Decl(subclassWithPolymorphicThisIsAssignable.ts, 12, 5))
 >Z : Symbol(Z, Decl(subclassWithPolymorphicThisIsAssignable.ts, 14, 16))
 >Document : Symbol(Document, Decl(subclassWithPolymorphicThisIsAssignable.ts, 0, 0))
 }
