--- old.indexedAccessNormalization.types
+++ new.indexedAccessNormalization.types
@@= skipped -4, +4 lines =@@
 
 type MyMap<M extends object> = {
 >MyMap : MyMap<M>
+>M : M
 
     [K in keyof M]: {
+>K : K
+
         x: number
 >x : number
     }
 }
 
 declare function g<T>(value?: T): void;
->g : <T>(value?: T) => void
+>g : <T>(value?: T | undefined) => void
+>T : T
 >value : T | undefined
 
 function f1<M extends object>(mymap: MyMap<M>, k: keyof M) {
 >f1 : <M extends object>(mymap: MyMap<M>, k: keyof M) => void
+>M : M
 >mymap : MyMap<M>
 >k : keyof M
 
@@= skipped -24, +29 lines =@@
 
     g(elemofM);
 >g(elemofM) : void
->g : <T>(value?: T) => void
+>g : <T>(value?: T | undefined) => void
 >elemofM : MyMap<M>[keyof M]
 }
 
 function f2<M extends object>(mymap: MyMap<M>, k: keyof M, z: { x: number }) {
 >f2 : <M extends object>(mymap: MyMap<M>, k: keyof M, z: { x: number; }) => void
+>M : M
 >mymap : MyMap<M>
 >k : keyof M
 >z : { x: number; }
