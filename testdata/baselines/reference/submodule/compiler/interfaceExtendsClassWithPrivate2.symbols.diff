--- old.interfaceExtendsClassWithPrivate2.symbols
+++ new.interfaceExtendsClassWithPrivate2.symbols
@@= skipped -4, +4 lines =@@
 >C : Symbol(C, Decl(interfaceExtendsClassWithPrivate2.ts, 0, 0))
 
     public foo(x: any) { return x; }
->foo : Symbol(C.foo, Decl(interfaceExtendsClassWithPrivate2.ts, 0, 9))
+>foo : Symbol(foo, Decl(interfaceExtendsClassWithPrivate2.ts, 0, 9))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 1, 15))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 1, 15))
 
     private x = 1;
->x : Symbol(C.x, Decl(interfaceExtendsClassWithPrivate2.ts, 1, 36))
+>x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 1, 36))
 }
 
 interface I extends C {
@@= skipped -13, +13 lines =@@
 >C : Symbol(C, Decl(interfaceExtendsClassWithPrivate2.ts, 0, 0))
 
     other(x: any): any;
->other : Symbol(I.other, Decl(interfaceExtendsClassWithPrivate2.ts, 5, 23))
+>other : Symbol(other, Decl(interfaceExtendsClassWithPrivate2.ts, 5, 23))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 6, 10))
 }
 
@@= skipped -10, +10 lines =@@
 >I : Symbol(I, Decl(interfaceExtendsClassWithPrivate2.ts, 3, 1))
 
     public foo(x: any) { return x; }
->foo : Symbol(D.foo, Decl(interfaceExtendsClassWithPrivate2.ts, 9, 32))
+>foo : Symbol(foo, Decl(interfaceExtendsClassWithPrivate2.ts, 9, 32))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 10, 15))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 10, 15))
 
     private x = 2;
->x : Symbol(D.x, Decl(interfaceExtendsClassWithPrivate2.ts, 10, 36))
+>x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 10, 36))
 
     private y = 3;
->y : Symbol(D.y, Decl(interfaceExtendsClassWithPrivate2.ts, 11, 18))
+>y : Symbol(y, Decl(interfaceExtendsClassWithPrivate2.ts, 11, 18))
 
     other(x: any) { return x; }
->other : Symbol(D.other, Decl(interfaceExtendsClassWithPrivate2.ts, 12, 18))
+>other : Symbol(other, Decl(interfaceExtendsClassWithPrivate2.ts, 12, 18))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 13, 10))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 13, 10))
 
     bar() {}
->bar : Symbol(D.bar, Decl(interfaceExtendsClassWithPrivate2.ts, 13, 31))
+>bar : Symbol(bar, Decl(interfaceExtendsClassWithPrivate2.ts, 13, 31))
 } 
 
 class D2 extends C implements I { // error
@@= skipped -25, +25 lines =@@
 >I : Symbol(I, Decl(interfaceExtendsClassWithPrivate2.ts, 3, 1))
 
     public foo(x: any) { return x; }
->foo : Symbol(D2.foo, Decl(interfaceExtendsClassWithPrivate2.ts, 17, 33))
+>foo : Symbol(foo, Decl(interfaceExtendsClassWithPrivate2.ts, 17, 33))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 18, 15))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 18, 15))
 
     private x = "";
->x : Symbol(D2.x, Decl(interfaceExtendsClassWithPrivate2.ts, 18, 36))
+>x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 18, 36))
 
     other(x: any) { return x; }
->other : Symbol(D2.other, Decl(interfaceExtendsClassWithPrivate2.ts, 19, 19))
+>other : Symbol(other, Decl(interfaceExtendsClassWithPrivate2.ts, 19, 19))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 20, 10))
 >x : Symbol(x, Decl(interfaceExtendsClassWithPrivate2.ts, 20, 10))
 
     bar() { }
->bar : Symbol(D2.bar, Decl(interfaceExtendsClassWithPrivate2.ts, 20, 31))
+>bar : Symbol(bar, Decl(interfaceExtendsClassWithPrivate2.ts, 20, 31))
 } 
