--- old.augmentedTypesModules.symbols
+++ new.augmentedTypesModules.symbols
@@= skipped -26, +26 lines =@@
 
     export interface I { foo(): void; }
 >I : Symbol(I, Decl(augmentedTypesModules.ts, 10, 12))
->foo : Symbol(I.foo, Decl(augmentedTypesModules.ts, 11, 24))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 11, 24))
 }
 var m1c = 1; // Should be allowed
 >m1c : Symbol(m1c, Decl(augmentedTypesModules.ts, 8, 12), Decl(augmentedTypesModules.ts, 13, 3))
@@= skipped -10, +10 lines =@@
 
     export class I { foo() { } }
 >I : Symbol(I, Decl(augmentedTypesModules.ts, 15, 12))
->foo : Symbol(I.foo, Decl(augmentedTypesModules.ts, 16, 20))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 16, 20))
 }
 var m1d = 1; // error
 >m1d : Symbol(m1d, Decl(augmentedTypesModules.ts, 18, 3))
@@= skipped -52, +52 lines =@@
 module m2f { export interface I { foo(): void } } 
 >m2f : Symbol(m2f, Decl(augmentedTypesModules.ts, 38, 14), Decl(augmentedTypesModules.ts, 40, 19))
 >I : Symbol(I, Decl(augmentedTypesModules.ts, 41, 12))
->foo : Symbol(I.foo, Decl(augmentedTypesModules.ts, 41, 33))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 41, 33))
 
 function m2g() { };
 >m2g : Symbol(m2g, Decl(augmentedTypesModules.ts, 41, 49), Decl(augmentedTypesModules.ts, 43, 19))
@@= skipped -8, +8 lines =@@
 module m2g { export class C { foo() { } } } 
 >m2g : Symbol(m2g, Decl(augmentedTypesModules.ts, 41, 49), Decl(augmentedTypesModules.ts, 43, 19))
 >C : Symbol(C, Decl(augmentedTypesModules.ts, 44, 12))
->foo : Symbol(C.foo, Decl(augmentedTypesModules.ts, 44, 29))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 44, 29))
 
 // module then class
 module m3 { }
@@= skipped -15, +15 lines =@@
 
 class m3a { foo() { } } // error, class isn't ambient or declared before the module
 >m3a : Symbol(m3a, Decl(augmentedTypesModules.ts, 48, 12), Decl(augmentedTypesModules.ts, 50, 25))
->foo : Symbol(m3a.foo, Decl(augmentedTypesModules.ts, 51, 11))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 51, 11))
 
 class m3b { foo() { } }
 >m3b : Symbol(m3b, Decl(augmentedTypesModules.ts, 51, 23), Decl(augmentedTypesModules.ts, 53, 23))
->foo : Symbol(m3b.foo, Decl(augmentedTypesModules.ts, 53, 11))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 53, 11))
 
 module m3b { var y = 2; }
 >m3b : Symbol(m3b, Decl(augmentedTypesModules.ts, 51, 23), Decl(augmentedTypesModules.ts, 53, 23))
@@= skipped -12, +12 lines =@@
 
 class m3c { foo() { } }
 >m3c : Symbol(m3c, Decl(augmentedTypesModules.ts, 54, 25), Decl(augmentedTypesModules.ts, 56, 23))
->foo : Symbol(m3c.foo, Decl(augmentedTypesModules.ts, 56, 11))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 56, 11))
 
 module m3c { export var y = 2; } 
 >m3c : Symbol(m3c, Decl(augmentedTypesModules.ts, 54, 25), Decl(augmentedTypesModules.ts, 56, 23))
@@= skipped -8, +8 lines =@@
 
 declare class m3d { foo(): void }
 >m3d : Symbol(m3d, Decl(augmentedTypesModules.ts, 57, 32), Decl(augmentedTypesModules.ts, 59, 33))
->foo : Symbol(m3d.foo, Decl(augmentedTypesModules.ts, 59, 19))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 59, 19))
 
 module m3d { export var y = 2; } 
 >m3d : Symbol(m3d, Decl(augmentedTypesModules.ts, 57, 32), Decl(augmentedTypesModules.ts, 59, 33))
@@= skipped -12, +12 lines =@@
 
 declare class m3e { foo(): void } 
 >m3e : Symbol(m3e, Decl(augmentedTypesModules.ts, 60, 32), Decl(augmentedTypesModules.ts, 62, 32))
->foo : Symbol(m3e.foo, Decl(augmentedTypesModules.ts, 63, 19))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 63, 19))
 
 declare class m3f { foo(): void }
 >m3f : Symbol(m3f, Decl(augmentedTypesModules.ts, 63, 33), Decl(augmentedTypesModules.ts, 65, 33))
->foo : Symbol(m3f.foo, Decl(augmentedTypesModules.ts, 65, 19))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 65, 19))
 
 module m3f { export interface I { foo(): void } }
 >m3f : Symbol(m3f, Decl(augmentedTypesModules.ts, 63, 33), Decl(augmentedTypesModules.ts, 65, 33))
 >I : Symbol(I, Decl(augmentedTypesModules.ts, 66, 12))
->foo : Symbol(I.foo, Decl(augmentedTypesModules.ts, 66, 33))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 66, 33))
 
 declare class m3g { foo(): void }
 >m3g : Symbol(m3g, Decl(augmentedTypesModules.ts, 66, 49), Decl(augmentedTypesModules.ts, 68, 33))
->foo : Symbol(m3g.foo, Decl(augmentedTypesModules.ts, 68, 19))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 68, 19))
 
 module m3g { export class C { foo() { } } }
 >m3g : Symbol(m3g, Decl(augmentedTypesModules.ts, 66, 49), Decl(augmentedTypesModules.ts, 68, 33))
 >C : Symbol(C, Decl(augmentedTypesModules.ts, 69, 12))
->foo : Symbol(C.foo, Decl(augmentedTypesModules.ts, 69, 29))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 69, 29))
 
 // module then enum
 // should be errors
@@= skipped -34, +34 lines =@@
 
 enum m4a { One }
 >m4a : Symbol(m4a, Decl(augmentedTypesModules.ts, 74, 11), Decl(augmentedTypesModules.ts, 76, 25))
->One : Symbol(m4a.One, Decl(augmentedTypesModules.ts, 77, 10))
+>One : Symbol(One, Decl(augmentedTypesModules.ts, 77, 10))
 
 module m4b { export var y = 2; }
 >m4b : Symbol(m4b, Decl(augmentedTypesModules.ts, 77, 16), Decl(augmentedTypesModules.ts, 79, 32))
@@= skipped -8, +8 lines =@@
 
 enum m4b { One }
 >m4b : Symbol(m4b, Decl(augmentedTypesModules.ts, 77, 16), Decl(augmentedTypesModules.ts, 79, 32))
->One : Symbol(m4b.One, Decl(augmentedTypesModules.ts, 80, 10))
+>One : Symbol(One, Decl(augmentedTypesModules.ts, 80, 10))
 
 module m4c { interface I { foo(): void } }
 >m4c : Symbol(m4c, Decl(augmentedTypesModules.ts, 80, 16), Decl(augmentedTypesModules.ts, 82, 42))
 >I : Symbol(I, Decl(augmentedTypesModules.ts, 82, 12))
->foo : Symbol(I.foo, Decl(augmentedTypesModules.ts, 82, 26))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 82, 26))
 
 enum m4c { One }
 >m4c : Symbol(m4c, Decl(augmentedTypesModules.ts, 80, 16), Decl(augmentedTypesModules.ts, 82, 42))
->One : Symbol(m4c.One, Decl(augmentedTypesModules.ts, 83, 10))
+>One : Symbol(One, Decl(augmentedTypesModules.ts, 83, 10))
 
 module m4d { class C { foo() { } } }
 >m4d : Symbol(m4d, Decl(augmentedTypesModules.ts, 83, 16), Decl(augmentedTypesModules.ts, 85, 36))
 >C : Symbol(C, Decl(augmentedTypesModules.ts, 85, 12))
->foo : Symbol(C.foo, Decl(augmentedTypesModules.ts, 85, 22))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 85, 22))
 
 enum m4d { One }
 >m4d : Symbol(m4d, Decl(augmentedTypesModules.ts, 83, 16), Decl(augmentedTypesModules.ts, 85, 36))
->One : Symbol(m4d.One, Decl(augmentedTypesModules.ts, 86, 10))
+>One : Symbol(One, Decl(augmentedTypesModules.ts, 86, 10))
 
 //// module then module
 
@@= skipped -29, +29 lines =@@
 module m5 { export interface I { foo(): void } } // should already be reasonably well covered
 >m5 : Symbol(m5, Decl(augmentedTypesModules.ts, 86, 16), Decl(augmentedTypesModules.ts, 90, 31))
 >I : Symbol(I, Decl(augmentedTypesModules.ts, 91, 11))
->foo : Symbol(I.foo, Decl(augmentedTypesModules.ts, 91, 32))
+>foo : Symbol(foo, Decl(augmentedTypesModules.ts, 91, 32))
 
 // module then import
 module m6 { export var y = 2; }
