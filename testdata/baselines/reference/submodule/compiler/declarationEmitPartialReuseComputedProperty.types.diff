--- old.declarationEmitPartialReuseComputedProperty.types
+++ new.declarationEmitPartialReuseComputedProperty.types
@@= skipped -14, +14 lines =@@
 >1 : 1
 
 export const o = () => null! as { [n]: string, foo: string, [poz]: number, [neg]: number }
->o : () => { [n]: string; foo: string; [poz]: number; [neg]: number; }
->() => null! as { [n]: string, foo: string, [poz]: number, [neg]: number } : () => { [n]: string; foo: string; [poz]: number; [neg]: number; }
->null! as { [n]: string, foo: string, [poz]: number, [neg]: number } : { foo: string; A: string; 1: number; [-1]: number; }
+>o : () => { [neg]: number; [poz]: number; A: string; foo: string; }
+>() => null! as { [n]: string, foo: string, [poz]: number, [neg]: number } : () => { [neg]: number; [poz]: number; A: string; foo: string; }
+>null! as { [n]: string, foo: string, [poz]: number, [neg]: number } : { [neg]: number; [poz]: number; A: string; foo: string; }
 >null! : never
 >[n] : string
 >n : "A"
@@= skipped -14, +14 lines =@@
 
 === b.ts ===
 import { o } from "./a";
->o : () => { A: string; foo: string; 1: number; [-1]: number; }
+>o : () => { [neg]: number; [poz]: number; A: string; foo: string; }
 
 export const g = o
->g : () => { A: string; foo: string; 1: number; [-1]: number; }
->o : () => { A: string; foo: string; 1: number; [-1]: number; }
+>g : () => { [neg]: number; [poz]: number; A: string; foo: string; }
+>o : () => { [neg]: number; [poz]: number; A: string; foo: string; }
 
