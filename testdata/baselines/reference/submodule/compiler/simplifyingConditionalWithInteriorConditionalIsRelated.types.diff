--- old.simplifyingConditionalWithInteriorConditionalIsRelated.types
+++ new.simplifyingConditionalWithInteriorConditionalIsRelated.types
@@= skipped -3, +3 lines =@@
 // from https://github.com/microsoft/TypeScript/issues/30706
 type ConditionalType<T> = T extends string ? string : number;
 >ConditionalType : ConditionalType<T>
+>T : T
 
 function ConditionalOrUndefined<T>(): ConditionalType<T> | undefined {
 >ConditionalOrUndefined : <T>() => ConditionalType<T> | undefined
+>T : T
 
     return 0 as any;
 >0 as any : any
@@= skipped -11, +13 lines =@@
 
 function JustConditional<T>(): ConditionalType<T> {
 >JustConditional : <T>() => ConditionalType<T>
+>T : T
 
     return ConditionalOrUndefined<T>()!; // shouldn't error
 >ConditionalOrUndefined<T>()! : ConditionalType<T>
 >ConditionalOrUndefined<T>() : ConditionalType<T> | undefined
->ConditionalOrUndefined : <T_1>() => ConditionalType<T_1> | undefined
+>ConditionalOrUndefined : <T>() => ConditionalType<T> | undefined
 }
 
 
 // For comparison...
 function genericOrUndefined<T>(): T | undefined {
 >genericOrUndefined : <T>() => T | undefined
+>T : T
 
     return 0 as any;
 >0 as any : any
@@= skipped -19, +21 lines =@@
 
 function JustGeneric<T>(): T {
 >JustGeneric : <T>() => T
+>T : T
 
     return genericOrUndefined<T>()!; // no error
 >genericOrUndefined<T>()! : NonNullable<T>
 >genericOrUndefined<T>() : T | undefined
->genericOrUndefined : <T_1>() => T_1 | undefined
+>genericOrUndefined : <T>() => T | undefined
 }
 
 // Simplified example:
 
 function f<T>() {
 >f : <T>() => void
+>T : T
 
     type One = T extends string ? string : string;
->One : T extends string ? string : string
+>One : One
 
     type A = T extends number ? One : never;
->A : T extends number ? T extends string ? string : string : never
+>A : A
 
     const x: One = null as any as A;
->x : T extends string ? string : string
->null as any as A : T extends number ? T extends string ? string : string : never
+>x : One
+>null as any as A : A
 >null as any : any
 }
 
