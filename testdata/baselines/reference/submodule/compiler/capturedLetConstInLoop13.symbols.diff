--- old.capturedLetConstInLoop13.symbols
+++ new.capturedLetConstInLoop13.symbols
@@= skipped -5, +5 lines =@@
 
     constructor() {
         this.register("a", "b", "c");
->this.register : Symbol(Main.register, Decl(capturedLetConstInLoop13.ts, 4, 5))
+>this.register : Symbol(register, Decl(capturedLetConstInLoop13.ts, 4, 5))
 >this : Symbol(Main, Decl(capturedLetConstInLoop13.ts, 0, 0))
->register : Symbol(Main.register, Decl(capturedLetConstInLoop13.ts, 4, 5))
+>register : Symbol(register, Decl(capturedLetConstInLoop13.ts, 4, 5))
     }
 
     private register(...names: string[]): void {
->register : Symbol(Main.register, Decl(capturedLetConstInLoop13.ts, 4, 5))
+>register : Symbol(register, Decl(capturedLetConstInLoop13.ts, 4, 5))
 >names : Symbol(names, Decl(capturedLetConstInLoop13.ts, 6, 21))
 
         for (let name of names) {
@@= skipped -14, +14 lines =@@
 >names : Symbol(names, Decl(capturedLetConstInLoop13.ts, 6, 21))
 
             this.bar({
->this.bar : Symbol(Main.bar, Decl(capturedLetConstInLoop13.ts, 13, 5))
+>this.bar : Symbol(bar, Decl(capturedLetConstInLoop13.ts, 13, 5))
 >this : Symbol(Main, Decl(capturedLetConstInLoop13.ts, 0, 0))
->bar : Symbol(Main.bar, Decl(capturedLetConstInLoop13.ts, 13, 5))
+>bar : Symbol(bar, Decl(capturedLetConstInLoop13.ts, 13, 5))
 
                 [name + ".a"]: () => { this.foo(name); },
 >[name + ".a"] : Symbol([name + ".a"], Decl(capturedLetConstInLoop13.ts, 9, 22))
 >name : Symbol(name, Decl(capturedLetConstInLoop13.ts, 7, 16))
->this.foo : Symbol(Main.foo, Decl(capturedLetConstInLoop13.ts, 15, 33))
+>this.foo : Symbol(foo, Decl(capturedLetConstInLoop13.ts, 15, 33))
 >this : Symbol(Main, Decl(capturedLetConstInLoop13.ts, 0, 0))
->foo : Symbol(Main.foo, Decl(capturedLetConstInLoop13.ts, 15, 33))
+>foo : Symbol(foo, Decl(capturedLetConstInLoop13.ts, 15, 33))
 >name : Symbol(name, Decl(capturedLetConstInLoop13.ts, 7, 16))
 
             });
@@= skipped -17, +17 lines =@@
     }
 
     private bar(a: any): void { }
->bar : Symbol(Main.bar, Decl(capturedLetConstInLoop13.ts, 13, 5))
+>bar : Symbol(bar, Decl(capturedLetConstInLoop13.ts, 13, 5))
 >a : Symbol(a, Decl(capturedLetConstInLoop13.ts, 15, 16))
 
     private foo(name: string): void { }
->foo : Symbol(Main.foo, Decl(capturedLetConstInLoop13.ts, 15, 33))
+>foo : Symbol(foo, Decl(capturedLetConstInLoop13.ts, 15, 33))
 >name : Symbol(name, Decl(capturedLetConstInLoop13.ts, 17, 16))
 
 }
