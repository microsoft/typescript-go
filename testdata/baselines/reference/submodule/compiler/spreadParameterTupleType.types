//// [tests/cases/compiler/spreadParameterTupleType.ts] ////

=== spreadParameterTupleType.ts ===
function f1() {
>f1 : () => (...args: [s: string, s: string]) => void

    type A = [s: string];
>A : [s: string]

    type C = [...A, ...A];
>C : [s: string, s: string]

    return function fn(...args: C) { } satisfies any
>function fn(...args: C) { } satisfies any : (...args: [s: string, s: string]) => void
>function fn(...args: C) { } : (...args: [s: string, s: string]) => void
>fn : (...args: [s: string, s: string]) => void
>args : [s: string, s: string]
}

function f2() {
>f2 : () => (...args: [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]) => void

    type A = [a: string];
>A : [a: string]

    type B = [b: string];
>B : [b: string]

    type C = [c: string];
>C : [c: string]

    type D = [...A, ...A, ...B, ...A, ...B, ...B, ...A, ...C];
>D : [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]

    return function fn(...args: D) { } satisfies any;
>function fn(...args: D) { } satisfies any : (...args: [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]) => void
>function fn(...args: D) { } : (...args: [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]) => void
>fn : (...args: [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]) => void
>args : [a: string, a: string, b: string, a: string, b: string, b: string, a: string, c: string]
}

