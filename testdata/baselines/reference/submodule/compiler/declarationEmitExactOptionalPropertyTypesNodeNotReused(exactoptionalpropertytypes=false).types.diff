--- old.declarationEmitExactOptionalPropertyTypesNodeNotReused(exactoptionalpropertytypes=false).types
+++ new.declarationEmitExactOptionalPropertyTypesNodeNotReused(exactoptionalpropertytypes=false).types
@@= skipped -2, +2 lines =@@
 === declarationEmitExactOptionalPropertyTypesNodeNotReused.ts ===
 type InexactOptionals<A> = {
 >InexactOptionals : InexactOptionals<A>
+>A : A
 
     [K in keyof A as undefined extends A[K] ? K : never]?: undefined extends A[K]
+>K : K
+
     ? A[K] | undefined
     : A[K];
 } & {
     [K in keyof A as undefined extends A[K] ? never : K]: A[K];
+>K : K
+
 };
 
 type In = {
@@= skipped -25, +30 lines =@@
 >Out : Out
 
 const foo = <A = {}>() => (x: Out & A) => null
->foo : <A = {}>() => (x: Out & A) => null
-><A = {}>() => (x: Out & A) => null : <A = {}>() => (x: Out & A) => null
->(x: Out & A) => null : (x: Out & A) => null
+>foo : <A>() => (x: { foo?: string | undefined; baz?: undefined; } & { bar: number; } & A) => null
+><A = {}>() => (x: Out & A) => null : <A>() => (x: { foo?: string | undefined; baz?: undefined; } & { bar: number; } & A) => null
+>A : A
+>(x: Out & A) => null : (x: { foo?: string | undefined; baz?: undefined; } & { bar: number; } & A) => null
 >x : { foo?: string | undefined; baz?: undefined; } & { bar: number; } & A
 
 export const baddts = foo()
 >baddts : (x: { foo?: string | undefined; baz?: undefined; } & { bar: number; }) => null
 >foo() : (x: { foo?: string | undefined; baz?: undefined; } & { bar: number; }) => null
->foo : <A = {}>() => (x: Out & A) => null
+>foo : <A>() => (x: { foo?: string | undefined; baz?: undefined; } & { bar: number; } & A) => null
 
