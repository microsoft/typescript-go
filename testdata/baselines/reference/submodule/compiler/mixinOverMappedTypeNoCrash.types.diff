--- old.mixinOverMappedTypeNoCrash.types
+++ new.mixinOverMappedTypeNoCrash.types
@@= skipped -2, +2 lines =@@
 === mixinOverMappedTypeNoCrash.ts ===
 export type ClassInterface<C> = {
 >ClassInterface : ClassInterface<C>
+>C : C
 
     [key in keyof C]: C[key];
+>key : key
 }
 
 type InstanceInterface<I> = {
 >InstanceInterface : InstanceInterface<I>
+>I : I
 
     new(...args: any[]): I
 >args : any[]
@@= skipped -16, +19 lines =@@
 
 type Constructor<I extends Object, C = any> = ClassInterface<C> & InstanceInterface<I>
 >Constructor : Constructor<I, C>
+>I : I
+>C : C
 
 function cloneClass<T extends Constructor<{}>>(OriginalClass: T): T {
->cloneClass : <T extends Constructor<{}>>(OriginalClass: T) => T
+>cloneClass : <T extends Constructor<{}, any>>(OriginalClass: T) => T
+>T : T
 >OriginalClass : T
 
     class AnotherOriginalClass extends OriginalClass {
->AnotherOriginalClass : AnotherOriginalClass
+>AnotherOriginalClass : AnotherOriginalClass<T>
 >OriginalClass : {}
 
         constructor(...args: any[]) {
@@= skipped -20, +23 lines =@@
         }
     }
     return AnotherOriginalClass
->AnotherOriginalClass : { new (...args: any[]): AnotherOriginalClass; prototype: cloneClass<any>.AnotherOriginalClass; } & T
+>AnotherOriginalClass : { new (...args: any[]): AnotherOriginalClass<T>; prototype: AnotherOriginalClass<any>; } & T
 }
