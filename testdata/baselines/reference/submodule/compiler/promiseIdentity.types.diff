--- old.promiseIdentity.types
+++ new.promiseIdentity.types
@@= skipped -1, +1 lines =@@
 
 === promiseIdentity.ts ===
 export interface IPromise<T> {
+>IPromise : IPromise<T>
+>T : T
+
     then<U>(callback: (x: T) => IPromise<U>): IPromise<U>;
 >then : <U>(callback: (x: T) => IPromise<U>) => IPromise<U>
+>U : U
 >callback : (x: T) => IPromise<U>
 >x : T
 }
 interface Promise<T> {
+>Promise : Promise<T>
+>T : T
+
     then<U>(callback: (x: T) => Promise<U>): Promise<U>;
 >then : <U>(callback: (x: T) => Promise<U>) => Promise<U>
+>U : U
 >callback : (x: T) => Promise<U>
 >x : T
 }
@@= skipped -19, +27 lines =@@
 
 
 interface IPromise2<T, V> {
+>IPromise2 : IPromise2<T, V>
+>T : T
+>V : V
+
     then<U, W>(callback: (x: T) => IPromise2<U, W>): IPromise2<W, U>;
 >then : <U, W>(callback: (x: T) => IPromise2<U, W>) => IPromise2<W, U>
+>U : U
+>W : W
 >callback : (x: T) => IPromise2<U, W>
 >x : T
 }
 interface Promise2<T, V> {
+>Promise2 : Promise2<T, V>
+>T : T
+>V : V
+
     then<U, W>(callback: (x: V) => Promise2<U, T>): Promise2<T, W>; // Uses V instead of T in callback's parameter
 >then : <U, W>(callback: (x: V) => Promise2<U, T>) => Promise2<T, W>
+>U : U
+>W : W
 >callback : (x: V) => Promise2<U, T>
 >x : V
 }
