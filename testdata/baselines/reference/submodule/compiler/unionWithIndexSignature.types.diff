--- old.unionWithIndexSignature.types
+++ new.unionWithIndexSignature.types
@@= skipped -1, +1 lines =@@
 
 === unionWithIndexSignature.ts ===
 interface NumList {
+>NumList : NumList
+
   kind: 'n';
 >kind : "n"
 
@@= skipped -7, +9 lines =@@
 >x : number
 }
 interface StrList {
+>StrList : StrList
+
   kind: 's';
 >kind : "s"
 
@@= skipped -9, +11 lines =@@
 
 export function foo<T extends NumList | StrList>(arr: T & (NumList | StrList)) {
 >foo : <T extends NumList | StrList>(arr: T & (NumList | StrList)) => void
+>T : T
 >arr : T & (NumList | StrList)
 
   let zz = arr[1];  // Error
 >zz : string | number
 >arr[1] : string | number
->arr : NumList | StrList
+>arr : NumList | StrList | NumList & StrList | StrList & NumList
 >1 : 1
 }
 
@@= skipped -15, +16 lines =@@
 >TypedArray : TypedArray
 
 export function isTypedArray(a: {}): a is Int32Array | Uint8Array {
->isTypedArray : (a: {}) => a is Int32Array | Uint8Array
+>isTypedArray : (a: {}) => a is Int32Array<ArrayBuffer> | Uint8Array<ArrayBuffer>
 >a : {}
 
   return a instanceof Int32Array || a instanceof Uint8Array;
@@= skipped -15, +15 lines =@@
 
 export function flatten<T extends number|TypedArray>(arr: T) {
 >flatten : <T extends number | TypedArray>(arr: T) => void
+>T : T
 >arr : T
 
   if (isTypedArray(arr)) {
 >isTypedArray(arr) : boolean
->isTypedArray : (a: {}) => a is Int32Array | Uint8Array
+>isTypedArray : (a: {}) => a is Int32Array<ArrayBuffer> | Uint8Array<ArrayBuffer>
 >arr : number | TypedArray
 
       arr[1];
