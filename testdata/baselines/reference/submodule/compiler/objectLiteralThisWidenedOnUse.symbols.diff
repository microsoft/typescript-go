--- old.objectLiteralThisWidenedOnUse.symbols
+++ new.objectLiteralThisWidenedOnUse.symbols
@@= skipped -2, +2 lines =@@
 === objectLiteralThisWidenedOnUse.ts ===
 interface Foo { bar: boolean; }
 >Foo : Symbol(Foo, Decl(objectLiteralThisWidenedOnUse.ts, 0, 0))
->bar : Symbol(Foo.bar, Decl(objectLiteralThisWidenedOnUse.ts, 0, 15))
+>bar : Symbol(bar, Decl(objectLiteralThisWidenedOnUse.ts, 0, 15))
 
 var GlobalIns = {
 >GlobalIns : Symbol(GlobalIns, Decl(objectLiteralThisWidenedOnUse.ts, 2, 3))
@@= skipped -19, +19 lines =@@
 
     this.accept_foo(this);
 >this.accept_foo : Symbol(accept_foo, Decl(objectLiteralThisWidenedOnUse.ts, 8, 4))
->this : Symbol(GlobalIns, Decl(objectLiteralThisWidenedOnUse.ts, 2, 15))
+>this : Symbol((Anonymous type), Decl(objectLiteralThisWidenedOnUse.ts, 2, 15))
 >accept_foo : Symbol(accept_foo, Decl(objectLiteralThisWidenedOnUse.ts, 8, 4))
->this : Symbol(GlobalIns, Decl(objectLiteralThisWidenedOnUse.ts, 2, 15))
+>this : Symbol((Anonymous type), Decl(objectLiteralThisWidenedOnUse.ts, 2, 15))
 
   },
   accept_foo (foo: Foo): boolean {
@@= skipped -12, +12 lines =@@
 
     return !!foo && !!foo.bar;
 >foo : Symbol(foo, Decl(objectLiteralThisWidenedOnUse.ts, 9, 14))
->foo.bar : Symbol(Foo.bar, Decl(objectLiteralThisWidenedOnUse.ts, 0, 15))
+>foo.bar : Symbol(bar, Decl(objectLiteralThisWidenedOnUse.ts, 0, 15))
 >foo : Symbol(foo, Decl(objectLiteralThisWidenedOnUse.ts, 9, 14))
->bar : Symbol(Foo.bar, Decl(objectLiteralThisWidenedOnUse.ts, 0, 15))
+>bar : Symbol(bar, Decl(objectLiteralThisWidenedOnUse.ts, 0, 15))
   }
 };
