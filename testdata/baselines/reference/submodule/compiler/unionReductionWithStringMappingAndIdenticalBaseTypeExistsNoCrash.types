//// [tests/cases/compiler/unionReductionWithStringMappingAndIdenticalBaseTypeExistsNoCrash.tsx] ////

=== node_modules/@types/react/index.d.ts ===
export = React;
>React : typeof React

export as namespace React;
>React : typeof React

declare namespace React {
>React : typeof React

  type ReactNode =
>ReactNode : ReactNode

    | ReactElement
    | string
    | number
    | Iterable<ReactNode>
    | boolean
    | null
    | undefined;
  type JSXElementConstructor<P> = (props: P) => ReactNode;
>JSXElementConstructor : JSXElementConstructor<P>
>P : P
>props : P

  interface ReactElement<
>ReactElement : ReactElement<P, T>

    P = any,
>P : P

    T extends string | JSXElementConstructor<any> =
>T : T

      | string
      | JSXElementConstructor<any>,
  > {
    type: T;
>type : T

    props: P;
>props : P

    key: string | null;
>key : string | null
  }

  type ComponentProps<T extends JSXElementConstructor<any>> =
>ComponentProps : ComponentProps<T>
>T : T

    T extends JSXElementConstructor<infer P> ? P : never;
>P : P

  interface ExoticComponent<P = {}> {
>ExoticComponent : ExoticComponent<P>
>P : P

    (props: P): ReactNode;
>props : P

    readonly $$typeof: symbol;
>$$typeof : symbol
  }

  type LazyExoticComponent<T extends JSXElementConstructor<any>> =
>LazyExoticComponent : LazyExoticComponent<T>
>T : T

    ExoticComponent<ComponentProps<T>> & {
      readonly _result: T;
>_result : T

    };

  function createElement(): void;
>createElement : () => void

  namespace JSX {
>JSX : any

    interface Element extends GlobalJSXElement {}
>Element : Element

    interface ElementChildrenAttribute
>ElementChildrenAttribute : ElementChildrenAttribute

      extends GlobalJSXElementChildrenAttribute {}
    type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<
>LibraryManagedAttributes : LibraryManagedAttributes<C, P>
>C : C
>P : P

      C,
      P
    >;
    interface IntrinsicElements extends GlobalJSXIntrinsicElements {}
>IntrinsicElements : IntrinsicElements
  }
}

type ReactManagedAttributes<C, P> = C extends { defaultProps: infer D }
>ReactManagedAttributes : ReactManagedAttributes<C, P>
>C : C
>P : P
>defaultProps : D
>D : D

  ? P & D
  : P;

declare global {
>global : any

  namespace JSX {
>JSX : any

    interface Element extends React.ReactElement<any, any> {}
>Element : Element
>React : typeof React

    interface ElementChildrenAttribute {
>ElementChildrenAttribute : ElementChildrenAttribute

      children: {};
>children : {}
    }
    type LibraryManagedAttributes<C, P> = C extends React.LazyExoticComponent<
>LibraryManagedAttributes : LibraryManagedAttributes<C, P>
>C : C
>P : P
>React : any

      infer T
>T : T

    >
      ? ReactManagedAttributes<T, P>
      : ReactManagedAttributes<C, P>;
    interface IntrinsicElements {
>IntrinsicElements : IntrinsicElements

      div: {};
>div : {}

      span: {};
>span : {}
    }
  }
}

interface GlobalJSXElement extends JSX.Element {}
>GlobalJSXElement : GlobalJSXElement
>JSX : any

interface GlobalJSXElementChildrenAttribute
>GlobalJSXElementChildrenAttribute : GlobalJSXElementChildrenAttribute

  extends JSX.ElementChildrenAttribute {}
>JSX : any

type GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<
>GlobalJSXLibraryManagedAttributes : GlobalJSXLibraryManagedAttributes<C, P>
>C : C
>P : P
>JSX : any

  C,
  P
>;
interface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}
>GlobalJSXIntrinsicElements : GlobalJSXIntrinsicElements
>JSX : any

=== src/index.tsx ===
import React from 'react'
>React : typeof React

declare function upperFirst<T extends string>(str: T): Capitalize<T>
>upperFirst : <T extends string>(str: T) => Capitalize<T>
>T : T
>str : T

const displayEnum = (value: string) => upperFirst(value.toLowerCase())
>displayEnum : (value: string) => Capitalize<string>
>(value: string) => upperFirst(value.toLowerCase()) : (value: string) => Capitalize<string>
>value : string
>upperFirst(value.toLowerCase()) : Capitalize<string>
>upperFirst : <T extends string>(str: T) => Capitalize<T>
>value.toLowerCase() : string
>value.toLowerCase : () => string
>value : string
>toLowerCase : () => string

function Comp() {
>Comp : () => any

  return <div>
><div>    <span>Scope:</span> {displayEnum("VALUE")}  </div> : any
>div : any

    <span>Scope:</span> {displayEnum("VALUE")}
><span>Scope:</span> : any
>span : any
>span : any
>displayEnum("VALUE") : Capitalize<string>
>displayEnum : (value: string) => Capitalize<string>
>"VALUE" : "VALUE"

  </div>
>div : any
}

