--- old.isolatedDeclarationOutFile.symbols
+++ new.isolatedDeclarationOutFile.symbols
@@= skipped -4, +4 lines =@@
 >A : Symbol(A, Decl(a.ts, 0, 0))
 
     toUpper(msg: string): string {
->toUpper : Symbol(A.toUpper, Decl(a.ts, 0, 16))
+>toUpper : Symbol(toUpper, Decl(a.ts, 0, 16))
 >msg : Symbol(msg, Decl(a.ts, 1, 12))
 
         return msg.toUpperCase();
->msg.toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
+>msg.toUpperCase : Symbol(toUpperCase, Decl(lib.es5.d.ts, --, --))
 >msg : Symbol(msg, Decl(a.ts, 1, 12))
->toUpperCase : Symbol(String.toUpperCase, Decl(lib.es5.d.ts, --, --))
+>toUpperCase : Symbol(toUpperCase, Decl(lib.es5.d.ts, --, --))
     }
 }
 
@@= skipped -19, +19 lines =@@
 >A : Symbol(A, Decl(b.ts, 0, 8))
 
     toFixed(n: number): string {
->toFixed : Symbol(B.toFixed, Decl(b.ts, 2, 26))
+>toFixed : Symbol(toFixed, Decl(b.ts, 2, 26))
 >n : Symbol(n, Decl(b.ts, 3, 12))
 
         return n.toFixed(6);
->n.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>n.toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 >n : Symbol(n, Decl(b.ts, 3, 12))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
     }
 }
 
