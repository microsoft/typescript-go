//// [tests/cases/compiler/typeGuardNarrowByUntypedField.ts] ////

=== typeGuardNarrowByUntypedField.ts ===
declare function hasOwnProperty<P extends PropertyKey>(target: {}, property: P): target is { readonly [K in P]: unknown };
>hasOwnProperty : Symbol(hasOwnProperty, Decl(typeGuardNarrowByUntypedField.ts, 0, 0))
>P : Symbol(P, Decl(typeGuardNarrowByUntypedField.ts, 0, 32))
>PropertyKey : Symbol(PropertyKey)
>target : Symbol(target, Decl(typeGuardNarrowByUntypedField.ts, 0, 55))
>property : Symbol(property, Decl(typeGuardNarrowByUntypedField.ts, 0, 66))
>P : Symbol(P, Decl(typeGuardNarrowByUntypedField.ts, 0, 32))
>target : Symbol(target, Decl(typeGuardNarrowByUntypedField.ts, 0, 55))
>K : Symbol(K, Decl(typeGuardNarrowByUntypedField.ts, 0, 103))
>P : Symbol(P, Decl(typeGuardNarrowByUntypedField.ts, 0, 32))

declare const arrayLikeOrIterable: ArrayLike<any> | Iterable<any>;
>arrayLikeOrIterable : Symbol(arrayLikeOrIterable, Decl(typeGuardNarrowByUntypedField.ts, 1, 13))
>ArrayLike : Symbol(ArrayLike)
>Iterable : Symbol(Iterable)

if (hasOwnProperty(arrayLikeOrIterable, 'length')) {
>hasOwnProperty : Symbol(hasOwnProperty, Decl(typeGuardNarrowByUntypedField.ts, 0, 0))
>arrayLikeOrIterable : Symbol(arrayLikeOrIterable, Decl(typeGuardNarrowByUntypedField.ts, 1, 13))

    let x: number = arrayLikeOrIterable.length;
>x : Symbol(x, Decl(typeGuardNarrowByUntypedField.ts, 3, 7))
>arrayLikeOrIterable : Symbol(arrayLikeOrIterable, Decl(typeGuardNarrowByUntypedField.ts, 1, 13))
}
