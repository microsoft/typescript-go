--- old.isArray.symbols
+++ new.isArray.symbols
@@= skipped -5, +5 lines =@@
 
 
 if (Array.isArray(maybeArray)) {
->Array.isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>Array.isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >Array : Symbol(Array, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
->isArray : Symbol(ArrayConstructor.isArray, Decl(lib.es5.d.ts, --, --))
+>isArray : Symbol(isArray, Decl(lib.es5.d.ts, --, --))
 >maybeArray : Symbol(maybeArray, Decl(isArray.ts, 0, 3))
 
     maybeArray.length; // OK
->maybeArray.length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>maybeArray.length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 >maybeArray : Symbol(maybeArray, Decl(isArray.ts, 0, 3))
->length : Symbol(Array.length, Decl(lib.es5.d.ts, --, --))
+>length : Symbol(length, Decl(lib.es5.d.ts, --, --))
 }
 else {
     maybeArray.toFixed(); // OK
->maybeArray.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>maybeArray.toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 >maybeArray : Symbol(maybeArray, Decl(isArray.ts, 0, 3))
->toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
+>toFixed : Symbol(toFixed, Decl(lib.es5.d.ts, --, --))
 }
