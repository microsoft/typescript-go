--- old.reverseMappedUnionInference.symbols
+++ new.reverseMappedUnionInference.symbols
@@= skipped -5, +5 lines =@@
 >Result : Symbol(Result, Decl(reverseMappedUnionInference.ts, 0, 23))
 
   matches: (node: any) => boolean;
->matches : Symbol(AnyExtractor.matches, Decl(reverseMappedUnionInference.ts, 0, 32))
+>matches : Symbol(matches, Decl(reverseMappedUnionInference.ts, 0, 32))
 >node : Symbol(node, Decl(reverseMappedUnionInference.ts, 1, 12))
 
   extract: (node: any) => Result | undefined;
->extract : Symbol(AnyExtractor.extract, Decl(reverseMappedUnionInference.ts, 1, 34))
+>extract : Symbol(extract, Decl(reverseMappedUnionInference.ts, 1, 34))
 >node : Symbol(node, Decl(reverseMappedUnionInference.ts, 2, 12))
 >Result : Symbol(Result, Decl(reverseMappedUnionInference.ts, 0, 23))
 }
@@= skipped -15, +15 lines =@@
 >Result : Symbol(Result, Decl(reverseMappedUnionInference.ts, 5, 22))
 
   matches: (node: unknown) => node is T;
->matches : Symbol(Extractor.matches, Decl(reverseMappedUnionInference.ts, 5, 32))
+>matches : Symbol(matches, Decl(reverseMappedUnionInference.ts, 5, 32))
 >node : Symbol(node, Decl(reverseMappedUnionInference.ts, 6, 12))
 >node : Symbol(node, Decl(reverseMappedUnionInference.ts, 6, 12))
 >T : Symbol(T, Decl(reverseMappedUnionInference.ts, 5, 20))
 
   extract: (node: T) => Result | undefined;
->extract : Symbol(Extractor.extract, Decl(reverseMappedUnionInference.ts, 6, 40))
+>extract : Symbol(extract, Decl(reverseMappedUnionInference.ts, 6, 40))
 >node : Symbol(node, Decl(reverseMappedUnionInference.ts, 7, 12))
 >T : Symbol(T, Decl(reverseMappedUnionInference.ts, 5, 20))
 >Result : Symbol(Result, Decl(reverseMappedUnionInference.ts, 5, 22))
@@= skipped -39, +39 lines =@@
 >Identifier : Symbol(Identifier, Decl(reverseMappedUnionInference.ts, 13, 25))
 
   kind: "identifier";
->kind : Symbol(Identifier.kind, Decl(reverseMappedUnionInference.ts, 15, 22))
+>kind : Symbol(kind, Decl(reverseMappedUnionInference.ts, 15, 22))
 
   name: string;
->name : Symbol(Identifier.name, Decl(reverseMappedUnionInference.ts, 16, 21))
+>name : Symbol(name, Decl(reverseMappedUnionInference.ts, 16, 21))
 }
 
 declare function isIdentifier(node: unknown): node is Identifier;
@@= skipped -34, +34 lines =@@
 
       value: node.name,
 >value : Symbol(value, Decl(reverseMappedUnionInference.ts, 27, 34))
->node.name : Symbol(Identifier.name, Decl(reverseMappedUnionInference.ts, 16, 21))
+>node.name : Symbol(name, Decl(reverseMappedUnionInference.ts, 16, 21))
 >node : Symbol(node, Decl(reverseMappedUnionInference.ts, 24, 12))
->name : Symbol(Identifier.name, Decl(reverseMappedUnionInference.ts, 16, 21))
+>name : Symbol(name, Decl(reverseMappedUnionInference.ts, 16, 21))
 
     };
   },
@@= skipped -12, +12 lines =@@
 >StringLiteral : Symbol(StringLiteral, Decl(reverseMappedUnionInference.ts, 31, 3))
 
   kind: "stringLiteral";
->kind : Symbol(StringLiteral.kind, Decl(reverseMappedUnionInference.ts, 33, 25))
+>kind : Symbol(kind, Decl(reverseMappedUnionInference.ts, 33, 25))
 
   value: string;
->value : Symbol(StringLiteral.value, Decl(reverseMappedUnionInference.ts, 34, 24))
+>value : Symbol(value, Decl(reverseMappedUnionInference.ts, 34, 24))
 }
 
 declare function isStringLiteral(node: unknown): node is StringLiteral;
@@= skipped -34, +34 lines =@@
 
       value: node.value,
 >value : Symbol(value, Decl(reverseMappedUnionInference.ts, 45, 30))
->node.value : Symbol(StringLiteral.value, Decl(reverseMappedUnionInference.ts, 34, 24))
+>node.value : Symbol(value, Decl(reverseMappedUnionInference.ts, 34, 24))
 >node : Symbol(node, Decl(reverseMappedUnionInference.ts, 42, 12))
->value : Symbol(StringLiteral.value, Decl(reverseMappedUnionInference.ts, 34, 24))
+>value : Symbol(value, Decl(reverseMappedUnionInference.ts, 34, 24))
 
     };
   },
