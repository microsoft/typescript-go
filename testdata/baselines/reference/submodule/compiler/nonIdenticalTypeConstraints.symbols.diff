--- old.nonIdenticalTypeConstraints.symbols
+++ new.nonIdenticalTypeConstraints.symbols
@@= skipped -4, +4 lines =@@
 >Different : Symbol(Different, Decl(nonIdenticalTypeConstraints.ts, 0, 0))
 
     a: number;
->a : Symbol(Different.a, Decl(nonIdenticalTypeConstraints.ts, 0, 17))
+>a : Symbol(a, Decl(nonIdenticalTypeConstraints.ts, 0, 17))
 
     b: string;
->b : Symbol(Different.b, Decl(nonIdenticalTypeConstraints.ts, 1, 14))
+>b : Symbol(b, Decl(nonIdenticalTypeConstraints.ts, 1, 14))
 
     c: boolean;
->c : Symbol(Different.c, Decl(nonIdenticalTypeConstraints.ts, 2, 14))
+>c : Symbol(c, Decl(nonIdenticalTypeConstraints.ts, 2, 14))
 }
 
 class Foo<T extends Function> {
@@= skipped -15, +15 lines =@@
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     n: T;
->n : Symbol(Foo.n, Decl(nonIdenticalTypeConstraints.ts, 6, 31))
+>n : Symbol(n, Decl(nonIdenticalTypeConstraints.ts, 6, 31))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 6, 10), Decl(nonIdenticalTypeConstraints.ts, 9, 14))
 }
 interface Foo<T extends Different> {
@@= skipped -9, +9 lines =@@
 >Different : Symbol(Different, Decl(nonIdenticalTypeConstraints.ts, 0, 0))
 
     y: T;
->y : Symbol(Foo.y, Decl(nonIdenticalTypeConstraints.ts, 9, 36))
+>y : Symbol(y, Decl(nonIdenticalTypeConstraints.ts, 9, 36))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 6, 10), Decl(nonIdenticalTypeConstraints.ts, 9, 14))
 }
 interface Qux<T extends Different> {
@@= skipped -9, +9 lines =@@
 >Different : Symbol(Different, Decl(nonIdenticalTypeConstraints.ts, 0, 0))
 
     y: T;
->y : Symbol(Qux.y, Decl(nonIdenticalTypeConstraints.ts, 12, 36))
+>y : Symbol(y, Decl(nonIdenticalTypeConstraints.ts, 12, 36))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 12, 14), Decl(nonIdenticalTypeConstraints.ts, 15, 10))
 }
 class Qux<T extends Function> {
@@= skipped -9, +9 lines =@@
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     n: T;
->n : Symbol(Qux.n, Decl(nonIdenticalTypeConstraints.ts, 15, 31))
+>n : Symbol(n, Decl(nonIdenticalTypeConstraints.ts, 15, 31))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 12, 14), Decl(nonIdenticalTypeConstraints.ts, 15, 10))
 }
 
@@= skipped -10, +10 lines =@@
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     n: T;
->n : Symbol(Bar.n, Decl(nonIdenticalTypeConstraints.ts, 19, 31))
+>n : Symbol(n, Decl(nonIdenticalTypeConstraints.ts, 19, 31))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 19, 10), Decl(nonIdenticalTypeConstraints.ts, 22, 14))
 }
 interface Bar<T extends Function> {
@@= skipped -9, +9 lines =@@
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     y: T;
->y : Symbol(Bar.y, Decl(nonIdenticalTypeConstraints.ts, 22, 35))
+>y : Symbol(y, Decl(nonIdenticalTypeConstraints.ts, 22, 35))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 19, 10), Decl(nonIdenticalTypeConstraints.ts, 22, 14))
 }
 interface Baz<T extends Function> {
@@= skipped -9, +9 lines =@@
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     y: T;
->y : Symbol(Baz.y, Decl(nonIdenticalTypeConstraints.ts, 25, 35))
+>y : Symbol(y, Decl(nonIdenticalTypeConstraints.ts, 25, 35))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 25, 14), Decl(nonIdenticalTypeConstraints.ts, 28, 10))
 }
 class Baz<T extends Function> {
@@= skipped -9, +9 lines =@@
 >Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
 
     n: T;
->n : Symbol(Baz.n, Decl(nonIdenticalTypeConstraints.ts, 28, 31))
+>n : Symbol(n, Decl(nonIdenticalTypeConstraints.ts, 28, 31))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 25, 14), Decl(nonIdenticalTypeConstraints.ts, 28, 10))
 }
 
@@= skipped -9, +9 lines =@@
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 32, 11))
 
     n: T;
->n : Symbol(Quux.n, Decl(nonIdenticalTypeConstraints.ts, 32, 15))
+>n : Symbol(n, Decl(nonIdenticalTypeConstraints.ts, 32, 15))
 >T : Symbol(T, Decl(nonIdenticalTypeConstraints.ts, 32, 11))
 }
 interface Quux<U> {
@@= skipped -8, +8 lines =@@
 >U : Symbol(U, Decl(nonIdenticalTypeConstraints.ts, 35, 15))
 
     m: U;
->m : Symbol(Quux.m, Decl(nonIdenticalTypeConstraints.ts, 35, 19))
+>m : Symbol(m, Decl(nonIdenticalTypeConstraints.ts, 35, 19))
 >U : Symbol(U, Decl(nonIdenticalTypeConstraints.ts, 35, 15))
 }
