//// [tests/cases/compiler/conditionalEqualityTestingNullability.ts] ////

=== conditionalEqualityTestingNullability.ts ===
export type Equals<A1 extends any, A2 extends any> =
>Equals : Equals<A1, A2>
>A1 : A1
>A2 : A2

    (<A>() => A extends A1 ? 1 : 0) extends (<A>() => A extends A2 ? 1 : 0)
>A : A
>A : A

    ? 1
    : 0

interface Foo<T> {
>Foo : Foo<T>
>T : T

    x : () => T
>x : () => T
}

declare const a: Foo<Date>;
>a : Foo<Date>

declare const b: Foo<Date | null>;
>b : Foo<Date | null>

//Expected 0, Actual 1
type ShouldBe0 = Equals<typeof a, typeof b>;
>ShouldBe0 : 0

