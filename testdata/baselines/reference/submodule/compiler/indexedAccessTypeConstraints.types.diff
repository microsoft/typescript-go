--- old.indexedAccessTypeConstraints.types
+++ new.indexedAccessTypeConstraints.types
@@= skipped -3, +3 lines =@@
 // Repro from #14557
 
 interface IData<T> {
+>IData : IData<T>
+>T : T
+
     content: T;
 >content : T
 }
 
 type Data<T> = {
 >Data : Data<T>
+>T : T
 
     get: <K extends keyof T>(prop: K) => T[K];
 >get : <K extends keyof T>(prop: K) => T[K]
+>K : K
 >prop : K
 
 };
 
 class Parent<M> {
 >Parent : Parent<M>
+>M : M
 
     constructor(private data: Data<M>) {}
 >data : Data<M>
@@= skipped -31, +37 lines =@@
 
 export class Foo<C> extends Parent<IData<C>> {
 >Foo : Foo<C>
+>C : C
 >Parent : Parent<IData<C>>
 
     getContent(): C {
@@= skipped -19, +20 lines =@@
 
 export class Bar<C, T extends IData<C>> extends Parent<T> {
 >Bar : Bar<C, T>
+>C : C
+>T : T
 >Parent : Parent<T>
 
     getContent(): C {
@@= skipped -21, +23 lines =@@
 
 function foo<C, T extends { content: C }>(x: C, y: T['content']) {
 >foo : <C, T extends { content: C; }>(x: C, y: T["content"]) => void
+>C : C
+>T : T
 >content : C
 >x : C
 >y : T["content"]
