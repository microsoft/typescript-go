//// [tests/cases/compiler/asyncFunctionContextuallyTypedReturns.ts] ////

=== asyncFunctionContextuallyTypedReturns.ts ===
declare function f(cb: (v: boolean) => [0] | PromiseLike<[0]>): void;
>f : Symbol(f, Decl(asyncFunctionContextuallyTypedReturns.ts, 0, 0))
>cb : Symbol(cb, Decl(asyncFunctionContextuallyTypedReturns.ts, 0, 19))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 0, 24))
>PromiseLike : Symbol(PromiseLike)

f(v => v ? [0] : Promise.reject());
>f : Symbol(f, Decl(asyncFunctionContextuallyTypedReturns.ts, 0, 0))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 1, 2))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 1, 2))

f(async v => v ? [0] : Promise.reject());
>f : Symbol(f, Decl(asyncFunctionContextuallyTypedReturns.ts, 0, 0))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 7))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 7))

declare function g(cb: (v: boolean) => "contextuallyTypable" | PromiseLike<"contextuallyTypable">): void;
>g : Symbol(g, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 41))
>cb : Symbol(cb, Decl(asyncFunctionContextuallyTypedReturns.ts, 4, 19))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 4, 24))
>PromiseLike : Symbol(PromiseLike)

g(v => v ? "contextuallyTypable" : Promise.reject());
>g : Symbol(g, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 41))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 5, 2))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 5, 2))

g(async v => v ? "contextuallyTypable" : Promise.reject());
>g : Symbol(g, Decl(asyncFunctionContextuallyTypedReturns.ts, 2, 41))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 6, 7))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 6, 7))

type MyCallback = (thing: string) => void;
>MyCallback : Symbol(MyCallback, Decl(asyncFunctionContextuallyTypedReturns.ts, 6, 59))
>thing : Symbol(thing, Decl(asyncFunctionContextuallyTypedReturns.ts, 8, 19))

declare function h(cb: (v: boolean) => MyCallback | PromiseLike<MyCallback>): void;
>h : Symbol(h, Decl(asyncFunctionContextuallyTypedReturns.ts, 8, 42))
>cb : Symbol(cb, Decl(asyncFunctionContextuallyTypedReturns.ts, 9, 19))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 9, 24))
>MyCallback : Symbol(MyCallback, Decl(asyncFunctionContextuallyTypedReturns.ts, 6, 59))
>PromiseLike : Symbol(PromiseLike)
>MyCallback : Symbol(MyCallback, Decl(asyncFunctionContextuallyTypedReturns.ts, 6, 59))

h(v => v ? (abc) => { } : Promise.reject());
>h : Symbol(h, Decl(asyncFunctionContextuallyTypedReturns.ts, 8, 42))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 10, 2))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 10, 2))
>abc : Symbol(abc, Decl(asyncFunctionContextuallyTypedReturns.ts, 10, 12))

h(async v => v ? (def) => { } : Promise.reject());
>h : Symbol(h, Decl(asyncFunctionContextuallyTypedReturns.ts, 8, 42))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 11, 7))
>v : Symbol(v, Decl(asyncFunctionContextuallyTypedReturns.ts, 11, 7))
>def : Symbol(def, Decl(asyncFunctionContextuallyTypedReturns.ts, 11, 18))

// repro from #29196
const increment: (
>increment : Symbol(increment, Decl(asyncFunctionContextuallyTypedReturns.ts, 14, 5))

  num: number,
>num : Symbol(num, Decl(asyncFunctionContextuallyTypedReturns.ts, 14, 18))

  str: string
>str : Symbol(str, Decl(asyncFunctionContextuallyTypedReturns.ts, 15, 14))

) => Promise<((s: string) => any) | string> | string = async (num, str) => {
>Promise : Symbol(Promise)
>s : Symbol(s, Decl(asyncFunctionContextuallyTypedReturns.ts, 17, 15))
>num : Symbol(num, Decl(asyncFunctionContextuallyTypedReturns.ts, 17, 62))
>str : Symbol(str, Decl(asyncFunctionContextuallyTypedReturns.ts, 17, 66))

  return a => {
>a : Symbol(a, Decl(asyncFunctionContextuallyTypedReturns.ts, 18, 8))

    return a.length
>a : Symbol(a, Decl(asyncFunctionContextuallyTypedReturns.ts, 18, 8))
  }
}

const increment2: (
>increment2 : Symbol(increment2, Decl(asyncFunctionContextuallyTypedReturns.ts, 23, 5))

  num: number,
>num : Symbol(num, Decl(asyncFunctionContextuallyTypedReturns.ts, 23, 19))

  str: string
>str : Symbol(str, Decl(asyncFunctionContextuallyTypedReturns.ts, 24, 14))

) => Promise<((s: string) => any) | string> = async (num, str) => {
>Promise : Symbol(Promise)
>s : Symbol(s, Decl(asyncFunctionContextuallyTypedReturns.ts, 26, 15))
>num : Symbol(num, Decl(asyncFunctionContextuallyTypedReturns.ts, 26, 53))
>str : Symbol(str, Decl(asyncFunctionContextuallyTypedReturns.ts, 26, 57))

  return a => {
>a : Symbol(a, Decl(asyncFunctionContextuallyTypedReturns.ts, 27, 8))

    return a.length
>a : Symbol(a, Decl(asyncFunctionContextuallyTypedReturns.ts, 27, 8))
  }
}

