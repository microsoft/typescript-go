--- old.contextualTypeFunctionObjectPropertyIntersection.types
+++ new.contextualTypeFunctionObjectPropertyIntersection.types
@@= skipped -4, +4 lines =@@
 
 type Action<TEvent extends { type: string }> = (ev: TEvent) => void;
 >Action : Action<TEvent>
+>TEvent : TEvent
 >type : string
 >ev : TEvent
 
 interface MachineConfig<TEvent extends { type: string }> {
+>MachineConfig : MachineConfig<TEvent>
+>TEvent : TEvent
 >type : string
 
   schema: {
@@= skipped -14, +17 lines =@@
 
   };
   on?: {
->on : ({ [K in TEvent["type"]]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined; } & { "*"?: Action<TEvent>; }) | undefined
+>on : { [K in TEvent["type"]]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined } & { "*"?: Action<TEvent> | undefined; } | undefined
 
     [K in TEvent["type"]]?: Action<TEvent extends { type: K } ? TEvent : never>;
+>K : K
 >type : K
 
   } & {
@@= skipped -14, +15 lines =@@
 
 declare function createMachine<TEvent extends { type: string }>(
 >createMachine : <TEvent extends { type: string; }>(config: MachineConfig<TEvent>) => void
+>TEvent : TEvent
 >type : string
 
   config: MachineConfig<TEvent>
@@= skipped -69, +70 lines =@@
 >ev : { type: "FOO"; } | { type: "BAR"; }
 
       ev.type; // should be 'FOO' | 'BAR'
->ev.type : "FOO" | "BAR"
+>ev.type : "BAR" | "FOO"
 >ev : { type: "FOO"; } | { type: "BAR"; }
->type : "FOO" | "BAR"
+>type : "BAR" | "FOO"
 
     },
   },
 });
 
 interface MachineConfig2<TEvent extends { type: string }> {
+>MachineConfig2 : MachineConfig2<TEvent>
+>TEvent : TEvent
 >type : string
 
   schema: {
@@= skipped -19, +21 lines =@@
 
   };
   on?: {
->on : ({ [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined; } & { "*"?: Action<TEvent>; }) | undefined
+>on : { [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined } & { "*"?: Action<TEvent> | undefined; } | undefined
 
     [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K } ? TEvent : never>;
+>K : K
 >type : K
 
   } & {
@@= skipped -14, +15 lines =@@
 
 declare function createMachine2<TEvent extends { type: string }>(
 >createMachine2 : <TEvent extends { type: string; }>(config: MachineConfig2<TEvent>) => void
+>TEvent : TEvent
 >type : string
 
   config: MachineConfig2<TEvent>
@@= skipped -113, +114 lines =@@
 // repro from #49307#issuecomment-1143103607
 
 declare function createSlice<T>(
->createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | () => State; reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>T : T
 
   reducers: { [K: string]: (state: string) => void } & {
->reducers : { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }
+>reducers : { [K: string]: (state: string) => void; } & { [K in keyof T]: object }
 >K : string
 >state : string
 
     [K in keyof T]: object;
+>K : K
   }
 ): void;
 
 createSlice({
 >createSlice({  f(a) {},}) : void
->createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
->{  f(a) {},} : { f(a: string): void; }
+>createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | () => State; reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>{  f(a) {},} : { f: (a: string) => void; }
 
   f(a) {},
 >f : (a: string) => void
@@= skipped -26, +28 lines =@@
 
 type Validate<T> = T & { [K in keyof T]: object }
 >Validate : Validate<T>
+>T : T
+>K : K
 
 declare function f<S, T extends Record<string, (state: S) => any>>(s: S, x: Validate<T>): void;
 >f : <S, T extends Record<string, (state: S) => any>>(s: S, x: Validate<T>) => void
+>S : S
+>T : T
 >state : S
 >s : S
 >x : Validate<T>
@@= skipped -27, +31 lines =@@
 
 type SliceCaseReducers<State> = Record<string, (state: State) => State | void>;
 >SliceCaseReducers : SliceCaseReducers<State>
+>State : State
 >state : State
 
 type ValidateSliceCaseReducers<S, ACR extends SliceCaseReducers<S>> = ACR & {
 >ValidateSliceCaseReducers : ValidateSliceCaseReducers<S, ACR>
+>S : S
+>ACR : ACR
 
   [T in keyof ACR]: ACR[T] extends {
+>T : T
+
     reducer(s: S, action?: infer A): any;
->reducer : (s: S, action?: infer A) => any
+>reducer : (s: S, action?: A | undefined) => any
 >s : S
 >action : A | undefined
+>A : A
   }
     ? {
         prepare(...a: never[]): Omit<A, "type">;
@@= skipped -20, +26 lines =@@
 };
 
 declare function createSlice<
->createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | () => State; reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
 
   State,
+>State : State
+
   CaseReducers extends SliceCaseReducers<State>
+>CaseReducers : CaseReducers
+
 >(options: {
->options : { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }
+>options : { initialState: State | () => State; reducers: ValidateSliceCaseReducers<State, CaseReducers>; }
 
   initialState: State | (() => State);
->initialState : State | (() => State)
+>initialState : State | () => State
 
   reducers: ValidateSliceCaseReducers<State, CaseReducers>;
 >reducers : ValidateSliceCaseReducers<State, CaseReducers>
@@= skipped -18, +22 lines =@@
 export const clientSlice = createSlice({
 >clientSlice : void
 >createSlice({  initialState: {    username: "",    isLoggedIn: false,    userId: "",    avatar: "",  },  reducers: {    onClientUserChanged(state) {},  },}) : void
->createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
->{  initialState: {    username: "",    isLoggedIn: false,    userId: "",    avatar: "",  },  reducers: {    onClientUserChanged(state) {},  },} : { initialState: { username: string; isLoggedIn: false; userId: string; avatar: string; }; reducers: { onClientUserChanged(state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }): void; }; }
+>createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | () => State; reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>{  initialState: {    username: "",    isLoggedIn: false,    userId: "",    avatar: "",  },  reducers: {    onClientUserChanged(state) {},  },} : { initialState: { username: string; isLoggedIn: false; userId: string; avatar: string; }; reducers: { onClientUserChanged: (state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }) => void; }; }
 
   initialState: {
 >initialState : { username: string; isLoggedIn: false; userId: string; avatar: string; }
@@= skipped -25, +25 lines =@@
 
   },
   reducers: {
->reducers : { onClientUserChanged(state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }): void; }
->{    onClientUserChanged(state) {},  } : { onClientUserChanged(state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }): void; }
+>reducers : { onClientUserChanged: (state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }) => void; }
+>{    onClientUserChanged(state) {},  } : { onClientUserChanged: (state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }) => void; }
 
     onClientUserChanged(state) {},
 >onClientUserChanged : (state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }) => void
