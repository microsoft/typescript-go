--- old.contextualTypeFunctionObjectPropertyIntersection.types
+++ new.contextualTypeFunctionObjectPropertyIntersection.types
@@= skipped -18, +18 lines =@@

   };
   on?: {
->on : ({ [K in TEvent["type"]]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined; } & { "*"?: Action<TEvent>; }) | undefined
+>on : ({ [K in TEvent["type"]]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined; } & { "*"?: Action<TEvent> | undefined; }) | undefined

     [K in TEvent["type"]]?: Action<TEvent extends { type: K } ? TEvent : never>;
 >type : K
@@= skipped -83, +83 lines =@@
 >ev : { type: "FOO"; } | { type: "BAR"; }

       ev.type; // should be 'FOO' | 'BAR'
->ev.type : "FOO" | "BAR"
+>ev.type : "BAR" | "FOO"
 >ev : { type: "FOO"; } | { type: "BAR"; }
->type : "FOO" | "BAR"
+>type : "BAR" | "FOO"

     },
   },
@@= skipped -19, +19 lines =@@

   };
   on?: {
->on : ({ [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined; } & { "*"?: Action<TEvent>; }) | undefined
+>on : ({ [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined; } & { "*"?: Action<TEvent> | undefined; }) | undefined

     [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K } ? TEvent : never>;
 >type : K
@@= skipped -187, +187 lines =@@

   [T in keyof ACR]: ACR[T] extends {
     reducer(s: S, action?: infer A): any;
->reducer : (s: S, action?: infer A) => any
+>reducer : (s: S, action?: A | undefined) => any
 >s : S
 >action : A | undefined
   }