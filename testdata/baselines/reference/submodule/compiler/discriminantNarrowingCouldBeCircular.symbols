//// [tests/cases/compiler/discriminantNarrowingCouldBeCircular.ts] ////

=== discriminantNarrowingCouldBeCircular.ts ===
// #57705, 57690
declare function is<T>(v: T): v is T;
>is : Symbol(is, Decl(discriminantNarrowingCouldBeCircular.ts, 0, 0))
>T : Symbol(T, Decl(discriminantNarrowingCouldBeCircular.ts, 1, 20))
>v : Symbol(v, Decl(discriminantNarrowingCouldBeCircular.ts, 1, 23))
>T : Symbol(T, Decl(discriminantNarrowingCouldBeCircular.ts, 1, 20))
>v : Symbol(v, Decl(discriminantNarrowingCouldBeCircular.ts, 1, 23))
>T : Symbol(T, Decl(discriminantNarrowingCouldBeCircular.ts, 1, 20))

const o: Record<string, string> | undefined = {};
>o : Symbol(o, Decl(discriminantNarrowingCouldBeCircular.ts, 2, 5))
>Record : Symbol(Record)

if (o) {
>o : Symbol(o, Decl(discriminantNarrowingCouldBeCircular.ts, 2, 5))

  for (const key in o) {
>key : Symbol(key, Decl(discriminantNarrowingCouldBeCircular.ts, 4, 12))
>o : Symbol(o, Decl(discriminantNarrowingCouldBeCircular.ts, 2, 5))

    const value = o[key];
>value : Symbol(value, Decl(discriminantNarrowingCouldBeCircular.ts, 5, 9))
>o : Symbol(o, Decl(discriminantNarrowingCouldBeCircular.ts, 2, 5))
>key : Symbol(key, Decl(discriminantNarrowingCouldBeCircular.ts, 4, 12))

    if (is<string>(value)) {
>is : Symbol(is, Decl(discriminantNarrowingCouldBeCircular.ts, 0, 0))
>value : Symbol(value, Decl(discriminantNarrowingCouldBeCircular.ts, 5, 9))
    }
  }
}

type SomeRecord = { a: string };
>SomeRecord : Symbol(SomeRecord, Decl(discriminantNarrowingCouldBeCircular.ts, 9, 1))
>a : Symbol(a, Decl(discriminantNarrowingCouldBeCircular.ts, 11, 19))

declare const kPresentationInheritanceParents: { [tagName: string]: string[] };
>kPresentationInheritanceParents : Symbol(kPresentationInheritanceParents, Decl(discriminantNarrowingCouldBeCircular.ts, 12, 13))
>tagName : Symbol(tagName, Decl(discriminantNarrowingCouldBeCircular.ts, 12, 50))

declare function parentElementOrShadowHost(element: SomeRecord): SomeRecord | undefined;
>parentElementOrShadowHost : Symbol(parentElementOrShadowHost, Decl(discriminantNarrowingCouldBeCircular.ts, 12, 79))
>element : Symbol(element, Decl(discriminantNarrowingCouldBeCircular.ts, 13, 43))
>SomeRecord : Symbol(SomeRecord, Decl(discriminantNarrowingCouldBeCircular.ts, 9, 1))
>SomeRecord : Symbol(SomeRecord, Decl(discriminantNarrowingCouldBeCircular.ts, 9, 1))

function getImplicitAriaRole(element: SomeRecord) {
>getImplicitAriaRole : Symbol(getImplicitAriaRole, Decl(discriminantNarrowingCouldBeCircular.ts, 13, 88))
>element : Symbol(element, Decl(discriminantNarrowingCouldBeCircular.ts, 15, 29))
>SomeRecord : Symbol(SomeRecord, Decl(discriminantNarrowingCouldBeCircular.ts, 9, 1))

  let ancestor: SomeRecord | null = element;
>ancestor : Symbol(ancestor, Decl(discriminantNarrowingCouldBeCircular.ts, 16, 5))
>SomeRecord : Symbol(SomeRecord, Decl(discriminantNarrowingCouldBeCircular.ts, 9, 1))
>element : Symbol(element, Decl(discriminantNarrowingCouldBeCircular.ts, 15, 29))

  while (ancestor) {
>ancestor : Symbol(ancestor, Decl(discriminantNarrowingCouldBeCircular.ts, 16, 5))

    const parent = parentElementOrShadowHost(ancestor);
>parent : Symbol(parent, Decl(discriminantNarrowingCouldBeCircular.ts, 18, 9))
>parentElementOrShadowHost : Symbol(parentElementOrShadowHost, Decl(discriminantNarrowingCouldBeCircular.ts, 12, 79))
>ancestor : Symbol(ancestor, Decl(discriminantNarrowingCouldBeCircular.ts, 16, 5))

    const parents = kPresentationInheritanceParents[ancestor.a];
>parents : Symbol(parents, Decl(discriminantNarrowingCouldBeCircular.ts, 19, 9))
>kPresentationInheritanceParents : Symbol(kPresentationInheritanceParents, Decl(discriminantNarrowingCouldBeCircular.ts, 12, 13))
>ancestor.a : Symbol(a, Decl(discriminantNarrowingCouldBeCircular.ts, 11, 19))
>ancestor : Symbol(ancestor, Decl(discriminantNarrowingCouldBeCircular.ts, 16, 5))
>a : Symbol(a, Decl(discriminantNarrowingCouldBeCircular.ts, 11, 19))

    if (!parents || !parent || !parents.includes(parent.a))
>parents : Symbol(parents, Decl(discriminantNarrowingCouldBeCircular.ts, 19, 9))
>parent : Symbol(parent, Decl(discriminantNarrowingCouldBeCircular.ts, 18, 9))
>parents : Symbol(parents, Decl(discriminantNarrowingCouldBeCircular.ts, 19, 9))
>parent.a : Symbol(a, Decl(discriminantNarrowingCouldBeCircular.ts, 11, 19))
>parent : Symbol(parent, Decl(discriminantNarrowingCouldBeCircular.ts, 18, 9))
>a : Symbol(a, Decl(discriminantNarrowingCouldBeCircular.ts, 11, 19))

      break;
    ancestor = parent;
>ancestor : Symbol(ancestor, Decl(discriminantNarrowingCouldBeCircular.ts, 16, 5))
>parent : Symbol(parent, Decl(discriminantNarrowingCouldBeCircular.ts, 18, 9))
  }
}

declare function isPlainObject2<T>(
>isPlainObject2 : Symbol(isPlainObject2, Decl(discriminantNarrowingCouldBeCircular.ts, 24, 1))
>T : Symbol(T, Decl(discriminantNarrowingCouldBeCircular.ts, 26, 32))

    data: unknown,
>data : Symbol(data, Decl(discriminantNarrowingCouldBeCircular.ts, 26, 35))

  ): data is Record<PropertyKey, unknown>;
>data : Symbol(data, Decl(discriminantNarrowingCouldBeCircular.ts, 26, 35))
>Record : Symbol(Record)
>PropertyKey : Symbol(PropertyKey)
  
  declare const myObj2: unknown;
>myObj2 : Symbol(myObj2, Decl(discriminantNarrowingCouldBeCircular.ts, 30, 15))

  if (isPlainObject2(myObj2)) {
>isPlainObject2 : Symbol(isPlainObject2, Decl(discriminantNarrowingCouldBeCircular.ts, 24, 1))
>myObj2 : Symbol(myObj2, Decl(discriminantNarrowingCouldBeCircular.ts, 30, 15))

      for (const key of ["a", "b", "c"]) {
>key : Symbol(key, Decl(discriminantNarrowingCouldBeCircular.ts, 32, 16))

        const deeper = myObj2[key];
>deeper : Symbol(deeper, Decl(discriminantNarrowingCouldBeCircular.ts, 33, 13))
>myObj2 : Symbol(myObj2, Decl(discriminantNarrowingCouldBeCircular.ts, 30, 15))
>key : Symbol(key, Decl(discriminantNarrowingCouldBeCircular.ts, 32, 16))

        const deeperKeys = isPlainObject2(deeper) ? Object.keys(deeper) : [];
>deeperKeys : Symbol(deeperKeys, Decl(discriminantNarrowingCouldBeCircular.ts, 34, 13))
>isPlainObject2 : Symbol(isPlainObject2, Decl(discriminantNarrowingCouldBeCircular.ts, 24, 1))
>deeper : Symbol(deeper, Decl(discriminantNarrowingCouldBeCircular.ts, 33, 13))
>deeper : Symbol(deeper, Decl(discriminantNarrowingCouldBeCircular.ts, 33, 13))
      }
  }

