SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' CachedDirectoryStructureHost'
        ImportSpecifier
          Identifier: ' CompilerOptions'
        ImportSpecifier
          Identifier: ' Diagnostic'
        ImportSpecifier
          Identifier: ' DirectoryStructureHost'
        ImportSpecifier
          Identifier: ' DocumentPosition'
        ImportSpecifier
          Identifier: ' DocumentPositionMapper'
        ImportSpecifier
          Identifier: ' DocumentRegistry'
        ImportSpecifier
          Identifier: ' DocumentRegistryBucketKeyWithMode'
        ImportSpecifier
          Identifier: ' FileExtensionInfo'
        ImportSpecifier
          Identifier: ' FileWatcher'
        ImportSpecifier
          Identifier: ' FormatCodeSettings'
        ImportSpecifier
          Identifier: ' HostCancellationToken'
        ImportSpecifier
          Identifier: ' IncompleteCompletionsCache'
        ImportSpecifier
          Identifier: ' JSDocParsingMode'
        ImportSpecifier
          Identifier: ' LanguageServiceMode'
        ImportSpecifier
          Identifier: ' MultiMap'
        ImportSpecifier
          Identifier: ' noop'
        ImportSpecifier
          Identifier: ' PackageJsonAutoImportPreference'
        ImportSpecifier
          Identifier: ' ParsedCommandLine'
        ImportSpecifier
          Identifier: ' Path'
        ImportSpecifier
          Identifier: ' PerformanceEvent'
        ImportSpecifier
          Identifier: ' PluginImport'
        ImportSpecifier
          Identifier: ' ProgramUpdateLevel'
        ImportSpecifier
          Identifier: ' ProjectPackageJsonInfo'
        ImportSpecifier
          Identifier: ' ReadonlyCollection'
        ImportSpecifier
          Identifier: ' ScriptKind'
        ImportSpecifier
          Identifier: ' SourceFile'
        ImportSpecifier
          Identifier: ' SourceFileLike'
        ImportSpecifier
          Identifier: ' TextChange'
        ImportSpecifier
          Identifier: ' TsConfigSourceFile'
        ImportSpecifier
          Identifier: ' TypeAcquisition'
        ImportSpecifier
          Identifier: ' UserPreferences'
        ImportSpecifier
          Identifier: ' WatchFactory'
        ImportSpecifier
          Identifier: ' WatchOptions'
        ImportSpecifier
          Identifier: ' WatchType'
        ImportSpecifier
          Identifier: ' WildcardDirectoryWatcher'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' AutoImportProviderProject'
        ImportSpecifier
          Identifier: ' AuxiliaryProject'
        ImportSpecifier
          Identifier: ' BeginInstallTypes'
        ImportSpecifier
          Identifier: ' ConfiguredProject'
        ImportSpecifier
          Identifier: ' EndInstallTypes'
        ImportSpecifier
          Identifier: ' ExternalProject'
        ImportSpecifier
          Identifier: ' InferredProject'
        ImportSpecifier
          Identifier: ' InvalidateCachedTypings'
        ImportSpecifier
          Identifier: ' ITypingsInstaller'
        ImportSpecifier
          Identifier: ' Logger'
        ImportSpecifier
          Identifier: ' NormalizedPath'
        ImportSpecifier
          Identifier: ' PackageInstalledResponse'
        ImportSpecifier
          Identifier: ' PackageJsonCache'
        ImportSpecifier
          Identifier: ' Project'
        ImportSpecifier
          Identifier: ' ProjectFilesWithTSDiagnostics'
        ImportSpecifier
          Identifier: ' ScriptInfo'
        ImportSpecifier
          Identifier: ' ServerHost'
        ImportSpecifier
          Identifier: ' Session'
        ImportSpecifier
          Identifier: ' SetTypings'
        ImportSpecifier
          Identifier: ' ThrottledOperations'
        ImportSpecifier
          Identifier: ' WatchTypingLocations'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamespaceImport
        Identifier: ' protocol'
    StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' maxProgramSizeForNonTsFiles'
        NumberKeyword
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' maxFileSize'
        NumberKeyword
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ProjectsUpdatedInBackgroundEvent'
        StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ProjectLoadingStartEvent'
        StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ProjectLoadingFinishEvent'
        StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' LargeFileReferencedEvent'
        StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ConfigFileDiagEvent'
        StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ProjectLanguageServiceStateEvent'
        StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' ProjectInfoTelemetryEvent'
        StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' OpenFileInfoTelemetryEvent'
        StringLiteral
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' CreateFileWatcherEvent'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'CreateFileWatcherEventName'
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' CreateDirectoryWatcherEvent'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'CreateDirectoryWatcherEventName'
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' CloseFileWatcherEvent'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'CloseFileWatcherEventName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectsUpdatedInBackgroundEvent'
    PropertySignature
      Identifier: '
    eventName'
      TypeQuery
        Identifier: ' ProjectsUpdatedInBackgroundEvent'
    PropertySignature
      Identifier: '
    data'
      TypeLiteral
        PropertySignature
          Identifier: '
        openFiles'
          ArrayType
            StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectLoadingStartEvent'
    PropertySignature
      Identifier: '
    eventName'
      TypeQuery
        Identifier: ' ProjectLoadingStartEvent'
    PropertySignature
      Identifier: '
    data'
      TypeLiteral
        PropertySignature
          Identifier: '
        project'
          TypeReference
            Identifier: ' Project'
        PropertySignature
          Identifier: '
        reason'
          StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectLoadingFinishEvent'
    PropertySignature
      Identifier: '
    eventName'
      TypeQuery
        Identifier: ' ProjectLoadingFinishEvent'
    PropertySignature
      Identifier: '
    data'
      TypeLiteral
        PropertySignature
          Identifier: '
        project'
          TypeReference
            Identifier: ' Project'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LargeFileReferencedEvent'
    PropertySignature
      Identifier: '
    eventName'
      TypeQuery
        Identifier: ' LargeFileReferencedEvent'
    PropertySignature
      Identifier: '
    data'
      TypeLiteral
        PropertySignature
          Identifier: '
        file'
          StringKeyword
        PropertySignature
          Identifier: '
        fileSize'
          NumberKeyword
        PropertySignature
          Identifier: '
        maxFileSize'
          NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConfigFileDiagEvent'
    PropertySignature
      Identifier: '
    eventName'
      TypeQuery
        Identifier: ' ConfigFileDiagEvent'
    PropertySignature
      Identifier: '
    data'
      TypeLiteral
        PropertySignature
          Identifier: '
        triggerFile'
          StringKeyword
        PropertySignature
          Identifier: '
        configFileName'
          StringKeyword
        PropertySignature
          Identifier: '
        diagnostics'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Diagnostic'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectLanguageServiceStateEvent'
    PropertySignature
      Identifier: '
    eventName'
      TypeQuery
        Identifier: ' ProjectLanguageServiceStateEvent'
    PropertySignature
      Identifier: '
    data'
      TypeLiteral
        PropertySignature
          Identifier: '
        project'
          TypeReference
            Identifier: ' Project'
        PropertySignature
          Identifier: '
        languageServiceEnabled'
          BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectInfoTelemetryEvent'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' eventName'
      TypeQuery
        Identifier: ' ProjectInfoTelemetryEvent'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' data'
      TypeReference
        Identifier: ' ProjectInfoTelemetryEventData'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectInfoTelemetryEventData'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' projectId'
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' fileStats'
      TypeReference
        Identifier: ' FileStats'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' compilerOptions'
      TypeReference
        Identifier: ' CompilerOptions'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' extends'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' files'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' include'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exclude'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' compileOnSave'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeAcquisition'
      TypeReference
        Identifier: ' ProjectInfoTypeAcquisitionData'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' configFileName'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' projectType'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' languageServiceEnabled'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' version'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OpenFileInfoTelemetryEvent'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' eventName'
      TypeQuery
        Identifier: ' OpenFileInfoTelemetryEvent'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' data'
      TypeReference
        Identifier: ' OpenFileInfoTelemetryEventData'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OpenFileInfoTelemetryEventData'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' info'
      TypeReference
        Identifier: ' OpenFileInfo'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectInfoTypeAcquisitionData'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' enable'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' include'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exclude'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FileStats'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' js'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' jsSize'
      QuestionToken
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' jsx'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' jsxSize'
      QuestionToken
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' ts'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tsSize'
      QuestionToken
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tsx'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tsxSize'
      QuestionToken
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dts'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dtsSize'
      QuestionToken
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' deferred'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' deferredSize'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OpenFileInfo'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' checkJs'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CreateFileWatcherEvent'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' eventName'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'CreateFileWatcherEventName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' data'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'CreateFileWatcherEventBody'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CreateDirectoryWatcherEvent'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' eventName'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'CreateDirectoryWatcherEventName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' data'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'CreateDirectoryWatcherEventBody'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CloseFileWatcherEvent'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' eventName'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'CloseFileWatcherEventName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' data'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'CloseFileWatcherEventBody'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ProjectServiceEvent'
    UnionType
      TypeReference
        Identifier: ' LargeFileReferencedEvent'
      TypeReference
        Identifier: ' ProjectsUpdatedInBackgroundEvent'
      TypeReference
        Identifier: ' ProjectLoadingStartEvent'
      TypeReference
        Identifier: ' ProjectLoadingFinishEvent'
      TypeReference
        Identifier: ' ConfigFileDiagEvent'
      TypeReference
        Identifier: ' ProjectLanguageServiceStateEvent'
      TypeReference
        Identifier: ' ProjectInfoTelemetryEvent'
      TypeReference
        Identifier: ' OpenFileInfoTelemetryEvent'
      TypeReference
        Identifier: ' CreateFileWatcherEvent'
      TypeReference
        Identifier: ' CreateDirectoryWatcherEvent'
      TypeReference
        Identifier: ' CloseFileWatcherEvent'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ProjectServiceEventHandler'
    FunctionType
      Parameter
        Identifier: 'event'
        TypeReference
          Identifier: ' ProjectServiceEvent'
      VoidKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PerformanceEventHandler'
    FunctionType
      Parameter
        Identifier: 'event'
        TypeReference
          Identifier: ' PerformanceEvent'
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SafeList'
    IndexSignature
      Parameter
        Identifier: 'name'
        StringKeyword
      TypeLiteral
        PropertySignature
          Identifier: '
        match'
          TypeReference
            Identifier: ' RegExp'
        PropertySignature
          Identifier: '
        exclude'
          QuestionToken
          ArrayType
            ArrayType
              ParenthesizedType
                UnionType
                  StringKeyword
                  NumberKeyword
        PropertySignature
          Identifier: '
        types'
          QuestionToken
          ArrayType
            StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypesMapFile'
    PropertySignature
      Identifier: '
    typesMap'
      TypeReference
        Identifier: ' SafeList'
    PropertySignature
      Identifier: '
    simpleMap'
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'libName'
            StringKeyword
          StringKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' convertFormatOptions'
    Parameter
      Identifier: 'protocolOptions'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'FormatCodeSettings'
    TypeReference
      Identifier: ' FormatCodeSettings'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' convertCompilerOptions'
    Parameter
      Identifier: 'protocolOptions'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'ExternalProjectCompilerOptions'
    IntersectionType
      TypeReference
        Identifier: ' CompilerOptions'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'CompileOnSaveMixin'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' convertWatchOptions'
    Parameter
      Identifier: 'protocolOptions'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'ExternalProjectCompilerOptions'
    Parameter
      Identifier: ' currentDirectory'
      QuestionToken
      StringKeyword
    UnionType
      TypeReference
        Identifier: ' WatchOptionsAndErrors'
      UndefinedKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' convertTypeAcquisition'
    Parameter
      Identifier: 'protocolOptions'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'InferredProjectCompilerOptions'
    UnionType
      TypeReference
        Identifier: ' TypeAcquisition'
      UndefinedKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' tryConvertScriptKindName'
    Parameter
      Identifier: 'scriptKindName'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'ScriptKindName'
        TypeReference
          Identifier: ' ScriptKind'
    TypeReference
      Identifier: ' ScriptKind'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' convertScriptKindName'
    Parameter
      Identifier: 'scriptKindName'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'ScriptKindName'
    TypeReference
      Identifier: ' ScriptKind'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' convertUserPreferences'
    Parameter
      Identifier: 'preferences'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'UserPreferences'
    TypeReference
      Identifier: ' UserPreferences'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' HostConfiguration'
    PropertySignature
      Identifier: '
    formatCodeOptions'
      TypeReference
        Identifier: ' FormatCodeSettings'
    PropertySignature
      Identifier: '
    preferences'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'UserPreferences'
    PropertySignature
      Identifier: '
    hostInfo'
      StringKeyword
    PropertySignature
      Identifier: '
    extraFileExtensions'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' FileExtensionInfo'
    PropertySignature
      Identifier: '
    watchOptions'
      QuestionToken
      TypeReference
        Identifier: ' WatchOptions'
    PropertySignature
      Identifier: '
    /** @internal */ beforeSubstitution'
      QuestionToken
      TypeReference
        Identifier: ' WatchOptions'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OpenConfiguredProjectResult'
    PropertySignature
      Identifier: '
    configFileName'
      QuestionToken
      TypeReference
        Identifier: ' NormalizedPath'
    PropertySignature
      Identifier: '
    configFileErrors'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
  VariableStatement
    ExportKeyword
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' nullTypingsInstaller'
        TypeReference
          Identifier: ' ITypingsInstaller'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConfigFileExistenceInfo'
    PropertySignature
      Identifier: '
    /**
     * Cached value of existence of config file
     * It is true if there is configured project open for this file.
     * It can be either true or false if this is the config file that is being watched by inferred project
     *   to decide when to update the structure so that it knows about updating the project for its files
     *   (config file may include the inferred project files after the change and hence may be wont need to be in inferred project)
     */
    exists'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Tracks how many open files are impacted by this config file that are root of inferred project
     */
    inferredProjectRoots'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * openFilesImpactedByConfigFiles is a map of open files that would be impacted by this config file
     *   because these are the paths being looked up for their default configured project location
     */
    openFilesImpactedByConfigFile'
      QuestionToken
      TypeReference
        Identifier: ' Set'
        TypeReference
          Identifier: 'Path'
    PropertySignature
      Identifier: '
    /**
     * The file watcher watching the config file because there is open script info that is root of
     * inferred project and will be impacted by change in the status of the config file
     * or
     * Configured project for this config file is open
     * or
     * Configured project references this config file
     */
    watcher'
      QuestionToken
      TypeReference
        Identifier: ' FileWatcher'
    PropertySignature
      Identifier: '
    /**
     * Cached parsed command line and other related information like watched directories etc
     */
    config'
      QuestionToken
      TypeReference
        Identifier: ' ParsedConfig'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectServiceOptions'
    PropertySignature
      Identifier: '
    host'
      TypeReference
        Identifier: ' ServerHost'
    PropertySignature
      Identifier: '
    logger'
      TypeReference
        Identifier: ' Logger'
    PropertySignature
      Identifier: '
    cancellationToken'
      TypeReference
        Identifier: ' HostCancellationToken'
    PropertySignature
      Identifier: '
    useSingleInferredProject'
      BooleanKeyword
    PropertySignature
      Identifier: '
    useInferredProjectPerProjectRoot'
      BooleanKeyword
    PropertySignature
      Identifier: '
    typingsInstaller'
      QuestionToken
      TypeReference
        Identifier: ' ITypingsInstaller'
    PropertySignature
      Identifier: '
    eventHandler'
      QuestionToken
      TypeReference
        Identifier: ' ProjectServiceEventHandler'
    PropertySignature
      Identifier: '
    canUseWatchEvents'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    suppressDiagnosticEvents'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    throttleWaitMilliseconds'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '
    globalPlugins'
      QuestionToken
      TypeOperator
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: '
    pluginProbeLocations'
      QuestionToken
      TypeOperator
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: '
    allowLocalPluginLoads'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    typesMapLocation'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    serverMode'
      QuestionToken
      TypeReference
        Identifier: ' LanguageServiceMode'
    PropertySignature
      Identifier: '
    session'
      UnionType
        TypeReference
          Identifier: ' Session'
          UnknownKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /** @internal */ incrementalVerifier'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'service'
          TypeReference
            Identifier: ' ProjectService'
        VoidKeyword
    PropertySignature
      Identifier: '
    jsDocParsingMode'
      QuestionToken
      TypeReference
        Identifier: ' JSDocParsingMode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ConfigFileName'
    UnionType
      TypeReference
        Identifier: ' NormalizedPath'
      LiteralType
        FalseKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ConfigFileMapForOpenFile'
    TypeReference
      Identifier: ' Map'
      TypeReference
        Identifier: 'ConfigFileName'
      TypeReference
        Identifier: ' ConfigFileName'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ConfigFileForOpenFile'
    UnionType
      TypeReference
        Identifier: ' ConfigFileName'
      TypeReference
        Identifier: ' ConfigFileMapForOpenFile'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OriginalFileInfo'
    PropertySignature
      Identifier: '
    fileName'
      TypeReference
        Identifier: ' NormalizedPath'
    PropertySignature
      Identifier: '
    path'
      TypeReference
        Identifier: ' Path'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AncestorConfigFileInfo'
    PropertySignature
      Identifier: '
    /** config file name */
    fileName'
      TypeReference
        Identifier: ' NormalizedPath'
    PropertySignature
      Identifier: '
    /** path of open file so we can look at correct root */
    path'
      TypeReference
        Identifier: ' Path'
    PropertySignature
      Identifier: '
    configFileInfo'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    isForDefaultProject'
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OpenScriptInfoOrClosedFileInfo'
    UnionType
      TypeReference
        Identifier: ' ScriptInfo'
      TypeReference
        Identifier: ' OriginalFileInfo'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OpenScriptInfoOrClosedOrConfigFileInfo'
    UnionType
      TypeReference
        Identifier: ' OpenScriptInfoOrClosedFileInfo'
      TypeReference
        Identifier: ' AncestorConfigFileInfo'
  EnumDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ConfiguredProjectLoadKind'
    EnumMember
      Identifier: '
    FindOptimized'
      NumericLiteral
    EnumMember
      Identifier: '
    Find'
      NumericLiteral
    EnumMember
      Identifier: '
    CreateReplayOptimized'
      NumericLiteral
    EnumMember
      Identifier: '
    CreateReplay'
      NumericLiteral
    EnumMember
      Identifier: '
    CreateOptimized'
      NumericLiteral
    EnumMember
      Identifier: '
    Create'
      NumericLiteral
    EnumMember
      Identifier: '
    ReloadOptimized'
      NumericLiteral
    EnumMember
      Identifier: '
    Reload'
      NumericLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ConfigureProjectToLoadKind'
    TypeReference
      Identifier: ' Map'
      TypeReference
        Identifier: 'ConfiguredProject'
      TypeReference
        Identifier: ' ConfiguredProjectLoadKind'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ConfiguredProjectToAnyReloadKind'
    TypeReference
      Identifier: ' Map'
      TypeReference
        Identifier: 'ConfiguredProject'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' ConfiguredProjectLoadKind'
            Identifier: 'Reload'
        TypeReference
          QualifiedName
            Identifier: ' ConfiguredProjectLoadKind'
            Identifier: 'ReloadOptimized'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DefaultConfiguredProjectResult'
    TypeReference
      Identifier: ' ReturnType'
      IndexedAccessType
        TypeReference
          Identifier: 'ProjectService'
        LiteralType
          StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FindCreateOrLoadConfiguredProjectResult'
    PropertySignature
      Identifier: '
    project'
      TypeReference
        Identifier: ' ConfiguredProject'
    PropertySignature
      Identifier: '
    sentConfigFileDiag'
      BooleanKeyword
    PropertySignature
      Identifier: '
    configFileExistenceInfo'
      UnionType
        TypeReference
          Identifier: ' ConfigFileExistenceInfo'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    reason'
      UnionType
        StringKeyword
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PackageJsonWatcher'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FileWatcher'
    PropertySignature
      Identifier: '
    projects'
      TypeReference
        Identifier: ' Set'
        UnionType
          TypeReference
            Identifier: 'Project'
          TypeReference
            Identifier: ' WildcardWatcher'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WildcardWatcher'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FileWatcher'
    PropertySignature
      Identifier: '
    packageJsonWatches'
      UnionType
        TypeReference
          Identifier: ' Set'
          TypeReference
            Identifier: 'PackageJsonWatcher'
        UndefinedKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getDetailWatchInfo'
    Parameter
      Identifier: 'watchType'
      TypeReference
        Identifier: ' WatchType'
    Parameter
      Identifier: ' project'
      UnionType
        TypeReference
          Identifier: ' Project'
        TypeReference
          Identifier: ' NormalizedPath'
        UndefinedKeyword
    StringKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' updateProjectIfDirty'
    Parameter
      Identifier: 'project'
      TypeReference
        Identifier: ' Project'
    BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OpenFileArguments'
    PropertySignature
      Identifier: '
    fileName'
      StringKeyword
    PropertySignature
      Identifier: '
    content'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    scriptKind'
      QuestionToken
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'ScriptKindName'
        TypeReference
          Identifier: ' ScriptKind'
    PropertySignature
      Identifier: '
    hasMixedContent'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    projectRootPath'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ChangeFileArguments'
    PropertySignature
      Identifier: '
    fileName'
      StringKeyword
    PropertySignature
      Identifier: '
    changes'
      TypeReference
        Identifier: ' Iterable'
        TypeReference
          Identifier: 'TextChange'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchOptionsAndErrors'
    PropertySignature
      Identifier: '
    watchOptions'
      TypeReference
        Identifier: ' WatchOptions'
    PropertySignature
      Identifier: '
    errors'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParsedConfig'
    PropertySignature
      Identifier: '
    cachedDirectoryStructureHost'
      TypeReference
        Identifier: ' CachedDirectoryStructureHost'
    PropertySignature
      Identifier: '
    /**
     * The map contains
     *   - true if project is watching config file as well as wild cards
     *   - false if just config file is watched
     */
    projects'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'NormalizedPath'
        BooleanKeyword
    PropertySignature
      Identifier: '
    parsedCommandLine'
      QuestionToken
      TypeReference
        Identifier: ' ParsedCommandLine'
    PropertySignature
      Identifier: '
    watchedDirectories'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' WildcardDirectoryWatcher'
          TypeReference
            Identifier: 'WildcardWatcher'
    PropertySignature
      Identifier: '
    /**
     * true if watchedDirectories need to be updated as per parsedCommandLine's updated watched directories
     */
    watchedDirectoriesStale'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    updateLevel'
      QuestionToken
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' ProgramUpdateLevel'
            Identifier: 'RootNamesAndUpdate'
        TypeReference
          QualifiedName
            Identifier: ' ProgramUpdateLevel'
            Identifier: 'Full'
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ProjectService'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' documentRegistry'
      TypeReference
        Identifier: ' DocumentRegistry'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' filenameToScriptInfo'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'Path'
        TypeReference
          Identifier: ' ScriptInfo'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' nodeModulesWatchers'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' filenameToScriptInfoVersion'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' allJsFilesForOpenFileTelemetry'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' realpathToScriptInfos'
      UnionType
        TypeReference
          Identifier: ' MultiMap'
          TypeReference
            Identifier: 'Path'
          TypeReference
            Identifier: ' ScriptInfo'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' externalProjectToConfiguredProjectMap'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' externalProjects'
      ArrayType
        TypeReference
          Identifier: ' ExternalProject'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' inferredProjects'
      ArrayType
        TypeReference
          Identifier: ' InferredProject'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' configuredProjects'
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' ConfiguredProject'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' newInferredProjectName'
      FunctionType
        StringKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' newAutoImportProviderProjectName'
      FunctionType
        StringKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' newAuxiliaryProjectName'
      FunctionType
        StringKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' openFiles'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'Path'
        UnionType
          TypeReference
            Identifier: ' NormalizedPath'
          UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' configFileForOpenFiles'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' rootOfInferredProjects'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' openFilesWithNonRootedDiskPath'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' compilerOptionsForInferredProjects'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' compilerOptionsForInferredProjectsPerProjectRoot'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' watchOptionsForInferredProjects'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' watchOptionsForInferredProjectsPerProjectRoot'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' typeAcquisitionForInferredProjects'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' typeAcquisitionForInferredProjectsPerProjectRoot'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' projectToSizeMap'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' configFileExistenceInfoCache'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'NormalizedPath'
        TypeReference
          Identifier: ' ConfigFileExistenceInfo'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' throttledOperations'
      TypeReference
        Identifier: ' ThrottledOperations'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' hostConfiguration'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' safelist'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' legacySafelist'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' pendingProjectUpdates'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' pendingOpenFileProjectUpdates'
      QuestionToken
    PropertyDeclaration
      Identifier: '
    /** @internal */
    pendingEnsureProjectForOpenFiles'
      BooleanKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' currentDirectory'
      TypeReference
        Identifier: ' NormalizedPath'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' toCanonicalFileName'
      FunctionType
        Parameter
          Identifier: 'f'
          StringKeyword
        StringKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' host'
      TypeReference
        Identifier: ' ServerHost'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' logger'
      TypeReference
        Identifier: ' Logger'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' cancellationToken'
      TypeReference
        Identifier: ' HostCancellationToken'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' useSingleInferredProject'
      BooleanKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' useInferredProjectPerProjectRoot'
      BooleanKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' typingsInstaller'
      TypeReference
        Identifier: ' ITypingsInstaller'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' globalCacheLocationDirectoryPath'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' throttleWaitMilliseconds'
      QuestionToken
      NumberKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' eventHandler'
      QuestionToken
      TypeReference
        Identifier: ' ProjectServiceEventHandler'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' suppressDiagnosticEvents'
      QuestionToken
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' globalPlugins'
      TypeOperator
        ArrayType
          StringKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' pluginProbeLocations'
      TypeOperator
        ArrayType
          StringKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' allowLocalPluginLoads'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
    /** @internal */ currentPluginConfigOverrides'
      UnionType
        TypeReference
          Identifier: ' Map'
          StringKeyword
          AnyKeyword
        UndefinedKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' typesMapLocation'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' serverMode'
      TypeReference
        Identifier: ' LanguageServiceMode'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' seenProjects'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' watchFactory'
      TypeReference
        Identifier: ' WatchFactory'
        TypeReference
          Identifier: 'WatchType'
        UnionType
          TypeReference
            Identifier: ' Project'
          TypeReference
            Identifier: ' NormalizedPath'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' sharedExtendedConfigFileWatchers'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' extendedConfigCache'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' packageJsonCache'
      TypeReference
        Identifier: ' PackageJsonCache'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' packageJsonFilesMap'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' incompleteCompletionsCache'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' session'
      UnionType
        TypeReference
          Identifier: ' Session'
          UnknownKeyword
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' performanceEventHandler'
      QuestionToken
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' pendingPluginEnablements'
      QuestionToken
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' currentPluginEnablementPromise'
      QuestionToken
    PropertyDeclaration
      Identifier: '
    /** @internal */ baseline'
      FunctionType
        Parameter
          Identifier: 'title'
          QuestionToken
          StringKeyword
        VoidKeyword
    PropertyDeclaration
      Identifier: '
    /** @internal */ verifyDocumentRegistry'
      TypeQuery
        Identifier: ' noop'
    PropertyDeclaration
      Identifier: '
    /** @internal */ verifyProgram'
      FunctionType
        Parameter
          Identifier: 'project'
          TypeReference
            Identifier: ' Project'
        VoidKeyword
    PropertyDeclaration
      Identifier: '
    /** @internal */ onProjectCreation'
      FunctionType
        Parameter
          Identifier: 'project'
          TypeReference
            Identifier: ' Project'
        VoidKeyword
    PropertyDeclaration
      Identifier: '
    /** @internal */ canUseWatchEvents'
      BooleanKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' jsDocParsingMode'
      UnionType
        TypeReference
          Identifier: ' JSDocParsingMode'
        UndefinedKeyword
    Constructor
      Parameter
        Identifier: 'opts'
        TypeReference
          Identifier: ' ProjectServiceOptions'
    MethodDeclaration
      Identifier: '
    toPath'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      TypeReference
        Identifier: ' Path'
    MethodDeclaration
      Identifier: '
    /** @internal */
    getExecutingFilePath'
      StringKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    getNormalizedAbsolutePath'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      StringKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    setDocument'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' DocumentRegistryBucketKeyWithMode'
      Parameter
        Identifier: ' path'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    getDocument'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' DocumentRegistryBucketKeyWithMode'
      Parameter
        Identifier: ' path'
        TypeReference
          Identifier: ' Path'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    ensureInferredProjectsUpToDate_TestOnly'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    getCompilerOptionsForInferredProjects'
      UnionType
        TypeReference
          Identifier: ' CompilerOptions'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    onUpdateLanguageServiceStateForProject'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' Project'
      Parameter
        Identifier: ' languageServiceEnabled'
        BooleanKeyword
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' loadTypesMap'
    MethodDeclaration
      Identifier: '
    updateTypingsForProject'
      Parameter
        Identifier: 'response'
        UnionType
          TypeReference
            Identifier: ' SetTypings'
          TypeReference
            Identifier: ' InvalidateCachedTypings'
          TypeReference
            Identifier: ' PackageInstalledResponse'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    updateTypingsForProject'
      Parameter
        Identifier: 'response'
        UnionType
          TypeReference
            Identifier: ' SetTypings'
          TypeReference
            Identifier: ' InvalidateCachedTypings'
          TypeReference
            Identifier: ' PackageInstalledResponse'
          TypeReference
            Identifier: ' BeginInstallTypes'
          TypeReference
            Identifier: ' EndInstallTypes'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    watchTypingLocations'
      Parameter
        Identifier: 'response'
        TypeReference
          Identifier: ' WatchTypingLocations'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    delayEnsureProjectForOpenFiles'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' delayUpdateProjectGraph'
    MethodDeclaration
      Identifier: '
    /** @internal */
    hasPendingProjectUpdate'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' Project'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    sendProjectsUpdatedInBackgroundEvent'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    sendLargeFileReferencedEvent'
      Parameter
        Identifier: 'file'
        StringKeyword
      Parameter
        Identifier: ' fileSize'
        NumberKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    sendProjectLoadingStartEvent'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' ConfiguredProject'
      Parameter
        Identifier: ' reason'
        StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    sendProjectLoadingFinishEvent'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' ConfiguredProject'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    sendPerformanceEvent'
      Parameter
        Identifier: 'kind'
        IndexedAccessType
          TypeReference
            Identifier: ' PerformanceEvent'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' durationMs'
        NumberKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    delayUpdateProjectGraphAndEnsureProjectStructureForOpenFiles'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' Project'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' delayUpdateProjectGraphs'
    MethodDeclaration
      Identifier: '
    setCompilerOptionsForInferredProjects'
      Parameter
        Identifier: 'projectCompilerOptions'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'InferredProjectCompilerOptions'
      Parameter
        Identifier: ' projectRootPath'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    findProject'
      Parameter
        Identifier: 'projectName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' Project'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    forEachProject'
      Parameter
        Identifier: 'cb'
        FunctionType
          Parameter
            Identifier: 'project'
            TypeReference
              Identifier: ' Project'
          VoidKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    forEachEnabledProject'
      Parameter
        Identifier: 'cb'
        FunctionType
          Parameter
            Identifier: 'project'
            TypeReference
              Identifier: ' Project'
          VoidKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    getDefaultProjectForFile'
      Parameter
        Identifier: 'fileName'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' ensureProject'
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' Project'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    tryGetDefaultProjectForFile'
      Parameter
        Identifier: 'fileNameOrScriptInfo'
        UnionType
          TypeReference
            Identifier: ' NormalizedPath'
          TypeReference
            Identifier: ' ScriptInfo'
      UnionType
        TypeReference
          Identifier: ' Project'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' tryGetDefaultProjectForEnsuringConfiguredProjectForFile'
    MethodDeclaration
      Identifier: '
    /** @internal */
    ensureDefaultProjectForFile'
      Parameter
        Identifier: 'fileNameOrScriptInfo'
        UnionType
          TypeReference
            Identifier: ' NormalizedPath'
          TypeReference
            Identifier: ' ScriptInfo'
      TypeReference
        Identifier: ' Project'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' doEnsureDefaultProjectForFile'
    MethodDeclaration
      Identifier: '
    getScriptInfoEnsuringProjectsUptoDate'
      Parameter
        Identifier: 'uncheckedFileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' ScriptInfo'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' ensureProjectStructuresUptoDate'
    MethodDeclaration
      Identifier: '
    getFormatCodeOptions'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' NormalizedPath'
      TypeReference
        Identifier: ' FormatCodeSettings'
    MethodDeclaration
      Identifier: '
    getPreferences'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' NormalizedPath'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'UserPreferences'
    MethodDeclaration
      Identifier: '
    getHostFormatCodeOptions'
      TypeReference
        Identifier: ' FormatCodeSettings'
    MethodDeclaration
      Identifier: '
    getHostPreferences'
      TypeReference
        QualifiedName
          Identifier: ' protocol'
          Identifier: 'UserPreferences'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' onSourceFileChanged'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' handleSourceMapProjects'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' delayUpdateSourceInfoProjects'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' delayUpdateProjectsOfScriptInfoPath'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' handleDeletedFile'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' watchWildcardDirectory'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' onWildCardDirectoryWatcherInvoke'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' delayUpdateProjectsFromParsedConfigOnConfigFileChange'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' onConfigFileChanged'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' removeProject'
    MethodDeclaration
      Identifier: '
    /** @internal */
    assignOrphanScriptInfoToInferredProject'
      Parameter
        Identifier: 'info'
        TypeReference
          Identifier: ' ScriptInfo'
      Parameter
        Identifier: ' projectRootPath'
        UnionType
          TypeReference
            Identifier: ' NormalizedPath'
          UndefinedKeyword
      TypeReference
        Identifier: ' InferredProject'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' assignOrphanScriptInfosToInferredProject'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' closeOpenFile'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' deleteScriptInfo'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' configFileExists'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' createConfigFileWatcherForParsedConfig'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' ensureConfigFileWatcherForProject'
    MethodDeclaration
      Identifier: '
    /** @internal */
    releaseParsedConfig'
      Parameter
        Identifier: 'canonicalConfigFilePath'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' forProject'
        TypeReference
          Identifier: ' ConfiguredProject'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * This is called on file close or when its removed from inferred project as root,
     * so that we handle the watches and inferred project root data
     * @internal
     */
    stopWatchingConfigFilesForScriptInfo'
      Parameter
        Identifier: 'info'
        TypeReference
          Identifier: ' ScriptInfo'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * This is called by inferred project whenever script info is added as a root
     *
     * @internal
     */
    startWatchingConfigFilesForInferredProjectRoot'
      Parameter
        Identifier: 'info'
        TypeReference
          Identifier: ' ScriptInfo'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' forEachConfigFileLocation'
    MethodDeclaration
      Identifier: '
    /** @internal */
    findDefaultConfiguredProject'
      Parameter
        Identifier: 'info'
        TypeReference
          Identifier: ' ScriptInfo'
      UnionType
        TypeReference
          Identifier: ' ConfiguredProject'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    findDefaultConfiguredProjectWorker'
      Parameter
        Identifier: 'info'
        TypeReference
          Identifier: ' ScriptInfo'
      Parameter
        Identifier: ' kind'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' ConfiguredProjectLoadKind'
              Identifier: 'Find'
          TypeReference
            QualifiedName
              Identifier: ' ConfiguredProjectLoadKind'
              Identifier: 'CreateReplay'
      UnionType
        TypeReference
          Identifier: ' DefaultConfiguredProjectResult'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getConfigFileNameForFileFromCache'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' setConfigFileNameForFileInCache'
    MethodDeclaration
      Identifier: '
    /**
     * This function tries to search for a tsconfig.json for the given file.
     * This is different from the method the compiler uses because
     * the compiler can assume it will always start searching in the
     * current directory (the directory in which tsc was invoked).
     * The server must start searching from the directory containing
     * the newly opened file.
     * If script info is passed in, it is asserted to be open script info
     * otherwise just file name
     * when findFromCacheOnly is true only looked up in cache instead of hitting disk to figure things out
     * @internal
     */
    getConfigFileNameForFile'
      Parameter
        Identifier: 'info'
        TypeReference
          Identifier: ' OpenScriptInfoOrClosedOrConfigFileInfo'
      Parameter
        Identifier: ' findFromCacheOnly'
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' NormalizedPath'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' printProjects'
    MethodDeclaration
      Identifier: '
    /** @internal */
    findConfiguredProjectByProjectName'
      Parameter
        Identifier: 'configFileName'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' allowDeferredClosed'
        QuestionToken
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' ConfiguredProject'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getConfiguredProjectByCanonicalConfigFilePath'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' findExternalProjectByProjectName'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getFilenameForExceededTotalSizeLimitForNonTsFiles'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' createExternalProject'
    MethodDeclaration
      Identifier: '
    /** @internal */
    sendProjectTelemetry'
      Parameter
        Identifier: 'project'
        UnionType
          TypeReference
            Identifier: ' ExternalProject'
          TypeReference
            Identifier: ' ConfiguredProject'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' addFilesToNonInferredProject'
    MethodDeclaration
      Identifier: '
    /** @internal */
    createConfiguredProject'
      Parameter
        Identifier: 'configFileName'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' reason'
        StringKeyword
      TypeReference
        Identifier: ' ConfiguredProject'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' loadConfiguredProject'
    MethodDeclaration
      Identifier: '
    /** @internal */
    ensureParsedConfigUptoDate'
      Parameter
        Identifier: 'configFilename'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' canonicalConfigFilePath'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' configFileExistenceInfo'
        TypeReference
          Identifier: ' ConfigFileExistenceInfo'
      Parameter
        Identifier: ' forProject'
        TypeReference
          Identifier: ' ConfiguredProject'
      TypeReference
        Identifier: ' ConfigFileExistenceInfo'
    MethodDeclaration
      Identifier: '
    /** @internal */
    watchWildcards'
      Parameter
        Identifier: 'configFileName'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        ObjectBindingPattern
          BindingElement
            Identifier: ' exists'
          BindingElement
            Identifier: ' config'
        TypeReference
          Identifier: ' ConfigFileExistenceInfo'
      Parameter
        Identifier: ' forProject'
        TypeReference
          Identifier: ' ConfiguredProject'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    stopWatchingWildCards'
      Parameter
        Identifier: 'canonicalConfigFilePath'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' forProject'
        TypeReference
          Identifier: ' ConfiguredProject'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' updateNonInferredProjectFiles'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' updateRootAndOptionsOfNonInferredProject'
    MethodDeclaration
      Identifier: '
    /**
     * Reload the file names from config file specs and update the project graph
     *
     * @internal
     */
    reloadFileNamesOfConfiguredProject'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' ConfiguredProject'
      BooleanKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' reloadFileNamesOfParsedConfig'
    MethodDeclaration
      Identifier: '
    /** @internal */
    setFileNamesOfAutoImportProviderOrAuxillaryProject'
      Parameter
        Identifier: 'project'
        UnionType
          TypeReference
            Identifier: ' AutoImportProviderProject'
          TypeReference
            Identifier: ' AuxiliaryProject'
      Parameter
        Identifier: ' fileNames'
        TypeOperator
          ArrayType
            StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    reloadConfiguredProjectOptimized'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' ConfiguredProject'
      Parameter
        Identifier: ' reason'
        StringKeyword
      Parameter
        Identifier: ' reloadedProjects'
        TypeReference
          Identifier: ' ConfiguredProjectToAnyReloadKind'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    reloadConfiguredProjectClearingSemanticCache'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' ConfiguredProject'
      Parameter
        Identifier: ' reason'
        StringKeyword
      Parameter
        Identifier: ' reloadedProjects'
        TypeReference
          Identifier: ' ConfiguredProjectToAnyReloadKind'
      BooleanKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' setProjectForReload'
    MethodDeclaration
      Identifier: '
    /**
     * Read the config file of the project again by clearing the cache and update the project graph
     *
     * @internal
     */
    reloadConfiguredProject'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' ConfiguredProject'
      Parameter
        Identifier: ' reason'
        StringKeyword
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' clearSemanticCache'
    MethodDeclaration
      Identifier: '
    /** @internal */
    sendConfigFileDiagEvent'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' ConfiguredProject'
      Parameter
        Identifier: ' triggerFile'
        UnionType
          TypeReference
            Identifier: ' NormalizedPath'
          UndefinedKeyword
      Parameter
        Identifier: ' force'
        BooleanKeyword
      BooleanKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getOrCreateInferredProjectForProjectRootPathIfEnabled'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getOrCreateSingleInferredProjectIfEnabled'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getOrCreateSingleInferredWithoutProjectRoot'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' createInferredProject'
    MethodDeclaration
      Identifier: '
    /** @internal */
    getOrCreateScriptInfoNotOpenedByClient'
      Parameter
        Identifier: 'uncheckedFileName'
        StringKeyword
      Parameter
        Identifier: ' currentDirectory'
        StringKeyword
      Parameter
        Identifier: ' hostToQueryFileExistsOn'
        TypeReference
          Identifier: ' DirectoryStructureHost'
      Parameter
        Identifier: ' deferredDeleteOk'
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' ScriptInfo'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    getScriptInfo'
      Parameter
        Identifier: 'uncheckedFileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' ScriptInfo'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    getScriptInfoOrConfig'
      Parameter
        Identifier: 'uncheckedFileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' ScriptInfoOrConfig'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    logErrorForScriptInfoNotFound'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Returns the projects that contain script info through SymLink
     * Note that this does not return projects in info.containingProjects
     *
     * @internal
     */
    getSymlinkedProjects'
      Parameter
        Identifier: 'info'
        TypeReference
          Identifier: ' ScriptInfo'
      UnionType
        TypeReference
          Identifier: ' MultiMap'
          TypeReference
            Identifier: 'Path'
          TypeReference
            Identifier: ' Project'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' watchClosedScriptInfo'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' createNodeModulesWatcher'
    MethodDeclaration
      Identifier: '
    /** @internal */
    watchPackageJsonsInNodeModules'
      Parameter
        Identifier: 'dir'
        StringKeyword
      Parameter
        Identifier: ' project'
        TypeReference
          Identifier: ' Project'
      TypeReference
        Identifier: ' FileWatcher'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' watchClosedScriptInfoInNodeModules'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getModifiedTime'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' refreshScriptInfo'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' refreshScriptInfosInDirectory'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' stopWatchingScriptInfo'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getOrCreateScriptInfoNotOpenedByClientForNormalizedPath'
    MethodDeclaration
      Identifier: '
    getOrCreateScriptInfoForNormalizedPath'
      Parameter
        Identifier: 'fileName'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' openedByClient'
        BooleanKeyword
      Parameter
        Identifier: ' fileContent'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scriptKind'
        QuestionToken
        TypeReference
          Identifier: ' ScriptKind'
      Parameter
        Identifier: ' hasMixedContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' hostToQueryFileExistsOn'
        QuestionToken
        TypeLiteral
          MethodSignature
            Identifier: '
        fileExists'
            Parameter
              Identifier: 'path'
              StringKeyword
            BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' ScriptInfo'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getOrCreateScriptInfoWorker'
    MethodDeclaration
      Identifier: '
    /**
     * This gets the script info for the normalized path. If the path is not rooted disk path then the open script info with project root context is preferred
     */
    getScriptInfoForNormalizedPath'
      Parameter
        Identifier: 'fileName'
        TypeReference
          Identifier: ' NormalizedPath'
      UnionType
        TypeReference
          Identifier: ' ScriptInfo'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    getScriptInfoForPath'
      Parameter
        Identifier: 'fileName'
        TypeReference
          Identifier: ' Path'
      UnionType
        TypeReference
          Identifier: ' ScriptInfo'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    getDocumentPositionMapper'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' Project'
      Parameter
        Identifier: ' generatedFileName'
        StringKeyword
      Parameter
        Identifier: ' sourceFileName'
        QuestionToken
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' DocumentPositionMapper'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' addSourceInfoToSourceMap'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' addMissingSourceMapFile'
    MethodDeclaration
      Identifier: '
    /** @internal */
    getSourceFileLike'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' projectNameOrProject'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Project'
      Parameter
        Identifier: ' declarationInfo'
        QuestionToken
        TypeReference
          Identifier: ' ScriptInfo'
      UnionType
        TypeReference
          Identifier: ' SourceFileLike'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    setPerformanceEventHandler'
      Parameter
        Identifier: 'performanceEventHandler'
        TypeReference
          Identifier: ' PerformanceEventHandler'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    setHostConfiguration'
      Parameter
        Identifier: 'args'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'ConfigureRequestArguments'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    getWatchOptions'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' Project'
      UnionType
        TypeReference
          Identifier: ' WatchOptions'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getWatchOptionsFromProjectWatchOptions'
    MethodDeclaration
      Identifier: '
    closeLog'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' sendSourceFileChange'
    MethodDeclaration
      Identifier: '
    /**
     * This function rebuilds the project for every file opened by the client
     * This does not reload contents of open files from disk. But we could do that if needed
     */
    reloadProjects'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' removeRootOfInferredProjectIfNowPartOfOtherProject'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' ensureProjectForOpenFiles'
    MethodDeclaration
      Identifier: '
    /**
     * Open file whose contents is managed by the client
     * @param filename is absolute pathname
     * @param fileContent is a known version of the file content that is more up to date than the one on disk
     */
    openClientFile'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' fileContent'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scriptKind'
        QuestionToken
        TypeReference
          Identifier: ' ScriptKind'
      Parameter
        Identifier: ' projectRootPath'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' OpenConfiguredProjectResult'
    MethodDeclaration
      Identifier: '
    /** @internal */
    getOriginalLocationEnsuringConfiguredProject'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' Project'
      Parameter
        Identifier: ' location'
        TypeReference
          Identifier: ' DocumentPosition'
      UnionType
        TypeReference
          Identifier: ' DocumentPosition'
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    fileExists'
      Parameter
        Identifier: 'fileName'
        TypeReference
          Identifier: ' NormalizedPath'
      BooleanKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' findExternalProjectContainingOpenScriptInfo'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' getOrCreateOpenScriptInfo'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' assignProjectToOpenedScriptInfo'
    MethodDeclaration
      Identifier: '
    /**
     * Depending on kind
     * - Find the configuedProject and return it - if allowDeferredClosed is set it will find the deferredClosed project as well
     * - Create - if the project doesnt exist, it creates one as well. If not delayLoad, the project is updated (with triggerFile if passed)
     * - Reload - if the project doesnt exist, it creates one. If not delayLoad, the project is reloaded clearing semantic cache
     *  @internal
     */
    findCreateOrReloadConfiguredProject'
      Parameter
        Identifier: 'configFileName'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' kind'
        TypeReference
          Identifier: ' ConfiguredProjectLoadKind'
      Parameter
        Identifier: ' 
    /** Used with ConfiguredProjectLoadKind.Create or ConfiguredProjectLoadKind.Reload for new projects or reload updates */
    reason'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' 
    /** Used with ConfiguredProjectLoadKind.Find to get deferredClosed projects as well */
    allowDeferredClosed'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' 
    /** Used with ConfiguredProjectLoadKind.Create to send configFileDiag */
    triggerFile'
        QuestionToken
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' 
    /** Used with ConfiguredProjectLoadKind.Reload to check if this project was already reloaded */
    reloadedProjects'
        QuestionToken
        TypeReference
          Identifier: ' ConfiguredProjectToAnyReloadKind'
      Parameter
        Identifier: ' 
    /** Used with ConfiguredProjectLoadKind.Create to specify only create project without updating */
    delayLoad'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' 
    /** Used with ConfiguredProjectLoadKind.Reload to specify delay reload, and also a set of configured projects already marked for delay load */
    delayReloadedConfiguredProjects'
        QuestionToken
        TypeReference
          Identifier: ' Set'
          TypeReference
            Identifier: 'ConfiguredProject'
      Parameter
        Identifier: ' 
    /** project if already known for the config file */
    projectForConfigFile'
        QuestionToken
        TypeReference
          Identifier: ' ConfiguredProject'
      UnionType
        TypeReference
          Identifier: ' FindCreateOrLoadConfiguredProjectResult'
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' tryFindDefaultConfiguredProjectForOpenScriptInfo'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' isMatchedByConfig'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' tryFindDefaultConfiguredProjectForOpenScriptInfoOrClosedFileInfo'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' tryFindDefaultConfiguredProjectAndLoadAncestorsForOpenScriptInfo'
    MethodDeclaration
      Identifier: '
    /** @internal */
    loadAncestorProjectTree'
      Parameter
        Identifier: 'forProjects'
        QuestionToken
        TypeReference
          Identifier: ' ReadonlyCollection'
          StringKeyword
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' ensureProjectChildren'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' cleanupConfiguredProjects'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' cleanupProjectsAndScriptInfos'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' tryInvokeWildCardDirectories'
    MethodDeclaration
      Identifier: '
    openClientFileWithNormalizedPath'
      Parameter
        Identifier: 'fileName'
        TypeReference
          Identifier: ' NormalizedPath'
      Parameter
        Identifier: ' fileContent'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scriptKind'
        QuestionToken
        TypeReference
          Identifier: ' ScriptKind'
      Parameter
        Identifier: ' hasMixedContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' projectRootPath'
        QuestionToken
        TypeReference
          Identifier: ' NormalizedPath'
      TypeReference
        Identifier: ' OpenConfiguredProjectResult'
    MethodDeclaration
      Identifier: '
    /** @internal */
    getOrphanConfiguredProjects'
      Parameter
        Identifier: 'toRetainConfiguredProjects'
        UnionType
          TypeReference
            Identifier: ' ConfigureProjectToLoadKind'
          TypeReference
            Identifier: ' Set'
            TypeReference
              Identifier: 'ConfiguredProject'
          UndefinedKeyword
      Parameter
        Identifier: ' openFilesWithRetainedConfiguredProject'
        UnionType
          TypeReference
            Identifier: ' Set'
            TypeReference
              Identifier: 'Path'
          UndefinedKeyword
      Parameter
        Identifier: ' externalProjectsRetainingConfiguredProjects'
        UnionType
          TypeReference
            Identifier: ' Set'
            StringKeyword
          UndefinedKeyword
      TypeReference
        Identifier: ' Set'
        TypeReference
          Identifier: 'ConfiguredProject'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' removeOrphanScriptInfos'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' telemetryOnOpenFile'
    MethodDeclaration
      Identifier: '
    /**
     * Close file whose contents is managed by the client
     * @param filename is absolute pathname
     */
    closeClientFile'
      Parameter
        Identifier: 'uncheckedFileName'
        StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    closeClientFile'
      Parameter
        Identifier: 'uncheckedFileName'
        StringKeyword
      Parameter
        Identifier: ' skipAssignOrphanScriptInfosToInferredProject'
        LiteralType
          TrueKeyword
      BooleanKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' collectChanges'
    MethodDeclaration
      Identifier: '
    /** @internal */
    synchronizeProjectList'
      Parameter
        Identifier: 'knownProjects'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' protocol'
              Identifier: 'ProjectVersionInfo'
      Parameter
        Identifier: ' includeProjectReferenceRedirectInfo'
        QuestionToken
        BooleanKeyword
      ArrayType
        TypeReference
          Identifier: ' ProjectFilesWithTSDiagnostics'
    MethodDeclaration
      Identifier: '
    /** @internal */
    applyChangesInOpenFiles'
      Parameter
        Identifier: 'openFiles'
        UnionType
          TypeReference
            Identifier: ' Iterable'
            TypeReference
              Identifier: 'OpenFileArguments'
          UndefinedKeyword
      Parameter
        Identifier: ' changedFiles'
        QuestionToken
        TypeReference
          Identifier: ' Iterable'
          TypeReference
            Identifier: 'ChangeFileArguments'
      Parameter
        Identifier: ' closedFiles'
        QuestionToken
        ArrayType
          StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    applyChangesToFile'
      Parameter
        Identifier: 'scriptInfo'
        TypeReference
          Identifier: ' ScriptInfo'
      Parameter
        Identifier: ' changes'
        TypeReference
          Identifier: ' Iterable'
          TypeReference
            Identifier: 'TextChange'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    closeExternalProject'
      Parameter
        Identifier: 'uncheckedFileName'
        StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    closeExternalProject'
      Parameter
        Identifier: 'uncheckedFileName'
        StringKeyword
      Parameter
        Identifier: ' cleanupAfter'
        BooleanKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    openExternalProjects'
      Parameter
        Identifier: 'projects'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' protocol'
              Identifier: 'ExternalProject'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      StaticKeyword
      ReadonlyKeyword
      Identifier: ' filenameEscapeRegexp'
    PropertyDeclaration
      PrivateKeyword
      StaticKeyword
      Identifier: ' escapeFilenameForRegex'
    MethodDeclaration
      Identifier: '
    resetSafeList'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    applySafeList'
      Parameter
        Identifier: 'proj'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'ExternalProject'
      ArrayType
        TypeReference
          Identifier: ' NormalizedPath'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' applySafeListWorker'
    MethodDeclaration
      Identifier: '
    openExternalProject'
      Parameter
        Identifier: 'proj'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'ExternalProject'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    openExternalProject'
      Parameter
        Identifier: 'proj'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'ExternalProject'
      Parameter
        Identifier: ' cleanupAfter'
        BooleanKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
    hasDeferredExtension'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Performs the initial steps of enabling a plugin by finding and instantiating the module for a plugin either asynchronously or synchronously
     * @internal
     */
    requestEnablePlugin'
      Parameter
        Identifier: 'project'
        TypeReference
          Identifier: ' Project'
      Parameter
        Identifier: ' pluginConfigEntry'
        TypeReference
          Identifier: ' PluginImport'
      Parameter
        Identifier: ' searchPaths'
        ArrayType
          StringKeyword
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' endEnablePlugin'
    MethodDeclaration
      Identifier: '
    /** @internal */
    hasNewPluginEnablementRequests'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    hasPendingPluginEnablements'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Waits for any ongoing plugin enablement requests to complete.
     *
     * @internal
     */
    waitForPendingPlugins'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Starts enabling any requested plugins without waiting for the result.
     *
     * @internal
     */
    enableRequestedPlugins'
      VoidKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' enableRequestedPluginsAsync'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' enableRequestedPluginsWorker'
    MethodDeclaration
      Identifier: '
    configurePlugin'
      Parameter
        Identifier: 'args'
        TypeReference
          QualifiedName
            Identifier: ' protocol'
            Identifier: 'ConfigurePluginRequestArguments'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /** @internal */
    getPackageJsonsVisibleToFile'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' project'
        TypeReference
          Identifier: ' Project'
      Parameter
        Identifier: ' rootDir'
        QuestionToken
        StringKeyword
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectPackageJsonInfo'
    MethodDeclaration
      Identifier: '
    /** @internal */
    getNearestAncestorDirectoryWithPackageJson'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' project'
        TypeReference
          Identifier: ' Project'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' watchPackageJsonFile'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' onPackageJsonChange'
    MethodDeclaration
      Identifier: '
    /** @internal */
    includePackageJsonAutoImports'
      TypeReference
        Identifier: ' PackageJsonAutoImportPreference'
    MethodDeclaration
      Identifier: '
    /** @internal */
    getIncompleteCompletionsCache'
      TypeReference
        Identifier: ' IncompleteCompletionsCache'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ScriptInfoOrConfig'
    UnionType
      TypeReference
        Identifier: ' ScriptInfo'
      TypeReference
        Identifier: ' TsConfigSourceFile'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' isConfigFile'
    Parameter
      Identifier: 'config'
      TypeReference
        Identifier: ' ScriptInfoOrConfig'
    TypePredicate
      Identifier: ' config'
      TypeReference
        Identifier: ' TsConfigSourceFile'
