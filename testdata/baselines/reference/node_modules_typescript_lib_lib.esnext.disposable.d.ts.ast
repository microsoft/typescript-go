SourceFile
  InterfaceDeclaration
    Identifier: ' SymbolConstructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dispose'
      TypeOperator
        SymbolKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' asyncDispose'
      TypeOperator
        SymbolKeyword
  InterfaceDeclaration
    Identifier: ' Disposable'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'dispose'
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' AsyncDisposable'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' PromiseLike'
        VoidKeyword
  InterfaceDeclaration
    Identifier: ' SuppressedError'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Error'
    PropertySignature
      Identifier: '
    error'
      AnyKeyword
    PropertySignature
      Identifier: '
    suppressed'
      AnyKeyword
  InterfaceDeclaration
    Identifier: ' SuppressedErrorConstructor'
    ConstructSignature
      Parameter
        Identifier: 'error'
        AnyKeyword
      Parameter
        Identifier: ' suppressed'
        AnyKeyword
      Parameter
        Identifier: ' message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' SuppressedError'
    CallSignature
      Parameter
        Identifier: 'error'
        AnyKeyword
      Parameter
        Identifier: ' suppressed'
        AnyKeyword
      Parameter
        Identifier: ' message'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' SuppressedError'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' SuppressedError'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' SuppressedError'
        TypeReference
          Identifier: ' SuppressedErrorConstructor'
  InterfaceDeclaration
    Identifier: ' DisposableStack'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' disposed'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Disposes each resource in the stack in the reverse order that they were added.
     */
    dispose'
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Adds a disposable resource to the stack, returning the resource.
     * @param value The resource to add. `null` and `undefined` will not be added, but will be returned.
     * @returns The provided {@link value}.
     */
    use'
      TypeParameter
        Identifier: 'T'
        UnionType
          TypeReference
            Identifier: ' Disposable'
          LiteralType
            NullKeyword
          UndefinedKeyword
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Adds a value and associated disposal callback as a resource to the stack.
     * @param value The value to add.
     * @param onDispose The callback to use in place of a `[Symbol.dispose]()` method. Will be invoked with `value`
     * as the first parameter.
     * @returns The provided {@link value}.
     */
    adopt'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' onDispose'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          VoidKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Adds a callback to be invoked when the stack is disposed.
     */
    defer'
      Parameter
        Identifier: 'onDispose'
        FunctionType
          VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Move all resources out of this stack and into a new `DisposableStack`, and marks this stack as disposed.
     * @example
     * ```ts
     * class C {
     *   #res1: Disposable;
     *   #res2: Disposable;
     *   #disposables: DisposableStack;
     *   constructor() {
     *     // stack will be disposed when exiting constructor for any reason
     *     using stack = new DisposableStack();
     *
     *     // get first resource
     *     this.#res1 = stack.use(getResource1());
     *
     *     // get second resource. If this fails, both `stack` and `#res1` will be disposed.
     *     this.#res2 = stack.use(getResource2());
     *
     *     // all operations succeeded, move resources out of `stack` so that they aren't disposed
     *     // when constructor exits
     *     this.#disposables = stack.move();
     *   }
     *
     *   [Symbol.dispose]() {
     *     this.#disposables.dispose();
     *   }
     * }
     * ```
     */
    move'
      TypeReference
        Identifier: ' DisposableStack'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'dispose'
      VoidKeyword
    PropertySignature
      ReadonlyKeyword
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'toStringTag'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' DisposableStackConstructor'
    ConstructSignature
      TypeReference
        Identifier: ' DisposableStack'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' DisposableStack'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' DisposableStack'
        TypeReference
          Identifier: ' DisposableStackConstructor'
  InterfaceDeclaration
    Identifier: ' AsyncDisposableStack'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' disposed'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Disposes each resource in the stack in the reverse order that they were added.
     */
    disposeAsync'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Adds a disposable resource to the stack, returning the resource.
     * @param value The resource to add. `null` and `undefined` will not be added, but will be returned.
     * @returns The provided {@link value}.
     */
    use'
      TypeParameter
        Identifier: 'T'
        UnionType
          TypeReference
            Identifier: ' AsyncDisposable'
          TypeReference
            Identifier: ' Disposable'
          LiteralType
            NullKeyword
          UndefinedKeyword
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Adds a value and associated disposal callback as a resource to the stack.
     * @param value The value to add.
     * @param onDisposeAsync The callback to use in place of a `[Symbol.asyncDispose]()` method. Will be invoked with `value`
     * as the first parameter.
     * @returns The provided {@link value}.
     */
    adopt'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' onDisposeAsync'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          UnionType
            TypeReference
              Identifier: ' PromiseLike'
              VoidKeyword
            VoidKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Adds a callback to be invoked when the stack is disposed.
     */
    defer'
      Parameter
        Identifier: 'onDisposeAsync'
        FunctionType
          UnionType
            TypeReference
              Identifier: ' PromiseLike'
              VoidKeyword
            VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Move all resources out of this stack and into a new `DisposableStack`, and marks this stack as disposed.
     * @example
     * ```ts
     * class C {
     *   #res1: Disposable;
     *   #res2: Disposable;
     *   #disposables: DisposableStack;
     *   constructor() {
     *     // stack will be disposed when exiting constructor for any reason
     *     using stack = new DisposableStack();
     *
     *     // get first resource
     *     this.#res1 = stack.use(getResource1());
     *
     *     // get second resource. If this fails, both `stack` and `#res1` will be disposed.
     *     this.#res2 = stack.use(getResource2());
     *
     *     // all operations succeeded, move resources out of `stack` so that they aren't disposed
     *     // when constructor exits
     *     this.#disposables = stack.move();
     *   }
     *
     *   [Symbol.dispose]() {
     *     this.#disposables.dispose();
     *   }
     * }
     * ```
     */
    move'
      TypeReference
        Identifier: ' AsyncDisposableStack'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    PropertySignature
      ReadonlyKeyword
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'toStringTag'
      StringKeyword
  InterfaceDeclaration
    Identifier: ' AsyncDisposableStackConstructor'
    ConstructSignature
      TypeReference
        Identifier: ' AsyncDisposableStack'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' AsyncDisposableStack'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' AsyncDisposableStack'
        TypeReference
          Identifier: ' AsyncDisposableStackConstructor'
  InterfaceDeclaration
    Identifier: ' IteratorObject'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' TReturn'
    TypeParameter
      Identifier: ' TNext'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Disposable'
  InterfaceDeclaration
    Identifier: ' AsyncIteratorObject'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' TReturn'
    TypeParameter
      Identifier: ' TNext'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' AsyncDisposable'
