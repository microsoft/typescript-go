SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' AsyncResource'
            ImportSpecifier
              Identifier: ' AsyncResourceOptions'
        StringLiteral
      InterfaceDeclaration
        Identifier: ' EventEmitterOptions'
        PropertySignature
          Identifier: '
        /**
         * Enables automatic capturing of promise rejection.
         */
        captureRejections'
          QuestionToken
          UnionType
            BooleanKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' StaticEventEmitterOptions'
        PropertySignature
          Identifier: '
        /**
         * Can be used to cancel awaiting events.
         */
        signal'
          QuestionToken
          UnionType
            TypeReference
              Identifier: ' AbortSignal'
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' StaticEventEmitterIteratorOptions'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' StaticEventEmitterOptions'
        PropertySignature
          Identifier: '
        /**
         * Names of events that will end the iteration.
         */
        close'
          QuestionToken
          UnionType
            ArrayType
              StringKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The high watermark. The emitter is paused every time the size of events being buffered is higher than it.
         * Supported only on emitters implementing `pause()` and `resume()` methods.
         * @default Number.MAX_SAFE_INTEGER
         */
        highWaterMark'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: '
        /**
         * The low watermark. The emitter is resumed every time the size of events being buffered is lower than it.
         * Supported only on emitters implementing `pause()` and `resume()` methods.
         * @default 1
         */
        lowWaterMark'
          QuestionToken
          UnionType
            NumberKeyword
            UndefinedKeyword
      InterfaceDeclaration
        Identifier: ' EventEmitter'
        TypeParameter
          Identifier: 'T'
          TypeReference
            Identifier: ' EventMap'
            TypeReference
              Identifier: 'T'
          TypeReference
            Identifier: ' DefaultEventMap'
        HeritageClause
          ExpressionWithTypeArguments
            PropertyAccessExpression
              Identifier: ' NodeJS'
              Identifier: 'EventEmitter'
            TypeReference
              Identifier: 'T'
      TypeAliasDeclaration
        Identifier: ' EventMap'
        TypeParameter
          Identifier: 'T'
        UnionType
          TypeReference
            Identifier: ' Record'
            TypeOperator
              TypeReference
                Identifier: ' T'
            ArrayType
              AnyKeyword
          TypeReference
            Identifier: ' DefaultEventMap'
      TypeAliasDeclaration
        Identifier: ' DefaultEventMap'
        TupleType
          NeverKeyword
      TypeAliasDeclaration
        Identifier: ' AnyRest'
        TupleType
          NamedTupleMember
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
      TypeAliasDeclaration
        Identifier: ' Args'
        TypeParameter
          Identifier: 'K'
        TypeParameter
          Identifier: ' T'
        ConditionalType
          TypeReference
            Identifier: ' T'
          TypeReference
            Identifier: ' DefaultEventMap'
          TypeReference
            Identifier: ' AnyRest'
          ParenthesizedType
            ConditionalType
              TypeReference
                Identifier: '
        K'
              TypeOperator
                TypeReference
                  Identifier: ' T'
              IndexedAccessType
                TypeReference
                  Identifier: ' T'
                TypeReference
                  Identifier: 'K'
              NeverKeyword
      TypeAliasDeclaration
        Identifier: ' Key'
        TypeParameter
          Identifier: 'K'
        TypeParameter
          Identifier: ' T'
        ConditionalType
          TypeReference
            Identifier: ' T'
          TypeReference
            Identifier: ' DefaultEventMap'
          UnionType
            StringKeyword
            SymbolKeyword
          UnionType
            TypeReference
              Identifier: ' K'
            TypeOperator
              TypeReference
                Identifier: ' T'
      TypeAliasDeclaration
        Identifier: ' Key2'
        TypeParameter
          Identifier: 'K'
        TypeParameter
          Identifier: ' T'
        ConditionalType
          TypeReference
            Identifier: ' T'
          TypeReference
            Identifier: ' DefaultEventMap'
          UnionType
            StringKeyword
            SymbolKeyword
          IntersectionType
            TypeReference
              Identifier: ' K'
            TypeOperator
              TypeReference
                Identifier: ' T'
      TypeAliasDeclaration
        Identifier: ' Listener'
        TypeParameter
          Identifier: 'K'
        TypeParameter
          Identifier: ' T'
        TypeParameter
          Identifier: ' F'
        ConditionalType
          TypeReference
            Identifier: ' T'
          TypeReference
            Identifier: ' DefaultEventMap'
          TypeReference
            Identifier: ' F'
          ParenthesizedType
            ConditionalType
              TypeReference
                Identifier: '
        K'
              TypeOperator
                TypeReference
                  Identifier: ' T'
              ParenthesizedType
                ConditionalType
                  IndexedAccessType
                    TypeReference
                      Identifier: '
                T'
                    TypeReference
                      Identifier: 'K'
                  ArrayType
                    UnknownKeyword
                  FunctionType
                    Parameter
                      DotDotDotToken
                      Identifier: 'args'
                      IndexedAccessType
                        TypeReference
                          Identifier: ' T'
                        TypeReference
                          Identifier: 'K'
                    VoidKeyword
                  NeverKeyword
              NeverKeyword
      TypeAliasDeclaration
        Identifier: ' Listener1'
        TypeParameter
          Identifier: 'K'
        TypeParameter
          Identifier: ' T'
        TypeReference
          Identifier: ' Listener'
          TypeReference
            Identifier: 'K'
          TypeReference
            Identifier: ' T'
          FunctionType
            Parameter
              DotDotDotToken
              Identifier: 'args'
              ArrayType
                AnyKeyword
            VoidKeyword
      TypeAliasDeclaration
        Identifier: ' Listener2'
        TypeParameter
          Identifier: 'K'
        TypeParameter
          Identifier: ' T'
        TypeReference
          Identifier: ' Listener'
          TypeReference
            Identifier: 'K'
          TypeReference
            Identifier: ' T'
          TypeReference
            Identifier: ' Function'
      ClassDeclaration
        Identifier: ' EventEmitter'
        TypeParameter
          Identifier: 'T'
          TypeReference
            Identifier: ' EventMap'
            TypeReference
              Identifier: 'T'
          TypeReference
            Identifier: ' DefaultEventMap'
        Constructor
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              Identifier: ' EventEmitterOptions'
        MethodDeclaration
          ComputedPropertyName
            PropertyAccessExpression
              Identifier: 'EventEmitter'
              Identifier: 'captureRejectionSymbol'
          QuestionToken
          TypeParameter
            Identifier: 'K'
          Parameter
            Identifier: 'error'
            TypeReference
              Identifier: ' Error'
          Parameter
            Identifier: ' event'
            TypeReference
              Identifier: ' Key'
              TypeReference
                Identifier: 'K'
              TypeReference
                Identifier: ' T'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' Args'
              TypeReference
                Identifier: 'K'
              TypeReference
                Identifier: ' T'
          VoidKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' once'
          Parameter
            Identifier: '
            emitter'
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'EventEmitter'
          Parameter
            Identifier: '
            eventName'
            UnionType
              StringKeyword
              SymbolKeyword
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' StaticEventEmitterOptions'
          TypeReference
            Identifier: ' Promise'
            ArrayType
              AnyKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' once'
          Parameter
            Identifier: 'emitter'
            TypeReference
              Identifier: ' EventTarget'
          Parameter
            Identifier: ' eventName'
            StringKeyword
          Parameter
            Identifier: ' options'
            QuestionToken
            TypeReference
              Identifier: ' StaticEventEmitterOptions'
          TypeReference
            Identifier: ' Promise'
            ArrayType
              AnyKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' on'
          Parameter
            Identifier: '
            emitter'
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'EventEmitter'
          Parameter
            Identifier: '
            eventName'
            UnionType
              StringKeyword
              SymbolKeyword
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' StaticEventEmitterIteratorOptions'
          TypeReference
            Identifier: ' AsyncIterableIterator'
            ArrayType
              AnyKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' on'
          Parameter
            Identifier: '
            emitter'
            TypeReference
              Identifier: ' EventTarget'
          Parameter
            Identifier: '
            eventName'
            StringKeyword
          Parameter
            Identifier: '
            options'
            QuestionToken
            TypeReference
              Identifier: ' StaticEventEmitterIteratorOptions'
          TypeReference
            Identifier: ' AsyncIterableIterator'
            ArrayType
              AnyKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' listenerCount'
          Parameter
            Identifier: 'emitter'
            TypeReference
              QualifiedName
                Identifier: ' NodeJS'
                Identifier: 'EventEmitter'
          Parameter
            Identifier: ' eventName'
            UnionType
              StringKeyword
              SymbolKeyword
          NumberKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' getEventListeners'
          Parameter
            Identifier: 'emitter'
            UnionType
              TypeReference
                Identifier: ' EventTarget'
              TypeReference
                QualifiedName
                  Identifier: ' NodeJS'
                  Identifier: 'EventEmitter'
          Parameter
            Identifier: ' name'
            UnionType
              StringKeyword
              SymbolKeyword
          ArrayType
            TypeReference
              Identifier: ' Function'
        MethodDeclaration
          StaticKeyword
          Identifier: ' getMaxListeners'
          Parameter
            Identifier: 'emitter'
            UnionType
              TypeReference
                Identifier: ' EventTarget'
              TypeReference
                QualifiedName
                  Identifier: ' NodeJS'
                  Identifier: 'EventEmitter'
          NumberKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' setMaxListeners'
          Parameter
            Identifier: 'n'
            QuestionToken
            NumberKeyword
          Parameter
            DotDotDotToken
            Identifier: 'eventTargets'
            TypeReference
              Identifier: ' Array'
              UnionType
                TypeReference
                  Identifier: 'EventTarget'
                TypeReference
                  QualifiedName
                    Identifier: ' NodeJS'
                    Identifier: 'EventEmitter'
          VoidKeyword
        MethodDeclaration
          StaticKeyword
          Identifier: ' addAbortListener'
          Parameter
            Identifier: 'signal'
            TypeReference
              Identifier: ' AbortSignal'
          Parameter
            Identifier: ' resource'
            FunctionType
              Parameter
                Identifier: 'event'
                TypeReference
                  Identifier: ' Event'
              VoidKeyword
          TypeReference
            Identifier: ' Disposable'
        PropertyDeclaration
          StaticKeyword
          ReadonlyKeyword
          Identifier: ' errorMonitor'
          TypeOperator
            SymbolKeyword
        PropertyDeclaration
          StaticKeyword
          ReadonlyKeyword
          Identifier: ' captureRejectionSymbol'
          TypeOperator
            SymbolKeyword
        PropertyDeclaration
          StaticKeyword
          Identifier: ' captureRejections'
          BooleanKeyword
        PropertyDeclaration
          StaticKeyword
          Identifier: ' defaultMaxListeners'
          NumberKeyword
      ImportEqualsDeclaration
        Identifier: ' internal'
        ExternalModuleReference
          StringLiteral
      ModuleDeclaration
        Identifier: ' EventEmitter'
        ModuleBlock
          ExportDeclaration
            NamedExports
              ExportSpecifier
                Identifier: ' internal'
                Identifier: ' EventEmitter'
          InterfaceDeclaration
            ExportKeyword
            Identifier: ' Abortable'
            PropertySignature
              Identifier: '
            /**
             * When provided the corresponding `AbortController` can be used to cancel an asynchronous action.
             */
            signal'
              QuestionToken
              UnionType
                TypeReference
                  Identifier: ' AbortSignal'
                UndefinedKeyword
          InterfaceDeclaration
            ExportKeyword
            Identifier: ' EventEmitterReferencingAsyncResource'
            HeritageClause
              ExpressionWithTypeArguments
                Identifier: ' AsyncResource'
            PropertySignature
              ReadonlyKeyword
              Identifier: ' eventEmitter'
              TypeReference
                Identifier: ' EventEmitterAsyncResource'
          InterfaceDeclaration
            ExportKeyword
            Identifier: ' EventEmitterAsyncResourceOptions'
            HeritageClause
              ExpressionWithTypeArguments
                Identifier: ' AsyncResourceOptions'
              ExpressionWithTypeArguments
                Identifier: ' EventEmitterOptions'
            PropertySignature
              Identifier: '
            /**
             * The type of async event, this is required when instantiating `EventEmitterAsyncResource`
             * directly rather than as a child class.
             * @default new.target.name if instantiated as a child class.
             */
            name'
              QuestionToken
              StringKeyword
          ClassDeclaration
            ExportKeyword
            Identifier: ' EventEmitterAsyncResource'
            HeritageClause
              ExpressionWithTypeArguments
                Identifier: ' EventEmitter'
            Constructor
              Parameter
                Identifier: 'options'
                QuestionToken
                TypeReference
                  Identifier: ' EventEmitterAsyncResourceOptions'
            MethodDeclaration
              Identifier: '
            /**
             * Call all `destroy` hooks. This should only ever be called once. An error will
             * be thrown if it is called more than once. This **must** be manually called. If
             * the resource is left to be collected by the GC then the `destroy` hooks will
             * never be called.
             */
            emitDestroy'
              VoidKeyword
            PropertyDeclaration
              ReadonlyKeyword
              Identifier: ' asyncId'
              NumberKeyword
            PropertyDeclaration
              ReadonlyKeyword
              Identifier: ' triggerAsyncId'
              NumberKeyword
            PropertyDeclaration
              ReadonlyKeyword
              Identifier: ' asyncResource'
              TypeReference
                Identifier: ' EventEmitterReferencingAsyncResource'
      ModuleDeclaration
        Identifier: '
    global'
        ModuleBlock
          ModuleDeclaration
            Identifier: ' NodeJS'
            ModuleBlock
              InterfaceDeclaration
                Identifier: ' EventEmitter'
                TypeParameter
                  Identifier: 'T'
                  TypeReference
                    Identifier: ' EventMap'
                    TypeReference
                      Identifier: 'T'
                  TypeReference
                    Identifier: ' DefaultEventMap'
                MethodSignature
                  ComputedPropertyName
                    PropertyAccessExpression
                      Identifier: 'EventEmitter'
                      Identifier: 'captureRejectionSymbol'
                  QuestionToken
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'error'
                    TypeReference
                      Identifier: ' Error'
                  Parameter
                    Identifier: ' event'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    DotDotDotToken
                    Identifier: 'args'
                    TypeReference
                      Identifier: ' Args'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  VoidKeyword
                MethodSignature
                  Identifier: '
                /**
                 * Alias for `emitter.on(eventName, listener)`.
                 * @since v0.1.26
                 */
                addListener'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    Identifier: ' listener'
                    TypeReference
                      Identifier: ' Listener1'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * Adds the `listener` function to the end of the listeners array for the event
                 * named `eventName`. No checks are made to see if the `listener` has already
                 * been added. Multiple calls passing the same combination of `eventName` and
                 * `listener` will result in the `listener` being added, and called, multiple times.
                 *
                 * ```js
                 * server.on('connection', (stream) => {
                 *   console.log('someone connected!');
                 * });
                 * ```
                 *
                 * Returns a reference to the `EventEmitter`, so that calls can be chained.
                 *
                 * By default, event listeners are invoked in the order they are added. The `emitter.prependListener()` method can be used as an alternative to add the
                 * event listener to the beginning of the listeners array.
                 *
                 * ```js
                 * import { EventEmitter } from 'node:events';
                 * const myEE = new EventEmitter();
                 * myEE.on('foo', () => console.log('a'));
                 * myEE.prependListener('foo', () => console.log('b'));
                 * myEE.emit('foo');
                 * // Prints:
                 * //   b
                 * //   a
                 * ```
                 * @since v0.1.101
                 * @param eventName The name of the event.
                 * @param listener The callback function
                 */
                on'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    Identifier: ' listener'
                    TypeReference
                      Identifier: ' Listener1'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * Adds a **one-time** `listener` function for the event named `eventName`. The
                 * next time `eventName` is triggered, this listener is removed and then invoked.
                 *
                 * ```js
                 * server.once('connection', (stream) => {
                 *   console.log('Ah, we have our first user!');
                 * });
                 * ```
                 *
                 * Returns a reference to the `EventEmitter`, so that calls can be chained.
                 *
                 * By default, event listeners are invoked in the order they are added. The `emitter.prependOnceListener()` method can be used as an alternative to add the
                 * event listener to the beginning of the listeners array.
                 *
                 * ```js
                 * import { EventEmitter } from 'node:events';
                 * const myEE = new EventEmitter();
                 * myEE.once('foo', () => console.log('a'));
                 * myEE.prependOnceListener('foo', () => console.log('b'));
                 * myEE.emit('foo');
                 * // Prints:
                 * //   b
                 * //   a
                 * ```
                 * @since v0.3.0
                 * @param eventName The name of the event.
                 * @param listener The callback function
                 */
                once'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    Identifier: ' listener'
                    TypeReference
                      Identifier: ' Listener1'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * Removes the specified `listener` from the listener array for the event named `eventName`.
                 *
                 * ```js
                 * const callback = (stream) => {
                 *   console.log('someone connected!');
                 * };
                 * server.on('connection', callback);
                 * // ...
                 * server.removeListener('connection', callback);
                 * ```
                 *
                 * `removeListener()` will remove, at most, one instance of a listener from the
                 * listener array. If any single listener has been added multiple times to the
                 * listener array for the specified `eventName`, then `removeListener()` must be
                 * called multiple times to remove each instance.
                 *
                 * Once an event is emitted, all listeners attached to it at the
                 * time of emitting are called in order. This implies that any `removeListener()` or `removeAllListeners()` calls _after_ emitting and _before_ the last listener finishes execution
                 * will not remove them from`emit()` in progress. Subsequent events behave as expected.
                 *
                 * ```js
                 * import { EventEmitter } from 'node:events';
                 * class MyEmitter extends EventEmitter {}
                 * const myEmitter = new MyEmitter();
                 *
                 * const callbackA = () => {
                 *   console.log('A');
                 *   myEmitter.removeListener('event', callbackB);
                 * };
                 *
                 * const callbackB = () => {
                 *   console.log('B');
                 * };
                 *
                 * myEmitter.on('event', callbackA);
                 *
                 * myEmitter.on('event', callbackB);
                 *
                 * // callbackA removes listener callbackB but it will still be called.
                 * // Internal listener array at time of emit [callbackA, callbackB]
                 * myEmitter.emit('event');
                 * // Prints:
                 * //   A
                 * //   B
                 *
                 * // callbackB is now removed.
                 * // Internal listener array [callbackA]
                 * myEmitter.emit('event');
                 * // Prints:
                 * //   A
                 * ```
                 *
                 * Because listeners are managed using an internal array, calling this will
                 * change the position indices of any listener registered _after_ the listener
                 * being removed. This will not impact the order in which listeners are called,
                 * but it means that any copies of the listener array as returned by
                 * the `emitter.listeners()` method will need to be recreated.
                 *
                 * When a single function has been added as a handler multiple times for a single
                 * event (as in the example below), `removeListener()` will remove the most
                 * recently added instance. In the example the `once('ping')` listener is removed:
                 *
                 * ```js
                 * import { EventEmitter } from 'node:events';
                 * const ee = new EventEmitter();
                 *
                 * function pong() {
                 *   console.log('pong');
                 * }
                 *
                 * ee.on('ping', pong);
                 * ee.once('ping', pong);
                 * ee.removeListener('ping', pong);
                 *
                 * ee.emit('ping');
                 * ee.emit('ping');
                 * ```
                 *
                 * Returns a reference to the `EventEmitter`, so that calls can be chained.
                 * @since v0.1.26
                 */
                removeListener'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    Identifier: ' listener'
                    TypeReference
                      Identifier: ' Listener1'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * Alias for `emitter.removeListener()`.
                 * @since v10.0.0
                 */
                off'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    Identifier: ' listener'
                    TypeReference
                      Identifier: ' Listener1'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * Removes all listeners, or those of the specified `eventName`.
                 *
                 * It is bad practice to remove listeners added elsewhere in the code,
                 * particularly when the `EventEmitter` instance was created by some other
                 * component or module (e.g. sockets or file streams).
                 *
                 * Returns a reference to the `EventEmitter`, so that calls can be chained.
                 * @since v0.1.26
                 */
                removeAllListeners'
                  Parameter
                    Identifier: 'eventName'
                    QuestionToken
                    TypeReference
                      Identifier: ' Key'
                      UnknownKeyword
                      TypeReference
                        Identifier: ' T'
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * By default `EventEmitter`s will print a warning if more than `10` listeners are
                 * added for a particular event. This is a useful default that helps finding
                 * memory leaks. The `emitter.setMaxListeners()` method allows the limit to be
                 * modified for this specific `EventEmitter` instance. The value can be set to `Infinity` (or `0`) to indicate an unlimited number of listeners.
                 *
                 * Returns a reference to the `EventEmitter`, so that calls can be chained.
                 * @since v0.3.5
                 */
                setMaxListeners'
                  Parameter
                    Identifier: 'n'
                    NumberKeyword
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * Returns the current max listener value for the `EventEmitter` which is either
                 * set by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.
                 * @since v1.0.0
                 */
                getMaxListeners'
                  NumberKeyword
                MethodSignature
                  Identifier: '
                /**
                 * Returns a copy of the array of listeners for the event named `eventName`.
                 *
                 * ```js
                 * server.on('connection', (stream) => {
                 *   console.log('someone connected!');
                 * });
                 * console.log(util.inspect(server.listeners('connection')));
                 * // Prints: [ [Function] ]
                 * ```
                 * @since v0.1.26
                 */
                listeners'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  TypeReference
                    Identifier: ' Array'
                    TypeReference
                      Identifier: 'Listener2'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                MethodSignature
                  Identifier: '
                /**
                 * Returns a copy of the array of listeners for the event named `eventName`,
                 * including any wrappers (such as those created by `.once()`).
                 *
                 * ```js
                 * import { EventEmitter } from 'node:events';
                 * const emitter = new EventEmitter();
                 * emitter.once('log', () => console.log('log once'));
                 *
                 * // Returns a new Array with a function `onceWrapper` which has a property
                 * // `listener` which contains the original listener bound above
                 * const listeners = emitter.rawListeners('log');
                 * const logFnWrapper = listeners[0];
                 *
                 * // Logs "log once" to the console and does not unbind the `once` event
                 * logFnWrapper.listener();
                 *
                 * // Logs "log once" to the console and removes the listener
                 * logFnWrapper();
                 *
                 * emitter.on('log', () => console.log('log persistently'));
                 * // Will return a new Array with a single function bound by `.on()` above
                 * const newListeners = emitter.rawListeners('log');
                 *
                 * // Logs "log persistently" twice
                 * newListeners[0]();
                 * emitter.emit('log');
                 * ```
                 * @since v9.4.0
                 */
                rawListeners'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  TypeReference
                    Identifier: ' Array'
                    TypeReference
                      Identifier: 'Listener2'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                MethodSignature
                  Identifier: '
                /**
                 * Synchronously calls each of the listeners registered for the event named `eventName`, in the order they were registered, passing the supplied arguments
                 * to each.
                 *
                 * Returns `true` if the event had listeners, `false` otherwise.
                 *
                 * ```js
                 * import { EventEmitter } from 'node:events';
                 * const myEmitter = new EventEmitter();
                 *
                 * // First listener
                 * myEmitter.on('event', function firstListener() {
                 *   console.log('Helloooo! first listener');
                 * });
                 * // Second listener
                 * myEmitter.on('event', function secondListener(arg1, arg2) {
                 *   console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
                 * });
                 * // Third listener
                 * myEmitter.on('event', function thirdListener(...args) {
                 *   const parameters = args.join(', ');
                 *   console.log(`event with parameters ${parameters} in third listener`);
                 * });
                 *
                 * console.log(myEmitter.listeners('event'));
                 *
                 * myEmitter.emit('event', 1, 2, 3, 4, 5);
                 *
                 * // Prints:
                 * // [
                 * //   [Function: firstListener],
                 * //   [Function: secondListener],
                 * //   [Function: thirdListener]
                 * // ]
                 * // Helloooo! first listener
                 * // event with parameters 1, 2 in second listener
                 * // event with parameters 1, 2, 3, 4, 5 in third listener
                 * ```
                 * @since v0.1.26
                 */
                emit'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    DotDotDotToken
                    Identifier: 'args'
                    TypeReference
                      Identifier: ' Args'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  BooleanKeyword
                MethodSignature
                  Identifier: '
                /**
                 * Returns the number of listeners listening for the event named `eventName`.
                 * If `listener` is provided, it will return how many times the listener is found
                 * in the list of the listeners of the event.
                 * @since v3.2.0
                 * @param eventName The name of the event being listened for
                 * @param listener The event handler function
                 */
                listenerCount'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    Identifier: ' listener'
                    QuestionToken
                    TypeReference
                      Identifier: ' Listener2'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  NumberKeyword
                MethodSignature
                  Identifier: '
                /**
                 * Adds the `listener` function to the _beginning_ of the listeners array for the
                 * event named `eventName`. No checks are made to see if the `listener` has
                 * already been added. Multiple calls passing the same combination of `eventName`
                 * and `listener` will result in the `listener` being added, and called, multiple times.
                 *
                 * ```js
                 * server.prependListener('connection', (stream) => {
                 *   console.log('someone connected!');
                 * });
                 * ```
                 *
                 * Returns a reference to the `EventEmitter`, so that calls can be chained.
                 * @since v6.0.0
                 * @param eventName The name of the event.
                 * @param listener The callback function
                 */
                prependListener'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    Identifier: ' listener'
                    TypeReference
                      Identifier: ' Listener1'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * Adds a **one-time**`listener` function for the event named `eventName` to the _beginning_ of the listeners array. The next time `eventName` is triggered, this
                 * listener is removed, and then invoked.
                 *
                 * ```js
                 * server.prependOnceListener('connection', (stream) => {
                 *   console.log('Ah, we have our first user!');
                 * });
                 * ```
                 *
                 * Returns a reference to the `EventEmitter`, so that calls can be chained.
                 * @since v6.0.0
                 * @param eventName The name of the event.
                 * @param listener The callback function
                 */
                prependOnceListener'
                  TypeParameter
                    Identifier: 'K'
                  Parameter
                    Identifier: 'eventName'
                    TypeReference
                      Identifier: ' Key'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  Parameter
                    Identifier: ' listener'
                    TypeReference
                      Identifier: ' Listener1'
                      TypeReference
                        Identifier: 'K'
                      TypeReference
                        Identifier: ' T'
                  ThisType
                MethodSignature
                  Identifier: '
                /**
                 * Returns an array listing the events for which the emitter has registered
                 * listeners. The values in the array are strings or `Symbol`s.
                 *
                 * ```js
                 * import { EventEmitter } from 'node:events';
                 *
                 * const myEE = new EventEmitter();
                 * myEE.on('foo', () => {});
                 * myEE.on('bar', () => {});
                 *
                 * const sym = Symbol('symbol');
                 * myEE.on(sym, () => {});
                 *
                 * console.log(myEE.eventNames());
                 * // Prints: [ 'foo', 'bar', Symbol(symbol) ]
                 * ```
                 * @since v6.0.0
                 */
                eventNames'
                  TypeReference
                    Identifier: ' Array'
                    IntersectionType
                      ParenthesizedType
                        UnionType
                          StringKeyword
                          SymbolKeyword
                      TypeReference
                        Identifier: ' Key2'
                        UnknownKeyword
                        TypeReference
                          Identifier: ' T'
      ExportAssignment
        Identifier: ' EventEmitter'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportEqualsDeclaration
        Identifier: ' events'
        ExternalModuleReference
          StringLiteral
      ExportAssignment
        Identifier: ' events'
