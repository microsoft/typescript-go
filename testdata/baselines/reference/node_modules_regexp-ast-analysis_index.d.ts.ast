SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: '
	Alternative'
        ImportSpecifier
          Identifier: '
	Backreference'
        ImportSpecifier
          Identifier: '
	CapturingGroup'
        ImportSpecifier
          Identifier: '
	Character'
        ImportSpecifier
          Identifier: '
	CharacterClass'
        ImportSpecifier
          Identifier: '
	CharacterClassElement'
        ImportSpecifier
          Identifier: '
	CharacterClassRange'
        ImportSpecifier
          Identifier: '
	CharacterSet'
        ImportSpecifier
          Identifier: '
	ClassIntersection'
        ImportSpecifier
          Identifier: '
	ClassRangesCharacterClass'
        ImportSpecifier
          Identifier: '
	ClassRangesCharacterClassElement'
        ImportSpecifier
          Identifier: '
	ClassSetOperand'
        ImportSpecifier
          Identifier: '
	ClassStringDisjunction'
        ImportSpecifier
          Identifier: '
	ClassSubtraction'
        ImportSpecifier
          Identifier: '
	EdgeAssertion'
        ImportSpecifier
          Identifier: '
	Element'
        ImportSpecifier
          Identifier: '
	ExpressionCharacterClass'
        ImportSpecifier
          Identifier: '
	Flags'
        ImportSpecifier
          Identifier: '
	Group'
        ImportSpecifier
          Identifier: '
	LookaroundAssertion'
        ImportSpecifier
          Identifier: '
	Node'
        ImportSpecifier
          Identifier: '
	Pattern'
        ImportSpecifier
          Identifier: '
	Quantifier'
        ImportSpecifier
          Identifier: '
	RegExpLiteral'
        ImportSpecifier
          Identifier: '
	StringAlternative'
        ImportSpecifier
          Identifier: '
	StringsUnicodePropertyCharacterSet'
        ImportSpecifier
          Identifier: '
	UnicodeSetsCharacterClass'
        ImportSpecifier
          Identifier: '
	UnicodeSetsCharacterClassElement'
        ImportSpecifier
          Identifier: '
	WordBoundaryAssertion'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Char'
        ImportSpecifier
          Identifier: ' CharSet'
        ImportSpecifier
          Identifier: ' JS'
    StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReadonlyFlags'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dotAll'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' global'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' hasIndices'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' ignoreCase'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' multiline'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' sticky'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' unicode'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' unicodeSets'
      QuestionToken
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CharacterElement'
    UnionType
      TypeReference
        Identifier: ' CharacterSet'
      TypeReference
        Identifier: ' ClassIntersection'
      TypeReference
        Identifier: ' ClassSubtraction'
      TypeReference
        Identifier: ' CharacterClassElement'
      TypeReference
        Identifier: ' CharacterClass'
      TypeReference
        Identifier: ' StringAlternative'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' isZeroLength'
    Parameter
      Identifier: '
	element'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' CharacterElement'
        TypeReference
          Identifier: ' Alternative'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Alternative'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' isPotentiallyZeroLength'
    Parameter
      Identifier: '
	element'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' CharacterElement'
        TypeReference
          Identifier: ' Alternative'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Alternative'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' isEmpty'
    Parameter
      Identifier: '
	element'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' CharacterElement'
        TypeReference
          Identifier: ' Alternative'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Alternative'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' isPotentiallyEmpty'
    Parameter
      Identifier: '
	element'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' CharacterElement'
        TypeReference
          Identifier: ' Alternative'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Alternative'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Ancestor'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    TypeReference
      Identifier: ' AncestorImpl'
      TypeReference
        Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' AncestorImpl'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    TypeReference
      Identifier: ' ExtendApproximation'
      TypeReference
        Identifier: 'Anc2'
        TypeReference
          Identifier: 'GetParent'
          TypeReference
            Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' ExtendApproximation'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' UnicodeSetsCharacterClass'
          TypeReference
            Identifier: ' CharacterClassAnc'
          NeverKeyword
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' Alternative'
          TypeReference
            Identifier: ' AlternativeAnc'
          NeverKeyword
  TypeAliasDeclaration
    Identifier: ' AlternativeAnc'
    TypeReference
      Identifier: ' TrueAnc'
      TypeReference
        Identifier: 'Alternative'
  TypeAliasDeclaration
    Identifier: ' CharacterClassAnc'
    TypeReference
      Identifier: ' TrueAnc'
      TypeReference
        Identifier: 'UnicodeSetsCharacterClass'
  TypeAliasDeclaration
    Identifier: ' TrueAnc'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    TypeReference
      Identifier: ' Anc6'
      TypeReference
        Identifier: 'GetParent'
        TypeReference
          Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' GetParent'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    TypeReference
      Identifier: ' NonNullable'
      IndexedAccessType
        TypeReference
          Identifier: 'T'
        LiteralType
          StringLiteral
  TypeAliasDeclaration
    Identifier: ' Anc6'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' Anc5'
        TypeReference
          Identifier: 'GetParent'
          TypeReference
            Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' Anc5'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' Anc4'
        TypeReference
          Identifier: 'GetParent'
          TypeReference
            Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' Anc4'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' Anc3'
        TypeReference
          Identifier: 'GetParent'
          TypeReference
            Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' Anc3'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' Anc2'
        TypeReference
          Identifier: 'GetParent'
          TypeReference
            Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' Anc2'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' Anc1'
        TypeReference
          Identifier: 'GetParent'
          TypeReference
            Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' Anc1'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' GetParent'
        TypeReference
          Identifier: 'T'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' hasSomeAncestor'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: '
	node'
      TypeReference
        Identifier: ' T'
    Parameter
      Identifier: '
	condition'
      UnionType
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'ancestor'
              TypeReference
                Identifier: ' Ancestor'
                TypeReference
                  Identifier: 'T'
            BooleanKeyword
        TypeReference
          Identifier: ' Node'
    BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Descendant'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' DescendantsImpl'
        TypeReference
          Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' DescendantsImpl'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    TypeReference
      Identifier: ' Dec1'
      TypeReference
        Identifier: 'GetChildren'
        TypeReference
          Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' Dec1'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' Dec2'
        TypeReference
          Identifier: 'GetChildren'
          TypeReference
            Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' Dec2'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' GetChildren'
        TypeReference
          Identifier: 'T'
  TypeAliasDeclaration
    Identifier: ' GetChildren'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    UnionType
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' RegExpLiteral'
          UnionType
            TypeReference
              Identifier: ' Flags'
            TypeReference
              Identifier: ' Pattern'
            TypeReference
              Identifier: ' Element'
          NeverKeyword
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' CapturingGroup'
            TypeReference
              Identifier: ' Group'
            TypeReference
              Identifier: ' LookaroundAssertion'
            TypeReference
              Identifier: ' Quantifier'
            TypeReference
              Identifier: ' Pattern'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Element'
          NeverKeyword
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' Alternative'
          TypeReference
            Identifier: ' Element'
          NeverKeyword
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' ClassRangesCharacterClass'
          TypeReference
            Identifier: ' ClassRangesCharacterClassElement'
          NeverKeyword
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' CharacterClassRange'
          TypeReference
            Identifier: ' Character'
          NeverKeyword
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          UnionType
            TypeReference
              Identifier: ' UnicodeSetsCharacterClass'
            TypeReference
              Identifier: ' ExpressionCharacterClass'
            IndexedAccessType
              TypeReference
                Identifier: ' ExpressionCharacterClass'
              LiteralType
                StringLiteral
          TypeReference
            Identifier: ' UnicodeSetsDescendants'
          NeverKeyword
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' ClassStringDisjunction'
          TypeReference
            Identifier: ' StringAlternative'
          NeverKeyword
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' StringAlternative'
          TypeReference
            Identifier: ' Character'
          NeverKeyword
  TypeAliasDeclaration
    Identifier: ' UnicodeSetsDescendants'
    UnionType
      TypeReference
        Identifier: ' ClassSetOperand'
      TypeReference
        Identifier: ' UnicodeSetsCharacterClassElement'
      TypeReference
        Identifier: ' UnicodeSetsCharacterClass'
      TypeReference
        Identifier: ' ExpressionCharacterClass'
      IndexedAccessType
        TypeReference
          Identifier: ' ExpressionCharacterClass'
        LiteralType
          StringLiteral
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' hasSomeDescendant'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: '
	node'
      TypeReference
        Identifier: ' T'
    Parameter
      Identifier: '
	condition'
      UnionType
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'descendant'
              TypeReference
                Identifier: ' Descendant'
                TypeReference
                  Identifier: 'T'
            BooleanKeyword
        TypeReference
          Identifier: ' Node'
    Parameter
      Identifier: '
	descentConditionFn'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'descendant'
          TypeReference
            Identifier: ' Descendant'
            TypeReference
              Identifier: 'T'
        BooleanKeyword
    BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getCapturingGroupNumber'
    Parameter
      Identifier: 'group'
      TypeReference
        Identifier: ' CapturingGroup'
    NumberKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getPattern'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    TypeReference
      Identifier: ' Pattern'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MatchingDirection'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OptionalMatchingDirection'
    UnionType
      TypeReference
        Identifier: ' MatchingDirection'
      LiteralType
        StringLiteral
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getMatchingDirection'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' Node'
    TypeReference
      Identifier: ' MatchingDirection'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' invertMatchingDirection'
    Parameter
      Identifier: 'direction'
      TypeReference
        Identifier: ' MatchingDirection'
    TypeReference
      Identifier: ' MatchingDirection'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getMatchingDirectionFromAssertionKind'
    Parameter
      Identifier: '
	kind'
      UnionType
        IndexedAccessType
          TypeReference
            Identifier: ' LookaroundAssertion'
          LiteralType
            StringLiteral
        IndexedAccessType
          TypeReference
            Identifier: ' EdgeAssertion'
          LiteralType
            StringLiteral
    TypeReference
      Identifier: ' MatchingDirection'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' isEmptyBackreference'
    Parameter
      Identifier: 'backreference'
      TypeReference
        Identifier: ' Backreference'
    Parameter
      Identifier: ' flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' isStrictBackreference'
    Parameter
      Identifier: 'backreference'
      TypeReference
        Identifier: ' Backreference'
    BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ContainsCapturingGroup'
    TypeParameter
      Identifier: 'N'
      TypeReference
        Identifier: ' Node'
    ConditionalType
      TypeReference
        Identifier: ' N'
      UnionType
        TypeReference
          Identifier: ' CharacterClassElement'
        TypeReference
          Identifier: ' CharacterClass'
        TypeReference
          Identifier: ' CharacterSet'
        TypeReference
          Identifier: ' Backreference'
        TypeReference
          Identifier: ' EdgeAssertion'
        TypeReference
          Identifier: ' WordBoundaryAssertion'
        TypeReference
          Identifier: ' Flags'
      LiteralType
        FalseKeyword
      ConditionalType
        TypeReference
          Identifier: ' N'
        TypeReference
          Identifier: ' CapturingGroup'
        LiteralType
          TrueKeyword
        BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' containsCapturingGroup'
    TypeParameter
      Identifier: 'N'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: 'node'
      TypeReference
        Identifier: ' N'
    TypeReference
      Identifier: ' ContainsCapturingGroup'
      TypeReference
        Identifier: 'N'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LengthRange'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' min'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' max'
      NumberKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getLengthRange'
    Parameter
      Identifier: '
	element'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' CharacterElement'
        TypeReference
          Identifier: ' Alternative'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Alternative'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' LengthRange'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' isLengthRangeMinZero'
    Parameter
      Identifier: '
	element'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' CharacterElement'
        TypeReference
          Identifier: ' Alternative'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Alternative'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ClosestAncestor'
    TypeParameter
      Identifier: 'A'
      TypeReference
        Identifier: ' Node'
    TypeParameter
      Identifier: ' B'
      TypeReference
        Identifier: ' Node'
    ConditionalType
      TypeReference
        Identifier: ' Exclude'
        UnionType
          TypeReference
            Identifier: 'A'
          TypeReference
            Identifier: ' B'
        TypeReference
          Identifier: ' Descendant'
          TypeReference
            Identifier: 'Pattern'
      NeverKeyword
      TypeReference
        Identifier: ' Exclude'
        IntersectionType
          ParenthesizedType
            UnionType
              TypeReference
                Identifier: 'A'
              TypeReference
                Identifier: ' Ancestor'
                TypeReference
                  Identifier: 'A'
          ParenthesizedType
            UnionType
              TypeReference
                Identifier: 'B'
              TypeReference
                Identifier: ' Ancestor'
                TypeReference
                  Identifier: 'B'
        TypeReference
          Identifier: ' RegExpLiteral'
      IntersectionType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'A'
            TypeReference
              Identifier: ' Ancestor'
              TypeReference
                Identifier: 'A'
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'B'
            TypeReference
              Identifier: ' Ancestor'
              TypeReference
                Identifier: 'B'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getClosestAncestor'
    TypeParameter
      Identifier: 'A'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: 'a'
      TypeReference
        Identifier: ' A'
    TypeReference
      Identifier: ' A'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getClosestAncestor'
    TypeParameter
      Identifier: 'A'
      TypeReference
        Identifier: ' Node'
    TypeParameter
      Identifier: ' B'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: 'a'
      TypeReference
        Identifier: ' A'
    Parameter
      Identifier: ' b'
      TypeReference
        Identifier: ' B'
    TypeReference
      Identifier: ' ClosestAncestor'
      TypeReference
        Identifier: 'A'
      TypeReference
        Identifier: ' B'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getClosestAncestor'
    TypeParameter
      Identifier: 'A'
      TypeReference
        Identifier: ' Node'
    TypeParameter
      Identifier: ' B'
      TypeReference
        Identifier: ' Node'
    Parameter
      Identifier: 'a'
      TypeReference
        Identifier: ' A'
    Parameter
      DotDotDotToken
      Identifier: 'b'
      ArrayType
        TypeReference
          Identifier: ' B'
    TypeReference
      Identifier: ' ClosestAncestor'
      TypeReference
        Identifier: 'A'
      TypeReference
        Identifier: ' B'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getClosestAncestor'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    Parameter
      DotDotDotToken
      Identifier: 'args'
      ArrayType
        TypeReference
          Identifier: ' T'
    UnionType
      TypeReference
        Identifier: ' ClosestAncestor'
        TypeReference
          Identifier: 'T'
        TypeReference
          Identifier: ' T'
      UndefinedKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getEffectiveMaximumRepetition'
    Parameter
      Identifier: 'element'
      TypeReference
        Identifier: ' Node'
    NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Cache'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Required'
        TypeReference
          Identifier: 'ReadonlyFlags'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' __cache'
      QuestionToken
      NeverKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createCache'
    Parameter
      Identifier: 'flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' Cache'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' toCache'
    Parameter
      Identifier: 'flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' Cache'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ToCharSetElement'
    UnionType
      TypeReference
        Identifier: ' Character'
      TypeReference
        Identifier: ' CharacterClassRange'
      TypeReference
        Identifier: ' Exclude'
        TypeReference
          Identifier: 'CharacterSet'
        TypeReference
          Identifier: ' StringsUnicodePropertyCharacterSet'
      TypeReference
        Identifier: ' ClassRangesCharacterClass'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' toCharSet'
    Parameter
      Identifier: '
	elements'
      UnionType
        TypeReference
          Identifier: ' ToCharSetElement'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ToCharSetElement'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' CharSet'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ToUnicodeSetElement'
    UnionType
      TypeReference
        Identifier: ' ToCharSetElement'
      TypeReference
        Identifier: ' CharacterClass'
      TypeReference
        Identifier: ' CharacterSet'
      TypeReference
        Identifier: ' ClassSetOperand'
      IndexedAccessType
        TypeReference
          Identifier: ' ExpressionCharacterClass'
        LiteralType
          StringLiteral
      TypeReference
        Identifier: ' StringAlternative'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' toUnicodeSet'
    Parameter
      Identifier: '
	elements'
      UnionType
        TypeReference
          Identifier: ' ToUnicodeSetElement'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ToUnicodeSetElement'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      QualifiedName
        Identifier: ' JS'
        Identifier: 'UnicodeSet'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' matchesAllCharacters'
    Parameter
      Identifier: 'char'
      TypeReference
        Identifier: ' ToUnicodeSetElement'
    Parameter
      Identifier: ' flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' matchesNoCharacters'
    Parameter
      Identifier: 'char'
      TypeReference
        Identifier: ' ToUnicodeSetElement'
    Parameter
      Identifier: ' flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' hasStrings'
    Parameter
      Identifier: 'char'
      TypeReference
        Identifier: ' ToUnicodeSetElement'
    Parameter
      Identifier: ' flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    BooleanKeyword
  ModuleDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Chars'
    ModuleBlock
      FunctionDeclaration
        Identifier: ' maxChar'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' Char'
      FunctionDeclaration
        Identifier: ' empty'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' CharSet'
      FunctionDeclaration
        Identifier: ' all'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' CharSet'
      FunctionDeclaration
        Identifier: ' lineTerminator'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' CharSet'
      FunctionDeclaration
        Identifier: ' word'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' CharSet'
      FunctionDeclaration
        Identifier: ' digit'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' CharSet'
      FunctionDeclaration
        Identifier: ' space'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' CharSet'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' structurallyEqual'
    Parameter
      Identifier: 'x'
      UnionType
        TypeReference
          Identifier: ' Node'
        LiteralType
          NullKeyword
    Parameter
      Identifier: ' y'
      UnionType
        TypeReference
          Identifier: ' Node'
        LiteralType
          NullKeyword
    BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FollowEndReason'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FollowOperations'
    TypeParameter
      Identifier: 'S'
    PropertySignature
      Identifier: '
	/**
	 * Split off a new path from the given one.
	 *
	 * This function should not modify the given state.
	 *
	 * If the state is immutable, then `fork` may be implemented as the identify function in regard to `state`. If the
	 * function is omitted, it will default to the identify function.
	 *
	 * If the state is mutable, then `fork` must be implemented.
	 *
	 * @default x => x
	 */
	fork'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'state'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' direction'
          TypeReference
            Identifier: ' MatchingDirection'
        TypeReference
          Identifier: ' S'
    MethodSignature
      Identifier: '
	/**
	 * Joins any number of paths to create a combined path.
	 */
	join'
      Parameter
        Identifier: 'states'
        ArrayType
          TypeReference
            Identifier: ' S'
      Parameter
        Identifier: ' direction'
        TypeReference
          Identifier: ' MatchingDirection'
      TypeReference
        Identifier: ' S'
    PropertySignature
      Identifier: '
	/**
	 * This function is called when dealing with lookarounds.
	 *
	 * It will __not__ be called for predefined assertion - `^`, `$`, `\b`, `\B`. Use {@link FollowOperations.enter} or
	 * {@link FollowOperations.leave} for predefined assertions instead.
	 *
	 * @default x => x
	 */
	assert'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'state'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' direction'
          TypeReference
            Identifier: ' MatchingDirection'
        Parameter
          Identifier: ' assertion'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' assertionDirection'
          TypeReference
            Identifier: ' MatchingDirection'
        TypeReference
          Identifier: ' S'
    PropertySignature
      Identifier: '
	/**
	 * This function is called when entering an element.
	 *
	 * Operations for elements are called in the following order:
	 *
	 * 1. {@link FollowOperations.enter}
	 * 2. if {@link FollowOperations.continueInto} return `true`
	 *    1. Element-specific operations (if any) that can change the current state.
	 * 3. {@link FollowOperations.leave}
	 * 4. {@link FollowOperations.continueAfter} (optional; might not be called for every element)
	 *
	 * @default (_, x) => x
	 */
	enter'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'element'
          TypeReference
            Identifier: ' Element'
        Parameter
          Identifier: ' state'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' direction'
          TypeReference
            Identifier: ' MatchingDirection'
        TypeReference
          Identifier: ' S'
    PropertySignature
      Identifier: '
	/**
	 * This function is called when leaving an element.
	 *
	 * See the documentation on {@link FollowOperations.enter} for more details.
	 *
	 * @default (_, x) => x
	 */
	leave'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'element'
          TypeReference
            Identifier: ' Element'
        Parameter
          Identifier: ' state'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' direction'
          TypeReference
            Identifier: ' MatchingDirection'
        TypeReference
          Identifier: ' S'
    PropertySignature
      Identifier: '
	/**
	 * This function is called when a path ends.
	 *
	 * Paths end at the end the patterns and assertions. It means that there is no element after the pattern/assertion
	 * in that direction.
	 *
	 * @default x => x
	 * @see {@link FollowEndReason}
	 */
	endPath'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'state'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' direction'
          TypeReference
            Identifier: ' MatchingDirection'
        Parameter
          Identifier: ' reason'
          TypeReference
            Identifier: ' FollowEndReason'
        TypeReference
          Identifier: ' S'
    PropertySignature
      Identifier: '
	/**
	 * Whether the current path should go into the given element (return `true`) or whether it should be skipped
	 * (return `false`). If the element is skipped, the given state will not be changed and passed as-is to the `leave`
	 * function.
	 *
	 * You shouldn't modify state in this function. Modify state in {@link FollowOperations.enter} instead.
	 *
	 * See the documentation on {@link FollowOperations.enter} for more details.
	 *
	 * @default () => true
	 */
	continueInto'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'element'
          TypeReference
            Identifier: ' Element'
        Parameter
          Identifier: ' state'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' direction'
          TypeReference
            Identifier: ' MatchingDirection'
        BooleanKeyword
    PropertySignature
      Identifier: '
	/**
	 * Whether the current path should continue after the given element (return `true`) or whether all elements that
	 * follow this element should be skipped (return `false`).
	 *
	 * If the current path is a fork path, then only the elements until the fork is joined will be skipped. A stopped
	 * fork path will be joined with all other forks like normal.
	 *
	 * You shouldn't modify state in this function. Modify state in {@link FollowOperations.leave} instead.
	 *
	 * See the documentation on {@link FollowOperations.enter} for more details.
	 *
	 * @default () => true
	 */
	continueAfter'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'element'
          TypeReference
            Identifier: ' Element'
        Parameter
          Identifier: ' state'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' direction'
          TypeReference
            Identifier: ' MatchingDirection'
        BooleanKeyword
    PropertySignature
      Identifier: '
	/**
	 * Whether the current path should continue outside the given lookaround assertion.
	 *
	 * Paths that leave a lookaround assertions (= go outside of it) generally can't be followed. However, for some
	 * operations it makes sense to do it anyway.
	 *
	 * It usually makes sense to follow paths outside of assertions if
	 * `getMatchingDirectionFromAssertionKind(element.kind) !== direction`. This condition ensure that lookbehinds only
	 * follow paths going out to the right (e.g. `(?<=a)->b`) and lookaheads only follow paths going out to the left
	 * (e.g. `b<-(?=a)`).
	 *
	 * If this function returns `false`, {@link FollowOperations.endPath} is guaranteed to be called next.
	 * If this function returns `true`, {@link FollowOperations.continueAfter} is guaranteed to be called next for the
	 * lookaround assertion.
	 *
	 * You shouldn't modify state in this function. Modify state in {@link FollowOperations.endPath} or
	 * {@link FollowOperations.enter} instead.
	 *
	 * @default () => false
	 */
	continueOutside'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'element'
          TypeReference
            Identifier: ' LookaroundAssertion'
        Parameter
          Identifier: ' state'
          TypeReference
            Identifier: ' S'
        Parameter
          Identifier: ' direction'
          TypeReference
            Identifier: ' MatchingDirection'
        BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' followPaths'
    TypeParameter
      Identifier: 'S'
    Parameter
      Identifier: '
	start'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' Alternative'
    Parameter
      Identifier: '
	startMode'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    Parameter
      Identifier: '
	initialState'
      TypeReference
        Identifier: ' S'
    Parameter
      Identifier: '
	operations'
      TypeReference
        Identifier: ' FollowOperations'
        TypeReference
          Identifier: 'S'
    Parameter
      Identifier: '
	direction'
      QuestionToken
      TypeReference
        Identifier: ' MatchingDirection'
    TypeReference
      Identifier: ' S'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' GetLongestPrefixOptions'
    PropertySignature
      Identifier: '
	/**
	 * Whether the returned sequence is to include the next character (if any)
	 * after the longest knowable sequence.
	 *
	 * The next character after the longest knowable sequence is either:
	 * - not consumed by the given alternative
	 *   (e.g. `(ab)c` -> `[/a/, /b/, /c/]`),
	 * - only a superset of the actual next character
	 *   (e.g. `ab(cd|ef)` -> `[/a/, /b/, /[ce]/]`), or
	 * - both.
	 *
	 * Note that enabling this options means that the returned sequence of
	 * character sets is no longer guaranteed to be a prefix of the given
	 * alternative.
	 *
	 * @default false
	 */
	includeAfter'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
	/**
	 * Whether only characters inside the given alternative may be considered
	 * when creating the last character.
	 *
	 * This option control the behavior of {@link includeAfter}. By default,
	 * {@link includeAfter} will also look at the characters after the
	 * alternative to create the last character. This may be undesirable in
	 * some case.
	 *
	 * The enabling this option has the following effect: If the last character
	 * of the prefix is affected by characters outside the alternative, then
	 * the prefix with {@link includeAfter} set to `false` will be returned.
	 *
	 * @default false
	 */
	onlyInside'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
	/**
	 * Whether groups will be combined more loosely.
	 *
	 * With this option disabled, groups will only be combined if they are of
	 * the same length and differ in at most one position. E.g. the longest
	 * prefix of `/(?:bitter|barber)/` is `[/b/, /[ia]/]`. This requirement is
	 * very strict and most groups do not fulfill it in practice.
	 *
	 * With this option enabled, groups will be combined if they are of the
	 * same length. Different characters at the same position are simply
	 * combined. E.g. the longest prefix `/(?:bitter|barber)/` is
	 * `[/b/, /[ia]/, /[tr]/, /[tb]/, /e/, /r/]`. With this option enabled, the
	 * returned prefix is only guaranteed to be a superset of the actual strict
	 * longest prefix.
	 *
	 * The purpose of this option is to provide longer prefixes in use cases
	 * where an approximation of the actual prefix is good enough.
	 *
	 * @default false
	 */
	looseGroups'
      QuestionToken
      BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getLongestPrefix'
    Parameter
      Identifier: '
	alternative'
      TypeReference
        Identifier: ' Alternative'
    Parameter
      Identifier: '
	direction'
      TypeReference
        Identifier: ' MatchingDirection'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    Parameter
      Identifier: '
	options'
      QuestionToken
      TypeReference
        Identifier: ' Readonly'
        TypeReference
          Identifier: 'GetLongestPrefixOptions'
    TypeOperator
      ArrayType
        TypeReference
          Identifier: ' CharSet'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FirstLookChar'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' char'
      TypeReference
        Identifier: ' CharSet'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' edge'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exact'
      BooleanKeyword
  ModuleDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' FirstLookChars'
    ModuleBlock
      FunctionDeclaration
        Identifier: ' all'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' FirstLookChar'
      FunctionDeclaration
        Identifier: ' edge'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' FirstLookChar'
      FunctionDeclaration
        Identifier: ' toConsumed'
        Parameter
          Identifier: 'look'
          TypeReference
            Identifier: ' FirstLookChar'
        TypeReference
          Identifier: ' FirstConsumedChar'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FirstConsumedChar'
    UnionType
      TypeReference
        Identifier: ' FirstFullyConsumedChar'
      TypeReference
        Identifier: ' FirstPartiallyConsumedChar'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FirstFullyConsumedChar'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' char'
      TypeReference
        Identifier: ' CharSet'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' empty'
      LiteralType
        FalseKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exact'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FirstPartiallyConsumedChar'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' char'
      TypeReference
        Identifier: ' CharSet'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' empty'
      LiteralType
        TrueKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exact'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' look'
      TypeReference
        Identifier: ' FirstLookChar'
  ModuleDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' FirstConsumedChars'
    ModuleBlock
      FunctionDeclaration
        Identifier: ' emptyConcat'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' FirstPartiallyConsumedChar'
      FunctionDeclaration
        Identifier: ' emptyUnion'
        Parameter
          Identifier: 'flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' FirstFullyConsumedChar'
      FunctionDeclaration
        Identifier: ' toLook'
        Parameter
          Identifier: 'consumed'
          TypeReference
            Identifier: ' FirstConsumedChar'
        TypeReference
          Identifier: ' FirstLookChar'
      FunctionDeclaration
        Identifier: ' union'
        Parameter
          Identifier: 'chars'
          TypeReference
            Identifier: ' Iterable'
            TypeReference
              Identifier: 'FirstConsumedChar'
        Parameter
          Identifier: ' flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' FirstConsumedChar'
      FunctionDeclaration
        Identifier: ' concat'
        Parameter
          Identifier: 'chars'
          TypeReference
            Identifier: ' Iterable'
            TypeReference
              Identifier: 'FirstConsumedChar'
        Parameter
          Identifier: ' flags'
          TypeReference
            Identifier: ' ReadonlyFlags'
        TypeReference
          Identifier: ' FirstConsumedChar'
      FunctionDeclaration
        Identifier: ' makeOptional'
        Parameter
          Identifier: 'consumed'
          TypeReference
            Identifier: ' FirstConsumedChar'
        TypeReference
          Identifier: ' FirstPartiallyConsumedChar'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getFirstConsumedChar'
    Parameter
      Identifier: '
	element'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' Alternative'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Alternative'
    Parameter
      Identifier: '
	direction'
      TypeReference
        Identifier: ' MatchingDirection'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' FirstConsumedChar'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getFirstConsumedCharAfter'
    Parameter
      Identifier: '
	afterThis'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' Alternative'
    Parameter
      Identifier: '
	direction'
      TypeReference
        Identifier: ' MatchingDirection'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' FirstConsumedChar'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getFirstCharAfter'
    Parameter
      Identifier: '
	afterThis'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' Alternative'
    Parameter
      Identifier: '
	direction'
      TypeReference
        Identifier: ' MatchingDirection'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' FirstLookChar'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WithContributors'
    TypeParameter
      Identifier: 'Char'
    PropertySignature
      Identifier: '
	char'
      TypeReference
        Identifier: ' Char'
    PropertySignature
      Identifier: '
	/**
	 * A list of elements that all contributed to the result. All sub-elements of the listed elements also contribute.
	 */
	contributors'
      ArrayType
        TypeReference
          Identifier: ' Element'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getFirstConsumedCharAfterWithContributors'
    Parameter
      Identifier: '
	afterThis'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' Alternative'
    Parameter
      Identifier: '
	direction'
      TypeReference
        Identifier: ' MatchingDirection'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' WithContributors'
      TypeReference
        Identifier: 'FirstConsumedChar'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getFirstCharAfterWithContributors'
    Parameter
      Identifier: '
	afterThis'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' Alternative'
    Parameter
      Identifier: '
	direction'
      TypeReference
        Identifier: ' MatchingDirection'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' WithContributors'
      TypeReference
        Identifier: 'FirstLookChar'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CanReorderOptions'
    PropertySignature
      Identifier: '
	/**
	 * The matching direction of the alternatives.
	 *
	 * The correctness of {@link canReorder} depends on this direction being
	 * correct.
	 *
	 * If the matching direction cannot be known, supply `"unknown"`.
	 * `"unknown"` is guaranteed to always create a correct result regardless
	 * of matching direction. If {@link canReorder} returns `true` for
	 * `"unknown"`, then it will also return `true` for both `"ltr"` and
	 * `"rtl"` and vise versa.
	 *
	 * This value defaults to the result of {@link getMatchingDirection} for
	 * any of the given alternatives.
	 */
	matchingDirection'
      QuestionToken
      TypeReference
        Identifier: ' OptionalMatchingDirection'
    PropertySignature
      Identifier: '
	/**
	 * Capturing groups are typically referenced by their position, so they
	 * cannot be reordered without affecting the behavior of the regular
	 * expression.
	 *
	 * However, in some cases capturing groups and their order doesn't matter.
	 * Enabling this option will allow all permutations that change the order
	 * of capturing groups.
	 *
	 * @default false
	 */
	ignoreCapturingGroups'
      QuestionToken
      BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' canReorder'
    Parameter
      Identifier: '
	alternatives'
      TypeReference
        Identifier: ' Iterable'
        TypeReference
          Identifier: 'Alternative'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    Parameter
      Identifier: '
	options'
      QuestionToken
      TypeReference
        Identifier: ' CanReorderOptions'
    BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' canReorderDirectional'
    Parameter
      Identifier: '
	target'
      TypeReference
        Identifier: ' ReadonlySet'
        TypeReference
          Identifier: 'Alternative'
    Parameter
      Identifier: '
	slice'
      ArrayType
        TypeReference
          Identifier: ' Alternative'
    Parameter
      Identifier: '
	direction'
      TypeReference
        Identifier: ' MatchingDirection'
    Parameter
      Identifier: '
	flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    Parameter
      Identifier: '
	ignoreCapturingGroups'
      BooleanKeyword
    BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConsumedChars'
    PropertySignature
      Identifier: '
	chars'
      TypeReference
        Identifier: ' CharSet'
    PropertySignature
      Identifier: '
	/**
	 * Whether `char` is exact.
	 *
	 * If `false`, then `char` is only guaranteed to be a superset of the
	 * actually possible characters.
	 */
	exact'
      BooleanKeyword
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' getConsumedChars'
    Parameter
      Identifier: 'element'
      UnionType
        TypeReference
          Identifier: ' Element'
        TypeReference
          Identifier: ' Pattern'
        TypeReference
          Identifier: ' Alternative'
    Parameter
      Identifier: ' flags'
      TypeReference
        Identifier: ' ReadonlyFlags'
    TypeReference
      Identifier: ' ConsumedChars'
  ExportDeclaration
    NamedExports
