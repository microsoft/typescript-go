SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' ChildProcess'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' EventEmitter'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Readable'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' ReadStream'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Protocol'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Serializable'
        ImportSpecifier
          Identifier: ' EvaluationArgument'
        ImportSpecifier
          Identifier: ' PageFunction'
        ImportSpecifier
          Identifier: ' PageFunctionOn'
        ImportSpecifier
          Identifier: ' SmartHandle'
        ImportSpecifier
          Identifier: ' ElementHandleForTag'
        ImportSpecifier
          Identifier: ' BindingSource'
    StringLiteral
  TypeAliasDeclaration
    Identifier: ' PageWaitForSelectorOptionsNotHidden'
    IntersectionType
      TypeReference
        Identifier: ' PageWaitForSelectorOptions'
      TypeLiteral
        PropertySignature
          Identifier: '
  state'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
  TypeAliasDeclaration
    Identifier: ' ElementHandleWaitForSelectorOptionsNotHidden'
    IntersectionType
      TypeReference
        Identifier: ' ElementHandleWaitForSelectorOptions'
      TypeLiteral
        PropertySignature
          Identifier: '
  state'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Page'
    MethodSignature
      Identifier: '
  /**
   * Returns the value of the `pageFunction` invocation.
   *
   * If the function passed to the
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) returns a [Promise],
   * then [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) would wait for
   * the promise to resolve and return its value.
   *
   * If the function passed to the
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) returns a
   * non-[Serializable] value, then
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) resolves to
   * `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`:
   * `-0`, `NaN`, `Infinity`, `-Infinity`.
   *
   * **Usage**
   *
   * Passing argument to `pageFunction`:
   *
   * ```js
   * const result = await page.evaluate(([x, y]) => {
   *   return Promise.resolve(x * y);
   * }, [7, 8]);
   * console.log(result); // prints "56"
   * ```
   *
   * A string can also be passed in instead of a function:
   *
   * ```js
   * console.log(await page.evaluate('1 + 2')); // prints "3"
   * const x = 10;
   * console.log(await page.evaluate(`1 + ${x}`)); // prints "11"
   * ```
   *
   * {@link ElementHandle} instances can be passed as an argument to the
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate):
   *
   * ```js
   * const bodyHandle = await page.evaluate('document.body');
   * const html = await page.evaluate<string, HTMLElement>(([body, suffix]) =>
   *   body.innerHTML + suffix, [bodyHandle, 'hello']
   * );
   * await bodyHandle.dispose();
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          TypeReference
            Identifier: 'Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the value of the `pageFunction` invocation.
   *
   * If the function passed to the
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) returns a [Promise],
   * then [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) would wait for
   * the promise to resolve and return its value.
   *
   * If the function passed to the
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) returns a
   * non-[Serializable] value, then
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) resolves to
   * `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`:
   * `-0`, `NaN`, `Infinity`, `-Infinity`.
   *
   * **Usage**
   *
   * Passing argument to `pageFunction`:
   *
   * ```js
   * const result = await page.evaluate(([x, y]) => {
   *   return Promise.resolve(x * y);
   * }, [7, 8]);
   * console.log(result); // prints "56"
   * ```
   *
   * A string can also be passed in instead of a function:
   *
   * ```js
   * console.log(await page.evaluate('1 + 2')); // prints "3"
   * const x = 10;
   * console.log(await page.evaluate(`1 + ${x}`)); // prints "11"
   * ```
   *
   * {@link ElementHandle} instances can be passed as an argument to the
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate):
   *
   * ```js
   * const bodyHandle = await page.evaluate('document.body');
   * const html = await page.evaluate<string, HTMLElement>(([body, suffix]) =>
   *   body.innerHTML + suffix, [bodyHandle, 'hello']
   * );
   * await bodyHandle.dispose();
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Returns the value of the `pageFunction` invocation as a {@link JSHandle}.
   *
   * The only difference between
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) and
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) is that
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) returns
   * {@link JSHandle}.
   *
   * If the function passed to the
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) returns
   * a [Promise], then
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) would
   * wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * // Handle for the window object.
   * const aWindowHandle = await page.evaluateHandle(() => Promise.resolve(window));
   * ```
   *
   * A string can also be passed in instead of a function:
   *
   * ```js
   * const aHandle = await page.evaluateHandle('document'); // Handle for the 'document'
   * ```
   *
   * {@link JSHandle} instances can be passed as an argument to the
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle):
   *
   * ```js
   * const aHandle = await page.evaluateHandle(() => document.body);
   * const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);
   * console.log(await resultHandle.jsonValue());
   * await resultHandle.dispose();
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          TypeReference
            Identifier: 'Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the value of the `pageFunction` invocation as a {@link JSHandle}.
   *
   * The only difference between
   * [page.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate) and
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) is that
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) returns
   * {@link JSHandle}.
   *
   * If the function passed to the
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) returns
   * a [Promise], then
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) would
   * wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * // Handle for the window object.
   * const aWindowHandle = await page.evaluateHandle(() => Promise.resolve(window));
   * ```
   *
   * A string can also be passed in instead of a function:
   *
   * ```js
   * const aHandle = await page.evaluateHandle('document'); // Handle for the 'document'
   * ```
   *
   * {@link JSHandle} instances can be passed as an argument to the
   * [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle):
   *
   * ```js
   * const aHandle = await page.evaluateHandle(() => document.body);
   * const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);
   * console.log(await resultHandle.jsonValue());
   * await resultHandle.dispose();
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Adds a script which would be evaluated in one of the following scenarios:
   * - Whenever the page is navigated.
   * - Whenever the child frame is attached or navigated. In this case, the script is evaluated in the context of the
   *   newly attached frame.
   *
   * The script is evaluated after the document was created but before any of its scripts were run. This is useful to
   * amend the JavaScript environment, e.g. to seed `Math.random`.
   *
   * **Usage**
   *
   * An example of overriding `Math.random` before the page loads:
   *
   * ```js
   * // preload.js
   * Math.random = () => 42;
   * ```
   *
   * ```js
   * // In your playwright script, assuming the preload.js file is in same directory
   * await page.addInitScript({ path: './preload.js' });
   * ```
   *
   * ```js
   * await page.addInitScript(mock => {
   *   window.mock = mock;
   * }, mock);
   * ```
   *
   * **NOTE** The order of evaluation of multiple scripts installed via
   * [browserContext.addInitScript(script[, arg])](https://playwright.dev/docs/api/class-browsercontext#browser-context-add-init-script)
   * and [page.addInitScript(script[, arg])](https://playwright.dev/docs/api/class-page#page-add-init-script) is not
   * defined.
   * @param script Script to be evaluated in the page.
   * @param arg Optional argument to pass to `script` (only supported when passing a function).
   */
  addInitScript'
      TypeParameter
        Identifier: 'Arg'
      Parameter
        Identifier: 'script'
        UnionType
          TypeReference
            Identifier: ' PageFunction'
            TypeReference
              Identifier: 'Arg'
            AnyKeyword
          TypeLiteral
            PropertySignature
              Identifier: ' path'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: ' content'
              QuestionToken
              StringKeyword
      Parameter
        Identifier: ' arg'
        QuestionToken
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [page.locator(selector[, options])](https://playwright.dev/docs/api/class-page#page-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The method finds an element matching the specified selector within the page. If no elements match the selector, the
   * return value resolves to `null`. To wait for an element on the page, use
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for).
   * @param selector A selector to query for.
   * @param options
   */
  $'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' strict'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use locator-based [page.locator(selector[, options])](https://playwright.dev/docs/api/class-page#page-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The method finds an element matching the specified selector within the page. If no elements match the selector, the
   * return value resolves to `null`. To wait for an element on the page, use
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for).
   * @param selector A selector to query for.
   * @param options
   */
  $'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' strict'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [page.locator(selector[, options])](https://playwright.dev/docs/api/class-page#page-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The method finds all elements matching the specified selector within the page. If no elements match the selector,
   * the return value resolves to `[]`.
   * @param selector A selector to query for.
   */
  $$'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use locator-based [page.locator(selector[, options])](https://playwright.dev/docs/api/class-page#page-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The method finds all elements matching the specified selector within the page. If no elements match the selector,
   * the return value resolves to `[]`.
   * @param selector A selector to query for.
   */
  $$'
      Parameter
        Identifier: 'selector'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests.
   * Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * The method finds an element matching the specified selector within the page and passes it as a first argument to
   * `pageFunction`. If no elements match the selector, the method throws an error. Returns the value of `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [page.$eval(selector, pageFunction[, arg, options])](https://playwright.dev/docs/api/class-page#page-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const searchValue = await page.$eval('#search', el => el.value);
   * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
   * const html = await page.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
   * // In TypeScript, this example requires an explicit type annotation (HTMLLinkElement) on el:
   * const preloadHrefTS = await page.$eval('link[rel=preload]', (el: HTMLLinkElement) => el.href);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  $eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          IndexedAccessType
            TypeReference
              Identifier: 'HTMLElementTagNameMap'
            TypeReference
              Identifier: 'K'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests.
   * Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * The method finds an element matching the specified selector within the page and passes it as a first argument to
   * `pageFunction`. If no elements match the selector, the method throws an error. Returns the value of `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [page.$eval(selector, pageFunction[, arg, options])](https://playwright.dev/docs/api/class-page#page-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const searchValue = await page.$eval('#search', el => el.value);
   * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
   * const html = await page.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
   * // In TypeScript, this example requires an explicit type annotation (HTMLLinkElement) on el:
   * const preloadHrefTS = await page.$eval('link[rel=preload]', (el: HTMLLinkElement) => el.href);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  $eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests.
   * Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * The method finds an element matching the specified selector within the page and passes it as a first argument to
   * `pageFunction`. If no elements match the selector, the method throws an error. Returns the value of `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [page.$eval(selector, pageFunction[, arg, options])](https://playwright.dev/docs/api/class-page#page-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const searchValue = await page.$eval('#search', el => el.value);
   * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
   * const html = await page.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
   * // In TypeScript, this example requires an explicit type annotation (HTMLLinkElement) on el:
   * const preloadHrefTS = await page.$eval('link[rel=preload]', (el: HTMLLinkElement) => el.href);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  $eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          IndexedAccessType
            TypeReference
              Identifier: 'HTMLElementTagNameMap'
            TypeReference
              Identifier: 'K'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests.
   * Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * The method finds an element matching the specified selector within the page and passes it as a first argument to
   * `pageFunction`. If no elements match the selector, the method throws an error. Returns the value of `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [page.$eval(selector, pageFunction[, arg, options])](https://playwright.dev/docs/api/class-page#page-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const searchValue = await page.$eval('#search', el => el.value);
   * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
   * const html = await page.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
   * // In TypeScript, this example requires an explicit type annotation (HTMLLinkElement) on el:
   * const preloadHrefTS = await page.$eval('link[rel=preload]', (el: HTMLLinkElement) => el.href);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  $eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * The method finds all elements matching the specified selector within the page and passes an array of matched
   * elements as a first argument to `pageFunction`. Returns the result of `pageFunction` invocation.
   *
   * If `pageFunction` returns a [Promise], then
   * [page.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const divCounts = await page.$$eval('div', (divs, min) => divs.length >= min, 10);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: 'HTMLElementTagNameMap'
              TypeReference
                Identifier: 'K'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * The method finds all elements matching the specified selector within the page and passes an array of matched
   * elements as a first argument to `pageFunction`. Returns the result of `pageFunction` invocation.
   *
   * If `pageFunction` returns a [Promise], then
   * [page.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const divCounts = await page.$$eval('div', (divs, min) => divs.length >= min, 10);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            TypeReference
              Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * The method finds all elements matching the specified selector within the page and passes an array of matched
   * elements as a first argument to `pageFunction`. Returns the result of `pageFunction` invocation.
   *
   * If `pageFunction` returns a [Promise], then
   * [page.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const divCounts = await page.$$eval('div', (divs, min) => divs.length >= min, 10);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: 'HTMLElementTagNameMap'
              TypeReference
                Identifier: 'K'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * The method finds all elements matching the specified selector within the page and passes an array of matched
   * elements as a first argument to `pageFunction`. Returns the result of `pageFunction` invocation.
   *
   * If `pageFunction` returns a [Promise], then
   * [page.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const divCounts = await page.$$eval('div', (divs, min) => divs.length >= min, 10);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            TypeReference
              Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Returns when the `pageFunction` returns a truthy value. It resolves to a JSHandle of the truthy value.
   *
   * **Usage**
   *
   * The
   * [page.waitForFunction(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-page#page-wait-for-function)
   * can be used to observe viewport size change:
   *
   * ```js
   * const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
   *
   * (async () => {
   *   const browser = await webkit.launch();
   *   const page = await browser.newPage();
   *   const watchDog = page.waitForFunction(() => window.innerWidth < 100);
   *   await page.setViewportSize({ width: 50, height: 50 });
   *   await watchDog;
   *   await browser.close();
   * })();
   * ```
   *
   * To pass an argument to the predicate of
   * [page.waitForFunction(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-page#page-wait-for-function)
   * function:
   *
   * ```js
   * const selector = '.foo';
   * await page.waitForFunction(selector => !!document.querySelector(selector), selector);
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  waitForFunction'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          TypeReference
            Identifier: 'Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageWaitForFunctionOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns when the `pageFunction` returns a truthy value. It resolves to a JSHandle of the truthy value.
   *
   * **Usage**
   *
   * The
   * [page.waitForFunction(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-page#page-wait-for-function)
   * can be used to observe viewport size change:
   *
   * ```js
   * const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
   *
   * (async () => {
   *   const browser = await webkit.launch();
   *   const page = await browser.newPage();
   *   const watchDog = page.waitForFunction(() => window.innerWidth < 100);
   *   await page.setViewportSize({ width: 50, height: 50 });
   *   await watchDog;
   *   await browser.close();
   * })();
   * ```
   *
   * To pass an argument to the predicate of
   * [page.waitForFunction(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-page#page-wait-for-function)
   * function:
   *
   * ```js
   * const selector = '.foo';
   * await page.waitForFunction(selector => !!document.querySelector(selector), selector);
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  waitForFunction'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageWaitForFunctionOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead. Read more
   * about [locators](https://playwright.dev/docs/locators).
   *
   * Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * **NOTE** Playwright automatically waits for element to be ready before performing an action. Using {@link Locator}
   * objects and web-first assertions makes the code wait-for-selector-free.
   *
   * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If
   * at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.
   * If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.
   *
   * **Usage**
   *
   * This method works across navigations:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.
   *
   * (async () => {
   *   const browser = await chromium.launch();
   *   const page = await browser.newPage();
   *   for (const currentURL of ['https://google.com', 'https://bbc.com']) {
   *     await page.goto(currentURL);
   *     const element = await page.waitForSelector('img');
   *     console.log('Loaded image: ' + await element.getAttribute('src'));
   *   }
   *   await browser.close();
   * })();
   * ```
   *
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageWaitForSelectorOptionsNotHidden'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandleForTag'
          TypeReference
            Identifier: 'K'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead. Read more
   * about [locators](https://playwright.dev/docs/locators).
   *
   * Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * **NOTE** Playwright automatically waits for element to be ready before performing an action. Using {@link Locator}
   * objects and web-first assertions makes the code wait-for-selector-free.
   *
   * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If
   * at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.
   * If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.
   *
   * **Usage**
   *
   * This method works across navigations:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.
   *
   * (async () => {
   *   const browser = await chromium.launch();
   *   const page = await browser.newPage();
   *   for (const currentURL of ['https://google.com', 'https://bbc.com']) {
   *     await page.goto(currentURL);
   *     const element = await page.waitForSelector('img');
   *     console.log('Loaded image: ' + await element.getAttribute('src'));
   *   }
   *   await browser.close();
   * })();
   * ```
   *
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageWaitForSelectorOptionsNotHidden'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandle'
          UnionType
            TypeReference
              Identifier: 'SVGElement'
            TypeReference
              Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead. Read more
   * about [locators](https://playwright.dev/docs/locators).
   *
   * Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * **NOTE** Playwright automatically waits for element to be ready before performing an action. Using {@link Locator}
   * objects and web-first assertions makes the code wait-for-selector-free.
   *
   * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If
   * at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.
   * If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.
   *
   * **Usage**
   *
   * This method works across navigations:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.
   *
   * (async () => {
   *   const browser = await chromium.launch();
   *   const page = await browser.newPage();
   *   for (const currentURL of ['https://google.com', 'https://bbc.com']) {
   *     await page.goto(currentURL);
   *     const element = await page.waitForSelector('img');
   *     console.log('Loaded image: ' + await element.getAttribute('src'));
   *   }
   *   await browser.close();
   * })();
   * ```
   *
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' PageWaitForSelectorOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead. Read more
   * about [locators](https://playwright.dev/docs/locators).
   *
   * Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * **NOTE** Playwright automatically waits for element to be ready before performing an action. Using {@link Locator}
   * objects and web-first assertions makes the code wait-for-selector-free.
   *
   * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If
   * at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.
   * If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.
   *
   * **Usage**
   *
   * This method works across navigations:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.
   *
   * (async () => {
   *   const browser = await chromium.launch();
   *   const page = await browser.newPage();
   *   for (const currentURL of ['https://google.com', 'https://bbc.com']) {
   *     await page.goto(currentURL);
   *     const element = await page.waitForSelector('img');
   *     console.log('Loaded image: ' + await element.getAttribute('src'));
   *   }
   *   await browser.close();
   * })();
   * ```
   *
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' PageWaitForSelectorOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '

  /**
   * The method adds a function called `name` on the `window` object of every frame in this page. When called, the
   * function executes `callback` and returns a [Promise] which resolves to the return value of `callback`. If the
   * `callback` returns a [Promise], it will be awaited.
   *
   * The first argument of the `callback` function contains information about the caller: `{ browserContext:
   * BrowserContext, page: Page, frame: Frame }`.
   *
   * See
   * [browserContext.exposeBinding(name, callback[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-expose-binding)
   * for the context-wide version.
   *
   * **NOTE** Functions installed via
   * [page.exposeBinding(name, callback[, options])](https://playwright.dev/docs/api/class-page#page-expose-binding)
   * survive navigations.
   *
   * **Usage**
   *
   * An example of exposing page URL to all frames in a page:
   *
   * ```js
   * const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
   *
   * (async () => {
   *   const browser = await webkit.launch({ headless: false });
   *   const context = await browser.newContext();
   *   const page = await context.newPage();
   *   await page.exposeBinding('pageURL', ({ page }) => page.url());
   *   await page.setContent(`
   *     <script>
   *       async function onClick() {
   *         document.querySelector('div').textContent = await window.pageURL();
   *       }
   *     </script>
   *     <button onclick="onClick()">Click me</button>
   *     <div></div>
   *   `);
   *   await page.click('button');
   * })();
   * ```
   *
   * @param name Name of the function on the window object.
   * @param callback Callback function that will be called in the Playwright's context.
   * @param options
   */
  exposeBinding'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' playwrightBinding'
        FunctionType
          Parameter
            Identifier: 'source'
            TypeReference
              Identifier: ' BindingSource'
          Parameter
            Identifier: ' arg'
            TypeReference
              Identifier: ' JSHandle'
          AnyKeyword
      Parameter
        Identifier: ' options'
        TypeLiteral
          PropertySignature
            Identifier: ' handle'
            LiteralType
              TrueKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * The method adds a function called `name` on the `window` object of every frame in this page. When called, the
   * function executes `callback` and returns a [Promise] which resolves to the return value of `callback`. If the
   * `callback` returns a [Promise], it will be awaited.
   *
   * The first argument of the `callback` function contains information about the caller: `{ browserContext:
   * BrowserContext, page: Page, frame: Frame }`.
   *
   * See
   * [browserContext.exposeBinding(name, callback[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-expose-binding)
   * for the context-wide version.
   *
   * **NOTE** Functions installed via
   * [page.exposeBinding(name, callback[, options])](https://playwright.dev/docs/api/class-page#page-expose-binding)
   * survive navigations.
   *
   * **Usage**
   *
   * An example of exposing page URL to all frames in a page:
   *
   * ```js
   * const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
   *
   * (async () => {
   *   const browser = await webkit.launch({ headless: false });
   *   const context = await browser.newContext();
   *   const page = await context.newPage();
   *   await page.exposeBinding('pageURL', ({ page }) => page.url());
   *   await page.setContent(`
   *     <script>
   *       async function onClick() {
   *         document.querySelector('div').textContent = await window.pageURL();
   *       }
   *     </script>
   *     <button onclick="onClick()">Click me</button>
   *     <div></div>
   *   `);
   *   await page.click('button');
   * })();
   * ```
   *
   * @param name Name of the function on the window object.
   * @param callback Callback function that will be called in the Playwright's context.
   * @param options
   */
  exposeBinding'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' playwrightBinding'
        FunctionType
          Parameter
            Identifier: 'source'
            TypeReference
              Identifier: ' BindingSource'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          AnyKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' handle'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Removes all the listeners of the given type (or all registered listeners if no type given). Allows to wait for
   * async listeners to complete or to ignore subsequent errors from these listeners.
   *
   * **Usage**
   *
   * ```js
   * page.on('request', async request => {
   *   const response = await request.response();
   *   const body = await response.body();
   *   console.log(body.byteLength);
   * });
   * await page.goto('https://playwright.dev', { waitUntil: 'domcontentloaded' });
   * // Waits for all the reported 'request' events to resolve.
   * await page.removeAllListeners('request', { behavior: 'wait' });
   * ```
   *
   * @param type
   * @param options
   */
  removeAllListeners'
      Parameter
        Identifier: 'type'
        QuestionToken
        StringKeyword
      ThisType
    MethodSignature
      Identifier: '
  /**
   * Removes all the listeners of the given type (or all registered listeners if no type given). Allows to wait for
   * async listeners to complete or to ignore subsequent errors from these listeners.
   *
   * **Usage**
   *
   * ```js
   * page.on('request', async request => {
   *   const response = await request.response();
   *   const body = await response.body();
   *   console.log(body.byteLength);
   * });
   * await page.goto('https://playwright.dev', { waitUntil: 'domcontentloaded' });
   * // Waits for all the reported 'request' events to resolve.
   * await page.removeAllListeners('request', { behavior: 'wait' });
   * ```
   *
   * @param type
   * @param options
   */
  removeAllListeners'
      Parameter
        Identifier: 'type'
        UnionType
          StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Specifies whether to wait for already running listeners and what to do if they throw errors:
     * - `'default'` - do not wait for current listener calls (if any) to finish, if the listener throws, it may result in unhandled error
     * - `'wait'` - wait for current listener calls (if any) to finish
     * - `'ignoreErrors'` - do not wait for current listener calls (if any) to finish, all errors thrown by the listeners after removal are silently caught
     */
    behavior'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Emitted when the page closes.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.
   *
   * The arguments passed into `console.log` are available on the {@link ConsoleMessage} event handler argument.
   *
   * **Usage**
   *
   * ```js
   * page.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page crashes. Browser pages might crash if they try to allocate too much memory. When the page
   * crashes, ongoing and subsequent operations will throw.
   *
   * The most common way to deal with crashes is to catch an exception:
   *
   * ```js
   * try {
   *   // Crash might happen during a click.
   *   await page.click('button');
   *   // Or while waiting for an event.
   *   await page.waitForEvent('popup');
   * } catch (e) {
   *   // When the page crashes, exception message contains 'crash'.
   * }
   * ```
   *
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must**
   * either [dialog.accept([promptText])](https://playwright.dev/docs/api/class-dialog#dialog-accept) or
   * [dialog.dismiss()](https://playwright.dev/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page
   * will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the
   * dialog, and actions like click will never finish.
   *
   * **Usage**
   *
   * ```js
   * page.on('dialog', dialog => dialog.accept());
   * ```
   *
   * **NOTE** When no [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) or
   * [browserContext.on('dialog')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-dialog)
   * listeners are present, all dialogs are automatically dismissed.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the JavaScript
   * [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) event is dispatched.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when attachment download started. User can access basic file operations on downloaded content via the
   * passed {@link Download} instance.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'download'
            TypeReference
              Identifier: ' Download'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a file chooser is supposed to appear, such as after clicking the  `<input type=file>`. Playwright can
   * respond to it via setting the input files using
   * [fileChooser.setFiles(files[, options])](https://playwright.dev/docs/api/class-filechooser#file-chooser-set-files)
   * that can be uploaded after that.
   *
   * ```js
   * page.on('filechooser', async fileChooser => {
   *   await fileChooser.setFiles(path.join(__dirname, '/tmp/myfile.pdf'));
   * });
   * ```
   *
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'fileChooser'
            TypeReference
              Identifier: ' FileChooser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is attached.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is detached.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is navigated to a new url.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the JavaScript [`load`](https://developer.mozilla.org/en-US/docs/Web/Events/load) event is dispatched.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when an uncaught exception happens within the page.
   *
   * ```js
   * // Log all uncaught errors to the terminal
   * page.on('pageerror', exception => {
   *   console.log(`Uncaught exception: "${exception}"`);
   * });
   *
   * // Navigate to a page with an exception.
   * await page.goto('data:text/html,<script>throw new Error("Test")</script>');
   * ```
   *
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'error'
            TypeReference
              Identifier: ' Error'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page opens a new tab or window. This event is emitted in addition to the
   * [browserContext.on('page')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-page), but
   * only for popups relevant to this page.
   *
   * The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a
   * popup with `window.open('http://example.com')`, this event will fire when the network request to
   * "http://example.com" is done and its response has started loading in the popup. If you would like to route/listen
   * to this network request, use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.on('request')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request)
   * respectively instead of similar methods on the {@link Page}.
   *
   * ```js
   * // Start waiting for popup before clicking. Note no await.
   * const popupPromise = page.waitForEvent('popup');
   * await page.getByText('open the popup').click();
   * const popup = await popupPromise;
   * console.log(await popup.evaluate('location.href'));
   * ```
   *
   * **NOTE** Use
   * [page.waitForLoadState([state, options])](https://playwright.dev/docs/api/class-page#page-wait-for-load-state) to
   * wait until the page gets to a particular state (you should not need it in most cases).
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a page issues a request. The [request] object is read-only. In order to intercept and mutate requests,
   * see [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route) or
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route).
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request fails, for example by timing out.
   *
   * ```js
   * page.on('requestfailed', request => {
   *   console.log(request.url() + ' ' + request.failure().errorText);
   * });
   * ```
   *
   * **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request
   * will complete with
   * [page.on('requestfinished')](https://playwright.dev/docs/api/class-page#page-event-request-finished) event and not
   * with [page.on('requestfailed')](https://playwright.dev/docs/api/class-page#page-event-request-failed). A request
   * will only be considered failed when the client cannot get an HTTP response from the server, e.g. due to network
   * error net::ERR_FAILED.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request finishes successfully after downloading the response body. For a successful response, the
   * sequence of events is `request`, `response` and `requestfinished`.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when [response] status and headers are received for a request. For a successful response, the sequence of
   * events is `request`, `response` and `requestfinished`.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when {@link WebSocket} request is sent.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is spawned
   * by the page.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'download'
            TypeReference
              Identifier: ' Download'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'fileChooser'
            TypeReference
              Identifier: ' FileChooser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'error'
            TypeReference
              Identifier: ' Error'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page closes.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.
   *
   * The arguments passed into `console.log` are available on the {@link ConsoleMessage} event handler argument.
   *
   * **Usage**
   *
   * ```js
   * page.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page crashes. Browser pages might crash if they try to allocate too much memory. When the page
   * crashes, ongoing and subsequent operations will throw.
   *
   * The most common way to deal with crashes is to catch an exception:
   *
   * ```js
   * try {
   *   // Crash might happen during a click.
   *   await page.click('button');
   *   // Or while waiting for an event.
   *   await page.waitForEvent('popup');
   * } catch (e) {
   *   // When the page crashes, exception message contains 'crash'.
   * }
   * ```
   *
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must**
   * either [dialog.accept([promptText])](https://playwright.dev/docs/api/class-dialog#dialog-accept) or
   * [dialog.dismiss()](https://playwright.dev/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page
   * will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the
   * dialog, and actions like click will never finish.
   *
   * **Usage**
   *
   * ```js
   * page.on('dialog', dialog => dialog.accept());
   * ```
   *
   * **NOTE** When no [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) or
   * [browserContext.on('dialog')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-dialog)
   * listeners are present, all dialogs are automatically dismissed.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the JavaScript
   * [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) event is dispatched.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when attachment download started. User can access basic file operations on downloaded content via the
   * passed {@link Download} instance.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'download'
            TypeReference
              Identifier: ' Download'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a file chooser is supposed to appear, such as after clicking the  `<input type=file>`. Playwright can
   * respond to it via setting the input files using
   * [fileChooser.setFiles(files[, options])](https://playwright.dev/docs/api/class-filechooser#file-chooser-set-files)
   * that can be uploaded after that.
   *
   * ```js
   * page.on('filechooser', async fileChooser => {
   *   await fileChooser.setFiles(path.join(__dirname, '/tmp/myfile.pdf'));
   * });
   * ```
   *
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'fileChooser'
            TypeReference
              Identifier: ' FileChooser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is attached.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is detached.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is navigated to a new url.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the JavaScript [`load`](https://developer.mozilla.org/en-US/docs/Web/Events/load) event is dispatched.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when an uncaught exception happens within the page.
   *
   * ```js
   * // Log all uncaught errors to the terminal
   * page.on('pageerror', exception => {
   *   console.log(`Uncaught exception: "${exception}"`);
   * });
   *
   * // Navigate to a page with an exception.
   * await page.goto('data:text/html,<script>throw new Error("Test")</script>');
   * ```
   *
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'error'
            TypeReference
              Identifier: ' Error'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page opens a new tab or window. This event is emitted in addition to the
   * [browserContext.on('page')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-page), but
   * only for popups relevant to this page.
   *
   * The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a
   * popup with `window.open('http://example.com')`, this event will fire when the network request to
   * "http://example.com" is done and its response has started loading in the popup. If you would like to route/listen
   * to this network request, use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.on('request')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request)
   * respectively instead of similar methods on the {@link Page}.
   *
   * ```js
   * // Start waiting for popup before clicking. Note no await.
   * const popupPromise = page.waitForEvent('popup');
   * await page.getByText('open the popup').click();
   * const popup = await popupPromise;
   * console.log(await popup.evaluate('location.href'));
   * ```
   *
   * **NOTE** Use
   * [page.waitForLoadState([state, options])](https://playwright.dev/docs/api/class-page#page-wait-for-load-state) to
   * wait until the page gets to a particular state (you should not need it in most cases).
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a page issues a request. The [request] object is read-only. In order to intercept and mutate requests,
   * see [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route) or
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route).
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request fails, for example by timing out.
   *
   * ```js
   * page.on('requestfailed', request => {
   *   console.log(request.url() + ' ' + request.failure().errorText);
   * });
   * ```
   *
   * **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request
   * will complete with
   * [page.on('requestfinished')](https://playwright.dev/docs/api/class-page#page-event-request-finished) event and not
   * with [page.on('requestfailed')](https://playwright.dev/docs/api/class-page#page-event-request-failed). A request
   * will only be considered failed when the client cannot get an HTTP response from the server, e.g. due to network
   * error net::ERR_FAILED.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request finishes successfully after downloading the response body. For a successful response, the
   * sequence of events is `request`, `response` and `requestfinished`.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when [response] status and headers are received for a request. For a successful response, the sequence of
   * events is `request`, `response` and `requestfinished`.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when {@link WebSocket} request is sent.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is spawned
   * by the page.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'download'
            TypeReference
              Identifier: ' Download'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'fileChooser'
            TypeReference
              Identifier: ' FileChooser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'error'
            TypeReference
              Identifier: ' Error'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'download'
            TypeReference
              Identifier: ' Download'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'fileChooser'
            TypeReference
              Identifier: ' FileChooser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'error'
            TypeReference
              Identifier: ' Error'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page closes.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.
   *
   * The arguments passed into `console.log` are available on the {@link ConsoleMessage} event handler argument.
   *
   * **Usage**
   *
   * ```js
   * page.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page crashes. Browser pages might crash if they try to allocate too much memory. When the page
   * crashes, ongoing and subsequent operations will throw.
   *
   * The most common way to deal with crashes is to catch an exception:
   *
   * ```js
   * try {
   *   // Crash might happen during a click.
   *   await page.click('button');
   *   // Or while waiting for an event.
   *   await page.waitForEvent('popup');
   * } catch (e) {
   *   // When the page crashes, exception message contains 'crash'.
   * }
   * ```
   *
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must**
   * either [dialog.accept([promptText])](https://playwright.dev/docs/api/class-dialog#dialog-accept) or
   * [dialog.dismiss()](https://playwright.dev/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page
   * will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the
   * dialog, and actions like click will never finish.
   *
   * **Usage**
   *
   * ```js
   * page.on('dialog', dialog => dialog.accept());
   * ```
   *
   * **NOTE** When no [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) or
   * [browserContext.on('dialog')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-dialog)
   * listeners are present, all dialogs are automatically dismissed.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the JavaScript
   * [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) event is dispatched.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when attachment download started. User can access basic file operations on downloaded content via the
   * passed {@link Download} instance.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'download'
            TypeReference
              Identifier: ' Download'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a file chooser is supposed to appear, such as after clicking the  `<input type=file>`. Playwright can
   * respond to it via setting the input files using
   * [fileChooser.setFiles(files[, options])](https://playwright.dev/docs/api/class-filechooser#file-chooser-set-files)
   * that can be uploaded after that.
   *
   * ```js
   * page.on('filechooser', async fileChooser => {
   *   await fileChooser.setFiles(path.join(__dirname, '/tmp/myfile.pdf'));
   * });
   * ```
   *
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'fileChooser'
            TypeReference
              Identifier: ' FileChooser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is attached.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is detached.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is navigated to a new url.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'frame'
            TypeReference
              Identifier: ' Frame'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the JavaScript [`load`](https://developer.mozilla.org/en-US/docs/Web/Events/load) event is dispatched.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when an uncaught exception happens within the page.
   *
   * ```js
   * // Log all uncaught errors to the terminal
   * page.on('pageerror', exception => {
   *   console.log(`Uncaught exception: "${exception}"`);
   * });
   *
   * // Navigate to a page with an exception.
   * await page.goto('data:text/html,<script>throw new Error("Test")</script>');
   * ```
   *
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'error'
            TypeReference
              Identifier: ' Error'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page opens a new tab or window. This event is emitted in addition to the
   * [browserContext.on('page')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-page), but
   * only for popups relevant to this page.
   *
   * The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a
   * popup with `window.open('http://example.com')`, this event will fire when the network request to
   * "http://example.com" is done and its response has started loading in the popup. If you would like to route/listen
   * to this network request, use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.on('request')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request)
   * respectively instead of similar methods on the {@link Page}.
   *
   * ```js
   * // Start waiting for popup before clicking. Note no await.
   * const popupPromise = page.waitForEvent('popup');
   * await page.getByText('open the popup').click();
   * const popup = await popupPromise;
   * console.log(await popup.evaluate('location.href'));
   * ```
   *
   * **NOTE** Use
   * [page.waitForLoadState([state, options])](https://playwright.dev/docs/api/class-page#page-wait-for-load-state) to
   * wait until the page gets to a particular state (you should not need it in most cases).
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a page issues a request. The [request] object is read-only. In order to intercept and mutate requests,
   * see [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route) or
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route).
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request fails, for example by timing out.
   *
   * ```js
   * page.on('requestfailed', request => {
   *   console.log(request.url() + ' ' + request.failure().errorText);
   * });
   * ```
   *
   * **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request
   * will complete with
   * [page.on('requestfinished')](https://playwright.dev/docs/api/class-page#page-event-request-finished) event and not
   * with [page.on('requestfailed')](https://playwright.dev/docs/api/class-page#page-event-request-failed). A request
   * will only be considered failed when the client cannot get an HTTP response from the server, e.g. due to network
   * error net::ERR_FAILED.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request finishes successfully after downloading the response body. For a successful response, the
   * sequence of events is `request`, `response` and `requestfinished`.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when [response] status and headers are received for a request. For a successful response, the sequence of
   * events is `request`, `response` and `requestfinished`.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when {@link WebSocket} request is sent.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is spawned
   * by the page.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * When testing a web page, sometimes unexpected overlays like a "Sign up" dialog appear and block actions you want to
   * automate, e.g. clicking a button. These overlays don't always show up in the same way or at the same time, making
   * them tricky to handle in automated tests.
   *
   * This method lets you set up a special function, called a handler, that activates when it detects that overlay is
   * visible. The handler's job is to remove the overlay, allowing your test to continue as if the overlay wasn't there.
   *
   * Things to keep in mind:
   * - When an overlay is shown predictably, we recommend explicitly waiting for it in your test and dismissing it as
   *   a part of your normal test flow, instead of using
   *   [page.addLocatorHandler(locator, handler[, options])](https://playwright.dev/docs/api/class-page#page-add-locator-handler).
   * - Playwright checks for the overlay every time before executing or retrying an action that requires an
   *   [actionability check](https://playwright.dev/docs/actionability), or before performing an auto-waiting assertion check. When overlay
   *   is visible, Playwright calls the handler first, and then proceeds with the action/assertion. Note that the
   *   handler is only called when you perform an action/assertion - if the overlay becomes visible but you don't
   *   perform any actions, the handler will not be triggered.
   * - After executing the handler, Playwright will ensure that overlay that triggered the handler is not visible
   *   anymore. You can opt-out of this behavior with `noWaitAfter`.
   * - The execution time of the handler counts towards the timeout of the action/assertion that executed the handler.
   *   If your handler takes too long, it might cause timeouts.
   * - You can register multiple handlers. However, only a single handler will be running at a time. Make sure the
   *   actions within a handler don't depend on another handler.
   *
   * **NOTE** Running the handler will alter your page state mid-test. For example it will change the currently focused
   * element and move the mouse. Make sure that actions that run after the handler are self-contained and do not rely on
   * the focus and mouse state being unchanged. <br /> <br /> For example, consider a test that calls
   * [locator.focus([options])](https://playwright.dev/docs/api/class-locator#locator-focus) followed by
   * [keyboard.press(key[, options])](https://playwright.dev/docs/api/class-keyboard#keyboard-press). If your handler
   * clicks a button between these two actions, the focused element most likely will be wrong, and key press will happen
   * on the unexpected element. Use
   * [locator.press(key[, options])](https://playwright.dev/docs/api/class-locator#locator-press) instead to avoid this
   * problem. <br /> <br /> Another example is a series of mouse actions, where
   * [mouse.move(x, y[, options])](https://playwright.dev/docs/api/class-mouse#mouse-move) is followed by
   * [mouse.down([options])](https://playwright.dev/docs/api/class-mouse#mouse-down). Again, when the handler runs
   * between these two actions, the mouse position will be wrong during the mouse down. Prefer self-contained actions
   * like [locator.click([options])](https://playwright.dev/docs/api/class-locator#locator-click) that do not rely on
   * the state being unchanged by a handler.
   *
   * **Usage**
   *
   * An example that closes a "Sign up to the newsletter" dialog when it appears:
   *
   * ```js
   * // Setup the handler.
   * await page.addLocatorHandler(page.getByText('Sign up to the newsletter'), async () => {
   *   await page.getByRole('button', { name: 'No thanks' }).click();
   * });
   *
   * // Write the test as usual.
   * await page.goto('https://example.com');
   * await page.getByRole('button', { name: 'Start here' }).click();
   * ```
   *
   * An example that skips the "Confirm your security details" page when it is shown:
   *
   * ```js
   * // Setup the handler.
   * await page.addLocatorHandler(page.getByText('Confirm your security details'), async () => {
   *   await page.getByRole('button', { name: 'Remind me later' }).click();
   * });
   *
   * // Write the test as usual.
   * await page.goto('https://example.com');
   * await page.getByRole('button', { name: 'Start here' }).click();
   * ```
   *
   * An example with a custom callback on every actionability check. It uses a `<body>` locator that is always visible,
   * so the handler is called before every actionability check. It is important to specify `noWaitAfter`, because the
   * handler does not hide the `<body>` element.
   *
   * ```js
   * // Setup the handler.
   * await page.addLocatorHandler(page.locator('body'), async () => {
   *   await page.evaluate(() => window.removeObstructionsForTestIfNeeded());
   * }, { noWaitAfter: true });
   *
   * // Write the test as usual.
   * await page.goto('https://example.com');
   * await page.getByRole('button', { name: 'Start here' }).click();
   * ```
   *
   * Handler takes the original locator as an argument. You can also automatically remove the handler after a number of
   * invocations by setting `times`:
   *
   * ```js
   * await page.addLocatorHandler(page.getByLabel('Close'), async locator => {
   *   await locator.click();
   * }, { times: 1 });
   * ```
   *
   * @param locator Locator that triggers the handler.
   * @param handler Function that should be run once `locator` appears. This function should get rid of the element that blocks actions
   * like click.
   * @param options
   */
  addLocatorHandler'
      Parameter
        Identifier: 'locator'
        TypeReference
          Identifier: ' Locator'
      Parameter
        Identifier: ' handler'
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'locator'
              TypeReference
                Identifier: ' Locator'
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * By default, after calling the handler Playwright will wait until the overlay becomes hidden, and only then
     * Playwright will continue with the action/assertion that triggered the handler. This option allows to opt-out of
     * this behavior, so that overlay can stay visible after the handler has run.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Specifies the maximum number of times this handler should be called. Unlimited by default.
     */
    times'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Adds a `<script>` tag into the page with the desired url or content. Returns the added tag when the script's onload
   * fires or when the script content was injected into frame.
   * @param options
   */
  addScriptTag'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Raw JavaScript content to be injected into frame.
     */
    content'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative
     * to the current working directory.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Script type. Use 'module' in order to load a JavaScript ES6 module. See
     * [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.
     */
    type'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * URL of a script to be added.
     */
    url'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandle'
    MethodSignature
      Identifier: '

  /**
   * Adds a `<link rel="stylesheet">` tag into the page with the desired url or a `<style type="text/css">` tag with the
   * content. Returns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.
   * @param options
   */
  addStyleTag'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Raw CSS content to be injected into frame.
     */
    content'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the
     * current working directory.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * URL of the `<link>` tag.
     */
    url'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandle'
    MethodSignature
      Identifier: '

  /**
   * Brings page to front (activates tab).
   */
  bringToFront'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.check([options])](https://playwright.dev/docs/api/class-locator#locator-check) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method checks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is
   *    already checked, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now checked. If not, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  check'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.click([options])](https://playwright.dev/docs/api/class-locator#locator-click) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method clicks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element, or the specified `position`.
   * 1. Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  click'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * defaults to 1. See [UIEvent.detail].
     */
    clickCount'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You
     * can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as
     * navigating to inaccessible pages. Defaults to `false`.
     * @deprecated This option will default to `true` in the future.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * If `runBeforeUnload` is `false`, does not run any unload handlers and waits for the page to be closed. If
   * `runBeforeUnload` is `true` the method will run unload handlers, but will **not** wait for the page to close.
   *
   * By default, `page.close()` **does not** run `beforeunload` handlers.
   *
   * **NOTE** if `runBeforeUnload` is passed as true, a `beforeunload` dialog might be summoned and should be handled
   * manually via [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) event.
   * @param options
   */
  close'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The reason to be reported to the operations interrupted by the page closure.
     */
    reason'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Defaults to `false`. Whether to run the
     * [before unload](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload) page handlers.
     */
    runBeforeUnload'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Gets the full HTML contents of the page, including the doctype.
   */
  content'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Get the browser context that the page belongs to.
   */
  context'
      TypeReference
        Identifier: ' BrowserContext'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.dblclick([options])](https://playwright.dev/docs/api/class-locator#locator-dblclick)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method double clicks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to double click in the center of the
   *    element, or the specified `position`.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **NOTE** `page.dblclick()` dispatches two `click` events and a single `dblclick` event.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  dblclick'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.dispatchEvent(type[, eventInit, options])](https://playwright.dev/docs/api/class-locator#locator-dispatch-event)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element,
   * `click` is dispatched. This is equivalent to calling
   * [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).
   *
   * **Usage**
   *
   * ```js
   * await page.dispatchEvent('button#submit', 'click');
   * ```
   *
   * Under the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit`
   * properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.
   *
   * Since `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:
   * - [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
   * - [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
   * - [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
   * - [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
   * - [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
   * - [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
   * - [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
   * - [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
   * - [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
   * - [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)
   *
   * You can also specify `JSHandle` as the property value if you want live objects to be passed into the event:
   *
   * ```js
   * // Note you can only create DataTransfer in Chromium and Firefox
   * const dataTransfer = await page.evaluateHandle(() => new DataTransfer());
   * await page.dispatchEvent('#source', 'dragstart', { dataTransfer });
   * ```
   *
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param type DOM event type: `"click"`, `"dragstart"`, etc.
   * @param eventInit Optional event-specific initialization properties.
   * @param options
   */
  dispatchEvent'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' type'
        StringKeyword
      Parameter
        Identifier: ' eventInit'
        QuestionToken
        TypeReference
          Identifier: ' EvaluationArgument'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method drags the source element to the target element. It will first move to the source element, perform a
   * `mousedown`, then move to the target element and perform a `mouseup`.
   *
   * **Usage**
   *
   * ```js
   * await page.dragAndDrop('#source', '#target');
   * // or specify exact positions relative to the top-left corners of the elements:
   * await page.dragAndDrop('#source', '#target', {
   *   sourcePosition: { x: 34, y: 7 },
   *   targetPosition: { x: 10, y: 20 },
   * });
   * ```
   *
   * @param source A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will
   * be used.
   * @param target A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first
   * will be used.
   * @param options
   */
  dragAndDrop'
      Parameter
        Identifier: 'source'
        StringKeyword
      Parameter
        Identifier: ' target'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not
     * specified, some visible point of the element is used.
     */
    sourcePosition'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Drops on the target element at this point relative to the top-left corner of the element's padding box. If not
     * specified, some visible point of the element is used.
     */
    targetPosition'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method changes the `CSS media type` through the `media` argument, and/or the `'prefers-colors-scheme'` media
   * feature, using the `colorScheme` argument.
   *
   * **Usage**
   *
   * ```js
   * await page.evaluate(() => matchMedia('screen').matches);
   * // → true
   * await page.evaluate(() => matchMedia('print').matches);
   * // → false
   *
   * await page.emulateMedia({ media: 'print' });
   * await page.evaluate(() => matchMedia('screen').matches);
   * // → false
   * await page.evaluate(() => matchMedia('print').matches);
   * // → true
   *
   * await page.emulateMedia({});
   * await page.evaluate(() => matchMedia('screen').matches);
   * // → true
   * await page.evaluate(() => matchMedia('print').matches);
   * // → false
   * ```
   *
   * ```js
   * await page.emulateMedia({ colorScheme: 'dark' });
   * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);
   * // → true
   * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);
   * // → false
   * await page.evaluate(() => matchMedia('(prefers-color-scheme: no-preference)').matches);
   * // → false
   * ```
   *
   * @param options
   */
  emulateMedia'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`.
     * Passing `null` disables color scheme emulation.
     */
    colorScheme'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Emulates `'forced-colors'` media feature, supported values are `'active'` and `'none'`. Passing `null` disables
     * forced colors emulation.
     */
    forcedColors'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Changes the CSS media type of the page. The only allowed values are `'screen'`, `'print'` and `null`. Passing
     * `null` disables CSS media emulation.
     */
    media'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. Passing
     * `null` disables reduced motion emulation.
     */
    reducedMotion'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * The method adds a function called `name` on the `window` object of every frame in the page. When called, the
   * function executes `callback` and returns a [Promise] which resolves to the return value of `callback`.
   *
   * If the `callback` returns a [Promise], it will be awaited.
   *
   * See
   * [browserContext.exposeFunction(name, callback)](https://playwright.dev/docs/api/class-browsercontext#browser-context-expose-function)
   * for context-wide exposed function.
   *
   * **NOTE** Functions installed via
   * [page.exposeFunction(name, callback)](https://playwright.dev/docs/api/class-page#page-expose-function) survive
   * navigations.
   *
   * **Usage**
   *
   * An example of adding a `sha256` function to the page:
   *
   * ```js
   * const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
   * const crypto = require('crypto');
   *
   * (async () => {
   *   const browser = await webkit.launch({ headless: false });
   *   const page = await browser.newPage();
   *   await page.exposeFunction('sha256', text =>
   *     crypto.createHash('sha256').update(text).digest('hex'),
   *   );
   *   await page.setContent(`
   *     <script>
   *       async function onClick() {
   *         document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
   *       }
   *     </script>
   *     <button onclick="onClick()">Click me</button>
   *     <div></div>
   *   `);
   *   await page.click('button');
   * })();
   * ```
   *
   * @param name Name of the function on the window object
   * @param callback Callback function which will be called in Playwright's context.
   */
  exposeFunction'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' callback'
        TypeReference
          Identifier: ' Function'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method waits for an element matching `selector`, waits for [actionability](https://playwright.dev/docs/actionability) checks,
   * focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string
   * to clear the input field.
   *
   * If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an
   * error. However, if the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled
   * instead.
   *
   * To send fine-grained keyboard events, use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param value Value to fill for the `<input>`, `<textarea>` or `[contenteditable]` element.
   * @param options
   */
  fill'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' value'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.focus([options])](https://playwright.dev/docs/api/class-locator#locator-focus) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method fetches an element with `selector` and focuses it. If there's no element matching `selector`, the
   * method waits until a matching element appears in the DOM.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  focus'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns frame matching the specified criteria. Either `name` or `url` must be specified.
   *
   * **Usage**
   *
   * ```js
   * const frame = page.frame('frame-name');
   * ```
   *
   * ```js
   * const frame = page.frame({ url: /.*domain.*\/ });
   * ```
   *
   * @param frameSelector Frame name or other frame lookup options.
   */
  frame'
      Parameter
        Identifier: 'frameSelector'
        UnionType
          StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Frame name specified in the `iframe`'s `name` attribute. Optional.
     */
    name'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * A glob pattern, regex pattern or predicate receiving frame's `url` as a [URL] object. Optional.
     */
    url'
              QuestionToken
              UnionType
                StringKeyword
                TypeReference
                  Identifier: 'RegExp'
                ParenthesizedType
                  FunctionType
                    Parameter
                      Identifier: 'url'
                      TypeReference
                        Identifier: ' URL'
                    BooleanKeyword
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements
   * in that iframe.
   *
   * **Usage**
   *
   * Following snippet locates element with text "Submit" in the iframe with id `my-frame`, like `<iframe
   * id="my-frame">`:
   *
   * ```js
   * const locator = page.frameLocator('#my-iframe').getByText('Submit');
   * await locator.click();
   * ```
   *
   * @param selector A selector to use when resolving DOM element.
   */
  frameLocator'
      Parameter
        Identifier: 'selector'
        StringKeyword
      TypeReference
        Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '

  /**
   * An array of all frames attached to the page.
   */
  frames'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.getAttribute(name[, options])](https://playwright.dev/docs/api/class-locator#locator-get-attribute)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns element attribute value.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param name Attribute name to get the value for.
   * @param options
   */
  getAttribute'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' name'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their alt text.
   *
   * **Usage**
   *
   * For example, this method will find the image by alt text "Playwright logo":
   *
   * ```html
   * <img alt='Playwright logo'>
   * ```
   *
   * ```js
   * await page.getByAltText('Playwright logo').click();
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByAltText'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the
   * `aria-label` attribute.
   *
   * **Usage**
   *
   * For example, this method will find inputs by label "Username" and "Password" in the following DOM:
   *
   * ```html
   * <input aria-label="Username">
   * <label for="password-input">Password:</label>
   * <input id="password-input">
   * ```
   *
   * ```js
   * await page.getByLabel('Username').fill('john');
   * await page.getByLabel('Password').fill('secret');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByLabel'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating input elements by the placeholder text.
   *
   * **Usage**
   *
   * For example, consider the following DOM structure.
   *
   * ```html
   * <input type="email" placeholder="name@example.com" />
   * ```
   *
   * You can fill the input after locating it by the placeholder text:
   *
   * ```js
   * await page
   *     .getByPlaceholder('name@example.com')
   *     .fill('playwright@microsoft.com');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByPlaceholder'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles),
   * [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and
   * [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <h3>Sign up</h3>
   * <label>
   *   <input type="checkbox" /> Subscribe
   * </label>
   * <br/>
   * <button>Submit</button>
   * ```
   *
   * You can locate each element by it's implicit role:
   *
   * ```js
   * await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();
   *
   * await page.getByRole('checkbox', { name: 'Subscribe' }).check();
   *
   * await page.getByRole('button', { name: /submit/i }).click();
   * ```
   *
   * **Details**
   *
   * Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback
   * about the ARIA guidelines.
   *
   * Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings)
   * that is recognized by the role selector. You can find all the
   * [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend**
   * duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.
   * @param role Required aria role.
   * @param options
   */
  getByRole'
      Parameter
        Identifier: 'role'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.
     *
     * Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).
     */
    checked'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-disabled` or `disabled`.
     *
     * **NOTE** Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about
     * [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).
     */
    disabled'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-expanded`.
     *
     * Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).
     */
    expanded'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Option that controls whether hidden elements are matched. By default, only non-hidden elements, as
     * [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.
     *
     * Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).
     */
    includeHidden'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values
     * for `<h1>-<h6>` elements.
     *
     * Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).
     */
    level'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is
     * case-insensitive and searches for a substring, use `exact` to control this behavior.
     *
     * Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
     */
    name'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-pressed`.
     *
     * Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).
     */
    pressed'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-selected`.
     *
     * Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).
     */
    selected'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Locate element by the test id.
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <button data-testid="directions">Itinéraire</button>
   * ```
   *
   * You can locate the element by it's test id:
   *
   * ```js
   * await page.getByTestId('directions').click();
   * ```
   *
   * **Details**
   *
   * By default, the `data-testid` attribute is used as a test id. Use
   * [selectors.setTestIdAttribute(attributeName)](https://playwright.dev/docs/api/class-selectors#selectors-set-test-id-attribute)
   * to configure a different test id attribute if necessary.
   *
   * ```js
   * // Set custom test id attribute from @playwright/test config:
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     testIdAttribute: 'data-pw'
   *   },
   * });
   * ```
   *
   * @param testId Id to locate the element by.
   */
  getByTestId'
      Parameter
        Identifier: 'testId'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements that contain given text.
   *
   * See also [locator.filter([options])](https://playwright.dev/docs/api/class-locator#locator-filter) that allows to
   * match by another criteria, like an accessible role, and then filter by the text content.
   *
   * **Usage**
   *
   * Consider the following DOM structure:
   *
   * ```html
   * <div>Hello <span>world</span></div>
   * <div>Hello</div>
   * ```
   *
   * You can locate by text substring, exact string, or a regular expression:
   *
   * ```js
   * // Matches <span>
   * page.getByText('world');
   *
   * // Matches first <div>
   * page.getByText('Hello world');
   *
   * // Matches second <div>
   * page.getByText('Hello', { exact: true });
   *
   * // Matches both <div>s
   * page.getByText(/Hello/);
   *
   * // Matches second <div>
   * page.getByText(/^hello$/i);
   * ```
   *
   * **Details**
   *
   * Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into
   * one, turns line breaks into spaces and ignores leading and trailing whitespace.
   *
   * Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For
   * example, locating by text `"Log in"` matches `<input type=button value="Log in">`.
   * @param text Text to locate the element for.
   * @param options
   */
  getByText'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their title attribute.
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <span title='Issues count'>25 issues</span>
   * ```
   *
   * You can check the issues count after locating it by the title text:
   *
   * ```js
   * await expect(page.getByTitle('Issues count')).toHaveText('25 issues');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByTitle'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of
   * the last redirect. If cannot go back, returns `null`.
   *
   * Navigate to the previous page in history.
   * @param options
   */
  goBack'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * Returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of
   * the last redirect. If cannot go forward, returns `null`.
   *
   * Navigate to the next page in history.
   * @param options
   */
  goForward'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * Returns the main resource response. In case of multiple redirects, the navigation will resolve with the first
   * non-redirect response.
   *
   * The method will throw an error if:
   * - there's an SSL error (e.g. in case of self-signed certificates).
   * - target URL is invalid.
   * - the `timeout` is exceeded during navigation.
   * - the remote server does not respond or is unreachable.
   * - the main resource failed to load.
   *
   * The method will not throw an error when any valid HTTP status code is returned by the remote server, including 404
   * "Not Found" and 500 "Internal Server Error".  The status code for such responses can be retrieved by calling
   * [response.status()](https://playwright.dev/docs/api/class-response#response-status).
   *
   * **NOTE** The method either throws an error or returns a main resource response. The only exceptions are navigation
   * to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.
   *
   * **NOTE** Headless mode doesn't support navigation to a PDF document. See the
   * [upstream issue](https://bugs.chromium.org/p/chromium/issues/detail?id=761295).
   * @param url URL to navigate page to. The url should include scheme, e.g. `https://`. When a `baseURL` via the context options
   * was provided and the passed URL is a path, it gets merged via the
   * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.
   * @param options
   */
  goto'
      Parameter
        Identifier: 'url'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Referer header value. If provided it will take preference over the referer header value set by
     * [page.setExtraHTTPHeaders(headers)](https://playwright.dev/docs/api/class-page#page-set-extra-http-headers).
     */
    referer'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.hover([options])](https://playwright.dev/docs/api/class-locator#locator-hover) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method hovers over an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to hover over the center of the
   *    element, or the specified `position`.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  hover'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.innerHTML([options])](https://playwright.dev/docs/api/class-locator#locator-inner-html)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `element.innerHTML`.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  innerHTML'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.innerText([options])](https://playwright.dev/docs/api/class-locator#locator-inner-text)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `element.innerText`.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  innerText'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.inputValue([options])](https://playwright.dev/docs/api/class-locator#locator-input-value) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.
   *
   * Throws for non-input elements. However, if the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the
   * control.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  inputValue'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isChecked([options])](https://playwright.dev/docs/api/class-locator#locator-is-checked)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is checked. Throws if the element is not a checkbox or radio input.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isChecked'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Indicates that the page has been closed.
   */
  isClosed'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.isDisabled([options])](https://playwright.dev/docs/api/class-locator#locator-is-disabled) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is disabled, the opposite of [enabled](https://playwright.dev/docs/actionability#enabled).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isDisabled'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.isEditable([options])](https://playwright.dev/docs/api/class-locator#locator-is-editable) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is [editable](https://playwright.dev/docs/actionability#editable).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isEditable'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isEnabled([options])](https://playwright.dev/docs/api/class-locator#locator-is-enabled)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is [enabled](https://playwright.dev/docs/actionability#enabled).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isEnabled'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isHidden([options])](https://playwright.dev/docs/api/class-locator#locator-is-hidden)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is hidden, the opposite of [visible](https://playwright.dev/docs/actionability#visible).  `selector` that
   * does not match any elements is considered hidden.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isHidden'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated This option is ignored.
     * [page.isHidden(selector[, options])](https://playwright.dev/docs/api/class-page#page-is-hidden) does not wait for
     * the element to become hidden and returns immediately.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isVisible([options])](https://playwright.dev/docs/api/class-locator#locator-is-visible)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is [visible](https://playwright.dev/docs/actionability#visible). `selector` that does not match any elements
   * is considered not visible.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isVisible'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated This option is ignored.
     * [page.isVisible(selector[, options])](https://playwright.dev/docs/api/class-page#page-is-visible) does not wait for
     * the element to become visible and returns immediately.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * The method returns an element locator that can be used to perform actions on this page / frame. Locator is resolved
   * to the element immediately before performing an action, so a series of actions on the same locator can in fact be
   * performed on different DOM elements. That would happen if the DOM structure between those actions has changed.
   *
   * [Learn more about locators](https://playwright.dev/docs/locators).
   * @param selector A selector to use when resolving DOM element.
   * @param options
   */
  locator'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Narrows down the results of the method to those which contain elements matching this relative locator. For example,
     * `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.
     *
     * Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not
     * the document root. For example, you can find `content` that has `div` in
     * `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article
     * div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    has'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the
     * outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    hasNot'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element.
     * When passed a [string], matching is case-insensitive and searches for a substring.
     */
    hasNotText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When
     * passed a [string], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches
     * `<article><div>Playwright</div></article>`.
     */
    hasText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * The page's main frame. Page is guaranteed to have a main frame which persists during navigations.
   */
  mainFrame'
      TypeReference
        Identifier: ' Frame'
    MethodSignature
      Identifier: '

  /**
   * Returns the opener for popup pages and `null` for others. If the opener has been closed already the returns `null`.
   */
  opener'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Pauses script execution. Playwright will stop executing the script and wait for the user to either press 'Resume'
   * button in the page overlay or to call `playwright.resume()` in the DevTools console.
   *
   * User can inspect selectors or perform manual steps while paused. Resume will continue running the original script
   * from the place it was paused.
   *
   * **NOTE** This method requires Playwright to be started in a headed mode, with a falsy `headless` value in the
   * [browserType.launch([options])](https://playwright.dev/docs/api/class-browsertype#browser-type-launch).
   */
  pause'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the PDF buffer.
   *
   * **NOTE** Generating a pdf is currently only supported in Chromium headless.
   *
   * `page.pdf()` generates a pdf of the page with `print` css media. To generate a pdf with `screen` media, call
   * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) before calling
   * `page.pdf()`:
   *
   * **NOTE** By default, `page.pdf()` generates a pdf with modified colors for printing. Use the
   * [`-webkit-print-color-adjust`](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust)
   * property to force rendering of exact colors.
   *
   * **Usage**
   *
   * ```js
   * // Generates a PDF with 'screen' media type.
   * await page.emulateMedia({ media: 'screen' });
   * await page.pdf({ path: 'page.pdf' });
   * ```
   *
   * The `width`, `height`, and `margin` options accept values labeled with units. Unlabeled values are treated as
   * pixels.
   *
   * A few examples:
   * - `page.pdf({width: 100})` - prints with width set to 100 pixels
   * - `page.pdf({width: '100px'})` - prints with width set to 100 pixels
   * - `page.pdf({width: '10cm'})` - prints with width set to 10 centimeters.
   *
   * All possible units are:
   * - `px` - pixel
   * - `in` - inch
   * - `cm` - centimeter
   * - `mm` - millimeter
   *
   * The `format` options are:
   * - `Letter`: 8.5in x 11in
   * - `Legal`: 8.5in x 14in
   * - `Tabloid`: 11in x 17in
   * - `Ledger`: 17in x 11in
   * - `A0`: 33.1in x 46.8in
   * - `A1`: 23.4in x 33.1in
   * - `A2`: 16.54in x 23.4in
   * - `A3`: 11.7in x 16.54in
   * - `A4`: 8.27in x 11.7in
   * - `A5`: 5.83in x 8.27in
   * - `A6`: 4.13in x 5.83in
   *
   * **NOTE** `headerTemplate` and `footerTemplate` markup have the following limitations: > 1. Script tags inside
   * templates are not evaluated. > 2. Page styles are not visible inside templates.
   * @param options
   */
  pdf'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Display header and footer. Defaults to `false`.
     */
    displayHeaderFooter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * HTML template for the print footer. Should use the same format as the `headerTemplate`.
     */
    footerTemplate'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Paper format. If set, takes priority over `width` or `height` options. Defaults to 'Letter'.
     */
    format'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * HTML template for the print header. Should be valid HTML markup with following classes used to inject printing
     * values into them:
     * - `'date'` formatted print date
     * - `'title'` document title
     * - `'url'` document location
     * - `'pageNumber'` current page number
     * - `'totalPages'` total pages in the document
     */
    headerTemplate'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Paper height, accepts values labeled with units.
     */
    height'
            QuestionToken
            UnionType
              StringKeyword
              NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Paper orientation. Defaults to `false`.
     */
    landscape'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Paper margins, defaults to none.
     */
    margin'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Top margin, accepts values labeled with units. Defaults to `0`.
       */
      top'
                QuestionToken
                UnionType
                  StringKeyword
                  NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Right margin, accepts values labeled with units. Defaults to `0`.
       */
      right'
                QuestionToken
                UnionType
                  StringKeyword
                  NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Bottom margin, accepts values labeled with units. Defaults to `0`.
       */
      bottom'
                QuestionToken
                UnionType
                  StringKeyword
                  NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Left margin, accepts values labeled with units. Defaults to `0`.
       */
      left'
                QuestionToken
                UnionType
                  StringKeyword
                  NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether or not to embed the document outline into the PDF. Defaults to `false`.
     */
    outline'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.
     */
    pageRanges'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * The file path to save the PDF to. If `path` is a relative path, then it is resolved relative to the current working
     * directory. If no path is provided, the PDF won't be saved to the disk.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Give any CSS `@page` size declared in the page priority over what is declared in `width` and `height` or `format`
     * options. Defaults to `false`, which will scale the content to fit the paper size.
     */
    preferCSSPageSize'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Print background graphics. Defaults to `false`.
     */
    printBackground'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Scale of the webpage rendering. Defaults to `1`. Scale amount must be between 0.1 and 2.
     */
    scale'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether or not to generate tagged (accessible) PDF. Defaults to `false`.
     */
    tagged'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Paper width, accepts values labeled with units.
     */
    width'
            QuestionToken
            UnionType
              StringKeyword
              NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.press(key[, options])](https://playwright.dev/docs/api/class-locator#locator-press)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Focuses the element, and then uses
   * [keyboard.down(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-down) and
   * [keyboard.up(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-up).
   *
   * `key` can specify the intended
   * [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character
   * to generate the text for. A superset of the `key` values can be found
   * [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:
   *
   * `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`,
   * `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`,
   * etc.
   *
   * Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`,
   * `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.
   *
   * Holding down `Shift` will type the text that corresponds to the `key` in the upper case.
   *
   * If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective
   * texts.
   *
   * Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When
   * specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.
   *
   * **Usage**
   *
   * ```js
   * const page = await browser.newPage();
   * await page.goto('https://keycode.info');
   * await page.press('body', 'A');
   * await page.screenshot({ path: 'A.png' });
   * await page.press('body', 'ArrowLeft');
   * await page.screenshot({ path: 'ArrowLeft.png' });
   * await page.press('body', 'Shift+O');
   * await page.screenshot({ path: 'O.png' });
   * await browser.close();
   * ```
   *
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param key Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.
   * @param options
   */
  press'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' key'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You
     * can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as
     * navigating to inaccessible pages. Defaults to `false`.
     * @deprecated This option will default to `true` in the future.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method reloads the current page, in the same way as if the user had triggered a browser refresh. Returns the
   * main resource response. In case of multiple redirects, the navigation will resolve with the response of the last
   * redirect.
   * @param options
   */
  reload'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * Removes all locator handlers added by
   * [page.addLocatorHandler(locator, handler[, options])](https://playwright.dev/docs/api/class-page#page-add-locator-handler)
   * for a specific locator.
   * @param locator Locator passed to
   * [page.addLocatorHandler(locator, handler[, options])](https://playwright.dev/docs/api/class-page#page-add-locator-handler).
   */
  removeLocatorHandler'
      Parameter
        Identifier: 'locator'
        TypeReference
          Identifier: ' Locator'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Routing provides the capability to modify network requests that are made by a page.
   *
   * Once routing is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or
   * aborted.
   *
   * **NOTE** The handler will only be called for the first url if the response is a redirect.
   *
   * **NOTE** [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route) will not
   * intercept requests intercepted by Service Worker. See [this](https://github.com/microsoft/playwright/issues/1090)
   * issue. We recommend disabling Service Workers when using request interception by setting
   * `Browser.newContext.serviceWorkers` to `'block'`.
   *
   * **NOTE** [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route) will not
   * intercept the first request of a popup page. Use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * instead.
   *
   * **Usage**
   *
   * An example of a naive handler that aborts all image requests:
   *
   * ```js
   * const page = await browser.newPage();
   * await page.route('**\/*.{png,jpg,jpeg}', route => route.abort());
   * await page.goto('https://example.com');
   * await browser.close();
   * ```
   *
   * or the same snippet using a regex pattern instead:
   *
   * ```js
   * const page = await browser.newPage();
   * await page.route(/(\.png$)|(\.jpg$)/, route => route.abort());
   * await page.goto('https://example.com');
   * await browser.close();
   * ```
   *
   * It is possible to examine the request to decide the route action. For example, mocking all requests that contain
   * some post data, and leaving all other requests as is:
   *
   * ```js
   * await page.route('/api/**', async route => {
   *   if (route.request().postData().includes('my-string'))
   *     await route.fulfill({ body: 'mocked-data' });
   *   else
   *     await route.continue();
   * });
   * ```
   *
   * Page routes take precedence over browser context routes (set up with
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route))
   * when request matches both handlers.
   *
   * To remove a route with its handler you can use
   * [page.unroute(url[, handler])](https://playwright.dev/docs/api/class-page#page-unroute).
   *
   * **NOTE** Enabling routing disables http cache.
   * @param url A glob pattern, regex pattern or predicate receiving [URL] to match while routing. When a `baseURL` via the context
   * options was provided and the passed URL is a path, it gets merged via the
   * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.
   * @param handler handler function to route the request.
   * @param options
   */
  route'
      Parameter
        Identifier: 'url'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'url'
                TypeReference
                  Identifier: ' URL'
              BooleanKeyword
      Parameter
        Identifier: ' handler'
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'route'
              TypeReference
                Identifier: ' Route'
            Parameter
              Identifier: ' request'
              TypeReference
                Identifier: ' Request'
            UnionType
              TypeReference
                Identifier: ' Promise'
                AnyKeyword
              AnyKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * How often a route should be used. By default it will be used every time.
     */
    times'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * If specified the network requests that are made in the page will be served from the HAR file. Read more about
   * [Replaying from HAR](https://playwright.dev/docs/mock#replaying-from-har).
   *
   * Playwright will not serve requests intercepted by Service Worker from the HAR file. See
   * [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when
   * using request interception by setting `Browser.newContext.serviceWorkers` to `'block'`.
   * @param har Path to a [HAR](http://www.softwareishard.com/blog/har-12-spec) file with prerecorded network data. If `path` is a
   * relative path, then it is resolved relative to the current working directory.
   * @param options
   */
  routeFromHAR'
      Parameter
        Identifier: 'har'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * - If set to 'abort' any request not found in the HAR file will be aborted.
     * - If set to 'fallback' missing requests will be sent to the network.
     *
     * Defaults to abort.
     */
    notFound'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * If specified, updates the given HAR with the actual network information instead of serving from file. The file is
     * written to disk when
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) is
     * called.
     */
    update'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional setting to control resource content management. If `attach` is specified, resources are persisted as
     * separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file.
     */
    updateContent'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page,
     * cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to
     * `minimal`.
     */
    updateMode'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * A glob pattern, regular expression or predicate to match the request URL. Only requests with URL matching the
     * pattern will be served from the HAR file. If not specified, all requests are served from the HAR file.
     */
    url'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the buffer with the captured screenshot.
   * @param options
   */
  screenshot'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' PageScreenshotOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.selectOption(values[, options])](https://playwright.dev/docs/api/class-locator#locator-select-option)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method waits for an element matching `selector`, waits for [actionability](https://playwright.dev/docs/actionability) checks, waits
   * until all specified options are present in the `<select>` element and selects these options.
   *
   * If the target element is not a `<select>` element, this method throws an error. However, if the element is inside
   * the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used
   * instead.
   *
   * Returns the array of option values that have been successfully selected.
   *
   * Triggers a `change` and `input` event once all the provided options have been selected.
   *
   * **Usage**
   *
   * ```js
   * // Single selection matching the value or label
   * page.selectOption('select#colors', 'blue');
   *
   * // single selection matching the label
   * page.selectOption('select#colors', { label: 'Blue' });
   *
   * // multiple selection
   * page.selectOption('select#colors', ['red', 'green', 'blue']);
   *
   * ```
   *
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param values Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise
   * only the first option matching one of the passed options is selected. String values are matching both values and
   * labels. Option is considered matching if all specified properties match.
   * @param options
   */
  selectOption'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' values'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
          TypeReference
            Identifier: 'ElementHandle'
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Matches by `option.value`. Optional.
     */
    value'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Matches by `option.label`. Optional.
     */
    label'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Matches by the index. Optional.
     */
    index'
              QuestionToken
              NumberKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeReference
              Identifier: 'ElementHandle'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * Matches by `option.value`. Optional.
     */
    value'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * Matches by `option.label`. Optional.
     */
    label'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * Matches by the index. Optional.
     */
    index'
                QuestionToken
                NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.setChecked(checked[, options])](https://playwright.dev/docs/api/class-locator#locator-set-checked)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method checks or unchecks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Ensure that matched element is a checkbox or a radio input. If not, this method throws.
   * 1. If the element already has the right checked state, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now checked or unchecked. If not, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param checked Whether to check or uncheck the checkbox.
   * @param options
   */
  setChecked'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' checked'
        BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method internally calls [document.write()](https://developer.mozilla.org/en-US/docs/Web/API/Document/write),
   * inheriting all its specific characteristics and behaviors.
   * @param html HTML markup to assign to the page.
   * @param options
   */
  setContent'
      Parameter
        Identifier: 'html'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This setting will change the default maximum navigation time for the following methods and related shortcuts:
   * - [page.goBack([options])](https://playwright.dev/docs/api/class-page#page-go-back)
   * - [page.goForward([options])](https://playwright.dev/docs/api/class-page#page-go-forward)
   * - [page.goto(url[, options])](https://playwright.dev/docs/api/class-page#page-goto)
   * - [page.reload([options])](https://playwright.dev/docs/api/class-page#page-reload)
   * - [page.setContent(html[, options])](https://playwright.dev/docs/api/class-page#page-set-content)
   * - [page.waitForNavigation([options])](https://playwright.dev/docs/api/class-page#page-wait-for-navigation)
   * - [page.waitForURL(url[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-url)
   *
   * **NOTE**
   * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
   * takes priority over
   * [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout),
   * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
   * and
   * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout).
   * @param timeout Maximum navigation time in milliseconds
   */
  setDefaultNavigationTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This setting will change the default maximum time for all the methods accepting `timeout` option.
   *
   * **NOTE**
   * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
   * takes priority over
   * [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout).
   * @param timeout Maximum time in milliseconds
   */
  setDefaultTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * The extra HTTP headers will be sent with every request the page initiates.
   *
   * **NOTE**
   * [page.setExtraHTTPHeaders(headers)](https://playwright.dev/docs/api/class-page#page-set-extra-http-headers) does
   * not guarantee the order of headers in the outgoing requests.
   * @param headers An object containing additional HTTP headers to be sent with every request. All header values must be strings.
   */
  setExtraHTTPHeaders'
      Parameter
        Identifier: 'headers'
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'key'
              StringKeyword
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.setInputFiles(files[, options])](https://playwright.dev/docs/api/class-locator#locator-set-input-files)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then
   * they are resolved relative to the current working directory. For empty array, clears the selected files. For inputs
   * with a `[webkitdirectory]` attribute, only a single directory path is supported.
   *
   * This method expects `selector` to point to an
   * [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside
   * the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param files
   * @param options
   */
  setInputFiles'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' files'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * File name
     */
    name'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File type
     */
    mimeType'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File content
     */
    buffer'
              TypeReference
                Identifier: ' Buffer'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * File name
     */
    name'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File type
     */
    mimeType'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File content
     */
    buffer'
                TypeReference
                  Identifier: ' Buffer'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * In the case of multiple pages in a single browser, each page can have its own viewport size. However,
   * [browser.newContext([options])](https://playwright.dev/docs/api/class-browser#browser-new-context) allows to set
   * viewport size (and more) for all pages in the context at once.
   *
   * [page.setViewportSize(viewportSize)](https://playwright.dev/docs/api/class-page#page-set-viewport-size) will resize
   * the page. A lot of websites don't expect phones to change size, so you should set the viewport size before
   * navigating to the page.
   * [page.setViewportSize(viewportSize)](https://playwright.dev/docs/api/class-page#page-set-viewport-size) will also
   * reset `screen` size, use
   * [browser.newContext([options])](https://playwright.dev/docs/api/class-browser#browser-new-context) with `screen`
   * and `viewport` parameters if you need better control of these properties.
   *
   * **Usage**
   *
   * ```js
   * const page = await browser.newPage();
   * await page.setViewportSize({
   *   width: 640,
   *   height: 480,
   * });
   * await page.goto('https://example.com');
   * ```
   *
   * @param viewportSize
   */
  setViewportSize'
      Parameter
        Identifier: 'viewportSize'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * page width in pixels.
     */
    width'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * page height in pixels.
     */
    height'
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.tap([options])](https://playwright.dev/docs/api/class-locator#locator-tap) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * This method taps an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.touchscreen](https://playwright.dev/docs/api/class-page#page-touchscreen) to tap the center of the
   *    element, or the specified `position`.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **NOTE** [page.tap(selector[, options])](https://playwright.dev/docs/api/class-page#page-tap) the method will throw
   * if `hasTouch` option of the browser context is false.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  tap'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.textContent([options])](https://playwright.dev/docs/api/class-locator#locator-text-content) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `element.textContent`.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  textContent'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the page's title.
   */
  title'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text. `page.type` can be used to
   * send fine-grained keyboard events. To fill values in form fields, use
   * [page.fill(selector, value[, options])](https://playwright.dev/docs/api/class-page#page-fill).
   *
   * To press a special key, like `Control` or `ArrowDown`, use
   * [keyboard.press(key[, options])](https://playwright.dev/docs/api/class-keyboard#keyboard-press).
   *
   * **Usage**
   * @deprecated In most cases, you should use
   * [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill) instead. You only need
   * to press keys one by one if there is special keyboard handling on the page - in this case use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param text A text to type into a focused element.
   * @param options
   */
  type'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' text'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between key presses in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.uncheck([options])](https://playwright.dev/docs/api/class-locator#locator-uncheck)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method unchecks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is
   *    already unchecked, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now unchecked. If not, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  uncheck'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Removes a route created with
   * [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route). When `handler` is not
   * specified, removes all routes for the `url`.
   * @param url A glob pattern, regex pattern or predicate receiving [URL] to match while routing.
   * @param handler Optional handler function to route the request.
   */
  unroute'
      Parameter
        Identifier: 'url'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'url'
                TypeReference
                  Identifier: ' URL'
              BooleanKeyword
      Parameter
        Identifier: ' handler'
        QuestionToken
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'route'
              TypeReference
                Identifier: ' Route'
            Parameter
              Identifier: ' request'
              TypeReference
                Identifier: ' Request'
            UnionType
              TypeReference
                Identifier: ' Promise'
                AnyKeyword
              AnyKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Removes all routes created with
   * [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route) and
   * [page.routeFromHAR(har[, options])](https://playwright.dev/docs/api/class-page#page-route-from-har).
   * @param options
   */
  unrouteAll'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Specifies whether to wait for already running handlers and what to do if they throw errors:
     * - `'default'` - do not wait for current handler calls (if any) to finish, if unrouted handler throws, it may
     *   result in unhandled error
     * - `'wait'` - wait for current handler calls (if any) to finish
     * - `'ignoreErrors'` - do not wait for current handler calls (if any) to finish, all errors thrown by the handlers
     *   after unrouting are silently caught
     */
    behavior'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  url'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Video object associated with this page.
   */
  video'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Video'
    MethodSignature
      Identifier: '

  viewportSize'
      UnionType
        LiteralType
          NullKeyword
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * page width in pixels.
     */
    width'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * page height in pixels.
     */
    height'
            NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page closes.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'page'
                  TypeReference
                    Identifier: ' Page'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'page'
                TypeReference
                  Identifier: ' Page'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.
   *
   * The arguments passed into `console.log` are available on the {@link ConsoleMessage} event handler argument.
   *
   * **Usage**
   *
   * ```js
   * page.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'consoleMessage'
                  TypeReference
                    Identifier: ' ConsoleMessage'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'consoleMessage'
                TypeReference
                  Identifier: ' ConsoleMessage'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ConsoleMessage'
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page crashes. Browser pages might crash if they try to allocate too much memory. When the page
   * crashes, ongoing and subsequent operations will throw.
   *
   * The most common way to deal with crashes is to catch an exception:
   *
   * ```js
   * try {
   *   // Crash might happen during a click.
   *   await page.click('button');
   *   // Or while waiting for an event.
   *   await page.waitForEvent('popup');
   * } catch (e) {
   *   // When the page crashes, exception message contains 'crash'.
   * }
   * ```
   *
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'page'
                  TypeReference
                    Identifier: ' Page'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'page'
                TypeReference
                  Identifier: ' Page'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must**
   * either [dialog.accept([promptText])](https://playwright.dev/docs/api/class-dialog#dialog-accept) or
   * [dialog.dismiss()](https://playwright.dev/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page
   * will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the
   * dialog, and actions like click will never finish.
   *
   * **Usage**
   *
   * ```js
   * page.on('dialog', dialog => dialog.accept());
   * ```
   *
   * **NOTE** When no [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) or
   * [browserContext.on('dialog')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-dialog)
   * listeners are present, all dialogs are automatically dismissed.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'dialog'
                  TypeReference
                    Identifier: ' Dialog'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'dialog'
                TypeReference
                  Identifier: ' Dialog'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Dialog'
    MethodSignature
      Identifier: '

  /**
   * Emitted when the JavaScript
   * [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded) event is dispatched.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'page'
                  TypeReference
                    Identifier: ' Page'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'page'
                TypeReference
                  Identifier: ' Page'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Emitted when attachment download started. User can access basic file operations on downloaded content via the
   * passed {@link Download} instance.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'download'
                  TypeReference
                    Identifier: ' Download'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'download'
                TypeReference
                  Identifier: ' Download'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Download'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a file chooser is supposed to appear, such as after clicking the  `<input type=file>`. Playwright can
   * respond to it via setting the input files using
   * [fileChooser.setFiles(files[, options])](https://playwright.dev/docs/api/class-filechooser#file-chooser-set-files)
   * that can be uploaded after that.
   *
   * ```js
   * page.on('filechooser', async fileChooser => {
   *   await fileChooser.setFiles(path.join(__dirname, '/tmp/myfile.pdf'));
   * });
   * ```
   *
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'fileChooser'
                  TypeReference
                    Identifier: ' FileChooser'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'fileChooser'
                TypeReference
                  Identifier: ' FileChooser'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'FileChooser'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is attached.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'frame'
                  TypeReference
                    Identifier: ' Frame'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'frame'
                TypeReference
                  Identifier: ' Frame'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is detached.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'frame'
                  TypeReference
                    Identifier: ' Frame'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'frame'
                TypeReference
                  Identifier: ' Frame'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a frame is navigated to a new url.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'frame'
                  TypeReference
                    Identifier: ' Frame'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'frame'
                TypeReference
                  Identifier: ' Frame'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * Emitted when the JavaScript [`load`](https://developer.mozilla.org/en-US/docs/Web/Events/load) event is dispatched.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'page'
                  TypeReference
                    Identifier: ' Page'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'page'
                TypeReference
                  Identifier: ' Page'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Emitted when an uncaught exception happens within the page.
   *
   * ```js
   * // Log all uncaught errors to the terminal
   * page.on('pageerror', exception => {
   *   console.log(`Uncaught exception: "${exception}"`);
   * });
   *
   * // Navigate to a page with an exception.
   * await page.goto('data:text/html,<script>throw new Error("Test")</script>');
   * ```
   *
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'error'
                  TypeReference
                    Identifier: ' Error'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'error'
                TypeReference
                  Identifier: ' Error'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Error'
    MethodSignature
      Identifier: '

  /**
   * Emitted when the page opens a new tab or window. This event is emitted in addition to the
   * [browserContext.on('page')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-page), but
   * only for popups relevant to this page.
   *
   * The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a
   * popup with `window.open('http://example.com')`, this event will fire when the network request to
   * "http://example.com" is done and its response has started loading in the popup. If you would like to route/listen
   * to this network request, use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.on('request')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request)
   * respectively instead of similar methods on the {@link Page}.
   *
   * ```js
   * // Start waiting for popup before clicking. Note no await.
   * const popupPromise = page.waitForEvent('popup');
   * await page.getByText('open the popup').click();
   * const popup = await popupPromise;
   * console.log(await popup.evaluate('location.href'));
   * ```
   *
   * **NOTE** Use
   * [page.waitForLoadState([state, options])](https://playwright.dev/docs/api/class-page#page-wait-for-load-state) to
   * wait until the page gets to a particular state (you should not need it in most cases).
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'page'
                  TypeReference
                    Identifier: ' Page'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'page'
                TypeReference
                  Identifier: ' Page'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a page issues a request. The [request] object is read-only. In order to intercept and mutate requests,
   * see [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route) or
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route).
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'request'
                  TypeReference
                    Identifier: ' Request'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'request'
                TypeReference
                  Identifier: ' Request'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request fails, for example by timing out.
   *
   * ```js
   * page.on('requestfailed', request => {
   *   console.log(request.url() + ' ' + request.failure().errorText);
   * });
   * ```
   *
   * **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request
   * will complete with
   * [page.on('requestfinished')](https://playwright.dev/docs/api/class-page#page-event-request-finished) event and not
   * with [page.on('requestfailed')](https://playwright.dev/docs/api/class-page#page-event-request-failed). A request
   * will only be considered failed when the client cannot get an HTTP response from the server, e.g. due to network
   * error net::ERR_FAILED.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'request'
                  TypeReference
                    Identifier: ' Request'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'request'
                TypeReference
                  Identifier: ' Request'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request finishes successfully after downloading the response body. For a successful response, the
   * sequence of events is `request`, `response` and `requestfinished`.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'request'
                  TypeReference
                    Identifier: ' Request'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'request'
                TypeReference
                  Identifier: ' Request'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * Emitted when [response] status and headers are received for a request. For a successful response, the sequence of
   * events is `request`, `response` and `requestfinished`.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'response'
                  TypeReference
                    Identifier: ' Response'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'response'
                TypeReference
                  Identifier: ' Response'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * Emitted when {@link WebSocket} request is sent.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'webSocket'
                  TypeReference
                    Identifier: ' WebSocket'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'webSocket'
                TypeReference
                  Identifier: ' WebSocket'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'WebSocket'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is spawned
   * by the page.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'worker'
                  TypeReference
                    Identifier: ' Worker'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'worker'
                TypeReference
                  Identifier: ' Worker'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Worker'
    MethodSignature
      Identifier: '


  /**
   * Returns when the required load state has been reached.
   *
   * This resolves when the page reaches a required load state, `load` by default. The navigation must have been
   * committed when this method is called. If current document has already reached the required state, resolves
   * immediately.
   *
   * **NOTE** Most of the time, this method is not needed because Playwright
   * [auto-waits before every action](https://playwright.dev/docs/actionability).
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('button').click(); // Click triggers navigation.
   * await page.waitForLoadState(); // The promise resolves after 'load' event.
   * ```
   *
   * ```js
   * const popupPromise = page.waitForEvent('popup');
   * await page.getByRole('button').click(); // Click triggers a popup.
   * const popup = await popupPromise;
   * await popup.waitForLoadState('domcontentloaded'); // Wait for the 'DOMContentLoaded' event.
   * console.log(await popup.title()); // Popup is ready to use.
   * ```
   *
   * @param state Optional load state to wait for, defaults to `load`. If the state has been already reached while loading current
   * document, the method resolves immediately. Can be one of:
   * - `'load'` - wait for the `load` event to be fired.
   * - `'domcontentloaded'` - wait for the `DOMContentLoaded` event to be fired.
   * - `'networkidle'` - **DISCOURAGED** wait until there are no network connections for at least `500` ms. Don't use
   * this method for testing, rely on web assertions to assess readiness instead.
   * @param options
   */
  waitForLoadState'
      Parameter
        Identifier: 'state'
        QuestionToken
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Waits for the main frame navigation and returns the main resource response. In case of multiple redirects, the
   * navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or
   * navigation due to History API usage, the navigation will resolve with `null`.
   *
   * **Usage**
   *
   * This resolves when the page navigates to a new URL or reloads. It is useful for when you run code which will
   * indirectly cause the page to navigate. e.g. The click target has an `onclick` handler that triggers navigation from
   * a `setTimeout`. Consider this example:
   *
   * ```js
   * // Start waiting for navigation before clicking. Note no await.
   * const navigationPromise = page.waitForNavigation();
   * await page.getByText('Navigate after timeout').click();
   * await navigationPromise;
   * ```
   *
   * **NOTE** Usage of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to change the URL
   * is considered a navigation.
   * @deprecated This method is inherently racy, please use
   * [page.waitForURL(url[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-url) instead.
   * @param options
   */
  waitForNavigation'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * A glob pattern, regex pattern or predicate receiving [URL] to match while waiting for the navigation. Note that if
     * the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly
     * equal to the string.
     */
    url'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
              ParenthesizedType
                FunctionType
                  Parameter
                    Identifier: 'url'
                    TypeReference
                      Identifier: ' URL'
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * Waits for the matching request and returns it. See [waiting for event](https://playwright.dev/docs/events#waiting-for-event) for more
   * details about events.
   *
   * **Usage**
   *
   * ```js
   * // Start waiting for request before clicking. Note no await.
   * const requestPromise = page.waitForRequest('https://example.com/resource');
   * await page.getByText('trigger request').click();
   * const request = await requestPromise;
   *
   * // Alternative way with a predicate. Note no await.
   * const requestPromise = page.waitForRequest(request =>
   *   request.url() === 'https://example.com' && request.method() === 'GET',
   * );
   * await page.getByText('trigger request').click();
   * const request = await requestPromise;
   * ```
   *
   * @param urlOrPredicate Request URL string, regex or predicate receiving {@link Request} object.
   * @param options
   */
  waitForRequest'
      Parameter
        Identifier: 'urlOrPredicate'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'request'
                TypeReference
                  Identifier: ' Request'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: 'Promise'
                  BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can
     * be changed by using the
     * [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * Returns the matched response. See [waiting for event](https://playwright.dev/docs/events#waiting-for-event) for more details about
   * events.
   *
   * **Usage**
   *
   * ```js
   * // Start waiting for response before clicking. Note no await.
   * const responsePromise = page.waitForResponse('https://example.com/resource');
   * await page.getByText('trigger response').click();
   * const response = await responsePromise;
   *
   * // Alternative way with a predicate. Note no await.
   * const responsePromise = page.waitForResponse(response =>
   *   response.url() === 'https://example.com' && response.status() === 200
   *       && response.request().method() === 'GET'
   * );
   * await page.getByText('trigger response').click();
   * const response = await responsePromise;
   * ```
   *
   * @param urlOrPredicate Request URL string, regex or predicate receiving {@link Response} object. When a `baseURL` via the context options
   * was provided and the passed URL is a path, it gets merged via the
   * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.
   * @param options
   */
  waitForResponse'
      Parameter
        Identifier: 'urlOrPredicate'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'response'
                TypeReference
                  Identifier: ' Response'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: 'Promise'
                  BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum wait time in milliseconds, defaults to 30 seconds, pass `0` to disable the timeout. The default value can
     * be changed by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Never wait for timeout in production. Tests that wait for time are inherently flaky. Use {@link Locator} actions
   * and web assertions that wait automatically.
   *
   * Waits for the given `timeout` in milliseconds.
   *
   * Note that `page.waitForTimeout()` should only be used for debugging. Tests using the timer in production are going
   * to be flaky. Use signals such as network events, selectors becoming visible and others instead.
   *
   * **Usage**
   *
   * ```js
   * // wait for 1 second
   * await page.waitForTimeout(1000);
   * ```
   *
   * @param timeout A timeout to wait for
   */
  waitForTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Waits for the main frame to navigate to the given URL.
   *
   * **Usage**
   *
   * ```js
   * await page.click('a.delayed-navigation'); // Clicking the link will indirectly cause a navigation
   * await page.waitForURL('**\/target.html');
   * ```
   *
   * @param url A glob pattern, regex pattern or predicate receiving [URL] to match while waiting for the navigation. Note that if
   * the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly
   * equal to the string.
   * @param options
   */
  waitForURL'
      Parameter
        Identifier: 'url'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'url'
                TypeReference
                  Identifier: ' URL'
              BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method returns all of the dedicated
   * [WebWorkers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) associated with the page.
   *
   * **NOTE** This does not contain ServiceWorkers
   */
  workers'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Worker'
    PropertySignature
      Identifier: '

  /**
   * @deprecated This property is discouraged. Please use other libraries such as [Axe](https://www.deque.com/axe/) if you need to
   * test page accessibility. See our Node.js [guide](https://playwright.dev/docs/accessibility-testing) for integration
   * with Axe.
   */
  accessibility'
      TypeReference
        Identifier: ' Accessibility'
    PropertySignature
      Identifier: '

  /**
   * Playwright has ability to mock clock and passage of time.
   */
  clock'
      TypeReference
        Identifier: ' Clock'
    PropertySignature
      Identifier: '

  /**
   * **NOTE** Only available for Chromium atm.
   *
   * Browser-specific Coverage implementation. See {@link Coverage} for more details.
   */
  coverage'
      TypeReference
        Identifier: ' Coverage'
    PropertySignature
      Identifier: '

  keyboard'
      TypeReference
        Identifier: ' Keyboard'
    PropertySignature
      Identifier: '

  mouse'
      TypeReference
        Identifier: ' Mouse'
    PropertySignature
      Identifier: '

  /**
   * API testing helper associated with this page. This method returns the same instance as
   * [browserContext.request](https://playwright.dev/docs/api/class-browsercontext#browser-context-request) on the
   * page's context. See
   * [browserContext.request](https://playwright.dev/docs/api/class-browsercontext#browser-context-request) for more
   * details.
   */
  request'
      TypeReference
        Identifier: ' APIRequestContext'
    PropertySignature
      Identifier: '

  touchscreen'
      TypeReference
        Identifier: ' Touchscreen'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Frame'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction`.
   *
   * If the function passed to the
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate) returns a
   * [Promise], then [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate)
   * would wait for the promise to resolve and return its value.
   *
   * If the function passed to the
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate) returns a
   * non-[Serializable] value, then
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate) returns
   * `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`:
   * `-0`, `NaN`, `Infinity`, `-Infinity`.
   *
   * **Usage**
   *
   * ```js
   * const result = await frame.evaluate(([x, y]) => {
   *   return Promise.resolve(x * y);
   * }, [7, 8]);
   * console.log(result); // prints "56"
   * ```
   *
   * A string can also be passed in instead of a function.
   *
   * ```js
   * console.log(await frame.evaluate('1 + 2')); // prints "3"
   * ```
   *
   * {@link ElementHandle} instances can be passed as an argument to the
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate):
   *
   * ```js
   * const bodyHandle = await frame.evaluate('document.body');
   * const html = await frame.evaluate(([body, suffix]) =>
   *   body.innerHTML + suffix, [bodyHandle, 'hello'],
   * );
   * await bodyHandle.dispose();
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          TypeReference
            Identifier: 'Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction`.
   *
   * If the function passed to the
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate) returns a
   * [Promise], then [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate)
   * would wait for the promise to resolve and return its value.
   *
   * If the function passed to the
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate) returns a
   * non-[Serializable] value, then
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate) returns
   * `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`:
   * `-0`, `NaN`, `Infinity`, `-Infinity`.
   *
   * **Usage**
   *
   * ```js
   * const result = await frame.evaluate(([x, y]) => {
   *   return Promise.resolve(x * y);
   * }, [7, 8]);
   * console.log(result); // prints "56"
   * ```
   *
   * A string can also be passed in instead of a function.
   *
   * ```js
   * console.log(await frame.evaluate('1 + 2')); // prints "3"
   * ```
   *
   * {@link ElementHandle} instances can be passed as an argument to the
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate):
   *
   * ```js
   * const bodyHandle = await frame.evaluate('document.body');
   * const html = await frame.evaluate(([body, suffix]) =>
   *   body.innerHTML + suffix, [bodyHandle, 'hello'],
   * );
   * await bodyHandle.dispose();
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Returns the return value of `pageFunction` as a {@link JSHandle}.
   *
   * The only difference between
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate) and
   * [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle) is
   * that [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle)
   * returns {@link JSHandle}.
   *
   * If the function, passed to the
   * [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle),
   * returns a [Promise], then
   * [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * // Handle for the window object
   * const aWindowHandle = await frame.evaluateHandle(() => Promise.resolve(window));
   * ```
   *
   * A string can also be passed in instead of a function.
   *
   * ```js
   * const aHandle = await frame.evaluateHandle('document'); // Handle for the 'document'.
   * ```
   *
   * {@link JSHandle} instances can be passed as an argument to the
   * [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle):
   *
   * ```js
   * const aHandle = await frame.evaluateHandle(() => document.body);
   * const resultHandle = await frame.evaluateHandle(([body, suffix]) =>
   *   body.innerHTML + suffix, [aHandle, 'hello'],
   * );
   * console.log(await resultHandle.jsonValue());
   * await resultHandle.dispose();
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          TypeReference
            Identifier: 'Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction` as a {@link JSHandle}.
   *
   * The only difference between
   * [frame.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate) and
   * [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle) is
   * that [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle)
   * returns {@link JSHandle}.
   *
   * If the function, passed to the
   * [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle),
   * returns a [Promise], then
   * [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * // Handle for the window object
   * const aWindowHandle = await frame.evaluateHandle(() => Promise.resolve(window));
   * ```
   *
   * A string can also be passed in instead of a function.
   *
   * ```js
   * const aHandle = await frame.evaluateHandle('document'); // Handle for the 'document'.
   * ```
   *
   * {@link JSHandle} instances can be passed as an argument to the
   * [frame.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-evaluate-handle):
   *
   * ```js
   * const aHandle = await frame.evaluateHandle(() => document.body);
   * const resultHandle = await frame.evaluateHandle(([body, suffix]) =>
   *   body.innerHTML + suffix, [aHandle, 'hello'],
   * );
   * console.log(await resultHandle.jsonValue());
   * await resultHandle.dispose();
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [frame.locator(selector[, options])](https://playwright.dev/docs/api/class-frame#frame-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns the ElementHandle pointing to the frame element.
   *
   * **NOTE** The use of {@link ElementHandle} is discouraged, use {@link Locator} objects and web-first assertions
   * instead.
   *
   * The method finds an element matching the specified selector within the frame. If no elements match the selector,
   * returns `null`.
   * @param selector A selector to query for.
   * @param options
   */
  $'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' strict'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use locator-based [frame.locator(selector[, options])](https://playwright.dev/docs/api/class-frame#frame-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns the ElementHandle pointing to the frame element.
   *
   * **NOTE** The use of {@link ElementHandle} is discouraged, use {@link Locator} objects and web-first assertions
   * instead.
   *
   * The method finds an element matching the specified selector within the frame. If no elements match the selector,
   * returns `null`.
   * @param selector A selector to query for.
   * @param options
   */
  $'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' strict'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [frame.locator(selector[, options])](https://playwright.dev/docs/api/class-frame#frame-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns the ElementHandles pointing to the frame elements.
   *
   * **NOTE** The use of {@link ElementHandle} is discouraged, use {@link Locator} objects instead.
   *
   * The method finds all elements matching the specified selector within the frame. If no elements match the selector,
   * returns empty array.
   * @param selector A selector to query for.
   */
  $$'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use locator-based [frame.locator(selector[, options])](https://playwright.dev/docs/api/class-frame#frame-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns the ElementHandles pointing to the frame elements.
   *
   * **NOTE** The use of {@link ElementHandle} is discouraged, use {@link Locator} objects instead.
   *
   * The method finds all elements matching the specified selector within the frame. If no elements match the selector,
   * returns empty array.
   * @param selector A selector to query for.
   */
  $$'
      Parameter
        Identifier: 'selector'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** This method does not wait for the element to pass the actionability checks and therefore can lead to the flaky
   * tests. Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds an element matching the specified selector within the frame and passes it as a first argument to
   * `pageFunction`. If no elements match the selector, the method throws an error.
   *
   * If `pageFunction` returns a [Promise], then
   * [frame.$eval(selector, pageFunction[, arg, options])](https://playwright.dev/docs/api/class-frame#frame-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const searchValue = await frame.$eval('#search', el => el.value);
   * const preloadHref = await frame.$eval('link[rel=preload]', el => el.href);
   * const html = await frame.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  $eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          IndexedAccessType
            TypeReference
              Identifier: 'HTMLElementTagNameMap'
            TypeReference
              Identifier: 'K'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass the actionability checks and therefore can lead to the flaky
   * tests. Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds an element matching the specified selector within the frame and passes it as a first argument to
   * `pageFunction`. If no elements match the selector, the method throws an error.
   *
   * If `pageFunction` returns a [Promise], then
   * [frame.$eval(selector, pageFunction[, arg, options])](https://playwright.dev/docs/api/class-frame#frame-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const searchValue = await frame.$eval('#search', el => el.value);
   * const preloadHref = await frame.$eval('link[rel=preload]', el => el.href);
   * const html = await frame.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  $eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass the actionability checks and therefore can lead to the flaky
   * tests. Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds an element matching the specified selector within the frame and passes it as a first argument to
   * `pageFunction`. If no elements match the selector, the method throws an error.
   *
   * If `pageFunction` returns a [Promise], then
   * [frame.$eval(selector, pageFunction[, arg, options])](https://playwright.dev/docs/api/class-frame#frame-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const searchValue = await frame.$eval('#search', el => el.value);
   * const preloadHref = await frame.$eval('link[rel=preload]', el => el.href);
   * const html = await frame.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  $eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          IndexedAccessType
            TypeReference
              Identifier: 'HTMLElementTagNameMap'
            TypeReference
              Identifier: 'K'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass the actionability checks and therefore can lead to the flaky
   * tests. Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds an element matching the specified selector within the frame and passes it as a first argument to
   * `pageFunction`. If no elements match the selector, the method throws an error.
   *
   * If `pageFunction` returns a [Promise], then
   * [frame.$eval(selector, pageFunction[, arg, options])](https://playwright.dev/docs/api/class-frame#frame-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const searchValue = await frame.$eval('#search', el => el.value);
   * const preloadHref = await frame.$eval('link[rel=preload]', el => el.href);
   * const html = await frame.$eval('.main-container', (e, suffix) => e.outerHTML + suffix, 'hello');
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  $eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds all elements matching the specified selector within the frame and passes an array of matched
   * elements as a first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [frame.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const divsCounts = await frame.$$eval('div', (divs, min) => divs.length >= min, 10);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: 'HTMLElementTagNameMap'
              TypeReference
                Identifier: 'K'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds all elements matching the specified selector within the frame and passes an array of matched
   * elements as a first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [frame.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const divsCounts = await frame.$$eval('div', (divs, min) => divs.length >= min, 10);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            TypeReference
              Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds all elements matching the specified selector within the frame and passes an array of matched
   * elements as a first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [frame.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const divsCounts = await frame.$$eval('div', (divs, min) => divs.length >= min, 10);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: 'HTMLElementTagNameMap'
              TypeReference
                Identifier: 'K'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds all elements matching the specified selector within the frame and passes an array of matched
   * elements as a first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [frame.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-frame#frame-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const divsCounts = await frame.$$eval('div', (divs, min) => divs.length >= min, 10);
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            TypeReference
              Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Returns when the `pageFunction` returns a truthy value, returns that value.
   *
   * **Usage**
   *
   * The
   * [frame.waitForFunction(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-frame#frame-wait-for-function)
   * can be used to observe viewport size change:
   *
   * ```js
   * const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.
   *
   * (async () => {
   *   const browser = await firefox.launch();
   *   const page = await browser.newPage();
   *   const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
   *   await page.setViewportSize({ width: 50, height: 50 });
   *   await watchDog;
   *   await browser.close();
   * })();
   * ```
   *
   * To pass an argument to the predicate of `frame.waitForFunction` function:
   *
   * ```js
   * const selector = '.foo';
   * await frame.waitForFunction(selector => !!document.querySelector(selector), selector);
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  waitForFunction'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          TypeReference
            Identifier: 'Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageWaitForFunctionOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns when the `pageFunction` returns a truthy value, returns that value.
   *
   * **Usage**
   *
   * The
   * [frame.waitForFunction(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-frame#frame-wait-for-function)
   * can be used to observe viewport size change:
   *
   * ```js
   * const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.
   *
   * (async () => {
   *   const browser = await firefox.launch();
   *   const page = await browser.newPage();
   *   const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
   *   await page.setViewportSize({ width: 50, height: 50 });
   *   await watchDog;
   *   await browser.close();
   * })();
   * ```
   *
   * To pass an argument to the predicate of `frame.waitForFunction` function:
   *
   * ```js
   * const selector = '.foo';
   * await frame.waitForFunction(selector => !!document.querySelector(selector), selector);
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  waitForFunction'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageWaitForFunctionOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead. Read more
   * about [locators](https://playwright.dev/docs/locators).
   *
   * Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * **NOTE** Playwright automatically waits for element to be ready before performing an action. Using {@link Locator}
   * objects and web-first assertions make the code wait-for-selector-free.
   *
   * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If
   * at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.
   * If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.
   *
   * **Usage**
   *
   * This method works across navigations:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.
   *
   * (async () => {
   *   const browser = await chromium.launch();
   *   const page = await browser.newPage();
   *   for (const currentURL of ['https://google.com', 'https://bbc.com']) {
   *     await page.goto(currentURL);
   *     const element = await page.mainFrame().waitForSelector('img');
   *     console.log('Loaded image: ' + await element.getAttribute('src'));
   *   }
   *   await browser.close();
   * })();
   * ```
   *
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageWaitForSelectorOptionsNotHidden'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandleForTag'
          TypeReference
            Identifier: 'K'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead. Read more
   * about [locators](https://playwright.dev/docs/locators).
   *
   * Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * **NOTE** Playwright automatically waits for element to be ready before performing an action. Using {@link Locator}
   * objects and web-first assertions make the code wait-for-selector-free.
   *
   * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If
   * at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.
   * If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.
   *
   * **Usage**
   *
   * This method works across navigations:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.
   *
   * (async () => {
   *   const browser = await chromium.launch();
   *   const page = await browser.newPage();
   *   for (const currentURL of ['https://google.com', 'https://bbc.com']) {
   *     await page.goto(currentURL);
   *     const element = await page.mainFrame().waitForSelector('img');
   *     console.log('Loaded image: ' + await element.getAttribute('src'));
   *   }
   *   await browser.close();
   * })();
   * ```
   *
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageWaitForSelectorOptionsNotHidden'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandle'
          UnionType
            TypeReference
              Identifier: 'SVGElement'
            TypeReference
              Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead. Read more
   * about [locators](https://playwright.dev/docs/locators).
   *
   * Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * **NOTE** Playwright automatically waits for element to be ready before performing an action. Using {@link Locator}
   * objects and web-first assertions make the code wait-for-selector-free.
   *
   * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If
   * at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.
   * If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.
   *
   * **Usage**
   *
   * This method works across navigations:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.
   *
   * (async () => {
   *   const browser = await chromium.launch();
   *   const page = await browser.newPage();
   *   for (const currentURL of ['https://google.com', 'https://bbc.com']) {
   *     await page.goto(currentURL);
   *     const element = await page.mainFrame().waitForSelector('img');
   *     console.log('Loaded image: ' + await element.getAttribute('src'));
   *   }
   *   await browser.close();
   * })();
   * ```
   *
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' PageWaitForSelectorOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead. Read more
   * about [locators](https://playwright.dev/docs/locators).
   *
   * Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * **NOTE** Playwright automatically waits for element to be ready before performing an action. Using {@link Locator}
   * objects and web-first assertions make the code wait-for-selector-free.
   *
   * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If
   * at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.
   * If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.
   *
   * **Usage**
   *
   * This method works across navigations:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.
   *
   * (async () => {
   *   const browser = await chromium.launch();
   *   const page = await browser.newPage();
   *   for (const currentURL of ['https://google.com', 'https://bbc.com']) {
   *     await page.goto(currentURL);
   *     const element = await page.mainFrame().waitForSelector('img');
   *     console.log('Loaded image: ' + await element.getAttribute('src'));
   *   }
   *   await browser.close();
   * })();
   * ```
   *
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' PageWaitForSelectorOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '
  /**
   * Returns the added tag when the script's onload fires or when the script content was injected into frame.
   *
   * Adds a `<script>` tag into the page with the desired url or content.
   * @param options
   */
  addScriptTag'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Raw JavaScript content to be injected into frame.
     */
    content'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative
     * to the current working directory.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Script type. Use 'module' in order to load a JavaScript ES6 module. See
     * [script](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script) for more details.
     */
    type'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * URL of a script to be added.
     */
    url'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandle'
    MethodSignature
      Identifier: '

  /**
   * Returns the added tag when the stylesheet's onload fires or when the CSS content was injected into frame.
   *
   * Adds a `<link rel="stylesheet">` tag into the page with the desired url or a `<style type="text/css">` tag with the
   * content.
   * @param options
   */
  addStyleTag'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Raw CSS content to be injected into frame.
     */
    content'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to the
     * current working directory.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * URL of the `<link>` tag.
     */
    url'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandle'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.check([options])](https://playwright.dev/docs/api/class-locator#locator-check) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method checks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is
   *    already checked, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now checked. If not, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  check'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  childFrames'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.click([options])](https://playwright.dev/docs/api/class-locator#locator-click) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method clicks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element, or the specified `position`.
   * 1. Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  click'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * defaults to 1. See [UIEvent.detail].
     */
    clickCount'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You
     * can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as
     * navigating to inaccessible pages. Defaults to `false`.
     * @deprecated This option will default to `true` in the future.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Gets the full HTML contents of the frame, including the doctype.
   */
  content'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.dblclick([options])](https://playwright.dev/docs/api/class-locator#locator-dblclick)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method double clicks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to double click in the center of the
   *    element, or the specified `position`. if the first click of the `dblclick()` triggers a navigation event,
   *    this method will throw.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **NOTE** `frame.dblclick()` dispatches two `click` events and a single `dblclick` event.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  dblclick'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.dispatchEvent(type[, eventInit, options])](https://playwright.dev/docs/api/class-locator#locator-dispatch-event)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element,
   * `click` is dispatched. This is equivalent to calling
   * [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).
   *
   * **Usage**
   *
   * ```js
   * await frame.dispatchEvent('button#submit', 'click');
   * ```
   *
   * Under the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit`
   * properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.
   *
   * Since `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:
   * - [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
   * - [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
   * - [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
   * - [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
   * - [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
   * - [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
   * - [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
   * - [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
   * - [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
   * - [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)
   *
   * You can also specify `JSHandle` as the property value if you want live objects to be passed into the event:
   *
   * ```js
   * // Note you can only create DataTransfer in Chromium and Firefox
   * const dataTransfer = await frame.evaluateHandle(() => new DataTransfer());
   * await frame.dispatchEvent('#source', 'dragstart', { dataTransfer });
   * ```
   *
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param type DOM event type: `"click"`, `"dragstart"`, etc.
   * @param eventInit Optional event-specific initialization properties.
   * @param options
   */
  dispatchEvent'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' type'
        StringKeyword
      Parameter
        Identifier: ' eventInit'
        QuestionToken
        TypeReference
          Identifier: ' EvaluationArgument'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * @param source A selector to search for an element to drag. If there are multiple elements satisfying the selector, the first will
   * be used.
   * @param target A selector to search for an element to drop onto. If there are multiple elements satisfying the selector, the first
   * will be used.
   * @param options
   */
  dragAndDrop'
      Parameter
        Identifier: 'source'
        StringKeyword
      Parameter
        Identifier: ' target'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not
     * specified, some visible point of the element is used.
     */
    sourcePosition'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Drops on the target element at this point relative to the top-left corner of the element's padding box. If not
     * specified, some visible point of the element is used.
     */
    targetPosition'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method waits for an element matching `selector`, waits for [actionability](https://playwright.dev/docs/actionability) checks,
   * focuses the element, fills it and triggers an `input` event after filling. Note that you can pass an empty string
   * to clear the input field.
   *
   * If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an
   * error. However, if the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled
   * instead.
   *
   * To send fine-grained keyboard events, use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param value Value to fill for the `<input>`, `<textarea>` or `[contenteditable]` element.
   * @param options
   */
  fill'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' value'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.focus([options])](https://playwright.dev/docs/api/class-locator#locator-focus) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method fetches an element with `selector` and focuses it. If there's no element matching `selector`, the
   * method waits until a matching element appears in the DOM.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  focus'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the `frame` or `iframe` element handle which corresponds to this frame.
   *
   * This is an inverse of
   * [elementHandle.contentFrame()](https://playwright.dev/docs/api/class-elementhandle#element-handle-content-frame).
   * Note that returned handle actually belongs to the parent frame.
   *
   * This method throws an error if the frame has been detached before `frameElement()` returns.
   *
   * **Usage**
   *
   * ```js
   * const frameElement = await frame.frameElement();
   * const contentFrame = await frameElement.contentFrame();
   * console.log(frame === contentFrame);  // -> true
   * ```
   *
   */
  frameElement'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandle'
    MethodSignature
      Identifier: '

  /**
   * When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements
   * in that iframe.
   *
   * **Usage**
   *
   * Following snippet locates element with text "Submit" in the iframe with id `my-frame`, like `<iframe
   * id="my-frame">`:
   *
   * ```js
   * const locator = frame.frameLocator('#my-iframe').getByText('Submit');
   * await locator.click();
   * ```
   *
   * @param selector A selector to use when resolving DOM element.
   */
  frameLocator'
      Parameter
        Identifier: 'selector'
        StringKeyword
      TypeReference
        Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.getAttribute(name[, options])](https://playwright.dev/docs/api/class-locator#locator-get-attribute)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns element attribute value.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param name Attribute name to get the value for.
   * @param options
   */
  getAttribute'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' name'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their alt text.
   *
   * **Usage**
   *
   * For example, this method will find the image by alt text "Playwright logo":
   *
   * ```html
   * <img alt='Playwright logo'>
   * ```
   *
   * ```js
   * await page.getByAltText('Playwright logo').click();
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByAltText'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the
   * `aria-label` attribute.
   *
   * **Usage**
   *
   * For example, this method will find inputs by label "Username" and "Password" in the following DOM:
   *
   * ```html
   * <input aria-label="Username">
   * <label for="password-input">Password:</label>
   * <input id="password-input">
   * ```
   *
   * ```js
   * await page.getByLabel('Username').fill('john');
   * await page.getByLabel('Password').fill('secret');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByLabel'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating input elements by the placeholder text.
   *
   * **Usage**
   *
   * For example, consider the following DOM structure.
   *
   * ```html
   * <input type="email" placeholder="name@example.com" />
   * ```
   *
   * You can fill the input after locating it by the placeholder text:
   *
   * ```js
   * await page
   *     .getByPlaceholder('name@example.com')
   *     .fill('playwright@microsoft.com');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByPlaceholder'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles),
   * [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and
   * [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <h3>Sign up</h3>
   * <label>
   *   <input type="checkbox" /> Subscribe
   * </label>
   * <br/>
   * <button>Submit</button>
   * ```
   *
   * You can locate each element by it's implicit role:
   *
   * ```js
   * await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();
   *
   * await page.getByRole('checkbox', { name: 'Subscribe' }).check();
   *
   * await page.getByRole('button', { name: /submit/i }).click();
   * ```
   *
   * **Details**
   *
   * Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback
   * about the ARIA guidelines.
   *
   * Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings)
   * that is recognized by the role selector. You can find all the
   * [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend**
   * duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.
   * @param role Required aria role.
   * @param options
   */
  getByRole'
      Parameter
        Identifier: 'role'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.
     *
     * Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).
     */
    checked'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-disabled` or `disabled`.
     *
     * **NOTE** Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about
     * [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).
     */
    disabled'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-expanded`.
     *
     * Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).
     */
    expanded'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Option that controls whether hidden elements are matched. By default, only non-hidden elements, as
     * [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.
     *
     * Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).
     */
    includeHidden'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values
     * for `<h1>-<h6>` elements.
     *
     * Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).
     */
    level'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is
     * case-insensitive and searches for a substring, use `exact` to control this behavior.
     *
     * Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
     */
    name'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-pressed`.
     *
     * Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).
     */
    pressed'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-selected`.
     *
     * Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).
     */
    selected'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Locate element by the test id.
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <button data-testid="directions">Itinéraire</button>
   * ```
   *
   * You can locate the element by it's test id:
   *
   * ```js
   * await page.getByTestId('directions').click();
   * ```
   *
   * **Details**
   *
   * By default, the `data-testid` attribute is used as a test id. Use
   * [selectors.setTestIdAttribute(attributeName)](https://playwright.dev/docs/api/class-selectors#selectors-set-test-id-attribute)
   * to configure a different test id attribute if necessary.
   *
   * ```js
   * // Set custom test id attribute from @playwright/test config:
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     testIdAttribute: 'data-pw'
   *   },
   * });
   * ```
   *
   * @param testId Id to locate the element by.
   */
  getByTestId'
      Parameter
        Identifier: 'testId'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements that contain given text.
   *
   * See also [locator.filter([options])](https://playwright.dev/docs/api/class-locator#locator-filter) that allows to
   * match by another criteria, like an accessible role, and then filter by the text content.
   *
   * **Usage**
   *
   * Consider the following DOM structure:
   *
   * ```html
   * <div>Hello <span>world</span></div>
   * <div>Hello</div>
   * ```
   *
   * You can locate by text substring, exact string, or a regular expression:
   *
   * ```js
   * // Matches <span>
   * page.getByText('world');
   *
   * // Matches first <div>
   * page.getByText('Hello world');
   *
   * // Matches second <div>
   * page.getByText('Hello', { exact: true });
   *
   * // Matches both <div>s
   * page.getByText(/Hello/);
   *
   * // Matches second <div>
   * page.getByText(/^hello$/i);
   * ```
   *
   * **Details**
   *
   * Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into
   * one, turns line breaks into spaces and ignores leading and trailing whitespace.
   *
   * Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For
   * example, locating by text `"Log in"` matches `<input type=button value="Log in">`.
   * @param text Text to locate the element for.
   * @param options
   */
  getByText'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their title attribute.
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <span title='Issues count'>25 issues</span>
   * ```
   *
   * You can check the issues count after locating it by the title text:
   *
   * ```js
   * await expect(page.getByTitle('Issues count')).toHaveText('25 issues');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByTitle'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Returns the main resource response. In case of multiple redirects, the navigation will resolve with the response of
   * the last redirect.
   *
   * The method will throw an error if:
   * - there's an SSL error (e.g. in case of self-signed certificates).
   * - target URL is invalid.
   * - the `timeout` is exceeded during navigation.
   * - the remote server does not respond or is unreachable.
   * - the main resource failed to load.
   *
   * The method will not throw an error when any valid HTTP status code is returned by the remote server, including 404
   * "Not Found" and 500 "Internal Server Error".  The status code for such responses can be retrieved by calling
   * [response.status()](https://playwright.dev/docs/api/class-response#response-status).
   *
   * **NOTE** The method either throws an error or returns a main resource response. The only exceptions are navigation
   * to `about:blank` or navigation to the same URL with a different hash, which would succeed and return `null`.
   *
   * **NOTE** Headless mode doesn't support navigation to a PDF document. See the
   * [upstream issue](https://bugs.chromium.org/p/chromium/issues/detail?id=761295).
   * @param url URL to navigate frame to. The url should include scheme, e.g. `https://`.
   * @param options
   */
  goto'
      Parameter
        Identifier: 'url'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Referer header value. If provided it will take preference over the referer header value set by
     * [page.setExtraHTTPHeaders(headers)](https://playwright.dev/docs/api/class-page#page-set-extra-http-headers).
     */
    referer'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.hover([options])](https://playwright.dev/docs/api/class-locator#locator-hover) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method hovers over an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to hover over the center of the
   *    element, or the specified `position`.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  hover'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.innerHTML([options])](https://playwright.dev/docs/api/class-locator#locator-inner-html)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `element.innerHTML`.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  innerHTML'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.innerText([options])](https://playwright.dev/docs/api/class-locator#locator-inner-text)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `element.innerText`.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  innerText'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.inputValue([options])](https://playwright.dev/docs/api/class-locator#locator-input-value) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.
   *
   * Throws for non-input elements. However, if the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the
   * control.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  inputValue'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isChecked([options])](https://playwright.dev/docs/api/class-locator#locator-is-checked)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is checked. Throws if the element is not a checkbox or radio input.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isChecked'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns `true` if the frame has been detached, or `false` otherwise.
   */
  isDetached'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.isDisabled([options])](https://playwright.dev/docs/api/class-locator#locator-is-disabled) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is disabled, the opposite of [enabled](https://playwright.dev/docs/actionability#enabled).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isDisabled'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.isEditable([options])](https://playwright.dev/docs/api/class-locator#locator-is-editable) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is [editable](https://playwright.dev/docs/actionability#editable).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isEditable'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns whether the element is [enabled](https://playwright.dev/docs/actionability#enabled).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isEnabled'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isHidden([options])](https://playwright.dev/docs/api/class-locator#locator-is-hidden)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is hidden, the opposite of [visible](https://playwright.dev/docs/actionability#visible).  `selector` that
   * does not match any elements is considered hidden.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isHidden'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated This option is ignored.
     * [frame.isHidden(selector[, options])](https://playwright.dev/docs/api/class-frame#frame-is-hidden) does not wait
     * for the element to become hidden and returns immediately.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isVisible([options])](https://playwright.dev/docs/api/class-locator#locator-is-visible)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is [visible](https://playwright.dev/docs/actionability#visible). `selector` that does not match any elements
   * is considered not visible.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  isVisible'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated This option is ignored.
     * [frame.isVisible(selector[, options])](https://playwright.dev/docs/api/class-frame#frame-is-visible) does not wait
     * for the element to become visible and returns immediately.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * The method returns an element locator that can be used to perform actions on this page / frame. Locator is resolved
   * to the element immediately before performing an action, so a series of actions on the same locator can in fact be
   * performed on different DOM elements. That would happen if the DOM structure between those actions has changed.
   *
   * [Learn more about locators](https://playwright.dev/docs/locators).
   *
   * [Learn more about locators](https://playwright.dev/docs/locators).
   * @param selector A selector to use when resolving DOM element.
   * @param options
   */
  locator'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Narrows down the results of the method to those which contain elements matching this relative locator. For example,
     * `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.
     *
     * Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not
     * the document root. For example, you can find `content` that has `div` in
     * `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article
     * div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    has'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the
     * outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    hasNot'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element.
     * When passed a [string], matching is case-insensitive and searches for a substring.
     */
    hasNotText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When
     * passed a [string], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches
     * `<article><div>Playwright</div></article>`.
     */
    hasText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Returns frame's name attribute as specified in the tag.
   *
   * If the name is empty, returns the id attribute instead.
   *
   * **NOTE** This value is calculated once when the frame is created, and will not update if the attribute is changed
   * later.
   */
  name'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the page containing this frame.
   */
  page'
      TypeReference
        Identifier: ' Page'
    MethodSignature
      Identifier: '

  /**
   * Parent frame, if any. Detached frames and main frames return `null`.
   */
  parentFrame'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.press(key[, options])](https://playwright.dev/docs/api/class-locator#locator-press)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * `key` can specify the intended
   * [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character
   * to generate the text for. A superset of the `key` values can be found
   * [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:
   *
   * `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`,
   * `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`,
   * etc.
   *
   * Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`,
   * `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.
   *
   * Holding down `Shift` will type the text that corresponds to the `key` in the upper case.
   *
   * If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective
   * texts.
   *
   * Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When
   * specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param key Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.
   * @param options
   */
  press'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' key'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You
     * can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as
     * navigating to inaccessible pages. Defaults to `false`.
     * @deprecated This option will default to `true` in the future.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.selectOption(values[, options])](https://playwright.dev/docs/api/class-locator#locator-select-option)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method waits for an element matching `selector`, waits for [actionability](https://playwright.dev/docs/actionability) checks, waits
   * until all specified options are present in the `<select>` element and selects these options.
   *
   * If the target element is not a `<select>` element, this method throws an error. However, if the element is inside
   * the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used
   * instead.
   *
   * Returns the array of option values that have been successfully selected.
   *
   * Triggers a `change` and `input` event once all the provided options have been selected.
   *
   * **Usage**
   *
   * ```js
   * // Single selection matching the value or label
   * frame.selectOption('select#colors', 'blue');
   *
   * // single selection matching both the value and the label
   * frame.selectOption('select#colors', { label: 'Blue' });
   *
   * // multiple selection
   * frame.selectOption('select#colors', 'red', 'green', 'blue');
   * ```
   *
   * @param selector A selector to query for.
   * @param values Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise
   * only the first option matching one of the passed options is selected. String values are matching both values and
   * labels. Option is considered matching if all specified properties match.
   * @param options
   */
  selectOption'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' values'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
          TypeReference
            Identifier: 'ElementHandle'
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Matches by `option.value`. Optional.
     */
    value'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Matches by `option.label`. Optional.
     */
    label'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Matches by the index. Optional.
     */
    index'
              QuestionToken
              NumberKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeReference
              Identifier: 'ElementHandle'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * Matches by `option.value`. Optional.
     */
    value'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * Matches by `option.label`. Optional.
     */
    label'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * Matches by the index. Optional.
     */
    index'
                QuestionToken
                NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.setChecked(checked[, options])](https://playwright.dev/docs/api/class-locator#locator-set-checked)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method checks or unchecks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Ensure that matched element is a checkbox or a radio input. If not, this method throws.
   * 1. If the element already has the right checked state, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now checked or unchecked. If not, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param checked Whether to check or uncheck the checkbox.
   * @param options
   */
  setChecked'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' checked'
        BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method internally calls [document.write()](https://developer.mozilla.org/en-US/docs/Web/API/Document/write),
   * inheriting all its specific characteristics and behaviors.
   * @param html HTML markup to assign to the page.
   * @param options
   */
  setContent'
      Parameter
        Identifier: 'html'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.setInputFiles(files[, options])](https://playwright.dev/docs/api/class-locator#locator-set-input-files)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then
   * they are resolved relative to the current working directory. For empty array, clears the selected files.
   *
   * This method expects `selector` to point to an
   * [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside
   * the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param files
   * @param options
   */
  setInputFiles'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' files'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * File name
     */
    name'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File type
     */
    mimeType'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File content
     */
    buffer'
              TypeReference
                Identifier: ' Buffer'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * File name
     */
    name'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File type
     */
    mimeType'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File content
     */
    buffer'
                TypeReference
                  Identifier: ' Buffer'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.tap([options])](https://playwright.dev/docs/api/class-locator#locator-tap) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * This method taps an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.touchscreen](https://playwright.dev/docs/api/class-page#page-touchscreen) to tap the center of the
   *    element, or the specified `position`.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **NOTE** `frame.tap()` requires that the `hasTouch` option of the browser context be set to true.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  tap'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.textContent([options])](https://playwright.dev/docs/api/class-locator#locator-text-content) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `element.textContent`.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  textContent'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the page title.
   */
  title'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text. `frame.type` can be used
   * to send fine-grained keyboard events. To fill values in form fields, use
   * [frame.fill(selector, value[, options])](https://playwright.dev/docs/api/class-frame#frame-fill).
   *
   * To press a special key, like `Control` or `ArrowDown`, use
   * [keyboard.press(key[, options])](https://playwright.dev/docs/api/class-keyboard#keyboard-press).
   *
   * **Usage**
   * @deprecated In most cases, you should use
   * [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill) instead. You only need
   * to press keys one by one if there is special keyboard handling on the page - in this case use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param text A text to type into a focused element.
   * @param options
   */
  type'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' text'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between key presses in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.uncheck([options])](https://playwright.dev/docs/api/class-locator#locator-uncheck)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method checks an element matching `selector` by performing the following steps:
   * 1. Find an element matching `selector`. If there is none, wait until a matching element is attached to the DOM.
   * 1. Ensure that matched element is a checkbox or a radio input. If not, this method throws. If the element is
   *    already unchecked, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now unchecked. If not, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param selector A selector to search for an element. If there are multiple elements satisfying the selector, the first will be
   * used.
   * @param options
   */
  uncheck'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
     * element, the call throws an exception.
     */
    strict'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns frame's url.
   */
  url'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Waits for the required load state to be reached.
   *
   * This returns when the frame reaches a required load state, `load` by default. The navigation must have been
   * committed when this method is called. If current document has already reached the required state, resolves
   * immediately.
   *
   * **NOTE** Most of the time, this method is not needed because Playwright
   * [auto-waits before every action](https://playwright.dev/docs/actionability).
   *
   * **Usage**
   *
   * ```js
   * await frame.click('button'); // Click triggers navigation.
   * await frame.waitForLoadState(); // Waits for 'load' state by default.
   * ```
   *
   * @param state Optional load state to wait for, defaults to `load`. If the state has been already reached while loading current
   * document, the method resolves immediately. Can be one of:
   * - `'load'` - wait for the `load` event to be fired.
   * - `'domcontentloaded'` - wait for the `DOMContentLoaded` event to be fired.
   * - `'networkidle'` - **DISCOURAGED** wait until there are no network connections for at least `500` ms. Don't use
   * this method for testing, rely on web assertions to assess readiness instead.
   * @param options
   */
  waitForLoadState'
      Parameter
        Identifier: 'state'
        QuestionToken
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Waits for the frame navigation and returns the main resource response. In case of multiple redirects, the
   * navigation will resolve with the response of the last redirect. In case of navigation to a different anchor or
   * navigation due to History API usage, the navigation will resolve with `null`.
   *
   * **Usage**
   *
   * This method waits for the frame to navigate to a new URL. It is useful for when you run code which will indirectly
   * cause the frame to navigate. Consider this example:
   *
   * ```js
   * // Start waiting for navigation before clicking. Note no await.
   * const navigationPromise = page.waitForNavigation();
   * await page.getByText('Navigate after timeout').click();
   * await navigationPromise;
   * ```
   *
   * **NOTE** Usage of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to change the URL
   * is considered a navigation.
   * @deprecated This method is inherently racy, please use
   * [frame.waitForURL(url[, options])](https://playwright.dev/docs/api/class-frame#frame-wait-for-url) instead.
   * @param options
   */
  waitForNavigation'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * A glob pattern, regex pattern or predicate receiving [URL] to match while waiting for the navigation. Note that if
     * the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly
     * equal to the string.
     */
    url'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
              ParenthesizedType
                FunctionType
                  Parameter
                    Identifier: 'url'
                    TypeReference
                      Identifier: ' URL'
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Never wait for timeout in production. Tests that wait for time are inherently flaky. Use {@link Locator} actions
   * and web assertions that wait automatically.
   *
   * Waits for the given `timeout` in milliseconds.
   *
   * Note that `frame.waitForTimeout()` should only be used for debugging. Tests using the timer in production are going
   * to be flaky. Use signals such as network events, selectors becoming visible and others instead.
   * @param timeout A timeout to wait for
   */
  waitForTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Waits for the frame to navigate to the given URL.
   *
   * **Usage**
   *
   * ```js
   * await frame.click('a.delayed-navigation'); // Clicking the link will indirectly cause a navigation
   * await frame.waitForURL('**\/target.html');
   * ```
   *
   * @param url A glob pattern, regex pattern or predicate receiving [URL] to match while waiting for the navigation. Note that if
   * the parameter is a string without wildcard characters, the method will wait for navigation to URL that is exactly
   * equal to the string.
   * @param options
   */
  waitForURL'
      Parameter
        Identifier: 'url'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'url'
                TypeReference
                  Identifier: ' URL'
              BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum operation time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
     * `navigationTimeout` option in the config, or by using the
     * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout),
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout),
     * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When to consider operation succeeded, defaults to `load`. Events can be either:
     * - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
     * - `'load'` - consider operation to be finished when the `load` event is fired.
     * - `'networkidle'` - **DISCOURAGED** consider operation to be finished when there are no network connections for
     *   at least `500` ms. Don't use this method for testing, rely on web assertions to assess readiness instead.
     * - `'commit'` - consider operation to be finished when network response is received and the document started
     *   loading.
     */
    waitUntil'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BrowserContext'
    MethodSignature
      Identifier: '
  /**
   * The method adds a function called `name` on the `window` object of every frame in every page in the context. When
   * called, the function executes `callback` and returns a [Promise] which resolves to the return value of `callback`.
   * If the `callback` returns a [Promise], it will be awaited.
   *
   * The first argument of the `callback` function contains information about the caller: `{ browserContext:
   * BrowserContext, page: Page, frame: Frame }`.
   *
   * See [page.exposeBinding(name, callback[, options])](https://playwright.dev/docs/api/class-page#page-expose-binding)
   * for page-only version.
   *
   * **Usage**
   *
   * An example of exposing page URL to all frames in all pages in the context:
   *
   * ```js
   * const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
   *
   * (async () => {
   *   const browser = await webkit.launch({ headless: false });
   *   const context = await browser.newContext();
   *   await context.exposeBinding('pageURL', ({ page }) => page.url());
   *   const page = await context.newPage();
   *   await page.setContent(`
   *     <script>
   *       async function onClick() {
   *         document.querySelector('div').textContent = await window.pageURL();
   *       }
   *     </script>
   *     <button onclick="onClick()">Click me</button>
   *     <div></div>
   *   `);
   *   await page.getByRole('button').click();
   * })();
   * ```
   *
   * @param name Name of the function on the window object.
   * @param callback Callback function that will be called in the Playwright's context.
   * @param options
   */
  exposeBinding'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' playwrightBinding'
        FunctionType
          Parameter
            Identifier: 'source'
            TypeReference
              Identifier: ' BindingSource'
          Parameter
            Identifier: ' arg'
            TypeReference
              Identifier: ' JSHandle'
          AnyKeyword
      Parameter
        Identifier: ' options'
        TypeLiteral
          PropertySignature
            Identifier: ' handle'
            LiteralType
              TrueKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * The method adds a function called `name` on the `window` object of every frame in every page in the context. When
   * called, the function executes `callback` and returns a [Promise] which resolves to the return value of `callback`.
   * If the `callback` returns a [Promise], it will be awaited.
   *
   * The first argument of the `callback` function contains information about the caller: `{ browserContext:
   * BrowserContext, page: Page, frame: Frame }`.
   *
   * See [page.exposeBinding(name, callback[, options])](https://playwright.dev/docs/api/class-page#page-expose-binding)
   * for page-only version.
   *
   * **Usage**
   *
   * An example of exposing page URL to all frames in all pages in the context:
   *
   * ```js
   * const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
   *
   * (async () => {
   *   const browser = await webkit.launch({ headless: false });
   *   const context = await browser.newContext();
   *   await context.exposeBinding('pageURL', ({ page }) => page.url());
   *   const page = await context.newPage();
   *   await page.setContent(`
   *     <script>
   *       async function onClick() {
   *         document.querySelector('div').textContent = await window.pageURL();
   *       }
   *     </script>
   *     <button onclick="onClick()">Click me</button>
   *     <div></div>
   *   `);
   *   await page.getByRole('button').click();
   * })();
   * ```
   *
   * @param name Name of the function on the window object.
   * @param callback Callback function that will be called in the Playwright's context.
   * @param options
   */
  exposeBinding'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' playwrightBinding'
        FunctionType
          Parameter
            Identifier: 'source'
            TypeReference
              Identifier: ' BindingSource'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          AnyKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' handle'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Adds a script which would be evaluated in one of the following scenarios:
   * - Whenever a page is created in the browser context or is navigated.
   * - Whenever a child frame is attached or navigated in any page in the browser context. In this case, the script is
   *   evaluated in the context of the newly attached frame.
   *
   * The script is evaluated after the document was created but before any of its scripts were run. This is useful to
   * amend the JavaScript environment, e.g. to seed `Math.random`.
   *
   * **Usage**
   *
   * An example of overriding `Math.random` before the page loads:
   *
   * ```js
   * // preload.js
   * Math.random = () => 42;
   * ```
   *
   * ```js
   * // In your playwright script, assuming the preload.js file is in same directory.
   * await browserContext.addInitScript({
   *   path: 'preload.js'
   * });
   * ```
   *
   * **NOTE** The order of evaluation of multiple scripts installed via
   * [browserContext.addInitScript(script[, arg])](https://playwright.dev/docs/api/class-browsercontext#browser-context-add-init-script)
   * and [page.addInitScript(script[, arg])](https://playwright.dev/docs/api/class-page#page-add-init-script) is not
   * defined.
   * @param script Script to be evaluated in all pages in the browser context.
   * @param arg Optional argument to pass to `script` (only supported when passing a function).
   */
  addInitScript'
      TypeParameter
        Identifier: 'Arg'
      Parameter
        Identifier: 'script'
        UnionType
          TypeReference
            Identifier: ' PageFunction'
            TypeReference
              Identifier: 'Arg'
            AnyKeyword
          TypeLiteral
            PropertySignature
              Identifier: ' path'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: ' content'
              QuestionToken
              StringKeyword
      Parameter
        Identifier: ' arg'
        QuestionToken
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Removes all the listeners of the given type (or all registered listeners if no type given). Allows to wait for
   * async listeners to complete or to ignore subsequent errors from these listeners.
   * @param type
   * @param options
   */
  removeAllListeners'
      Parameter
        Identifier: 'type'
        QuestionToken
        StringKeyword
      ThisType
    MethodSignature
      Identifier: '
  /**
   * Removes all the listeners of the given type (or all registered listeners if no type given). Allows to wait for
   * async listeners to complete or to ignore subsequent errors from these listeners.
   * @param type
   * @param options
   */
  removeAllListeners'
      Parameter
        Identifier: 'type'
        UnionType
          StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Specifies whether to wait for already running listeners and what to do if they throw errors:
     * - `'default'` - do not wait for current listener calls (if any) to finish, if the listener throws, it may result in unhandled error
     * - `'wait'` - wait for current listener calls (if any) to finish
     * - `'ignoreErrors'` - do not wait for current listener calls (if any) to finish, all errors thrown by the listeners after removal are silently caught
     */
    behavior'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Only works with Chromium browser's persistent context.
   *
   * Emitted when new background page is created in the context.
   *
   * ```js
   * const backgroundPage = await context.waitForEvent('backgroundpage');
   * ```
   *
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when Browser context gets closed. This might happen because of one of the following:
   * - Browser context is closed.
   * - Browser application is closed or crashed.
   * - The [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close) method was called.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browserContext'
            TypeReference
              Identifier: ' BrowserContext'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.
   *
   * The arguments passed into `console.log` and the page are available on the {@link ConsoleMessage} event handler
   * argument.
   *
   * **Usage**
   *
   * ```js
   * context.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must**
   * either [dialog.accept([promptText])](https://playwright.dev/docs/api/class-dialog#dialog-accept) or
   * [dialog.dismiss()](https://playwright.dev/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page
   * will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the
   * dialog, and actions like click will never finish.
   *
   * **Usage**
   *
   * ```js
   * context.on('dialog', dialog => {
   *   dialog.accept();
   * });
   * ```
   *
   * **NOTE** When no [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) or
   * [browserContext.on('dialog')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-dialog)
   * listeners are present, all dialogs are automatically dismissed.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * The event is emitted when a new Page is created in the BrowserContext. The page may still be loading. The event
   * will also fire for popup pages. See also
   * [page.on('popup')](https://playwright.dev/docs/api/class-page#page-event-popup) to receive events about popups
   * relevant to a specific page.
   *
   * The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a
   * popup with `window.open('http://example.com')`, this event will fire when the network request to
   * "http://example.com" is done and its response has started loading in the popup. If you would like to route/listen
   * to this network request, use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.on('request')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request)
   * respectively instead of similar methods on the {@link Page}.
   *
   * ```js
   * const newPagePromise = context.waitForEvent('page');
   * await page.getByText('open new page').click();
   * const newPage = await newPagePromise;
   * console.log(await newPage.evaluate('location.href'));
   * ```
   *
   * **NOTE** Use
   * [page.waitForLoadState([state, options])](https://playwright.dev/docs/api/class-page#page-wait-for-load-state) to
   * wait until the page gets to a particular state (you should not need it in most cases).
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request is issued from any pages created through this context. The [request] object is read-only. To
   * only listen for requests from a particular page, use
   * [page.on('request')](https://playwright.dev/docs/api/class-page#page-event-request).
   *
   * In order to intercept and mutate requests, see
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * or [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route).
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request fails, for example by timing out. To only listen for failed requests from a particular page,
   * use [page.on('requestfailed')](https://playwright.dev/docs/api/class-page#page-event-request-failed).
   *
   * **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request
   * will complete with
   * [browserContext.on('requestfinished')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request-finished)
   * event and not with
   * [browserContext.on('requestfailed')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request-failed).
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request finishes successfully after downloading the response body. For a successful response, the
   * sequence of events is `request`, `response` and `requestfinished`. To listen for successful requests from a
   * particular page, use
   * [page.on('requestfinished')](https://playwright.dev/docs/api/class-page#page-event-request-finished).
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when [response] status and headers are received for a request. For a successful response, the sequence of
   * events is `request`, `response` and `requestfinished`. To listen for response events from a particular page, use
   * [page.on('response')](https://playwright.dev/docs/api/class-page#page-event-response).
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Service workers are only supported on Chromium-based browsers.
   *
   * Emitted when new service worker is created in the context.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when exception is unhandled in any of the pages in this context. To listen for errors from a particular
   * page, use [page.on('pageerror')](https://playwright.dev/docs/api/class-page#page-event-page-error) instead.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webError'
            TypeReference
              Identifier: ' WebError'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browserContext'
            TypeReference
              Identifier: ' BrowserContext'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webError'
            TypeReference
              Identifier: ' WebError'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Only works with Chromium browser's persistent context.
   *
   * Emitted when new background page is created in the context.
   *
   * ```js
   * const backgroundPage = await context.waitForEvent('backgroundpage');
   * ```
   *
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when Browser context gets closed. This might happen because of one of the following:
   * - Browser context is closed.
   * - Browser application is closed or crashed.
   * - The [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close) method was called.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browserContext'
            TypeReference
              Identifier: ' BrowserContext'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.
   *
   * The arguments passed into `console.log` and the page are available on the {@link ConsoleMessage} event handler
   * argument.
   *
   * **Usage**
   *
   * ```js
   * context.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must**
   * either [dialog.accept([promptText])](https://playwright.dev/docs/api/class-dialog#dialog-accept) or
   * [dialog.dismiss()](https://playwright.dev/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page
   * will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the
   * dialog, and actions like click will never finish.
   *
   * **Usage**
   *
   * ```js
   * context.on('dialog', dialog => {
   *   dialog.accept();
   * });
   * ```
   *
   * **NOTE** When no [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) or
   * [browserContext.on('dialog')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-dialog)
   * listeners are present, all dialogs are automatically dismissed.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * The event is emitted when a new Page is created in the BrowserContext. The page may still be loading. The event
   * will also fire for popup pages. See also
   * [page.on('popup')](https://playwright.dev/docs/api/class-page#page-event-popup) to receive events about popups
   * relevant to a specific page.
   *
   * The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a
   * popup with `window.open('http://example.com')`, this event will fire when the network request to
   * "http://example.com" is done and its response has started loading in the popup. If you would like to route/listen
   * to this network request, use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.on('request')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request)
   * respectively instead of similar methods on the {@link Page}.
   *
   * ```js
   * const newPagePromise = context.waitForEvent('page');
   * await page.getByText('open new page').click();
   * const newPage = await newPagePromise;
   * console.log(await newPage.evaluate('location.href'));
   * ```
   *
   * **NOTE** Use
   * [page.waitForLoadState([state, options])](https://playwright.dev/docs/api/class-page#page-wait-for-load-state) to
   * wait until the page gets to a particular state (you should not need it in most cases).
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request is issued from any pages created through this context. The [request] object is read-only. To
   * only listen for requests from a particular page, use
   * [page.on('request')](https://playwright.dev/docs/api/class-page#page-event-request).
   *
   * In order to intercept and mutate requests, see
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * or [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route).
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request fails, for example by timing out. To only listen for failed requests from a particular page,
   * use [page.on('requestfailed')](https://playwright.dev/docs/api/class-page#page-event-request-failed).
   *
   * **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request
   * will complete with
   * [browserContext.on('requestfinished')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request-finished)
   * event and not with
   * [browserContext.on('requestfailed')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request-failed).
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request finishes successfully after downloading the response body. For a successful response, the
   * sequence of events is `request`, `response` and `requestfinished`. To listen for successful requests from a
   * particular page, use
   * [page.on('requestfinished')](https://playwright.dev/docs/api/class-page#page-event-request-finished).
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when [response] status and headers are received for a request. For a successful response, the sequence of
   * events is `request`, `response` and `requestfinished`. To listen for response events from a particular page, use
   * [page.on('response')](https://playwright.dev/docs/api/class-page#page-event-response).
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Service workers are only supported on Chromium-based browsers.
   *
   * Emitted when new service worker is created in the context.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when exception is unhandled in any of the pages in this context. To listen for errors from a particular
   * page, use [page.on('pageerror')](https://playwright.dev/docs/api/class-page#page-event-page-error) instead.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webError'
            TypeReference
              Identifier: ' WebError'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browserContext'
            TypeReference
              Identifier: ' BrowserContext'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webError'
            TypeReference
              Identifier: ' WebError'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browserContext'
            TypeReference
              Identifier: ' BrowserContext'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webError'
            TypeReference
              Identifier: ' WebError'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Only works with Chromium browser's persistent context.
   *
   * Emitted when new background page is created in the context.
   *
   * ```js
   * const backgroundPage = await context.waitForEvent('backgroundpage');
   * ```
   *
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when Browser context gets closed. This might happen because of one of the following:
   * - Browser context is closed.
   * - Browser application is closed or crashed.
   * - The [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close) method was called.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browserContext'
            TypeReference
              Identifier: ' BrowserContext'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.
   *
   * The arguments passed into `console.log` and the page are available on the {@link ConsoleMessage} event handler
   * argument.
   *
   * **Usage**
   *
   * ```js
   * context.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must**
   * either [dialog.accept([promptText])](https://playwright.dev/docs/api/class-dialog#dialog-accept) or
   * [dialog.dismiss()](https://playwright.dev/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page
   * will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the
   * dialog, and actions like click will never finish.
   *
   * **Usage**
   *
   * ```js
   * context.on('dialog', dialog => {
   *   dialog.accept();
   * });
   * ```
   *
   * **NOTE** When no [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) or
   * [browserContext.on('dialog')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-dialog)
   * listeners are present, all dialogs are automatically dismissed.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'dialog'
            TypeReference
              Identifier: ' Dialog'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * The event is emitted when a new Page is created in the BrowserContext. The page may still be loading. The event
   * will also fire for popup pages. See also
   * [page.on('popup')](https://playwright.dev/docs/api/class-page#page-event-popup) to receive events about popups
   * relevant to a specific page.
   *
   * The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a
   * popup with `window.open('http://example.com')`, this event will fire when the network request to
   * "http://example.com" is done and its response has started loading in the popup. If you would like to route/listen
   * to this network request, use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.on('request')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request)
   * respectively instead of similar methods on the {@link Page}.
   *
   * ```js
   * const newPagePromise = context.waitForEvent('page');
   * await page.getByText('open new page').click();
   * const newPage = await newPagePromise;
   * console.log(await newPage.evaluate('location.href'));
   * ```
   *
   * **NOTE** Use
   * [page.waitForLoadState([state, options])](https://playwright.dev/docs/api/class-page#page-wait-for-load-state) to
   * wait until the page gets to a particular state (you should not need it in most cases).
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request is issued from any pages created through this context. The [request] object is read-only. To
   * only listen for requests from a particular page, use
   * [page.on('request')](https://playwright.dev/docs/api/class-page#page-event-request).
   *
   * In order to intercept and mutate requests, see
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * or [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route).
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request fails, for example by timing out. To only listen for failed requests from a particular page,
   * use [page.on('requestfailed')](https://playwright.dev/docs/api/class-page#page-event-request-failed).
   *
   * **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request
   * will complete with
   * [browserContext.on('requestfinished')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request-finished)
   * event and not with
   * [browserContext.on('requestfailed')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request-failed).
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request finishes successfully after downloading the response body. For a successful response, the
   * sequence of events is `request`, `response` and `requestfinished`. To listen for successful requests from a
   * particular page, use
   * [page.on('requestfinished')](https://playwright.dev/docs/api/class-page#page-event-request-finished).
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'request'
            TypeReference
              Identifier: ' Request'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when [response] status and headers are received for a request. For a successful response, the sequence of
   * events is `request`, `response` and `requestfinished`. To listen for response events from a particular page, use
   * [page.on('response')](https://playwright.dev/docs/api/class-page#page-event-response).
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'response'
            TypeReference
              Identifier: ' Response'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Service workers are only supported on Chromium-based browsers.
   *
   * Emitted when new service worker is created in the context.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when exception is unhandled in any of the pages in this context. To listen for errors from a particular
   * page, use [page.on('pageerror')](https://playwright.dev/docs/api/class-page#page-event-page-error) instead.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webError'
            TypeReference
              Identifier: ' WebError'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds cookies into this browser context. All pages within this context will have these cookies installed. Cookies
   * can be obtained via
   * [browserContext.cookies([urls])](https://playwright.dev/docs/api/class-browsercontext#browser-context-cookies).
   *
   * **Usage**
   *
   * ```js
   * await browserContext.addCookies([cookieObject1, cookieObject2]);
   * ```
   *
   * @param cookies
   */
  addCookies'
      Parameter
        Identifier: 'cookies'
        TypeReference
          Identifier: ' ReadonlyArray'
          TypeLiteral
            PropertySignature
              Identifier: '
    name'
              StringKeyword
            PropertySignature
              Identifier: '

    value'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Either url or domain / path are required. Optional.
     */
    url'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * For the cookie to apply to all subdomains as well, prefix domain with a dot, like this: ".example.com". Either url
     * or domain / path are required. Optional.
     */
    domain'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Either url or domain / path are required Optional.
     */
    path'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Unix time in seconds. Optional.
     */
    expires'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * Optional.
     */
    httpOnly'
              QuestionToken
              BooleanKeyword
            PropertySignature
              Identifier: '

    /**
     * Optional.
     */
    secure'
              QuestionToken
              BooleanKeyword
            PropertySignature
              Identifier: '

    /**
     * Optional.
     */
    sameSite'
              QuestionToken
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Background pages are only supported on Chromium-based browsers.
   *
   * All existing background pages in the context.
   */
  backgroundPages'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Returns the browser instance of the context. If it was launched as a persistent context null gets returned.
   */
  browser'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Browser'
    MethodSignature
      Identifier: '

  /**
   * Removes cookies from context. Accepts optional filter.
   *
   * **Usage**
   *
   * ```js
   * await context.clearCookies();
   * await context.clearCookies({ name: 'session-id' });
   * await context.clearCookies({ domain: 'my-origin.com' });
   * await context.clearCookies({ domain: /.*my-origin\.com/ });
   * await context.clearCookies({ path: '/api/v1' });
   * await context.clearCookies({ name: 'session-id', domain: 'my-origin.com' });
   * ```
   *
   * @param options
   */
  clearCookies'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Only removes cookies with the given domain.
     */
    domain'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Only removes cookies with the given name.
     */
    name'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Only removes cookies with the given path.
     */
    path'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Clears all permission overrides for the browser context.
   *
   * **Usage**
   *
   * ```js
   * const context = await browser.newContext();
   * await context.grantPermissions(['clipboard-read']);
   * // do stuff ..
   * context.clearPermissions();
   * ```
   *
   */
  clearPermissions'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Closes the browser context. All the pages that belong to the browser context will be closed.
   *
   * **NOTE** The default browser context cannot be closed.
   * @param options
   */
  close'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The reason to be reported to the operations interrupted by the context closure.
     */
    reason'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * If no URLs are specified, this method returns all cookies. If URLs are specified, only cookies that affect those
   * URLs are returned.
   * @param urls Optional list of URLs.
   */
  cookies'
      Parameter
        Identifier: 'urls'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'Cookie'
    MethodSignature
      Identifier: '

  /**
   * The method adds a function called `name` on the `window` object of every frame in every page in the context. When
   * called, the function executes `callback` and returns a [Promise] which resolves to the return value of `callback`.
   *
   * If the `callback` returns a [Promise], it will be awaited.
   *
   * See [page.exposeFunction(name, callback)](https://playwright.dev/docs/api/class-page#page-expose-function) for
   * page-only version.
   *
   * **Usage**
   *
   * An example of adding a `sha256` function to all pages in the context:
   *
   * ```js
   * const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.
   * const crypto = require('crypto');
   *
   * (async () => {
   *   const browser = await webkit.launch({ headless: false });
   *   const context = await browser.newContext();
   *   await context.exposeFunction('sha256', text =>
   *     crypto.createHash('sha256').update(text).digest('hex'),
   *   );
   *   const page = await context.newPage();
   *   await page.setContent(`
   *     <script>
   *       async function onClick() {
   *         document.querySelector('div').textContent = await window.sha256('PLAYWRIGHT');
   *       }
   *     </script>
   *     <button onclick="onClick()">Click me</button>
   *     <div></div>
   *   `);
   *   await page.getByRole('button').click();
   * })();
   * ```
   *
   * @param name Name of the function on the window object.
   * @param callback Callback function that will be called in the Playwright's context.
   */
  exposeFunction'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' callback'
        TypeReference
          Identifier: ' Function'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Grants specified permissions to the browser context. Only grants corresponding permissions to the given origin if
   * specified.
   * @param permissions A permission or an array of permissions to grant. Permissions can be one of the following values:
   * - `'accelerometer'`
   * - `'accessibility-events'`
   * - `'ambient-light-sensor'`
   * - `'background-sync'`
   * - `'camera'`
   * - `'clipboard-read'`
   * - `'clipboard-write'`
   * - `'geolocation'`
   * - `'gyroscope'`
   * - `'magnetometer'`
   * - `'microphone'`
   * - `'midi-sysex'` (system-exclusive midi)
   * - `'midi'`
   * - `'notifications'`
   * - `'payment-handler'`
   * - `'storage-access'`
   * @param options
   */
  grantPermissions'
      Parameter
        Identifier: 'permissions'
        TypeReference
          Identifier: ' ReadonlyArray'
          StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The [origin] to grant permissions to, e.g. "https://example.com".
     */
    origin'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** CDP sessions are only supported on Chromium-based browsers.
   *
   * Returns the newly created session.
   * @param page Target to create new session for. For backwards-compatibility, this parameter is named `page`, but it can be a
   * `Page` or `Frame` type.
   */
  newCDPSession'
      Parameter
        Identifier: 'page'
        UnionType
          TypeReference
            Identifier: ' Page'
          TypeReference
            Identifier: 'Frame'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'CDPSession'
    MethodSignature
      Identifier: '

  /**
   * Creates a new page in the browser context.
   */
  newPage'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Returns all open pages in the context.
   */
  pages'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Routing provides the capability to modify network requests that are made by any page in the browser context. Once
   * route is enabled, every request matching the url pattern will stall unless it's continued, fulfilled or aborted.
   *
   * **NOTE**
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * will not intercept requests intercepted by Service Worker. See
   * [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when
   * using request interception by setting `Browser.newContext.serviceWorkers` to `'block'`.
   *
   * **Usage**
   *
   * An example of a naive handler that aborts all image requests:
   *
   * ```js
   * const context = await browser.newContext();
   * await context.route('**\/*.{png,jpg,jpeg}', route => route.abort());
   * const page = await context.newPage();
   * await page.goto('https://example.com');
   * await browser.close();
   * ```
   *
   * or the same snippet using a regex pattern instead:
   *
   * ```js
   * const context = await browser.newContext();
   * await context.route(/(\.png$)|(\.jpg$)/, route => route.abort());
   * const page = await context.newPage();
   * await page.goto('https://example.com');
   * await browser.close();
   * ```
   *
   * It is possible to examine the request to decide the route action. For example, mocking all requests that contain
   * some post data, and leaving all other requests as is:
   *
   * ```js
   * await context.route('/api/**', async route => {
   *   if (route.request().postData().includes('my-string'))
   *     await route.fulfill({ body: 'mocked-data' });
   *   else
   *     await route.continue();
   * });
   * ```
   *
   * Page routes (set up with
   * [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route)) take precedence over
   * browser context routes when request matches both handlers.
   *
   * To remove a route with its handler you can use
   * [browserContext.unroute(url[, handler])](https://playwright.dev/docs/api/class-browsercontext#browser-context-unroute).
   *
   * **NOTE** Enabling routing disables http cache.
   * @param url A glob pattern, regex pattern or predicate receiving [URL] to match while routing. When a `baseURL` via the context
   * options was provided and the passed URL is a path, it gets merged via the
   * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor.
   * @param handler handler function to route the request.
   * @param options
   */
  route'
      Parameter
        Identifier: 'url'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'url'
                TypeReference
                  Identifier: ' URL'
              BooleanKeyword
      Parameter
        Identifier: ' handler'
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'route'
              TypeReference
                Identifier: ' Route'
            Parameter
              Identifier: ' request'
              TypeReference
                Identifier: ' Request'
            UnionType
              TypeReference
                Identifier: ' Promise'
                AnyKeyword
              AnyKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * How often a route should be used. By default it will be used every time.
     */
    times'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * If specified the network requests that are made in the context will be served from the HAR file. Read more about
   * [Replaying from HAR](https://playwright.dev/docs/mock#replaying-from-har).
   *
   * Playwright will not serve requests intercepted by Service Worker from the HAR file. See
   * [this](https://github.com/microsoft/playwright/issues/1090) issue. We recommend disabling Service Workers when
   * using request interception by setting `Browser.newContext.serviceWorkers` to `'block'`.
   * @param har Path to a [HAR](http://www.softwareishard.com/blog/har-12-spec) file with prerecorded network data. If `path` is a
   * relative path, then it is resolved relative to the current working directory.
   * @param options
   */
  routeFromHAR'
      Parameter
        Identifier: 'har'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * - If set to 'abort' any request not found in the HAR file will be aborted.
     * - If set to 'fallback' falls through to the next route handler in the handler chain.
     *
     * Defaults to abort.
     */
    notFound'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * If specified, updates the given HAR with the actual network information instead of serving from file. The file is
     * written to disk when
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) is
     * called.
     */
    update'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional setting to control resource content management. If `attach` is specified, resources are persisted as
     * separate files or entries in the ZIP archive. If `embed` is specified, content is stored inline the HAR file.
     */
    updateContent'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page,
     * cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to
     * `minimal`.
     */
    updateMode'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * A glob pattern, regular expression or predicate to match the request URL. Only requests with URL matching the
     * pattern will be served from the HAR file. If not specified, all requests are served from the HAR file.
     */
    url'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Service workers are only supported on Chromium-based browsers.
   *
   * All existing service workers in the context.
   */
  serviceWorkers'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Worker'
    MethodSignature
      Identifier: '

  /**
   * This setting will change the default maximum navigation time for the following methods and related shortcuts:
   * - [page.goBack([options])](https://playwright.dev/docs/api/class-page#page-go-back)
   * - [page.goForward([options])](https://playwright.dev/docs/api/class-page#page-go-forward)
   * - [page.goto(url[, options])](https://playwright.dev/docs/api/class-page#page-goto)
   * - [page.reload([options])](https://playwright.dev/docs/api/class-page#page-reload)
   * - [page.setContent(html[, options])](https://playwright.dev/docs/api/class-page#page-set-content)
   * - [page.waitForNavigation([options])](https://playwright.dev/docs/api/class-page#page-wait-for-navigation)
   *
   * **NOTE**
   * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout)
   * and [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) take
   * priority over
   * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout).
   * @param timeout Maximum navigation time in milliseconds
   */
  setDefaultNavigationTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This setting will change the default maximum time for all the methods accepting `timeout` option.
   *
   * **NOTE**
   * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout),
   * [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) and
   * [browserContext.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-navigation-timeout)
   * take priority over
   * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout).
   * @param timeout Maximum time in milliseconds
   */
  setDefaultTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * The extra HTTP headers will be sent with every request initiated by any page in the context. These headers are
   * merged with page-specific extra HTTP headers set with
   * [page.setExtraHTTPHeaders(headers)](https://playwright.dev/docs/api/class-page#page-set-extra-http-headers). If
   * page overrides a particular header, page-specific header value will be used instead of the browser context header
   * value.
   *
   * **NOTE**
   * [browserContext.setExtraHTTPHeaders(headers)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-extra-http-headers)
   * does not guarantee the order of headers in the outgoing requests.
   * @param headers An object containing additional HTTP headers to be sent with every request. All header values must be strings.
   */
  setExtraHTTPHeaders'
      Parameter
        Identifier: 'headers'
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'key'
              StringKeyword
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Sets the context's geolocation. Passing `null` or `undefined` emulates position unavailable.
   *
   * **Usage**
   *
   * ```js
   * await browserContext.setGeolocation({ latitude: 59.95, longitude: 30.31667 });
   * ```
   *
   * **NOTE** Consider using
   * [browserContext.grantPermissions(permissions[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-grant-permissions)
   * to grant permissions for the browser context pages to read its geolocation.
   * @param geolocation
   */
  setGeolocation'
      Parameter
        Identifier: 'geolocation'
        UnionType
          LiteralType
            NullKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Latitude between -90 and 90.
     */
    latitude'
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * Longitude between -180 and 180.
     */
    longitude'
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * Non-negative accuracy value. Defaults to `0`.
     */
    accuracy'
              QuestionToken
              NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * @deprecated Browsers may cache credentials after successful authentication. Create a new browser context instead.
   * @param httpCredentials
   */
  setHTTPCredentials'
      Parameter
        Identifier: 'httpCredentials'
        UnionType
          LiteralType
            NullKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    username'
              StringKeyword
            PropertySignature
              Identifier: '

    password'
              StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * @param offline Whether to emulate network being offline for the browser context.
   */
  setOffline'
      Parameter
        Identifier: 'offline'
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns storage state for this browser context, contains current cookies and local storage snapshot.
   * @param options
   */
  storageState'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The file path to save the storage state to. If `path` is a relative path, then it is resolved relative to current
     * working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.
     */
    path'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeLiteral
          PropertySignature
            Identifier: '
    cookies'
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      name'
                  StringKeyword
                PropertySignature
                  Identifier: '

      value'
                  StringKeyword
                PropertySignature
                  Identifier: '

      domain'
                  StringKeyword
                PropertySignature
                  Identifier: '

      path'
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Unix time in seconds.
       */
      expires'
                  NumberKeyword
                PropertySignature
                  Identifier: '

      httpOnly'
                  BooleanKeyword
                PropertySignature
                  Identifier: '

      secure'
                  BooleanKeyword
                PropertySignature
                  Identifier: '

      sameSite'
                  UnionType
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
          PropertySignature
            Identifier: '

    origins'
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      origin'
                  StringKeyword
                PropertySignature
                  Identifier: '

      localStorage'
                  TypeReference
                    Identifier: ' Array'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
        name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        value'
                        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Removes a route created with
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route).
   * When `handler` is not specified, removes all routes for the `url`.
   * @param url A glob pattern, regex pattern or predicate receiving [URL] used to register a routing with
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route).
   * @param handler Optional handler function used to register a routing with
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route).
   */
  unroute'
      Parameter
        Identifier: 'url'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'url'
                TypeReference
                  Identifier: ' URL'
              BooleanKeyword
      Parameter
        Identifier: ' handler'
        QuestionToken
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'route'
              TypeReference
                Identifier: ' Route'
            Parameter
              Identifier: ' request'
              TypeReference
                Identifier: ' Request'
            UnionType
              TypeReference
                Identifier: ' Promise'
                AnyKeyword
              AnyKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Removes all routes created with
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.routeFromHAR(har[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route-from-har).
   * @param options
   */
  unrouteAll'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Specifies whether to wait for already running handlers and what to do if they throw errors:
     * - `'default'` - do not wait for current handler calls (if any) to finish, if unrouted handler throws, it may
     *   result in unhandled error
     * - `'wait'` - wait for current handler calls (if any) to finish
     * - `'ignoreErrors'` - do not wait for current handler calls (if any) to finish, all errors thrown by the handlers
     *   after unrouting are silently caught
     */
    behavior'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Only works with Chromium browser's persistent context.
   *
   * Emitted when new background page is created in the context.
   *
   * ```js
   * const backgroundPage = await context.waitForEvent('backgroundpage');
   * ```
   *
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'page'
                  TypeReference
                    Identifier: ' Page'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'page'
                TypeReference
                  Identifier: ' Page'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Emitted when Browser context gets closed. This might happen because of one of the following:
   * - Browser context is closed.
   * - Browser application is closed or crashed.
   * - The [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close) method was called.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'browserContext'
                  TypeReference
                    Identifier: ' BrowserContext'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'browserContext'
                TypeReference
                  Identifier: ' BrowserContext'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'BrowserContext'
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the page calls one of console API methods, e.g. `console.log` or `console.dir`.
   *
   * The arguments passed into `console.log` and the page are available on the {@link ConsoleMessage} event handler
   * argument.
   *
   * **Usage**
   *
   * ```js
   * context.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await page.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'consoleMessage'
                  TypeReference
                    Identifier: ' ConsoleMessage'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'consoleMessage'
                TypeReference
                  Identifier: ' ConsoleMessage'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ConsoleMessage'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a JavaScript dialog appears, such as `alert`, `prompt`, `confirm` or `beforeunload`. Listener **must**
   * either [dialog.accept([promptText])](https://playwright.dev/docs/api/class-dialog#dialog-accept) or
   * [dialog.dismiss()](https://playwright.dev/docs/api/class-dialog#dialog-dismiss) the dialog - otherwise the page
   * will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#never_blocking) waiting for the
   * dialog, and actions like click will never finish.
   *
   * **Usage**
   *
   * ```js
   * context.on('dialog', dialog => {
   *   dialog.accept();
   * });
   * ```
   *
   * **NOTE** When no [page.on('dialog')](https://playwright.dev/docs/api/class-page#page-event-dialog) or
   * [browserContext.on('dialog')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-dialog)
   * listeners are present, all dialogs are automatically dismissed.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'dialog'
                  TypeReference
                    Identifier: ' Dialog'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'dialog'
                TypeReference
                  Identifier: ' Dialog'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Dialog'
    MethodSignature
      Identifier: '

  /**
   * The event is emitted when a new Page is created in the BrowserContext. The page may still be loading. The event
   * will also fire for popup pages. See also
   * [page.on('popup')](https://playwright.dev/docs/api/class-page#page-event-popup) to receive events about popups
   * relevant to a specific page.
   *
   * The earliest moment that page is available is when it has navigated to the initial url. For example, when opening a
   * popup with `window.open('http://example.com')`, this event will fire when the network request to
   * "http://example.com" is done and its response has started loading in the popup. If you would like to route/listen
   * to this network request, use
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * and
   * [browserContext.on('request')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request)
   * respectively instead of similar methods on the {@link Page}.
   *
   * ```js
   * const newPagePromise = context.waitForEvent('page');
   * await page.getByText('open new page').click();
   * const newPage = await newPagePromise;
   * console.log(await newPage.evaluate('location.href'));
   * ```
   *
   * **NOTE** Use
   * [page.waitForLoadState([state, options])](https://playwright.dev/docs/api/class-page#page-wait-for-load-state) to
   * wait until the page gets to a particular state (you should not need it in most cases).
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'page'
                  TypeReference
                    Identifier: ' Page'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'page'
                TypeReference
                  Identifier: ' Page'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request is issued from any pages created through this context. The [request] object is read-only. To
   * only listen for requests from a particular page, use
   * [page.on('request')](https://playwright.dev/docs/api/class-page#page-event-request).
   *
   * In order to intercept and mutate requests, see
   * [browserContext.route(url, handler[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-route)
   * or [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route).
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'request'
                  TypeReference
                    Identifier: ' Request'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'request'
                TypeReference
                  Identifier: ' Request'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request fails, for example by timing out. To only listen for failed requests from a particular page,
   * use [page.on('requestfailed')](https://playwright.dev/docs/api/class-page#page-event-request-failed).
   *
   * **NOTE** HTTP Error responses, such as 404 or 503, are still successful responses from HTTP standpoint, so request
   * will complete with
   * [browserContext.on('requestfinished')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request-finished)
   * event and not with
   * [browserContext.on('requestfailed')](https://playwright.dev/docs/api/class-browsercontext#browser-context-event-request-failed).
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'request'
                  TypeReference
                    Identifier: ' Request'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'request'
                TypeReference
                  Identifier: ' Request'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a request finishes successfully after downloading the response body. For a successful response, the
   * sequence of events is `request`, `response` and `requestfinished`. To listen for successful requests from a
   * particular page, use
   * [page.on('requestfinished')](https://playwright.dev/docs/api/class-page#page-event-request-finished).
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'request'
                  TypeReference
                    Identifier: ' Request'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'request'
                TypeReference
                  Identifier: ' Request'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * Emitted when [response] status and headers are received for a request. For a successful response, the sequence of
   * events is `request`, `response` and `requestfinished`. To listen for response events from a particular page, use
   * [page.on('response')](https://playwright.dev/docs/api/class-page#page-event-response).
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'response'
                  TypeReference
                    Identifier: ' Response'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'response'
                TypeReference
                  Identifier: ' Response'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Service workers are only supported on Chromium-based browsers.
   *
   * Emitted when new service worker is created in the context.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'worker'
                  TypeReference
                    Identifier: ' Worker'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'worker'
                TypeReference
                  Identifier: ' Worker'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Worker'
    MethodSignature
      Identifier: '

  /**
   * Emitted when exception is unhandled in any of the pages in this context. To listen for errors from a particular
   * page, use [page.on('pageerror')](https://playwright.dev/docs/api/class-page#page-event-page-error) instead.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'webError'
                  TypeReference
                    Identifier: ' WebError'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'webError'
                TypeReference
                  Identifier: ' WebError'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'WebError'
    PropertySignature
      Identifier: '


  /**
   * Playwright has ability to mock clock and passage of time.
   */
  clock'
      TypeReference
        Identifier: ' Clock'
    PropertySignature
      Identifier: '

  /**
   * API testing helper associated with this context. Requests made with this API will use context cookies.
   */
  request'
      TypeReference
        Identifier: ' APIRequestContext'
    PropertySignature
      Identifier: '

  tracing'
      TypeReference
        Identifier: ' Tracing'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Browser'
    MethodSignature
      Identifier: '
  /**
   * Removes all the listeners of the given type (or all registered listeners if no type given). Allows to wait for
   * async listeners to complete or to ignore subsequent errors from these listeners.
   * @param type
   * @param options
   */
  removeAllListeners'
      Parameter
        Identifier: 'type'
        QuestionToken
        StringKeyword
      ThisType
    MethodSignature
      Identifier: '
  /**
   * Removes all the listeners of the given type (or all registered listeners if no type given). Allows to wait for
   * async listeners to complete or to ignore subsequent errors from these listeners.
   * @param type
   * @param options
   */
  removeAllListeners'
      Parameter
        Identifier: 'type'
        UnionType
          StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Specifies whether to wait for already running listeners and what to do if they throw errors:
     * - `'default'` - do not wait for current listener calls (if any) to finish, if the listener throws, it may result in unhandled error
     * - `'wait'` - wait for current listener calls (if any) to finish
     * - `'ignoreErrors'` - do not wait for current listener calls (if any) to finish, all errors thrown by the listeners after removal are silently caught
     */
    behavior'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Emitted when Browser gets disconnected from the browser application. This might happen because of one of the
   * following:
   * - Browser application is closed or crashed.
   * - The [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close) method was called.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browser'
            TypeReference
              Identifier: ' Browser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browser'
            TypeReference
              Identifier: ' Browser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when Browser gets disconnected from the browser application. This might happen because of one of the
   * following:
   * - Browser application is closed or crashed.
   * - The [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close) method was called.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browser'
            TypeReference
              Identifier: ' Browser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browser'
            TypeReference
              Identifier: ' Browser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browser'
            TypeReference
              Identifier: ' Browser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when Browser gets disconnected from the browser application. This might happen because of one of the
   * following:
   * - Browser application is closed or crashed.
   * - The [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close) method was called.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'browser'
            TypeReference
              Identifier: ' Browser'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Get the browser type (chromium, firefox or webkit) that the browser belongs to.
   */
  browserType'
      TypeReference
        Identifier: ' BrowserType'
    MethodSignature
      Identifier: '

  /**
   * In case this browser is obtained using
   * [browserType.launch([options])](https://playwright.dev/docs/api/class-browsertype#browser-type-launch), closes the
   * browser and all of its pages (if any were opened).
   *
   * In case this browser is connected to, clears all created contexts belonging to this browser and disconnects from
   * the browser server.
   *
   * **NOTE** This is similar to force quitting the browser. Therefore, you should call
   * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) on
   * any {@link BrowserContext}'s you explicitly created earlier with
   * [browser.newContext([options])](https://playwright.dev/docs/api/class-browser#browser-new-context) **before**
   * calling [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close).
   *
   * The {@link Browser} object itself is considered to be disposed and cannot be used anymore.
   * @param options
   */
  close'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The reason to be reported to the operations interrupted by the browser closure.
     */
    reason'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts.
   *
   * **Usage**
   *
   * ```js
   * const browser = await pw.webkit.launch();
   * console.log(browser.contexts().length); // prints `0`
   *
   * const context = await browser.newContext();
   * console.log(browser.contexts().length); // prints `1`
   * ```
   *
   */
  contexts'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'BrowserContext'
    MethodSignature
      Identifier: '

  /**
   * Indicates that the browser is connected.
   */
  isConnected'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** CDP Sessions are only supported on Chromium-based browsers.
   *
   * Returns the newly created browser session.
   */
  newBrowserCDPSession'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'CDPSession'
    MethodSignature
      Identifier: '

  /**
   * Creates a new browser context. It won't share cookies/cache with other browser contexts.
   *
   * **NOTE** If directly using this method to create {@link BrowserContext}s, it is best practice to explicitly close
   * the returned context via
   * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) when
   * your code is done with the {@link BrowserContext}, and before calling
   * [browser.close([options])](https://playwright.dev/docs/api/class-browser#browser-close). This will ensure the
   * `context` is closed gracefully and any artifacts—like HARs and videos—are fully flushed and saved.
   *
   * **Usage**
   *
   * ```js
   * (async () => {
   *   const browser = await playwright.firefox.launch();  // Or 'chromium' or 'webkit'.
   *   // Create a new incognito browser context.
   *   const context = await browser.newContext();
   *   // Create a new page in a pristine context.
   *   const page = await context.newPage();
   *   await page.goto('https://example.com');
   *
   *   // Gracefully close up everything
   *   await context.close();
   *   await browser.close();
   * })();
   * ```
   *
   * @param options
   */
  newContext'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' BrowserContextOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'BrowserContext'
    MethodSignature
      Identifier: '

  /**
   * Creates a new page in a new browser context. Closing this page will close the context as well.
   *
   * This is a convenience API that should only be used for the single-page scenarios and short snippets. Production
   * code and testing frameworks should explicitly create
   * [browser.newContext([options])](https://playwright.dev/docs/api/class-browser#browser-new-context) followed by the
   * [browserContext.newPage()](https://playwright.dev/docs/api/class-browsercontext#browser-context-new-page) to
   * control their exact life times.
   * @param options
   */
  newPage'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.
     */
    acceptDownloads'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When using [page.goto(url[, options])](https://playwright.dev/docs/api/class-page#page-goto),
     * [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route),
     * [page.waitForURL(url[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-url),
     * [page.waitForRequest(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-request),
     * or
     * [page.waitForResponse(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-response)
     * it takes the base URL in consideration by using the
     * [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL.
     * Unset by default. Examples:
     * - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
     * - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in
     *   `http://localhost:3000/foo/bar.html`
     * - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in
     *   `http://localhost:3000/bar.html`
     */
    baseURL'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Toggles bypassing page's Content-Security-Policy. Defaults to `false`.
     */
    bypassCSP'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * TLS Client Authentication allows the server to request a client certificate and verify it.
     *
     * **Details**
     *
     * An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`,
     * a single `pfxPath`, or their corresponding direct value equivalents (`cert` and `key`, or `pfx`). Optionally,
     * `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided
     * with an exact match to the request origin that the certificate is valid for.
     *
     * **NOTE** Using Client Certificates in combination with Proxy Servers is not supported.
     *
     * **NOTE** When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it
     * work by replacing `localhost` with `local.playwright`.
     */
    clientCertificates'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
       * Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.
       */
      origin'
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Path to the file with the certificate in PEM format.
       */
      certPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the certificate in PEM format.
       */
      cert'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Path to the file with the private key in PEM format.
       */
      keyPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the private key in PEM format.
       */
      key'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Path to the PFX or PKCS12 encoded private key and certificate chain.
       */
      pfxPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the PFX or PKCS12 encoded private key and certificate chain.
       */
      pfx'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Passphrase for the private key (PEM or PFX).
       */
      passphrase'
                  QuestionToken
                  StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'light'`.
     */
    colorScheme'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about
     * [emulating devices with device scale factor](https://playwright.dev/docs/emulation#devices).
     */
    deviceScaleFactor'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * An object containing additional HTTP headers to be sent with every request. Defaults to none.
     */
    extraHTTPHeaders'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'none'`.
     */
    forcedColors'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    geolocation'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Latitude between -90 and 90.
       */
      latitude'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Longitude between -180 and 180.
       */
      longitude'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Non-negative accuracy value. Defaults to `0`.
       */
      accuracy'
                QuestionToken
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Specifies if viewport supports touch events. Defaults to false. Learn more about
     * [mobile emulation](https://playwright.dev/docs/emulation#devices).
     */
    hasTouch'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no
     * origin is specified, the username and password are sent to any servers upon unauthorized responses.
     */
    httpCredentials'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      username'
                StringKeyword
              PropertySignature
                Identifier: '

      password'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Restrain sending http credentials on specific origin (scheme://host:port).
       */
      origin'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * This option only applies to the requests sent from corresponding {@link APIRequestContext} and does not affect
       * requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be
       * sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response
       * with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.
       */
      send'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device,
     * so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more
     * about [mobile emulation](https://playwright.dev/docs/emulation#ismobile).
     */
    isMobile'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about
     * [disabling JavaScript](https://playwright.dev/docs/emulation#javascript-enabled).
     */
    javaScriptEnabled'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value,
     * `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default
     * locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/emulation#locale--timezone).
     */
    locale'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Logger sink for Playwright logging.
     */
    logger'
            QuestionToken
            TypeReference
              Identifier: ' Logger'
          PropertySignature
            Identifier: '

    /**
     * Whether to emulate network being offline. Defaults to `false`. Learn more about
     * [network emulation](https://playwright.dev/docs/emulation#offline).
     */
    offline'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A list of permissions to grant to all pages in this context. See
     * [browserContext.grantPermissions(permissions[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-grant-permissions)
     * for more details. Defaults to none.
     */
    permissions'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Network proxy settings to use with this context. Defaults to none.
     */
    proxy'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
       * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
       */
      server'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
       */
      bypass'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional username to use if HTTP proxy requires authentication.
       */
      username'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional password to use if HTTP proxy requires authentication.
       */
      password'
                QuestionToken
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file.
     * If not specified, the HAR is not recorded. Make sure to await
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
     * the HAR to be saved.
     */
    recordHar'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use
       * `content` policy instead.
       */
      omitContent'
                QuestionToken
                BooleanKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional setting to control resource content management. If `omit` is specified, content is not persisted. If
       * `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is
       * specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output
       * files and to `embed` for all other file extensions.
       */
      content'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
              PropertySignature
                Identifier: '

      /**
       * Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by
       * default.
       */
      path'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page,
       * cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.
       */
      mode'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
              PropertySignature
                Identifier: '

      /**
       * A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was
       * provided and the passed URL is a path, it gets merged via the
       * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.
       */
      urlFilter'
                QuestionToken
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded.
     * Make sure to await
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
     * videos to be saved.
     */
    recordVideo'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Path to the directory to put videos into.
       */
      dir'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to
       * fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of
       * each page will be scaled down if necessary to fit the specified size.
       */
      size'
                QuestionToken
                TypeLiteral
                  PropertySignature
                    Identifier: '
        /**
         * Video frame width.
         */
        width'
                    NumberKeyword
                  PropertySignature
                    Identifier: '

        /**
         * Video frame height.
         */
        height'
                    NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.
     */
    reducedMotion'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the
     * `viewport` is set.
     */
    screen'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * page width in pixels.
       */
      width'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * page height in pixels.
       */
      height'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to allow sites to register Service workers. Defaults to `'allow'`.
     * - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be
     *   registered.
     * - `'block'`: Playwright will block all registration of Service Workers.
     */
    serviceWorkers'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Learn more about [storage state and auth](https://playwright.dev/docs/auth).
     *
     * Populates context with given storage state. This option can be used to initialize context with logged-in
     * information obtained via
     * [browserContext.storageState([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-storage-state).
     */
    storageState'
            QuestionToken
            UnionType
              StringKeyword
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
       * Cookies to set for context
       */
      cookies'
                  TypeReference
                    Identifier: ' Array'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
        name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        value'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        /**
         * Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like
         * this: ".example.com"
         */
        domain'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        /**
         * Domain and path are required
         */
        path'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        /**
         * Unix time in seconds.
         */
        expires'
                        NumberKeyword
                      PropertySignature
                        Identifier: '

        httpOnly'
                        BooleanKeyword
                      PropertySignature
                        Identifier: '

        secure'
                        BooleanKeyword
                      PropertySignature
                        Identifier: '

        /**
         * sameSite flag
         */
        sameSite'
                        UnionType
                          LiteralType
                            StringLiteral
                          LiteralType
                            StringLiteral
                          LiteralType
                            StringLiteral
                PropertySignature
                  Identifier: '

      /**
       * localStorage to set for context
       */
      origins'
                  TypeReference
                    Identifier: ' Array'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
        origin'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        localStorage'
                        TypeReference
                          Identifier: ' Array'
                          TypeLiteral
                            PropertySignature
                              Identifier: '
          name'
                              StringKeyword
                            PropertySignature
                              Identifier: '

          value'
                              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on
     * selectors that imply single target DOM element will throw when more than one element matches the selector. This
     * option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See {@link Locator} to
     * learn more about the strict mode.
     */
    strictSelectors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Changes the timezone of the context. See
     * [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)
     * for a list of supported timezone IDs. Defaults to the system timezone.
     */
    timezoneId'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Specific user agent to use in this context.
     */
    userAgent'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated Use `recordVideo` instead.
     */
    videoSize'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Video frame width.
       */
      width'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Video frame height.
       */
      height'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated Use `recordVideo` instead.
     */
    videosPath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent
     * viewport emulation. Learn more about [viewport emulation](https://playwright.dev/docs/emulation#viewport).
     *
     * **NOTE** The `null` value opts out from the default presets, makes viewport depend on the host window size defined
     * by the operating system. It makes the execution of the tests non-deterministic.
     */
    viewport'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
       * page width in pixels.
       */
      width'
                  NumberKeyword
                PropertySignature
                  Identifier: '

      /**
       * page height in pixels.
       */
      height'
                  NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** This API controls
   * [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level
   * chromium-specific debugging tool. API to control [Playwright Tracing](https://playwright.dev/docs/trace-viewer) could be found
   * [here](https://playwright.dev/docs/api/class-tracing).
   *
   * You can use
   * [browser.startTracing([page, options])](https://playwright.dev/docs/api/class-browser#browser-start-tracing) and
   * [browser.stopTracing()](https://playwright.dev/docs/api/class-browser#browser-stop-tracing) to create a trace file
   * that can be opened in Chrome DevTools performance panel.
   *
   * **Usage**
   *
   * ```js
   * await browser.startTracing(page, { path: 'trace.json' });
   * await page.goto('https://www.google.com');
   * await browser.stopTracing();
   * ```
   *
   * @param page Optional, if specified, tracing includes screenshots of the given page.
   * @param options
   */
  startTracing'
      Parameter
        Identifier: 'page'
        QuestionToken
        TypeReference
          Identifier: ' Page'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * specify custom categories to use instead of default.
     */
    categories'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * A path to write the trace file to.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * captures screenshots in the trace.
     */
    screenshots'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** This API controls
   * [Chromium Tracing](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) which is a low-level
   * chromium-specific debugging tool. API to control [Playwright Tracing](https://playwright.dev/docs/trace-viewer) could be found
   * [here](https://playwright.dev/docs/api/class-tracing).
   *
   * Returns the buffer with trace data.
   */
  stopTracing'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * Returns the browser version.
   */
  version'
      StringKeyword
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Worker'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction`.
   *
   * If the function passed to the
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) returns a
   * [Promise], then
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) would wait for
   * the promise to resolve and return its value.
   *
   * If the function passed to the
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) returns a
   * non-[Serializable] value, then
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) returns
   * `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`:
   * `-0`, `NaN`, `Infinity`, `-Infinity`.
   * @param pageFunction Function to be evaluated in the worker context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          TypeReference
            Identifier: 'Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction`.
   *
   * If the function passed to the
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) returns a
   * [Promise], then
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) would wait for
   * the promise to resolve and return its value.
   *
   * If the function passed to the
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) returns a
   * non-[Serializable] value, then
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) returns
   * `undefined`. Playwright also supports transferring some additional values that are not serializable by `JSON`:
   * `-0`, `NaN`, `Infinity`, `-Infinity`.
   * @param pageFunction Function to be evaluated in the worker context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Returns the return value of `pageFunction` as a {@link JSHandle}.
   *
   * The only difference between
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) and
   * [worker.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate-handle)
   * is that
   * [worker.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate-handle)
   * returns {@link JSHandle}.
   *
   * If the function passed to the
   * [worker.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate-handle)
   * returns a [Promise], then
   * [worker.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate-handle)
   * would wait for the promise to resolve and return its value.
   * @param pageFunction Function to be evaluated in the worker context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          TypeReference
            Identifier: 'Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction` as a {@link JSHandle}.
   *
   * The only difference between
   * [worker.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate) and
   * [worker.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate-handle)
   * is that
   * [worker.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate-handle)
   * returns {@link JSHandle}.
   *
   * If the function passed to the
   * [worker.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate-handle)
   * returns a [Promise], then
   * [worker.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-worker#worker-evaluate-handle)
   * would wait for the promise to resolve and return its value.
   * @param pageFunction Function to be evaluated in the worker context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunction'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Emitted when this dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is
   * terminated.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when this dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is
   * terminated.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when this dedicated [WebWorker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) is
   * terminated.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'worker'
            TypeReference
              Identifier: ' Worker'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  url'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSHandle'
    TypeParameter
      Identifier: 'T'
      AnyKeyword
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction`.
   *
   * This method passes this handle as the first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then `handle.evaluate` would wait for the promise to resolve and return its
   * value.
   *
   * **Usage**
   *
   * ```js
   * const tweetHandle = await page.$('.tweet .retweets');
   * expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10 retweets');
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' O'
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'O'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction`.
   *
   * This method passes this handle as the first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then `handle.evaluate` would wait for the promise to resolve and return its
   * value.
   *
   * **Usage**
   *
   * ```js
   * const tweetHandle = await page.$('.tweet .retweets');
   * expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10 retweets');
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' O'
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'O'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Returns the return value of `pageFunction` as a {@link JSHandle}.
   *
   * This method passes this handle as the first argument to `pageFunction`.
   *
   * The only difference between `jsHandle.evaluate` and `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle`
   * returns {@link JSHandle}.
   *
   * If the function passed to the `jsHandle.evaluateHandle` returns a [Promise], then `jsHandle.evaluateHandle` would
   * wait for the promise to resolve and return its value.
   *
   * See [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) for
   * more details.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' O'
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'O'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction` as a {@link JSHandle}.
   *
   * This method passes this handle as the first argument to `pageFunction`.
   *
   * The only difference between `jsHandle.evaluate` and `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle`
   * returns {@link JSHandle}.
   *
   * If the function passed to the `jsHandle.evaluateHandle` returns a [Promise], then `jsHandle.evaluateHandle` would
   * wait for the promise to resolve and return its value.
   *
   * See [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) for
   * more details.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' O'
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'O'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Returns a JSON representation of the object. If the object has a `toJSON` function, it **will not be called**.
   *
   * **NOTE** The method will return an empty JSON object if the referenced object is not stringifiable. It will throw
   * an error if the object has circular references.
   */
  jsonValue'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '
  /**
   * Returns either `null` or the object handle itself, if the object handle is an instance of {@link ElementHandle}.
   */
  asElement'
      ConditionalType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' Node'
        TypeReference
          Identifier: ' ElementHandle'
          TypeReference
            Identifier: 'T'
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '
  /**
   * The `jsHandle.dispose` method stops referencing the element handle.
   */
  dispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * The method returns a map with **own property names** as keys and JSHandle instances for the property values.
   *
   * **Usage**
   *
   * ```js
   * const handle = await page.evaluateHandle(() => ({ window, document }));
   * const properties = await handle.getProperties();
   * const windowHandle = properties.get('window');
   * const documentHandle = properties.get('document');
   * await handle.dispose();
   * ```
   *
   */
  getProperties'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Map'
          StringKeyword
          TypeReference
            Identifier: ' JSHandle'
    MethodSignature
      Identifier: '

  /**
   * Fetches a single property from the referenced object.
   * @param propertyName property to get
   */
  getProperty'
      Parameter
        Identifier: 'propertyName'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'JSHandle'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ElementHandle'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: 'Node'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSHandle'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use locator-based [page.locator(selector[, options])](https://playwright.dev/docs/api/class-page#page-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The method finds an element matching the specified selector in the `ElementHandle`'s subtree. If no elements match
   * the selector, returns `null`.
   * @param selector A selector to query for.
   */
  $'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' strict'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use locator-based [page.locator(selector[, options])](https://playwright.dev/docs/api/class-page#page-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The method finds an element matching the specified selector in the `ElementHandle`'s subtree. If no elements match
   * the selector, returns `null`.
   * @param selector A selector to query for.
   */
  $'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' strict'
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [page.locator(selector[, options])](https://playwright.dev/docs/api/class-page#page-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The method finds all elements matching the specified selector in the `ElementHandle`s subtree. If no elements match
   * the selector, returns empty array.
   * @param selector A selector to query for.
   */
  $$'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use locator-based [page.locator(selector[, options])](https://playwright.dev/docs/api/class-page#page-locator)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The method finds all elements matching the specified selector in the `ElementHandle`s subtree. If no elements match
   * the selector, returns empty array.
   * @param selector A selector to query for.
   */
  $$'
      Parameter
        Identifier: 'selector'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests.
   * Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds an element matching the specified selector in the `ElementHandle`s subtree and passes it as a
   * first argument to `pageFunction`. If no elements match the selector, the method throws an error.
   *
   * If `pageFunction` returns a [Promise], then
   * [elementHandle.$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-elementhandle#element-handle-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const tweetHandle = await page.$('.tweet');
   * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
   * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          IndexedAccessType
            TypeReference
              Identifier: 'HTMLElementTagNameMap'
            TypeReference
              Identifier: 'K'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests.
   * Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds an element matching the specified selector in the `ElementHandle`s subtree and passes it as a
   * first argument to `pageFunction`. If no elements match the selector, the method throws an error.
   *
   * If `pageFunction` returns a [Promise], then
   * [elementHandle.$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-elementhandle#element-handle-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const tweetHandle = await page.$('.tweet');
   * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
   * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests.
   * Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds an element matching the specified selector in the `ElementHandle`s subtree and passes it as a
   * first argument to `pageFunction`. If no elements match the selector, the method throws an error.
   *
   * If `pageFunction` returns a [Promise], then
   * [elementHandle.$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-elementhandle#element-handle-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const tweetHandle = await page.$('.tweet');
   * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
   * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          IndexedAccessType
            TypeReference
              Identifier: 'HTMLElementTagNameMap'
            TypeReference
              Identifier: 'K'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** This method does not wait for the element to pass actionability checks and therefore can lead to the flaky tests.
   * Use
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate),
   * other {@link Locator} helper methods or web-first assertions instead.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds an element matching the specified selector in the `ElementHandle`s subtree and passes it as a
   * first argument to `pageFunction`. If no elements match the selector, the method throws an error.
   *
   * If `pageFunction` returns a [Promise], then
   * [elementHandle.$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-elementhandle#element-handle-eval-on-selector)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```js
   * const tweetHandle = await page.$('.tweet');
   * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
   * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds all elements matching the specified selector in the `ElementHandle`'s subtree and passes an array
   * of matched elements as a first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [elementHandle.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-elementhandle#element-handle-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```html
   * <div class="feed">
   *   <div class="tweet">Hello!</div>
   *   <div class="tweet">Hi!</div>
   * </div>
   * ```
   *
   * ```js
   * const feedHandle = await page.$('.feed');
   * expect(await feedHandle.$$eval('.tweet', nodes =>
   *   nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!'],
   * );
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: 'HTMLElementTagNameMap'
              TypeReference
                Identifier: 'K'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds all elements matching the specified selector in the `ElementHandle`'s subtree and passes an array
   * of matched elements as a first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [elementHandle.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-elementhandle#element-handle-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```html
   * <div class="feed">
   *   <div class="tweet">Hello!</div>
   *   <div class="tweet">Hi!</div>
   * </div>
   * ```
   *
   * ```js
   * const feedHandle = await page.$('.feed');
   * expect(await feedHandle.$$eval('.tweet', nodes =>
   *   nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!'],
   * );
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            TypeReference
              Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds all elements matching the specified selector in the `ElementHandle`'s subtree and passes an array
   * of matched elements as a first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [elementHandle.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-elementhandle#element-handle-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```html
   * <div class="feed">
   *   <div class="tweet">Hello!</div>
   *   <div class="tweet">Hi!</div>
   * </div>
   * ```
   *
   * ```js
   * const feedHandle = await page.$('.feed');
   * expect(await feedHandle.$$eval('.tweet', nodes =>
   *   nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!'],
   * );
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      TypeParameter
        Identifier: ' R'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: 'HTMLElementTagNameMap'
              TypeReference
                Identifier: 'K'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** In most cases,
   * [locator.evaluateAll(pageFunction[, arg])](https://playwright.dev/docs/api/class-locator#locator-evaluate-all),
   * other {@link Locator} helper methods and web-first assertions do a better job.
   *
   * Returns the return value of `pageFunction`.
   *
   * The method finds all elements matching the specified selector in the `ElementHandle`'s subtree and passes an array
   * of matched elements as a first argument to `pageFunction`.
   *
   * If `pageFunction` returns a [Promise], then
   * [elementHandle.$$eval(selector, pageFunction[, arg])](https://playwright.dev/docs/api/class-elementhandle#element-handle-eval-on-selector-all)
   * would wait for the promise to resolve and return its value.
   *
   * **Usage**
   *
   * ```html
   * <div class="feed">
   *   <div class="tweet">Hello!</div>
   *   <div class="tweet">Hi!</div>
   * </div>
   * ```
   *
   * ```js
   * const feedHandle = await page.$('.feed');
   * expect(await feedHandle.$$eval('.tweet', nodes =>
   *   nodes.map(n => n.innerText))).toEqual(['Hello!', 'Hi!'],
   * );
   * ```
   *
   * @param selector A selector to query for.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  $$eval'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            TypeReference
              Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead.
   *
   * Returns element specified by selector when it satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * Wait for the `selector` relative to the element handle to satisfy `state` option (either appear/disappear from dom,
   * or become visible/hidden). If at the moment of calling the method `selector` already satisfies the condition, the
   * method will return immediately. If the selector doesn't satisfy the condition for the `timeout` milliseconds, the
   * function will throw.
   *
   * **Usage**
   *
   * ```js
   * await page.setContent(`<div><span></span></div>`);
   * const div = await page.$('div');
   * // Waiting for the 'span' selector relative to the div.
   * const span = await div.waitForSelector('span', { state: 'attached' });
   * ```
   *
   * **NOTE** This method does not work across navigations, use
   * [page.waitForSelector(selector[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-selector)
   * instead.
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' ElementHandleWaitForSelectorOptionsNotHidden'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandleForTag'
          TypeReference
            Identifier: 'K'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead.
   *
   * Returns element specified by selector when it satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * Wait for the `selector` relative to the element handle to satisfy `state` option (either appear/disappear from dom,
   * or become visible/hidden). If at the moment of calling the method `selector` already satisfies the condition, the
   * method will return immediately. If the selector doesn't satisfy the condition for the `timeout` milliseconds, the
   * function will throw.
   *
   * **Usage**
   *
   * ```js
   * await page.setContent(`<div><span></span></div>`);
   * const div = await page.$('div');
   * // Waiting for the 'span' selector relative to the div.
   * const span = await div.waitForSelector('span', { state: 'attached' });
   * ```
   *
   * **NOTE** This method does not work across navigations, use
   * [page.waitForSelector(selector[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-selector)
   * instead.
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' ElementHandleWaitForSelectorOptionsNotHidden'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElementHandle'
          UnionType
            TypeReference
              Identifier: 'SVGElement'
            TypeReference
              Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead.
   *
   * Returns element specified by selector when it satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * Wait for the `selector` relative to the element handle to satisfy `state` option (either appear/disappear from dom,
   * or become visible/hidden). If at the moment of calling the method `selector` already satisfies the condition, the
   * method will return immediately. If the selector doesn't satisfy the condition for the `timeout` milliseconds, the
   * function will throw.
   *
   * **Usage**
   *
   * ```js
   * await page.setContent(`<div><span></span></div>`);
   * const div = await page.$('div');
   * // Waiting for the 'span' selector relative to the div.
   * const span = await div.waitForSelector('span', { state: 'attached' });
   * ```
   *
   * **NOTE** This method does not work across navigations, use
   * [page.waitForSelector(selector[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-selector)
   * instead.
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' HTMLElementTagNameMap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' ElementHandleWaitForSelectorOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          TypeReference
            Identifier: 'ElementHandleForTag'
            TypeReference
              Identifier: 'K'
          LiteralType
            NullKeyword
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Use web assertions that assert visibility or a locator-based
   * [locator.waitFor([options])](https://playwright.dev/docs/api/class-locator#locator-wait-for) instead.
   *
   * Returns element specified by selector when it satisfies `state` option. Returns `null` if waiting for `hidden` or
   * `detached`.
   *
   * Wait for the `selector` relative to the element handle to satisfy `state` option (either appear/disappear from dom,
   * or become visible/hidden). If at the moment of calling the method `selector` already satisfies the condition, the
   * method will return immediately. If the selector doesn't satisfy the condition for the `timeout` milliseconds, the
   * function will throw.
   *
   * **Usage**
   *
   * ```js
   * await page.setContent(`<div><span></span></div>`);
   * const div = await page.$('div');
   * // Waiting for the 'span' selector relative to the div.
   * const span = await div.waitForSelector('span', { state: 'attached' });
   * ```
   *
   * **NOTE** This method does not work across navigations, use
   * [page.waitForSelector(selector[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-selector)
   * instead.
   * @param selector A selector to query for.
   * @param options
   */
  waitForSelector'
      Parameter
        Identifier: 'selector'
        StringKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' ElementHandleWaitForSelectorOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '
  /**
   * This method returns the bounding box of the element, or `null` if the element is not visible. The bounding box is
   * calculated relative to the main frame viewport - which is usually the same as the browser window.
   *
   * Scrolling affects the returned bounding box, similarly to
   * [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).
   * That means `x` and/or `y` may be negative.
   *
   * Elements from child frames return the bounding box relative to the main frame, unlike the
   * [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).
   *
   * Assuming the page is static, it is safe to use bounding box coordinates to perform input. For example, the
   * following snippet should click the center of the element.
   *
   * **Usage**
   *
   * ```js
   * const box = await elementHandle.boundingBox();
   * await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);
   * ```
   *
   */
  boundingBox'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * the x coordinate of the element in pixels.
     */
    x'
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * the y coordinate of the element in pixels.
     */
    y'
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * the width of the element in pixels.
     */
    width'
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * the height of the element in pixels.
     */
    height'
              NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.check([options])](https://playwright.dev/docs/api/class-locator#locator-check) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method checks the element by performing the following steps:
   * 1. Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already
   *    checked, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now checked. If not, this method throws.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param options
   */
  check'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.click([options])](https://playwright.dev/docs/api/class-locator#locator-click) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method clicks the element by performing the following steps:
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element, or the specified `position`.
   * 1. Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param options
   */
  click'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * defaults to 1. See [UIEvent.detail].
     */
    clickCount'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You
     * can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as
     * navigating to inaccessible pages. Defaults to `false`.
     * @deprecated This option will default to `true` in the future.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the content frame for element handles referencing iframe nodes, or `null` otherwise
   */
  contentFrame'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.dblclick([options])](https://playwright.dev/docs/api/class-locator#locator-dblclick)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method double clicks the element by performing the following steps:
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to double click in the center of the
   *    element, or the specified `position`.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **NOTE** `elementHandle.dblclick()` dispatches two `click` events and a single `dblclick` event.
   * @param options
   */
  dblclick'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.dispatchEvent(type[, eventInit, options])](https://playwright.dev/docs/api/class-locator#locator-dispatch-event)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * The snippet below dispatches the `click` event on the element. Regardless of the visibility state of the element,
   * `click` is dispatched. This is equivalent to calling
   * [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).
   *
   * **Usage**
   *
   * ```js
   * await elementHandle.dispatchEvent('click');
   * ```
   *
   * Under the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit`
   * properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.
   *
   * Since `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:
   * - [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
   * - [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
   * - [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
   * - [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
   * - [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
   * - [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
   * - [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
   * - [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
   * - [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
   * - [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)
   *
   * You can also specify `JSHandle` as the property value if you want live objects to be passed into the event:
   *
   * ```js
   * // Note you can only create DataTransfer in Chromium and Firefox
   * const dataTransfer = await page.evaluateHandle(() => new DataTransfer());
   * await elementHandle.dispatchEvent('dragstart', { dataTransfer });
   * ```
   *
   * @param type DOM event type: `"click"`, `"dragstart"`, etc.
   * @param eventInit Optional event-specific initialization properties.
   */
  dispatchEvent'
      Parameter
        Identifier: 'type'
        StringKeyword
      Parameter
        Identifier: ' eventInit'
        QuestionToken
        TypeReference
          Identifier: ' EvaluationArgument'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, focuses the element, fills it and triggers an
   * `input` event after filling. Note that you can pass an empty string to clear the input field.
   *
   * If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an
   * error. However, if the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled
   * instead.
   *
   * To send fine-grained keyboard events, use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   * @param value Value to set for the `<input>`, `<textarea>` or `[contenteditable]` element.
   * @param options
   */
  fill'
      Parameter
        Identifier: 'value'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.focus([options])](https://playwright.dev/docs/api/class-locator#locator-focus) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Calls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the element.
   */
  focus'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.getAttribute(name[, options])](https://playwright.dev/docs/api/class-locator#locator-get-attribute)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns element attribute value.
   * @param name Attribute name to get the value for.
   */
  getAttribute'
      Parameter
        Identifier: 'name'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.hover([options])](https://playwright.dev/docs/api/class-locator#locator-hover) instead.
   * Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method hovers over the element by performing the following steps:
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to hover over the center of the
   *    element, or the specified `position`.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param options
   */
  hover'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.innerHTML([options])](https://playwright.dev/docs/api/class-locator#locator-inner-html)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns the `element.innerHTML`.
   */
  innerHTML'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.innerText([options])](https://playwright.dev/docs/api/class-locator#locator-inner-text)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns the `element.innerText`.
   */
  innerText'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.inputValue([options])](https://playwright.dev/docs/api/class-locator#locator-input-value) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns `input.value` for the selected `<input>` or `<textarea>` or `<select>` element.
   *
   * Throws for non-input elements. However, if the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the
   * control.
   * @param options
   */
  inputValue'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isChecked([options])](https://playwright.dev/docs/api/class-locator#locator-is-checked)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is checked. Throws if the element is not a checkbox or radio input.
   */
  isChecked'
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.isDisabled([options])](https://playwright.dev/docs/api/class-locator#locator-is-disabled) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is disabled, the opposite of [enabled](https://playwright.dev/docs/actionability#enabled).
   */
  isDisabled'
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.isEditable([options])](https://playwright.dev/docs/api/class-locator#locator-is-editable) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is [editable](https://playwright.dev/docs/actionability#editable).
   */
  isEditable'
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isEnabled([options])](https://playwright.dev/docs/api/class-locator#locator-is-enabled)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is [enabled](https://playwright.dev/docs/actionability#enabled).
   */
  isEnabled'
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isHidden([options])](https://playwright.dev/docs/api/class-locator#locator-is-hidden)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is hidden, the opposite of [visible](https://playwright.dev/docs/actionability#visible).
   */
  isHidden'
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.isVisible([options])](https://playwright.dev/docs/api/class-locator#locator-is-visible)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns whether the element is [visible](https://playwright.dev/docs/actionability#visible).
   */
  isVisible'
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the frame containing the given element.
   */
  ownerFrame'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Frame'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.press(key[, options])](https://playwright.dev/docs/api/class-locator#locator-press)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Focuses the element, and then uses
   * [keyboard.down(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-down) and
   * [keyboard.up(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-up).
   *
   * `key` can specify the intended
   * [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character
   * to generate the text for. A superset of the `key` values can be found
   * [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:
   *
   * `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`,
   * `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`,
   * etc.
   *
   * Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`,
   * `ControlOrMeta`.
   *
   * Holding down `Shift` will type the text that corresponds to the `key` in the upper case.
   *
   * If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective
   * texts.
   *
   * Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When
   * specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.
   * @param key Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.
   * @param options
   */
  press'
      Parameter
        Identifier: 'key'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You
     * can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as
     * navigating to inaccessible pages. Defaults to `false`.
     * @deprecated This option will default to `true` in the future.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.screenshot([options])](https://playwright.dev/docs/api/class-locator#locator-screenshot)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method captures a screenshot of the page, clipped to the size and position of this particular element. If the
   * element is covered by other elements, it will not be actually visible on the screenshot. If the element is a
   * scrollable container, only the currently scrolled content will be visible on the screenshot.
   *
   * This method waits for the [actionability](https://playwright.dev/docs/actionability) checks, then scrolls element into view before taking
   * a screenshot. If the element is detached from DOM, the method throws an error.
   *
   * Returns the buffer with the captured screenshot.
   * @param options
   */
  screenshot'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different
     * treatment depending on their duration:
     * - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
     * - infinite animations are canceled to initial state, and then played over after the screenshot.
     *
     * Defaults to `"allow"` that leaves animations untouched.
     */
    animations'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be
     * changed.  Defaults to `"hide"`.
     */
    caret'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink
     * box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.
     */
    mask'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              TypeReference
                Identifier: 'Locator'
          PropertySignature
            Identifier: '

    /**
     * Specify the color of the overlay box for masked elements, in
     * [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.
     */
    maskColor'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images.
     * Defaults to `false`.
     */
    omitBackground'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a
     * relative path, then it is resolved relative to the current working directory. If no path is provided, the image
     * won't be saved to the disk.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * The quality of the image, between 0-100. Not applicable to `png` images.
     */
    quality'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this
     * will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so
     * screenshots of high-dpi devices will be twice as large or even larger.
     *
     * Defaults to `"device"`.
     */
    scale'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make
     * elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces
     * the Shadow DOM and applies to the inner frames.
     */
    style'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Specify screenshot type, defaults to `png`.
     */
    type'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.scrollIntoViewIfNeeded([options])](https://playwright.dev/docs/api/class-locator#locator-scroll-into-view-if-needed)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, then tries to scroll element into view, unless
   * it is completely visible as defined by
   * [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)'s `ratio`.
   *
   * Throws when `elementHandle` does not point to an element
   * [connected](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected) to a Document or a ShadowRoot.
   *
   * See [scrolling](https://playwright.dev/docs/input#scrolling) for alternative ways to scroll.
   * @param options
   */
  scrollIntoViewIfNeeded'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.selectOption(values[, options])](https://playwright.dev/docs/api/class-locator#locator-select-option)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, waits until all specified options are present in
   * the `<select>` element and selects these options.
   *
   * If the target element is not a `<select>` element, this method throws an error. However, if the element is inside
   * the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used
   * instead.
   *
   * Returns the array of option values that have been successfully selected.
   *
   * Triggers a `change` and `input` event once all the provided options have been selected.
   *
   * **Usage**
   *
   * ```js
   * // Single selection matching the value or label
   * handle.selectOption('blue');
   *
   * // single selection matching the label
   * handle.selectOption({ label: 'Blue' });
   *
   * // multiple selection
   * handle.selectOption(['red', 'green', 'blue']);
   * ```
   *
   * @param values Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise
   * only the first option matching one of the passed options is selected. String values are matching both values and
   * labels. Option is considered matching if all specified properties match.
   * @param options
   */
  selectOption'
      Parameter
        Identifier: 'values'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
          TypeReference
            Identifier: 'ElementHandle'
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Matches by `option.value`. Optional.
     */
    value'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Matches by `option.label`. Optional.
     */
    label'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Matches by the index. Optional.
     */
    index'
              QuestionToken
              NumberKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeReference
              Identifier: 'ElementHandle'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * Matches by `option.value`. Optional.
     */
    value'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * Matches by `option.label`. Optional.
     */
    label'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * Matches by the index. Optional.
     */
    index'
                QuestionToken
                NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.selectText([options])](https://playwright.dev/docs/api/class-locator#locator-select-text) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, then focuses the element and selects all its
   * text content.
   *
   * If the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), focuses and selects text in
   * the control instead.
   * @param options
   */
  selectText'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.setChecked(checked[, options])](https://playwright.dev/docs/api/class-locator#locator-set-checked)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method checks or unchecks an element by performing the following steps:
   * 1. Ensure that element is a checkbox or a radio input. If not, this method throws.
   * 1. If the element already has the right checked state, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now checked or unchecked. If not, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param checked Whether to check or uncheck the checkbox.
   * @param options
   */
  setChecked'
      Parameter
        Identifier: 'checked'
        BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.setInputFiles(files[, options])](https://playwright.dev/docs/api/class-locator#locator-set-input-files)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then
   * they are resolved relative to the current working directory. For empty array, clears the selected files. For inputs
   * with a `[webkitdirectory]` attribute, only a single directory path is supported.
   *
   * This method expects {@link ElementHandle} to point to an
   * [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside
   * the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.
   * @param files
   * @param options
   */
  setInputFiles'
      Parameter
        Identifier: 'files'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * File name
     */
    name'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File type
     */
    mimeType'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File content
     */
    buffer'
              TypeReference
                Identifier: ' Buffer'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * File name
     */
    name'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File type
     */
    mimeType'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File content
     */
    buffer'
                TypeReference
                  Identifier: ' Buffer'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.tap([options])](https://playwright.dev/docs/api/class-locator#locator-tap) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * This method taps the element by performing the following steps:
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.touchscreen](https://playwright.dev/docs/api/class-page#page-touchscreen) to tap the center of the
   *    element, or the specified `position`.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **NOTE** `elementHandle.tap()` requires that the `hasTouch` option of the browser context be set to true.
   * @param options
   */
  tap'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based
   * [locator.textContent([options])](https://playwright.dev/docs/api/class-locator#locator-text-content) instead. Read
   * more about [locators](https://playwright.dev/docs/locators).
   *
   * Returns the `node.textContent`.
   */
  textContent'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the
   * text.
   *
   * To press a special key, like `Control` or `ArrowDown`, use
   * [elementHandle.press(key[, options])](https://playwright.dev/docs/api/class-elementhandle#element-handle-press).
   *
   * **Usage**
   * @deprecated In most cases, you should use
   * [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill) instead. You only need
   * to press keys one by one if there is special keyboard handling on the page - in this case use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   * @param text A text to type into a focused element.
   * @param options
   */
  type'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between key presses in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Use locator-based [locator.uncheck([options])](https://playwright.dev/docs/api/class-locator#locator-uncheck)
   * instead. Read more about [locators](https://playwright.dev/docs/locators).
   *
   * This method checks the element by performing the following steps:
   * 1. Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already
   *    unchecked, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now unchecked. If not, this method throws.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param options
   */
  uncheck'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns when the element satisfies the `state`.
   *
   * Depending on the `state` parameter, this method waits for one of the [actionability](https://playwright.dev/docs/actionability) checks to
   * pass. This method throws when the element is detached while waiting, unless waiting for the `"hidden"` state.
   * - `"visible"` Wait until the element is [visible](https://playwright.dev/docs/actionability#visible).
   * - `"hidden"` Wait until the element is [not visible](https://playwright.dev/docs/actionability#visible) or not attached. Note that
   *   waiting for hidden does not throw when the element detaches.
   * - `"stable"` Wait until the element is both [visible](https://playwright.dev/docs/actionability#visible) and
   *   [stable](https://playwright.dev/docs/actionability#stable).
   * - `"enabled"` Wait until the element is [enabled](https://playwright.dev/docs/actionability#enabled).
   * - `"disabled"` Wait until the element is [not enabled](https://playwright.dev/docs/actionability#enabled).
   * - `"editable"` Wait until the element is [editable](https://playwright.dev/docs/actionability#editable).
   *
   * If the element does not satisfy the condition for the `timeout` milliseconds, this method will throw.
   * @param state A state to wait for, see below for more details.
   * @param options
   */
  waitForElementState'
      Parameter
        Identifier: 'state'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Locator'
    MethodSignature
      Identifier: '
  /**
   * Execute JavaScript code in the page, taking the matching element as an argument.
   *
   * **Details**
   *
   * Returns the return value of `pageFunction`, called with the matching element as a first argument, and `arg` as a
   * second argument.
   *
   * If `pageFunction` returns a [Promise], this method will wait for the promise to resolve and return its value.
   *
   * If `pageFunction` throws or rejects, this method throws.
   *
   * **Usage**
   *
   * ```js
   * const tweets = page.locator('.tweet .retweets');
   * expect(await tweets.evaluate(node => node.innerText)).toBe('10 retweets');
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Execute JavaScript code in the page, taking the matching element as an argument.
   *
   * **Details**
   *
   * Returns the return value of `pageFunction`, called with the matching element as a first argument, and `arg` as a
   * second argument.
   *
   * If `pageFunction` returns a [Promise], this method will wait for the promise to resolve and return its value.
   *
   * If `pageFunction` throws or rejects, this method throws.
   *
   * **Usage**
   *
   * ```js
   * const tweets = page.locator('.tweet .retweets');
   * expect(await tweets.evaluate(node => node.innerText)).toBe('10 retweets');
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Execute JavaScript code in the page, taking the matching element as an argument, and return a {@link JSHandle} with
   * the result.
   *
   * **Details**
   *
   * Returns the return value of `pageFunction` as a{@link JSHandle}, called with the matching element as a first
   * argument, and `arg` as a second argument.
   *
   * The only difference between
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate)
   * and
   * [locator.evaluateHandle(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate-handle)
   * is that
   * [locator.evaluateHandle(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate-handle)
   * returns {@link JSHandle}.
   *
   * If `pageFunction` returns a [Promise], this method will wait for the promise to resolve and return its value.
   *
   * If `pageFunction` throws or rejects, this method throws.
   *
   * See [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) for
   * more details.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Execute JavaScript code in the page, taking the matching element as an argument, and return a {@link JSHandle} with
   * the result.
   *
   * **Details**
   *
   * Returns the return value of `pageFunction` as a{@link JSHandle}, called with the matching element as a first
   * argument, and `arg` as a second argument.
   *
   * The only difference between
   * [locator.evaluate(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate)
   * and
   * [locator.evaluateHandle(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate-handle)
   * is that
   * [locator.evaluateHandle(pageFunction[, arg, options])](https://playwright.dev/docs/api/class-locator#locator-evaluate-handle)
   * returns {@link JSHandle}.
   *
   * If `pageFunction` returns a [Promise], this method will wait for the promise to resolve and return its value.
   *
   * If `pageFunction` throws or rejects, this method throws.
   *
   * See [page.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-page#page-evaluate-handle) for
   * more details.
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   * @param options
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Execute JavaScript code in the page, taking all matching elements as an argument.
   *
   * **Details**
   *
   * Returns the return value of `pageFunction`, called with an array of all matching elements as a first argument, and
   * `arg` as a second argument.
   *
   * If `pageFunction` returns a [Promise], this method will wait for the promise to resolve and return its value.
   *
   * If `pageFunction` throws or rejects, this method throws.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('div');
   * const moreThanTen = await locator.evaluateAll((divs, min) => divs.length > min, 10);
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateAll'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            TypeReference
              Identifier: 'E'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Execute JavaScript code in the page, taking all matching elements as an argument.
   *
   * **Details**
   *
   * Returns the return value of `pageFunction`, called with an array of all matching elements as a first argument, and
   * `arg` as a second argument.
   *
   * If `pageFunction` returns a [Promise], this method will wait for the promise to resolve and return its value.
   *
   * If `pageFunction` throws or rejects, this method throws.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('div');
   * const moreThanTen = await locator.evaluateAll((divs, min) => divs.length > min, 10);
   * ```
   *
   * @param pageFunction Function to be evaluated in the page context.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateAll'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' E'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
        UnionType
          TypeReference
            Identifier: ' SVGElement'
          TypeReference
            Identifier: ' HTMLElement'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          ArrayType
            TypeReference
              Identifier: 'E'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** Always prefer using {@link Locator}s and web assertions over {@link ElementHandle}s because latter are inherently
   * racy.
   *
   * Resolves given locator to the first matching DOM element. If there are no matching elements, waits for one. If
   * multiple elements match the locator, throws.
   * @param options
   */
  elementHandle'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'ElementHandle'
            UnionType
              TypeReference
                Identifier: 'SVGElement'
              TypeReference
                Identifier: ' HTMLElement'
    MethodSignature
      Identifier: '
  /**
   * When the locator points to a list of elements, this returns an array of locators, pointing to their respective
   * elements.
   *
   * **NOTE** [locator.all()](https://playwright.dev/docs/api/class-locator#locator-all) does not wait for elements to
   * match the locator, and instead immediately returns whatever is present in the page.  When the list of elements
   * changes dynamically, [locator.all()](https://playwright.dev/docs/api/class-locator#locator-all) will produce
   * unpredictable and flaky results.  When the list of elements is stable, but loaded dynamically, wait for the full
   * list to finish loading before calling [locator.all()](https://playwright.dev/docs/api/class-locator#locator-all).
   *
   * **Usage**
   *
   * ```js
   * for (const li of await page.getByRole('listitem').all())
   *   await li.click();
   * ```
   *
   */
  all'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'Locator'
    MethodSignature
      Identifier: '

  /**
   * Returns an array of `node.innerText` values for all matching nodes.
   *
   * **NOTE** If you need to assert text on the page, prefer
   * [expect(locator).toHaveText(expected[, options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-text)
   * with `useInnerText` option to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const texts = await page.getByRole('link').allInnerTexts();
   * ```
   *
   */
  allInnerTexts'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns an array of `node.textContent` values for all matching nodes.
   *
   * **NOTE** If you need to assert text on the page, prefer
   * [expect(locator).toHaveText(expected[, options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-text)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const texts = await page.getByRole('link').allTextContents();
   * ```
   *
   */
  allTextContents'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Creates a locator that matches both this locator and the argument locator.
   *
   * **Usage**
   *
   * The following example finds a button with a specific title.
   *
   * ```js
   * const button = page.getByRole('button').and(page.getByTitle('Subscribe'));
   * ```
   *
   * @param locator Additional locator to match.
   */
  and'
      Parameter
        Identifier: 'locator'
        TypeReference
          Identifier: ' Locator'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Calls [blur](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur) on the element.
   * @param options
   */
  blur'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method returns the bounding box of the element matching the locator, or `null` if the element is not visible.
   * The bounding box is calculated relative to the main frame viewport - which is usually the same as the browser
   * window.
   *
   * **Details**
   *
   * Scrolling affects the returned bounding box, similarly to
   * [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).
   * That means `x` and/or `y` may be negative.
   *
   * Elements from child frames return the bounding box relative to the main frame, unlike the
   * [Element.getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).
   *
   * Assuming the page is static, it is safe to use bounding box coordinates to perform input. For example, the
   * following snippet should click the center of the element.
   *
   * **Usage**
   *
   * ```js
   * const box = await page.getByRole('button').boundingBox();
   * await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);
   * ```
   *
   * @param options
   */
  boundingBox'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * the x coordinate of the element in pixels.
     */
    x'
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * the y coordinate of the element in pixels.
     */
    y'
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * the width of the element in pixels.
     */
    width'
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * the height of the element in pixels.
     */
    height'
              NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensure that checkbox or radio element is checked.
   *
   * **Details**
   *
   * Performs the following steps:
   * 1. Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already
   *    checked, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now checked. If not, this method throws.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('checkbox').check();
   * ```
   *
   * @param options
   */
  check'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Clear the input field.
   *
   * **Details**
   *
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, focuses the element, clears it and triggers an
   * `input` event after clearing.
   *
   * If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an
   * error. However, if the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be cleared
   * instead.
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('textbox').clear();
   * ```
   *
   * @param options
   */
  clear'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Click an element.
   *
   * **Details**
   *
   * This method clicks the element by performing the following steps:
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element, or the specified `position`.
   * 1. Wait for initiated navigations to either succeed or fail, unless `noWaitAfter` option is set.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **Usage**
   *
   * Click a button:
   *
   * ```js
   * await page.getByRole('button').click();
   * ```
   *
   * Shift-right-click at a specific position on a canvas:
   *
   * ```js
   * await page.locator('canvas').click({
   *   button: 'right',
   *   modifiers: ['Shift'],
   *   position: { x: 23, y: 32 },
   * });
   * ```
   *
   * @param options
   */
  click'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * defaults to 1. See [UIEvent.detail].
     */
    clickCount'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You
     * can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as
     * navigating to inaccessible pages. Defaults to `false`.
     * @deprecated This option will default to `true` in the future.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns a {@link FrameLocator} object pointing to the same `iframe` as this locator.
   *
   * Useful when you have a {@link Locator} object obtained somewhere, and later on would like to interact with the
   * content inside the frame.
   *
   * For a reverse operation, use
   * [frameLocator.owner()](https://playwright.dev/docs/api/class-framelocator#frame-locator-owner).
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('iframe[name="embedded"]');
   * // ...
   * const frameLocator = locator.contentFrame();
   * await frameLocator.getByRole('button').click();
   * ```
   *
   */
  contentFrame'
      TypeReference
        Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '

  /**
   * Returns the number of elements matching the locator.
   *
   * **NOTE** If you need to assert the number of elements on the page, prefer
   * [expect(locator).toHaveCount(count[, options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-count)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const count = await page.getByRole('listitem').count();
   * ```
   *
   */
  count'
      TypeReference
        Identifier: ' Promise'
        NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Double-click an element.
   *
   * **Details**
   *
   * This method double clicks the element by performing the following steps:
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to double click in the center of the
   *    element, or the specified `position`.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **NOTE** `element.dblclick()` dispatches two `click` events and a single `dblclick` event.
   * @param options
   */
  dblclick'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Programmatically dispatch an event on the matching element.
   *
   * **Usage**
   *
   * ```js
   * await locator.dispatchEvent('click');
   * ```
   *
   * **Details**
   *
   * The snippet above dispatches the `click` event on the element. Regardless of the visibility state of the element,
   * `click` is dispatched. This is equivalent to calling
   * [element.click()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click).
   *
   * Under the hood, it creates an instance of an event based on the given `type`, initializes it with `eventInit`
   * properties and dispatches it on the element. Events are `composed`, `cancelable` and bubble by default.
   *
   * Since `eventInit` is event-specific, please refer to the events documentation for the lists of initial properties:
   * - [DeviceMotionEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent/DeviceMotionEvent)
   * - [DeviceOrientationEvent](https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent/DeviceOrientationEvent)
   * - [DragEvent](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent)
   * - [Event](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
   * - [FocusEvent](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent)
   * - [KeyboardEvent](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)
   * - [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)
   * - [PointerEvent](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent)
   * - [TouchEvent](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent)
   * - [WheelEvent](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent)
   *
   * You can also specify {@link JSHandle} as the property value if you want live objects to be passed into the event:
   *
   * ```js
   * // Note you can only create DataTransfer in Chromium and Firefox
   * const dataTransfer = await page.evaluateHandle(() => new DataTransfer());
   * await locator.dispatchEvent('dragstart', { dataTransfer });
   * ```
   *
   * @param type DOM event type: `"click"`, `"dragstart"`, etc.
   * @param eventInit Optional event-specific initialization properties.
   * @param options
   */
  dispatchEvent'
      Parameter
        Identifier: 'type'
        StringKeyword
      Parameter
        Identifier: ' eventInit'
        QuestionToken
        TypeReference
          Identifier: ' EvaluationArgument'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Drag the source element towards the target element and drop it.
   *
   * **Details**
   *
   * This method drags the locator to another target locator or target position. It will first move to the source
   * element, perform a `mousedown`, then move to the target element or position and perform a `mouseup`.
   *
   * **Usage**
   *
   * ```js
   * const source = page.locator('#source');
   * const target = page.locator('#target');
   *
   * await source.dragTo(target);
   * // or specify exact positions relative to the top-left corners of the elements:
   * await source.dragTo(target, {
   *   sourcePosition: { x: 34, y: 7 },
   *   targetPosition: { x: 10, y: 20 },
   * });
   * ```
   *
   * @param target Locator of the element to drag to.
   * @param options
   */
  dragTo'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' Locator'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Clicks on the source element at this point relative to the top-left corner of the element's padding box. If not
     * specified, some visible point of the element is used.
     */
    sourcePosition'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Drops on the target element at this point relative to the top-left corner of the element's padding box. If not
     * specified, some visible point of the element is used.
     */
    targetPosition'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** Always prefer using {@link Locator}s and web assertions over {@link ElementHandle}s because latter are inherently
   * racy.
   *
   * Resolves given locator to all matching DOM elements. If there are no matching elements, returns an empty list.
   */
  elementHandles'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'ElementHandle'
    MethodSignature
      Identifier: '

  /**
   * Set a value to the input field.
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('textbox').fill('example value');
   * ```
   *
   * **Details**
   *
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, focuses the element, fills it and triggers an
   * `input` event after filling. Note that you can pass an empty string to clear the input field.
   *
   * If the target element is not an `<input>`, `<textarea>` or `[contenteditable]` element, this method throws an
   * error. However, if the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be filled
   * instead.
   *
   * To send fine-grained keyboard events, use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   * @param value Value to set for the `<input>`, `<textarea>` or `[contenteditable]` element.
   * @param options
   */
  fill'
      Parameter
        Identifier: 'value'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method narrows existing locator according to the options, for example filters by text. It can be chained to
   * filter multiple times.
   *
   * **Usage**
   *
   * ```js
   * const rowLocator = page.locator('tr');
   * // ...
   * await rowLocator
   *     .filter({ hasText: 'text in column 1' })
   *     .filter({ has: page.getByRole('button', { name: 'column 2 button' }) })
   *     .screenshot();
   * ```
   *
   * @param options
   */
  filter'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Narrows down the results of the method to those which contain elements matching this relative locator. For example,
     * `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.
     *
     * Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not
     * the document root. For example, you can find `content` that has `div` in
     * `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article
     * div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    has'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the
     * outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    hasNot'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element.
     * When passed a [string], matching is case-insensitive and searches for a substring.
     */
    hasNotText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When
     * passed a [string], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches
     * `<article><div>Playwright</div></article>`.
     */
    hasText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Returns locator to the first matching element.
   */
  first'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Calls [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the matching element.
   * @param options
   */
  focus'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * When working with iframes, you can create a frame locator that will enter the iframe and allow locating elements in
   * that iframe:
   *
   * **Usage**
   *
   * ```js
   * const locator = page.frameLocator('iframe').getByText('Submit');
   * await locator.click();
   * ```
   *
   * @param selector A selector to use when resolving DOM element.
   */
  frameLocator'
      Parameter
        Identifier: 'selector'
        StringKeyword
      TypeReference
        Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '

  /**
   * Returns the matching element's attribute value.
   *
   * **NOTE** If you need to assert an element's attribute, prefer
   * [expect(locator).toHaveAttribute(name, value[, options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-attribute)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   * @param name Attribute name to get the value for.
   * @param options
   */
  getAttribute'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their alt text.
   *
   * **Usage**
   *
   * For example, this method will find the image by alt text "Playwright logo":
   *
   * ```html
   * <img alt='Playwright logo'>
   * ```
   *
   * ```js
   * await page.getByAltText('Playwright logo').click();
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByAltText'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the
   * `aria-label` attribute.
   *
   * **Usage**
   *
   * For example, this method will find inputs by label "Username" and "Password" in the following DOM:
   *
   * ```html
   * <input aria-label="Username">
   * <label for="password-input">Password:</label>
   * <input id="password-input">
   * ```
   *
   * ```js
   * await page.getByLabel('Username').fill('john');
   * await page.getByLabel('Password').fill('secret');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByLabel'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating input elements by the placeholder text.
   *
   * **Usage**
   *
   * For example, consider the following DOM structure.
   *
   * ```html
   * <input type="email" placeholder="name@example.com" />
   * ```
   *
   * You can fill the input after locating it by the placeholder text:
   *
   * ```js
   * await page
   *     .getByPlaceholder('name@example.com')
   *     .fill('playwright@microsoft.com');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByPlaceholder'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles),
   * [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and
   * [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <h3>Sign up</h3>
   * <label>
   *   <input type="checkbox" /> Subscribe
   * </label>
   * <br/>
   * <button>Submit</button>
   * ```
   *
   * You can locate each element by it's implicit role:
   *
   * ```js
   * await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();
   *
   * await page.getByRole('checkbox', { name: 'Subscribe' }).check();
   *
   * await page.getByRole('button', { name: /submit/i }).click();
   * ```
   *
   * **Details**
   *
   * Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback
   * about the ARIA guidelines.
   *
   * Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings)
   * that is recognized by the role selector. You can find all the
   * [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend**
   * duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.
   * @param role Required aria role.
   * @param options
   */
  getByRole'
      Parameter
        Identifier: 'role'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.
     *
     * Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).
     */
    checked'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-disabled` or `disabled`.
     *
     * **NOTE** Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about
     * [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).
     */
    disabled'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-expanded`.
     *
     * Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).
     */
    expanded'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Option that controls whether hidden elements are matched. By default, only non-hidden elements, as
     * [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.
     *
     * Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).
     */
    includeHidden'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values
     * for `<h1>-<h6>` elements.
     *
     * Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).
     */
    level'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is
     * case-insensitive and searches for a substring, use `exact` to control this behavior.
     *
     * Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
     */
    name'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-pressed`.
     *
     * Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).
     */
    pressed'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-selected`.
     *
     * Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).
     */
    selected'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Locate element by the test id.
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <button data-testid="directions">Itinéraire</button>
   * ```
   *
   * You can locate the element by it's test id:
   *
   * ```js
   * await page.getByTestId('directions').click();
   * ```
   *
   * **Details**
   *
   * By default, the `data-testid` attribute is used as a test id. Use
   * [selectors.setTestIdAttribute(attributeName)](https://playwright.dev/docs/api/class-selectors#selectors-set-test-id-attribute)
   * to configure a different test id attribute if necessary.
   *
   * ```js
   * // Set custom test id attribute from @playwright/test config:
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     testIdAttribute: 'data-pw'
   *   },
   * });
   * ```
   *
   * @param testId Id to locate the element by.
   */
  getByTestId'
      Parameter
        Identifier: 'testId'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements that contain given text.
   *
   * See also [locator.filter([options])](https://playwright.dev/docs/api/class-locator#locator-filter) that allows to
   * match by another criteria, like an accessible role, and then filter by the text content.
   *
   * **Usage**
   *
   * Consider the following DOM structure:
   *
   * ```html
   * <div>Hello <span>world</span></div>
   * <div>Hello</div>
   * ```
   *
   * You can locate by text substring, exact string, or a regular expression:
   *
   * ```js
   * // Matches <span>
   * page.getByText('world');
   *
   * // Matches first <div>
   * page.getByText('Hello world');
   *
   * // Matches second <div>
   * page.getByText('Hello', { exact: true });
   *
   * // Matches both <div>s
   * page.getByText(/Hello/);
   *
   * // Matches second <div>
   * page.getByText(/^hello$/i);
   * ```
   *
   * **Details**
   *
   * Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into
   * one, turns line breaks into spaces and ignores leading and trailing whitespace.
   *
   * Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For
   * example, locating by text `"Log in"` matches `<input type=button value="Log in">`.
   * @param text Text to locate the element for.
   * @param options
   */
  getByText'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their title attribute.
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <span title='Issues count'>25 issues</span>
   * ```
   *
   * You can check the issues count after locating it by the title text:
   *
   * ```js
   * await expect(page.getByTitle('Issues count')).toHaveText('25 issues');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByTitle'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Highlight the corresponding element(s) on the screen. Useful for debugging, don't commit the code that uses
   * [locator.highlight()](https://playwright.dev/docs/api/class-locator#locator-highlight).
   */
  highlight'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Hover over the matching element.
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('link').hover();
   * ```
   *
   * **Details**
   *
   * This method hovers over the element by performing the following steps:
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to hover over the center of the
   *    element, or the specified `position`.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param options
   */
  hover'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the [`element.innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML).
   * @param options
   */
  innerHTML'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the [`element.innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText).
   *
   * **NOTE** If you need to assert text on the page, prefer
   * [expect(locator).toHaveText(expected[, options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-text)
   * with `useInnerText` option to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   * @param options
   */
  innerText'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the value for the matching `<input>` or `<textarea>` or `<select>` element.
   *
   * **NOTE** If you need to assert input value, prefer
   * [expect(locator).toHaveValue(value[, options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-value)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const value = await page.getByRole('textbox').inputValue();
   * ```
   *
   * **Details**
   *
   * Throws elements that are not an input, textarea or a select. However, if the element is inside the `<label>`
   * element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), returns the value of the
   * control.
   * @param options
   */
  inputValue'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns whether the element is checked. Throws if the element is not a checkbox or radio input.
   *
   * **NOTE** If you need to assert that checkbox is checked, prefer
   * [expect(locator).toBeChecked([options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-checked)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const checked = await page.getByRole('checkbox').isChecked();
   * ```
   *
   * @param options
   */
  isChecked'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns whether the element is disabled, the opposite of [enabled](https://playwright.dev/docs/actionability#enabled).
   *
   * **NOTE** If you need to assert that an element is disabled, prefer
   * [expect(locator).toBeDisabled([options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-disabled)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const disabled = await page.getByRole('button').isDisabled();
   * ```
   *
   * @param options
   */
  isDisabled'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns whether the element is [editable](https://playwright.dev/docs/actionability#editable).
   *
   * **NOTE** If you need to assert that an element is editable, prefer
   * [expect(locator).toBeEditable([options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-editable)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const editable = await page.getByRole('textbox').isEditable();
   * ```
   *
   * @param options
   */
  isEditable'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns whether the element is [enabled](https://playwright.dev/docs/actionability#enabled).
   *
   * **NOTE** If you need to assert that an element is enabled, prefer
   * [expect(locator).toBeEnabled([options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-enabled)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const enabled = await page.getByRole('button').isEnabled();
   * ```
   *
   * @param options
   */
  isEnabled'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns whether the element is hidden, the opposite of [visible](https://playwright.dev/docs/actionability#visible).
   *
   * **NOTE** If you need to assert that element is hidden, prefer
   * [expect(locator).toBeHidden([options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-hidden)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const hidden = await page.getByRole('button').isHidden();
   * ```
   *
   * @param options
   */
  isHidden'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * @deprecated This option is ignored.
     * [locator.isHidden([options])](https://playwright.dev/docs/api/class-locator#locator-is-hidden) does not wait for
     * the element to become hidden and returns immediately.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns whether the element is [visible](https://playwright.dev/docs/actionability#visible).
   *
   * **NOTE** If you need to assert that element is visible, prefer
   * [expect(locator).toBeVisible([options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-visible)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   *
   * **Usage**
   *
   * ```js
   * const visible = await page.getByRole('button').isVisible();
   * ```
   *
   * @param options
   */
  isVisible'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * @deprecated This option is ignored.
     * [locator.isVisible([options])](https://playwright.dev/docs/api/class-locator#locator-is-visible) does not wait for
     * the element to become visible and returns immediately.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns locator to the last matching element.
   *
   * **Usage**
   *
   * ```js
   * const banana = await page.getByRole('listitem').last();
   * ```
   *
   */
  last'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * The method finds an element matching the specified selector in the locator's subtree. It also accepts filter
   * options, similar to [locator.filter([options])](https://playwright.dev/docs/api/class-locator#locator-filter)
   * method.
   *
   * [Learn more about locators](https://playwright.dev/docs/locators).
   * @param selectorOrLocator A selector or locator to use when resolving DOM element.
   * @param options
   */
  locator'
      Parameter
        Identifier: 'selectorOrLocator'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'Locator'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Narrows down the results of the method to those which contain elements matching this relative locator. For example,
     * `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.
     *
     * Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not
     * the document root. For example, you can find `content` that has `div` in
     * `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article
     * div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    has'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the
     * outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    hasNot'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element.
     * When passed a [string], matching is case-insensitive and searches for a substring.
     */
    hasNotText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When
     * passed a [string], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches
     * `<article><div>Playwright</div></article>`.
     */
    hasText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Returns locator to the n-th matching element. It's zero based, `nth(0)` selects the first element.
   *
   * **Usage**
   *
   * ```js
   * const banana = await page.getByRole('listitem').nth(2);
   * ```
   *
   * @param index
   */
  nth'
      Parameter
        Identifier: 'index'
        NumberKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Creates a locator that matches either of the two locators.
   *
   * **Usage**
   *
   * Consider a scenario where you'd like to click on a "New email" button, but sometimes a security settings dialog
   * shows up instead. In this case, you can wait for either a "New email" button, or a dialog and act accordingly.
   *
   * ```js
   * const newEmail = page.getByRole('button', { name: 'New' });
   * const dialog = page.getByText('Confirm security settings');
   * await expect(newEmail.or(dialog)).toBeVisible();
   * if (await dialog.isVisible())
   *   await page.getByRole('button', { name: 'Dismiss' }).click();
   * await newEmail.click();
   * ```
   *
   * @param locator Alternative locator to match.
   */
  or'
      Parameter
        Identifier: 'locator'
        TypeReference
          Identifier: ' Locator'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * A page this locator belongs to.
   */
  page'
      TypeReference
        Identifier: ' Page'
    MethodSignature
      Identifier: '

  /**
   * Focuses the matching element and presses a combination of the keys.
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('textbox').press('Backspace');
   * ```
   *
   * **Details**
   *
   * Focuses the element, and then uses
   * [keyboard.down(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-down) and
   * [keyboard.up(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-up).
   *
   * `key` can specify the intended
   * [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character
   * to generate the text for. A superset of the `key` values can be found
   * [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:
   *
   * `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`,
   * `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`,
   * etc.
   *
   * Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`,
   * `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.
   *
   * Holding down `Shift` will type the text that corresponds to the `key` in the upper case.
   *
   * If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective
   * texts.
   *
   * Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When
   * specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.
   * @param key Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.
   * @param options
   */
  press'
      Parameter
        Identifier: 'key'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You
     * can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as
     * navigating to inaccessible pages. Defaults to `false`.
     * @deprecated This option will default to `true` in the future.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** In most cases, you should use
   * [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill) instead. You only need
   * to press keys one by one if there is special keyboard handling on the page.
   *
   * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the
   * text.
   *
   * To press a special key, like `Control` or `ArrowDown`, use
   * [locator.press(key[, options])](https://playwright.dev/docs/api/class-locator#locator-press).
   *
   * **Usage**
   *
   * ```js
   * await locator.pressSequentially('Hello'); // Types instantly
   * await locator.pressSequentially('World', { delay: 100 }); // Types slower, like a user
   * ```
   *
   * An example of typing into a text field and then submitting the form:
   *
   * ```js
   * const locator = page.getByLabel('Password');
   * await locator.pressSequentially('my password');
   * await locator.press('Enter');
   * ```
   *
   * @param text String of characters to sequentially press into a focused element.
   * @param options
   */
  pressSequentially'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between key presses in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Take a screenshot of the element matching the locator.
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('link').screenshot();
   * ```
   *
   * Disable animations and save screenshot to a file:
   *
   * ```js
   * await page.getByRole('link').screenshot({ animations: 'disabled', path: 'link.png' });
   * ```
   *
   * **Details**
   *
   * This method captures a screenshot of the page, clipped to the size and position of a particular element matching
   * the locator. If the element is covered by other elements, it will not be actually visible on the screenshot. If the
   * element is a scrollable container, only the currently scrolled content will be visible on the screenshot.
   *
   * This method waits for the [actionability](https://playwright.dev/docs/actionability) checks, then scrolls element into view before taking
   * a screenshot. If the element is detached from DOM, the method throws an error.
   *
   * Returns the buffer with the captured screenshot.
   * @param options
   */
  screenshot'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' LocatorScreenshotOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, then tries to scroll element into view, unless
   * it is completely visible as defined by
   * [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)'s `ratio`.
   *
   * See [scrolling](https://playwright.dev/docs/input#scrolling) for alternative ways to scroll.
   * @param options
   */
  scrollIntoViewIfNeeded'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Selects option or options in `<select>`.
   *
   * **Details**
   *
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, waits until all specified options are present in
   * the `<select>` element and selects these options.
   *
   * If the target element is not a `<select>` element, this method throws an error. However, if the element is inside
   * the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), the control will be used
   * instead.
   *
   * Returns the array of option values that have been successfully selected.
   *
   * Triggers a `change` and `input` event once all the provided options have been selected.
   *
   * **Usage**
   *
   * ```html
   * <select multiple>
   *   <option value="red">Red</div>
   *   <option value="green">Green</div>
   *   <option value="blue">Blue</div>
   * </select>
   * ```
   *
   * ```js
   * // single selection matching the value or label
   * element.selectOption('blue');
   *
   * // single selection matching the label
   * element.selectOption({ label: 'Blue' });
   *
   * // multiple selection for red, green and blue options
   * element.selectOption(['red', 'green', 'blue']);
   * ```
   *
   * @param values Options to select. If the `<select>` has the `multiple` attribute, all matching options are selected, otherwise
   * only the first option matching one of the passed options is selected. String values are matching both values and
   * labels. Option is considered matching if all specified properties match.
   * @param options
   */
  selectOption'
      Parameter
        Identifier: 'values'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
          TypeReference
            Identifier: 'ElementHandle'
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Matches by `option.value`. Optional.
     */
    value'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Matches by `option.label`. Optional.
     */
    label'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Matches by the index. Optional.
     */
    index'
              QuestionToken
              NumberKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeReference
              Identifier: 'ElementHandle'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * Matches by `option.value`. Optional.
     */
    value'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * Matches by `option.label`. Optional.
     */
    label'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * Matches by the index. Optional.
     */
    index'
                QuestionToken
                NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * This method waits for [actionability](https://playwright.dev/docs/actionability) checks, then focuses the element and selects all its
   * text content.
   *
   * If the element is inside the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), focuses and selects text in
   * the control instead.
   * @param options
   */
  selectText'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Set the state of a checkbox or a radio element.
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('checkbox').setChecked(true);
   * ```
   *
   * **Details**
   *
   * This method checks or unchecks an element by performing the following steps:
   * 1. Ensure that matched element is a checkbox or a radio input. If not, this method throws.
   * 1. If the element already has the right checked state, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the matched element, unless `force` option is set. If
   *    the element is detached during the checks, the whole action is retried.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now checked or unchecked. If not, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param checked Whether to check or uncheck the checkbox.
   * @param options
   */
  setChecked'
      Parameter
        Identifier: 'checked'
        BooleanKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Upload file or multiple files into `<input type=file>`. For inputs with a `[webkitdirectory]` attribute, only a
   * single directory path is supported.
   *
   * **Usage**
   *
   * ```js
   * // Select one file
   * await page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));
   *
   * // Select multiple files
   * await page.getByLabel('Upload files').setInputFiles([
   *   path.join(__dirname, 'file1.txt'),
   *   path.join(__dirname, 'file2.txt'),
   * ]);
   *
   * // Select a directory
   * await page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));
   *
   * // Remove all the selected files
   * await page.getByLabel('Upload file').setInputFiles([]);
   *
   * // Upload buffer from memory
   * await page.getByLabel('Upload file').setInputFiles({
   *   name: 'file.txt',
   *   mimeType: 'text/plain',
   *   buffer: Buffer.from('this is test')
   * });
   * ```
   *
   * **Details**
   *
   * Sets the value of the file input to these file paths or files. If some of the `filePaths` are relative paths, then
   * they are resolved relative to the current working directory. For empty array, clears the selected files.
   *
   * This method expects {@link Locator} to point to an
   * [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input). However, if the element is inside
   * the `<label>` element that has an associated
   * [control](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control), targets the control instead.
   * @param files
   * @param options
   */
  setInputFiles'
      Parameter
        Identifier: 'files'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * File name
     */
    name'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File type
     */
    mimeType'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File content
     */
    buffer'
              TypeReference
                Identifier: ' Buffer'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * File name
     */
    name'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File type
     */
    mimeType'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File content
     */
    buffer'
                TypeReference
                  Identifier: ' Buffer'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Perform a tap gesture on the element matching the locator.
   *
   * **Details**
   *
   * This method taps the element by performing the following steps:
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.touchscreen](https://playwright.dev/docs/api/class-page#page-touchscreen) to tap the center of the
   *    element, or the specified `position`.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   *
   * **NOTE** `element.tap()` requires that the `hasTouch` option of the browser context be set to true.
   * @param options
   */
  tap'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Modifier keys to press. Ensures that only these modifiers are pressed during the operation, and then restores
     * current modifiers back. If not specified, currently pressed modifiers are used. "ControlOrMeta" resolves to
     * "Control" on Windows and Linux and to "Meta" on macOS.
     */
    modifiers'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the [`node.textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent).
   *
   * **NOTE** If you need to assert text on the page, prefer
   * [expect(locator).toHaveText(expected[, options])](https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-text)
   * to avoid flakiness. See [assertions guide](https://playwright.dev/docs/test-assertions) for more details.
   * @param options
   */
  textContent'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the
   * text.
   *
   * To press a special key, like `Control` or `ArrowDown`, use
   * [locator.press(key[, options])](https://playwright.dev/docs/api/class-locator#locator-press).
   *
   * **Usage**
   * @deprecated In most cases, you should use
   * [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill) instead. You only need
   * to press keys one by one if there is special keyboard handling on the page - in this case use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   * @param text A text to type into a focused element.
   * @param options
   */
  type'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between key presses in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensure that checkbox or radio element is unchecked.
   *
   * **Usage**
   *
   * ```js
   * await page.getByRole('checkbox').uncheck();
   * ```
   *
   * **Details**
   *
   * This method unchecks the element by performing the following steps:
   * 1. Ensure that element is a checkbox or a radio input. If not, this method throws. If the element is already
   *    unchecked, this method returns immediately.
   * 1. Wait for [actionability](https://playwright.dev/docs/actionability) checks on the element, unless `force` option is set.
   * 1. Scroll the element into view if needed.
   * 1. Use [page.mouse](https://playwright.dev/docs/api/class-page#page-mouse) to click in the center of the
   *    element.
   * 1. Ensure that the element is now unchecked. If not, this method throws.
   *
   * If the element is detached from the DOM at any moment during the action, this method throws.
   *
   * When all steps combined have not finished during the specified `timeout`, this method throws a {@link
   * TimeoutError}. Passing zero timeout disables this.
   * @param options
   */
  uncheck'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to bypass the [actionability](https://playwright.dev/docs/actionability) checks. Defaults to `false`.
     */
    force'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A point to use relative to the top-left corner of element padding box. If not specified, uses some visible point of
     * the element.
     */
    position'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      x'
                NumberKeyword
              PropertySignature
                Identifier: '

      y'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * When set, this method only performs the [actionability](https://playwright.dev/docs/actionability) checks and skips the action. Defaults
     * to `false`. Useful to wait until the element is ready for the action without performing it.
     */
    trial'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns when element specified by locator satisfies the `state` option.
   *
   * If target element already satisfies the condition, the method returns immediately. Otherwise, waits for up to
   * `timeout` milliseconds until the condition is met.
   *
   * **Usage**
   *
   * ```js
   * const orderSent = page.locator('#order-sent');
   * await orderSent.waitFor();
   * ```
   *
   * @param options
   */
  waitFor'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `'visible'`. Can be either:
     * - `'attached'` - wait for element to be present in DOM.
     * - `'detached'` - wait for element to not be present in DOM.
     * - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element
     *   without any content or with `display:none` has an empty bounding box and is not considered visible.
     * - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or
     *   `visibility:hidden`. This is opposite to the `'visible'` option.
     */
    state'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BrowserType'
    TypeParameter
      Identifier: 'Unused'
      TypeLiteral
    MethodSignature
      Identifier: '
  /**
   * This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.
   *
   * The default browser context is accessible via
   * [browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).
   *
   * **NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.
   *
   * **Usage**
   *
   * ```js
   * const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');
   * const defaultContext = browser.contexts()[0];
   * const page = defaultContext.pages()[0];
   * ```
   *
   * @param endpointURL A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or
   * `ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`.
   * @param options
   */
  connectOverCDP'
      Parameter
        Identifier: 'endpointURL'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' ConnectOverCDPOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Browser'
    MethodSignature
      Identifier: '
  /**
   * Option `wsEndpoint` is deprecated. Instead use `endpointURL`.
   * @deprecated
   */
  /**
   * This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.
   *
   * The default browser context is accessible via
   * [browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).
   *
   * **NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.
   *
   * **Usage**
   *
   * ```js
   * const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');
   * const defaultContext = browser.contexts()[0];
   * const page = defaultContext.pages()[0];
   * ```
   *
   * @param endpointURL A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or
   * `ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`.
   * @param options
   */
  connectOverCDP'
      Parameter
        Identifier: 'options'
        IntersectionType
          TypeReference
            Identifier: ' ConnectOverCDPOptions'
          TypeLiteral
            PropertySignature
              Identifier: ' wsEndpoint'
              QuestionToken
              StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Browser'
    MethodSignature
      Identifier: '
  /**
   * This method attaches Playwright to an existing browser instance. When connecting to another browser launched via
   * `BrowserType.launchServer` in Node.js, the major and minor version needs to match the client version (1.2.3 → is
   * compatible with 1.2.x).
   * @param wsEndpoint A browser websocket endpoint to connect to.
   * @param options
   */
  connect'
      Parameter
        Identifier: 'wsEndpoint'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' ConnectOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Browser'
    MethodSignature
      Identifier: '
  /**
   * wsEndpoint in options is deprecated. Instead use `wsEndpoint`.
   * @param wsEndpoint A browser websocket endpoint to connect to.
   * @param options
   * @deprecated
   */
  /**
   * This method attaches Playwright to an existing browser instance. When connecting to another browser launched via
   * `BrowserType.launchServer` in Node.js, the major and minor version needs to match the client version (1.2.3 → is
   * compatible with 1.2.x).
   * @param wsEndpoint A browser websocket endpoint to connect to.
   * @param options
   */
  connect'
      Parameter
        Identifier: 'options'
        IntersectionType
          TypeReference
            Identifier: ' ConnectOptions'
          TypeLiteral
            PropertySignature
              Identifier: ' wsEndpoint'
              QuestionToken
              StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Browser'
    MethodSignature
      Identifier: '
  /**
   * A path where Playwright expects to find a bundled browser executable.
   */
  executablePath'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the browser instance.
   *
   * **Usage**
   *
   * You can use `ignoreDefaultArgs` to filter out `--mute-audio` from default arguments:
   *
   * ```js
   * const browser = await chromium.launch({  // Or 'firefox' or 'webkit'.
   *   ignoreDefaultArgs: ['--mute-audio']
   * });
   * ```
   *
   * > **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it
   * works best with the version of Chromium it is bundled with. There is no guarantee it will work with any other
   * version. Use `executablePath` option with extreme caution.
   * >
   * > If Google Chrome (rather than Chromium) is preferred, a
   * [Chrome Canary](https://www.google.com/chrome/browser/canary.html) or
   * [Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.
   * >
   * > Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs
   * for video playback. See
   * [this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for
   * other differences between Chromium and Chrome.
   * [This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)
   * describes some differences for Linux users.
   * @param options
   */
  launch'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' LaunchOptions'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Browser'
    MethodSignature
      Identifier: '

  /**
   * Returns the persistent browser context instance.
   *
   * Launches browser that uses persistent storage located at `userDataDir` and returns the only context. Closing this
   * context will automatically close the browser.
   * @param userDataDir Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for
   * [Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and
   * [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's
   * user data directory is the **parent** directory of the "Profile Path" seen at `chrome://version`. Pass an empty
   * string to use a temporary directory instead.
   * @param options
   */
  launchPersistentContext'
      Parameter
        Identifier: 'userDataDir'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.
     */
    acceptDownloads'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * **NOTE** Use custom browser args at your own risk, as some of them may break Playwright functionality.
     *
     * Additional arguments to pass to the browser instance. The list of Chromium flags can be found
     * [here](https://peter.sh/experiments/chromium-command-line-switches/).
     */
    args'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * When using [page.goto(url[, options])](https://playwright.dev/docs/api/class-page#page-goto),
     * [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route),
     * [page.waitForURL(url[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-url),
     * [page.waitForRequest(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-request),
     * or
     * [page.waitForResponse(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-response)
     * it takes the base URL in consideration by using the
     * [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL.
     * Unset by default. Examples:
     * - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
     * - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in
     *   `http://localhost:3000/foo/bar.html`
     * - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in
     *   `http://localhost:3000/bar.html`
     */
    baseURL'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Toggles bypassing page's Content-Security-Policy. Defaults to `false`.
     */
    bypassCSP'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Browser distribution channel.  Supported values are "chrome", "chrome-beta", "chrome-dev", "chrome-canary",
     * "msedge", "msedge-beta", "msedge-dev", "msedge-canary". Read more about using
     * [Google Chrome and Microsoft Edge](https://playwright.dev/docs/browsers#google-chrome--microsoft-edge).
     */
    channel'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Enable Chromium sandboxing. Defaults to `false`.
     */
    chromiumSandbox'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * TLS Client Authentication allows the server to request a client certificate and verify it.
     *
     * **Details**
     *
     * An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`,
     * a single `pfxPath`, or their corresponding direct value equivalents (`cert` and `key`, or `pfx`). Optionally,
     * `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided
     * with an exact match to the request origin that the certificate is valid for.
     *
     * **NOTE** Using Client Certificates in combination with Proxy Servers is not supported.
     *
     * **NOTE** When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it
     * work by replacing `localhost` with `local.playwright`.
     */
    clientCertificates'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
       * Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.
       */
      origin'
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Path to the file with the certificate in PEM format.
       */
      certPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the certificate in PEM format.
       */
      cert'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Path to the file with the private key in PEM format.
       */
      keyPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the private key in PEM format.
       */
      key'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Path to the PFX or PKCS12 encoded private key and certificate chain.
       */
      pfxPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the PFX or PKCS12 encoded private key and certificate chain.
       */
      pfx'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Passphrase for the private key (PEM or PFX).
       */
      passphrase'
                  QuestionToken
                  StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'light'`.
     */
    colorScheme'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about
     * [emulating devices with device scale factor](https://playwright.dev/docs/emulation#devices).
     */
    deviceScaleFactor'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the
     * `headless` option will be set `false`.
     * @deprecated Use [debugging tools](https://playwright.dev/docs/debug) instead.
     */
    devtools'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and
     * is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were
     * created in is closed.
     */
    downloadsPath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Specify environment variables that will be visible to the browser. Defaults to `process.env`.
     */
    env'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is
     * resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium,
     * Firefox or WebKit, use at your own risk.
     */
    executablePath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * An object containing additional HTTP headers to be sent with every request. Defaults to none.
     */
    extraHTTPHeaders'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Firefox user preferences. Learn more about the Firefox user preferences at
     * [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).
     */
    firefoxUserPrefs'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'none'`.
     */
    forcedColors'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    geolocation'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Latitude between -90 and 90.
       */
      latitude'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Longitude between -180 and 180.
       */
      longitude'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Non-negative accuracy value. Defaults to `0`.
       */
      accuracy'
                QuestionToken
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Close the browser process on SIGHUP. Defaults to `true`.
     */
    handleSIGHUP'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Close the browser process on Ctrl-C. Defaults to `true`.
     */
    handleSIGINT'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Close the browser process on SIGTERM. Defaults to `true`.
     */
    handleSIGTERM'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Specifies if viewport supports touch events. Defaults to false. Learn more about
     * [mobile emulation](https://playwright.dev/docs/emulation#devices).
     */
    hasTouch'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to run browser in headless mode. More details for
     * [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and
     * [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the
     * `devtools` option is `true`.
     */
    headless'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no
     * origin is specified, the username and password are sent to any servers upon unauthorized responses.
     */
    httpCredentials'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      username'
                StringKeyword
              PropertySignature
                Identifier: '

      password'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Restrain sending http credentials on specific origin (scheme://host:port).
       */
      origin'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * This option only applies to the requests sent from corresponding {@link APIRequestContext} and does not affect
       * requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be
       * sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response
       * with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.
       */
      send'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
          PropertySignature
            Identifier: '

    /**
     * If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is
     * given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.
     */
    ignoreDefaultArgs'
            QuestionToken
            UnionType
              BooleanKeyword
              TypeReference
                Identifier: 'Array'
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device,
     * so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more
     * about [mobile emulation](https://playwright.dev/docs/emulation#ismobile).
     */
    isMobile'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about
     * [disabling JavaScript](https://playwright.dev/docs/emulation#javascript-enabled).
     */
    javaScriptEnabled'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value,
     * `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default
     * locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/emulation#locale--timezone).
     */
    locale'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Logger sink for Playwright logging.
     */
    logger'
            QuestionToken
            TypeReference
              Identifier: ' Logger'
          PropertySignature
            Identifier: '

    /**
     * Whether to emulate network being offline. Defaults to `false`. Learn more about
     * [network emulation](https://playwright.dev/docs/emulation#offline).
     */
    offline'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A list of permissions to grant to all pages in this context. See
     * [browserContext.grantPermissions(permissions[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-grant-permissions)
     * for more details. Defaults to none.
     */
    permissions'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Network proxy settings.
     */
    proxy'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
       * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
       */
      server'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
       */
      bypass'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional username to use if HTTP proxy requires authentication.
       */
      username'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional password to use if HTTP proxy requires authentication.
       */
      password'
                QuestionToken
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file.
     * If not specified, the HAR is not recorded. Make sure to await
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
     * the HAR to be saved.
     */
    recordHar'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use
       * `content` policy instead.
       */
      omitContent'
                QuestionToken
                BooleanKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional setting to control resource content management. If `omit` is specified, content is not persisted. If
       * `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is
       * specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output
       * files and to `embed` for all other file extensions.
       */
      content'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
              PropertySignature
                Identifier: '

      /**
       * Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by
       * default.
       */
      path'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page,
       * cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.
       */
      mode'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
              PropertySignature
                Identifier: '

      /**
       * A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was
       * provided and the passed URL is a path, it gets merged via the
       * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.
       */
      urlFilter'
                QuestionToken
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded.
     * Make sure to await
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
     * videos to be saved.
     */
    recordVideo'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Path to the directory to put videos into.
       */
      dir'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to
       * fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of
       * each page will be scaled down if necessary to fit the specified size.
       */
      size'
                QuestionToken
                TypeLiteral
                  PropertySignature
                    Identifier: '
        /**
         * Video frame width.
         */
        width'
                    NumberKeyword
                  PropertySignature
                    Identifier: '

        /**
         * Video frame height.
         */
        height'
                    NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.
     */
    reducedMotion'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the
     * `viewport` is set.
     */
    screen'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * page width in pixels.
       */
      width'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * page height in pixels.
       */
      height'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to allow sites to register Service workers. Defaults to `'allow'`.
     * - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be
     *   registered.
     * - `'block'`: Playwright will block all registration of Service Workers.
     */
    serviceWorkers'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going
     * on.
     */
    slowMo'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on
     * selectors that imply single target DOM element will throw when more than one element matches the selector. This
     * option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See {@link Locator} to
     * learn more about the strict mode.
     */
    strictSelectors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0`
     * to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Changes the timezone of the context. See
     * [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)
     * for a list of supported timezone IDs. Defaults to the system timezone.
     */
    timezoneId'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * If specified, traces are saved into this directory.
     */
    tracesDir'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Specific user agent to use in this context.
     */
    userAgent'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated Use `recordVideo` instead.
     */
    videoSize'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Video frame width.
       */
      width'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Video frame height.
       */
      height'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated Use `recordVideo` instead.
     */
    videosPath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent
     * viewport emulation. Learn more about [viewport emulation](https://playwright.dev/docs/emulation#viewport).
     *
     * **NOTE** The `null` value opts out from the default presets, makes viewport depend on the host window size defined
     * by the operating system. It makes the execution of the tests non-deterministic.
     */
    viewport'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
       * page width in pixels.
       */
      width'
                  NumberKeyword
                PropertySignature
                  Identifier: '

      /**
       * page height in pixels.
       */
      height'
                  NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'BrowserContext'
    MethodSignature
      Identifier: '

  /**
   * Returns the browser app instance. You can connect to it via
   * [browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),
   * which requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).
   *
   * **Usage**
   *
   * Launches browser server that client can connect to. An example of launching a browser executable and connecting to
   * it later:
   *
   * ```js
   * const { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.
   *
   * (async () => {
   *   const browserServer = await chromium.launchServer();
   *   const wsEndpoint = browserServer.wsEndpoint();
   *   // Use web socket endpoint later to establish a connection.
   *   const browser = await chromium.connect(wsEndpoint);
   *   // Close browser instance.
   *   await browserServer.close();
   * })();
   * ```
   *
   * @param options
   */
  launchServer'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * **NOTE** Use custom browser args at your own risk, as some of them may break Playwright functionality.
     *
     * Additional arguments to pass to the browser instance. The list of Chromium flags can be found
     * [here](https://peter.sh/experiments/chromium-command-line-switches/).
     */
    args'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Browser distribution channel.  Supported values are "chrome", "chrome-beta", "chrome-dev", "chrome-canary",
     * "msedge", "msedge-beta", "msedge-dev", "msedge-canary". Read more about using
     * [Google Chrome and Microsoft Edge](https://playwright.dev/docs/browsers#google-chrome--microsoft-edge).
     */
    channel'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Enable Chromium sandboxing. Defaults to `false`.
     */
    chromiumSandbox'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the
     * `headless` option will be set `false`.
     * @deprecated Use [debugging tools](https://playwright.dev/docs/debug) instead.
     */
    devtools'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and
     * is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were
     * created in is closed.
     */
    downloadsPath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Specify environment variables that will be visible to the browser. Defaults to `process.env`.
     */
    env'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is
     * resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium,
     * Firefox or WebKit, use at your own risk.
     */
    executablePath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Firefox user preferences. Learn more about the Firefox user preferences at
     * [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).
     */
    firefoxUserPrefs'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Close the browser process on SIGHUP. Defaults to `true`.
     */
    handleSIGHUP'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Close the browser process on Ctrl-C. Defaults to `true`.
     */
    handleSIGINT'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Close the browser process on SIGTERM. Defaults to `true`.
     */
    handleSIGTERM'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to run browser in headless mode. More details for
     * [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and
     * [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the
     * `devtools` option is `true`.
     */
    headless'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Host to use for the web socket. It is optional and if it is omitted, the server will accept connections on the
     * unspecified IPv6 address (::) when IPv6 is available, or the unspecified IPv4 address (0.0.0.0) otherwise. Consider
     * hardening it with picking a specific interface.
     */
    host'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is
     * given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.
     */
    ignoreDefaultArgs'
            QuestionToken
            UnionType
              BooleanKeyword
              TypeReference
                Identifier: 'Array'
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Logger sink for Playwright logging.
     */
    logger'
            QuestionToken
            TypeReference
              Identifier: ' Logger'
          PropertySignature
            Identifier: '

    /**
     * Port to use for the web socket. Defaults to 0 that picks any available port.
     */
    port'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Network proxy settings.
     */
    proxy'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
       * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
       */
      server'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
       */
      bypass'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional username to use if HTTP proxy requires authentication.
       */
      username'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional password to use if HTTP proxy requires authentication.
       */
      password'
                QuestionToken
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0`
     * to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * If specified, traces are saved into this directory.
     */
    tracesDir'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Path at which to serve the Browser Server. For security, this defaults to an unguessable string.
     *
     * **NOTE** Any process or web page (including those running in Playwright) with knowledge of the `wsPath` can take
     * control of the OS user. For this reason, you should use an unguessable token when using this option.
     */
    wsPath'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'BrowserServer'
    MethodSignature
      Identifier: '

  /**
   * Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.
   */
  name'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CDPSession'
    PropertySignature
      Identifier: '
  on'
      FunctionType
        TypeParameter
          Identifier: 'T'
          UnionType
            TypeOperator
              TypeReference
                QualifiedName
                  Identifier: ' Protocol'
                  Identifier: 'Events'
            SymbolKeyword
        Parameter
          Identifier: 'event'
          TypeReference
            Identifier: ' T'
        Parameter
          Identifier: ' listener'
          FunctionType
            Parameter
              Identifier: 'payload'
              ConditionalType
                TypeReference
                  Identifier: ' T'
                SymbolKeyword
                AnyKeyword
                IndexedAccessType
                  TypeReference
                    QualifiedName
                      Identifier: ' Protocol'
                      Identifier: 'Events'
                  ConditionalType
                    TypeReference
                      Identifier: 'T'
                    TypeOperator
                      TypeReference
                        QualifiedName
                          Identifier: ' Protocol'
                          Identifier: 'Events'
                    TypeReference
                      Identifier: ' T'
                    NeverKeyword
            VoidKeyword
        ThisType
    PropertySignature
      Identifier: '
  addListener'
      FunctionType
        TypeParameter
          Identifier: 'T'
          UnionType
            TypeOperator
              TypeReference
                QualifiedName
                  Identifier: ' Protocol'
                  Identifier: 'Events'
            SymbolKeyword
        Parameter
          Identifier: 'event'
          TypeReference
            Identifier: ' T'
        Parameter
          Identifier: ' listener'
          FunctionType
            Parameter
              Identifier: 'payload'
              ConditionalType
                TypeReference
                  Identifier: ' T'
                SymbolKeyword
                AnyKeyword
                IndexedAccessType
                  TypeReference
                    QualifiedName
                      Identifier: ' Protocol'
                      Identifier: 'Events'
                  ConditionalType
                    TypeReference
                      Identifier: 'T'
                    TypeOperator
                      TypeReference
                        QualifiedName
                          Identifier: ' Protocol'
                          Identifier: 'Events'
                    TypeReference
                      Identifier: ' T'
                    NeverKeyword
            VoidKeyword
        ThisType
    PropertySignature
      Identifier: '
  off'
      FunctionType
        TypeParameter
          Identifier: 'T'
          UnionType
            TypeOperator
              TypeReference
                QualifiedName
                  Identifier: ' Protocol'
                  Identifier: 'Events'
            SymbolKeyword
        Parameter
          Identifier: 'event'
          TypeReference
            Identifier: ' T'
        Parameter
          Identifier: ' listener'
          FunctionType
            Parameter
              Identifier: 'payload'
              ConditionalType
                TypeReference
                  Identifier: ' T'
                SymbolKeyword
                AnyKeyword
                IndexedAccessType
                  TypeReference
                    QualifiedName
                      Identifier: ' Protocol'
                      Identifier: 'Events'
                  ConditionalType
                    TypeReference
                      Identifier: 'T'
                    TypeOperator
                      TypeReference
                        QualifiedName
                          Identifier: ' Protocol'
                          Identifier: 'Events'
                    TypeReference
                      Identifier: ' T'
                    NeverKeyword
            VoidKeyword
        ThisType
    PropertySignature
      Identifier: '
  removeListener'
      FunctionType
        TypeParameter
          Identifier: 'T'
          UnionType
            TypeOperator
              TypeReference
                QualifiedName
                  Identifier: ' Protocol'
                  Identifier: 'Events'
            SymbolKeyword
        Parameter
          Identifier: 'event'
          TypeReference
            Identifier: ' T'
        Parameter
          Identifier: ' listener'
          FunctionType
            Parameter
              Identifier: 'payload'
              ConditionalType
                TypeReference
                  Identifier: ' T'
                SymbolKeyword
                AnyKeyword
                IndexedAccessType
                  TypeReference
                    QualifiedName
                      Identifier: ' Protocol'
                      Identifier: 'Events'
                  ConditionalType
                    TypeReference
                      Identifier: 'T'
                    TypeOperator
                      TypeReference
                        QualifiedName
                          Identifier: ' Protocol'
                          Identifier: 'Events'
                    TypeReference
                      Identifier: ' T'
                    NeverKeyword
            VoidKeyword
        ThisType
    PropertySignature
      Identifier: '
  once'
      FunctionType
        TypeParameter
          Identifier: 'T'
          UnionType
            TypeOperator
              TypeReference
                QualifiedName
                  Identifier: ' Protocol'
                  Identifier: 'Events'
            SymbolKeyword
        Parameter
          Identifier: 'event'
          TypeReference
            Identifier: ' T'
        Parameter
          Identifier: ' listener'
          FunctionType
            Parameter
              Identifier: 'payload'
              ConditionalType
                TypeReference
                  Identifier: ' T'
                SymbolKeyword
                AnyKeyword
                IndexedAccessType
                  TypeReference
                    QualifiedName
                      Identifier: ' Protocol'
                      Identifier: 'Events'
                  ConditionalType
                    TypeReference
                      Identifier: 'T'
                    TypeOperator
                      TypeReference
                        QualifiedName
                          Identifier: ' Protocol'
                          Identifier: 'Events'
                    TypeReference
                      Identifier: ' T'
                    NeverKeyword
            VoidKeyword
        ThisType
    MethodSignature
      Identifier: '
  /**
   * @param method Protocol method name.
   * @param params Optional method parameters.
   */
  send'
      TypeParameter
        Identifier: 'T'
        TypeOperator
          TypeReference
            QualifiedName
              Identifier: ' Protocol'
              Identifier: 'CommandParameters'
      Parameter
        Identifier: '
    method'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: '
    params'
        QuestionToken
        IndexedAccessType
          TypeReference
            QualifiedName
              Identifier: ' Protocol'
              Identifier: 'CommandParameters'
          TypeReference
            Identifier: 'T'
      TypeReference
        Identifier: ' Promise'
        IndexedAccessType
          TypeReference
            QualifiedName
              Identifier: 'Protocol'
              Identifier: 'CommandReturnValues'
          TypeReference
            Identifier: 'T'
    MethodSignature
      Identifier: '
  /**
   * Detaches the CDPSession from the target. Once detached, the CDPSession object won't emit any events and can't be
   * used to send messages.
   */
  detach'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  TypeAliasDeclaration
    Identifier: ' DeviceDescriptor'
    TypeLiteral
      PropertySignature
        Identifier: '
  viewport'
        TypeReference
          Identifier: ' ViewportSize'
      PropertySignature
        Identifier: '
  userAgent'
        StringKeyword
      PropertySignature
        Identifier: '
  deviceScaleFactor'
        NumberKeyword
      PropertySignature
        Identifier: '
  isMobile'
        BooleanKeyword
      PropertySignature
        Identifier: '
  hasTouch'
        BooleanKeyword
      PropertySignature
        Identifier: '
  defaultBrowserType'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
  ModuleDeclaration
    ExportKeyword
    Identifier: ' errors'
    ModuleBlock
      ClassDeclaration
        Identifier: ' TimeoutError'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' Error'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Accessibility'
    MethodSignature
      Identifier: '
  /**
   * Captures the current state of the accessibility tree. The returned object represents the root accessible node of
   * the page.
   *
   * **NOTE** The Chromium accessibility tree contains nodes that go unused on most platforms and by most screen
   * readers. Playwright will discard them as well for an easier to process tree, unless `interestingOnly` is set to
   * `false`.
   *
   * **Usage**
   *
   * An example of dumping the entire accessibility tree:
   *
   * ```js
   * const snapshot = await page.accessibility.snapshot();
   * console.log(snapshot);
   * ```
   *
   * An example of logging the focused node's name:
   *
   * ```js
   * const snapshot = await page.accessibility.snapshot();
   * const node = findFocusedNode(snapshot);
   * console.log(node && node.name);
   *
   * function findFocusedNode(node) {
   *   if (node.focused)
   *     return node;
   *   for (const child of node.children || []) {
   *     const foundNode = findFocusedNode(child);
   *     if (foundNode)
   *       return foundNode;
   *   }
   *   return null;
   * }
   * ```
   *
   * @deprecated This method is deprecated. Please use other libraries such as [Axe](https://www.deque.com/axe/) if you need to test
   * page accessibility. See our Node.js [guide](https://playwright.dev/docs/accessibility-testing) for integration with
   * Axe.
   * @param options
   */
  snapshot'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' AccessibilitySnapshotOptions'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'AccessibilityNode'
  TypeAliasDeclaration
    Identifier: ' AccessibilityNode'
    TypeLiteral
      PropertySignature
        Identifier: '
  role'
        StringKeyword
      PropertySignature
        Identifier: '
  name'
        StringKeyword
      PropertySignature
        Identifier: '
  value'
        QuestionToken
        UnionType
          StringKeyword
          NumberKeyword
      PropertySignature
        Identifier: '
  description'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  keyshortcuts'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  roledescription'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  valuetext'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  disabled'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  expanded'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  focused'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  modal'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  multiline'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  multiselectable'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  readonly'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  required'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  selected'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  checked'
        QuestionToken
        UnionType
          BooleanKeyword
          LiteralType
            StringLiteral
      PropertySignature
        Identifier: '
  pressed'
        QuestionToken
        UnionType
          BooleanKeyword
          LiteralType
            StringLiteral
      PropertySignature
        Identifier: '
  level'
        QuestionToken
        NumberKeyword
      PropertySignature
        Identifier: '
  valuemin'
        QuestionToken
        NumberKeyword
      PropertySignature
        Identifier: '
  valuemax'
        QuestionToken
        NumberKeyword
      PropertySignature
        Identifier: '
  autocomplete'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  haspopup'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  invalid'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  orientation'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  children'
        QuestionToken
        ArrayType
          TypeReference
            Identifier: ' AccessibilityNode'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' devices'
        TypeReference
          Identifier: ' Devices'
  TypeAliasDeclaration
    Identifier: ' ElectronType'
    ImportType
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ElectronApplication'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction`.
   *
   * If the function passed to the
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * returns a [Promise], then
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * would wait for the promise to resolve and return its value.
   *
   * If the function passed to the
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * returns a non-[Serializable] value, then
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * returns `undefined`. Playwright also supports transferring some additional values that are not serializable by
   * `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.
   * @param pageFunction Function to be evaluated in the main Electron process.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'ElectronType'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction`.
   *
   * If the function passed to the
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * returns a [Promise], then
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * would wait for the promise to resolve and return its value.
   *
   * If the function passed to the
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * returns a non-[Serializable] value, then
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * returns `undefined`. Playwright also supports transferring some additional values that are not serializable by
   * `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`.
   * @param pageFunction Function to be evaluated in the main Electron process.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluate'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'ElectronType'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '

  /**
   * Returns the return value of `pageFunction` as a {@link JSHandle}.
   *
   * The only difference between
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * and
   * [electronApplication.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate-handle)
   * is that
   * [electronApplication.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate-handle)
   * returns {@link JSHandle}.
   *
   * If the function passed to the
   * [electronApplication.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate-handle)
   * returns a [Promise], then
   * [electronApplication.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate-handle)
   * would wait for the promise to resolve and return its value.
   * @param pageFunction Function to be evaluated in the main Electron process.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      TypeParameter
        Identifier: ' Arg'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'ElectronType'
          TypeReference
            Identifier: ' Arg'
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        TypeReference
          Identifier: ' Arg'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Returns the return value of `pageFunction` as a {@link JSHandle}.
   *
   * The only difference between
   * [electronApplication.evaluate(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate)
   * and
   * [electronApplication.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate-handle)
   * is that
   * [electronApplication.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate-handle)
   * returns {@link JSHandle}.
   *
   * If the function passed to the
   * [electronApplication.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate-handle)
   * returns a [Promise], then
   * [electronApplication.evaluateHandle(pageFunction[, arg])](https://playwright.dev/docs/api/class-electronapplication#electron-application-evaluate-handle)
   * would wait for the promise to resolve and return its value.
   * @param pageFunction Function to be evaluated in the main Electron process.
   * @param arg Optional argument to pass to `pageFunction`.
   */
  evaluateHandle'
      TypeParameter
        Identifier: 'R'
      Parameter
        Identifier: 'pageFunction'
        TypeReference
          Identifier: ' PageFunctionOn'
          TypeReference
            Identifier: 'ElectronType'
          VoidKeyword
          TypeReference
            Identifier: ' R'
      Parameter
        Identifier: ' arg'
        QuestionToken
        AnyKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'SmartHandle'
          TypeReference
            Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * This event is issued when the application process has been terminated.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the Electron main process calls one of console API methods, e.g. `console.log` or
   * `console.dir`.
   *
   * The arguments passed into `console.log` are available on the {@link ConsoleMessage} event handler argument.
   *
   * **Usage**
   *
   * ```js
   * electronApp.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * This event is issued for every window that is created **and loaded** in Electron. It contains a {@link Page} that
   * can be used for Playwright automation.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * This event is issued when the application process has been terminated.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the Electron main process calls one of console API methods, e.g. `console.log` or
   * `console.dir`.
   *
   * The arguments passed into `console.log` are available on the {@link ConsoleMessage} event handler argument.
   *
   * **Usage**
   *
   * ```js
   * electronApp.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * This event is issued for every window that is created **and loaded** in Electron. It contains a {@link Page} that
   * can be used for Playwright automation.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * This event is issued when the application process has been terminated.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the Electron main process calls one of console API methods, e.g. `console.log` or
   * `console.dir`.
   *
   * The arguments passed into `console.log` are available on the {@link ConsoleMessage} event handler argument.
   *
   * **Usage**
   *
   * ```js
   * electronApp.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'consoleMessage'
            TypeReference
              Identifier: ' ConsoleMessage'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * This event is issued for every window that is created **and loaded** in Electron. It contains a {@link Page} that
   * can be used for Playwright automation.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'page'
            TypeReference
              Identifier: ' Page'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Returns the BrowserWindow object that corresponds to the given Playwright page.
   * @param page Page to retrieve the window for.
   */
  browserWindow'
      Parameter
        Identifier: 'page'
        TypeReference
          Identifier: ' Page'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'JSHandle'
    MethodSignature
      Identifier: '

  /**
   * Closes Electron application.
   */
  close'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This method returns browser context that can be used for setting up context-wide routing, etc.
   */
  context'
      TypeReference
        Identifier: ' BrowserContext'
    MethodSignature
      Identifier: '

  /**
   * Convenience method that waits for the first application window to be opened.
   *
   * **Usage**
   *
   * ```js
   * const electronApp = await electron.launch({
   *   args: ['main.js']
   * });
   * const window = await electronApp.firstWindow();
   * // ...
   * ```
   *
   * @param options
   */
  firstWindow'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time to wait for in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The
     * default value can be changed by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout).
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Returns the main process for this Electron Application.
   */
  process'
      TypeReference
        Identifier: ' ChildProcess'
    MethodSignature
      Identifier: '

  /**
   * This event is issued when the application process has been terminated.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Emitted when JavaScript within the Electron main process calls one of console API methods, e.g. `console.log` or
   * `console.dir`.
   *
   * The arguments passed into `console.log` are available on the {@link ConsoleMessage} event handler argument.
   *
   * **Usage**
   *
   * ```js
   * electronApp.on('console', async msg => {
   *   const values = [];
   *   for (const arg of msg.args())
   *     values.push(await arg.jsonValue());
   *   console.log(...values);
   * });
   * await electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));
   * ```
   *
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'consoleMessage'
                  TypeReference
                    Identifier: ' ConsoleMessage'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'consoleMessage'
                TypeReference
                  Identifier: ' ConsoleMessage'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ConsoleMessage'
    MethodSignature
      Identifier: '

  /**
   * This event is issued for every window that is created **and loaded** in Electron. It contains a {@link Page} that
   * can be used for Playwright automation.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'page'
                  TypeReference
                    Identifier: ' Page'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'page'
                TypeReference
                  Identifier: ' Page'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '


  /**
   * Convenience method that returns all the opened windows.
   */
  windows'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AndroidElementInfo'
    TypeLiteral
      PropertySignature
        Identifier: '
  clazz'
        StringKeyword
      PropertySignature
        Identifier: '
  desc'
        StringKeyword
      PropertySignature
        Identifier: '
  res'
        StringKeyword
      PropertySignature
        Identifier: '
  pkg'
        StringKeyword
      PropertySignature
        Identifier: '
  text'
        StringKeyword
      PropertySignature
        Identifier: '
  bounds'
        TypeLiteral
          PropertySignature
            Identifier: ' x'
            NumberKeyword
          PropertySignature
            Identifier: ' y'
            NumberKeyword
          PropertySignature
            Identifier: ' width'
            NumberKeyword
          PropertySignature
            Identifier: ' height'
            NumberKeyword
      PropertySignature
        Identifier: '
  checkable'
        BooleanKeyword
      PropertySignature
        Identifier: '
  checked'
        BooleanKeyword
      PropertySignature
        Identifier: '
  clickable'
        BooleanKeyword
      PropertySignature
        Identifier: '
  enabled'
        BooleanKeyword
      PropertySignature
        Identifier: '
  focusable'
        BooleanKeyword
      PropertySignature
        Identifier: '
  focused'
        BooleanKeyword
      PropertySignature
        Identifier: '
  longClickable'
        BooleanKeyword
      PropertySignature
        Identifier: '
  scrollable'
        BooleanKeyword
      PropertySignature
        Identifier: '
  selected'
        BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AndroidSelector'
    TypeLiteral
      PropertySignature
        Identifier: '
  checkable'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  checked'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  clazz'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      PropertySignature
        Identifier: '
  clickable'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  depth'
        QuestionToken
        NumberKeyword
      PropertySignature
        Identifier: '
  desc'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      PropertySignature
        Identifier: '
  enabled'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  focusable'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  focused'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  hasChild'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' selector'
            TypeReference
              Identifier: ' AndroidSelector'
      PropertySignature
        Identifier: '
  hasDescendant'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' selector'
            TypeReference
              Identifier: ' AndroidSelector'
          PropertySignature
            Identifier: ' maxDepth'
            QuestionToken
            NumberKeyword
      PropertySignature
        Identifier: '
  longClickable'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  pkg'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      PropertySignature
        Identifier: '
  res'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      PropertySignature
        Identifier: '
  scrollable'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  selected'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  text'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AndroidKey'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' _electron'
        TypeReference
          Identifier: ' Electron'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' _android'
        TypeReference
          Identifier: ' Android'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' _experimentalBidi'
        TypeReference
          Identifier: ' BrowserType'
  ExportDeclaration
    NamedExports
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Android'
    MethodSignature
      Identifier: '
  /**
   * This methods attaches Playwright to an existing Android device. Use
   * [android.launchServer([options])](https://playwright.dev/docs/api/class-android#android-launch-server) to launch a
   * new Android server instance.
   * @param wsEndpoint A browser websocket endpoint to connect to.
   * @param options
   */
  connect'
      Parameter
        Identifier: 'wsEndpoint'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Additional HTTP headers to be sent with web socket connect request. Optional.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going
     * on. Defaults to `0`.
     */
    slowMo'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass
     * `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'AndroidDevice'
    MethodSignature
      Identifier: '

  /**
   * Returns the list of detected Android devices.
   * @param options
   */
  devices'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional host to establish ADB server connection. Default to `127.0.0.1`.
     */
    host'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Prevents automatic playwright driver installation on attach. Assumes that the drivers have been installed already.
     */
    omitDriverInstall'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional port to establish ADB server connection. Default to `5037`.
     */
    port'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'AndroidDevice'
    MethodSignature
      Identifier: '

  /**
   * Launches Playwright Android server that clients can connect to. See the following example:
   *
   * **Usage**
   *
   * Server Side:
   *
   * ```js
   * const { _android } = require('playwright');
   *
   * (async () => {
   *   const browserServer = await _android.launchServer({
   *     // If you have multiple devices connected and want to use a specific one.
   *     // deviceSerialNumber: '<deviceSerialNumber>',
   *   });
   *   const wsEndpoint = browserServer.wsEndpoint();
   *   console.log(wsEndpoint);
   * })();
   * ```
   *
   * Client Side:
   *
   * ```js
   * const { _android } = require('playwright');
   *
   * (async () => {
   *   const device = await _android.connect('<wsEndpoint>');
   *
   *   console.log(device.model());
   *   console.log(device.serial());
   *   await device.shell('am force-stop com.android.chrome');
   *   const context = await device.launchBrowser();
   *
   *   const page = await context.newPage();
   *   await page.goto('https://webkit.org/');
   *   console.log(await page.evaluate(() => window.location.href));
   *   await page.screenshot({ path: 'page-chrome-1.png' });
   *
   *   await context.close();
   * })();
   * ```
   *
   * @param options
   */
  launchServer'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional host to establish ADB server connection. Default to `127.0.0.1`.
     */
    adbHost'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional port to establish ADB server connection. Default to `5037`.
     */
    adbPort'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional device serial number to launch the browser on. If not specified, it will throw if multiple devices are
     * connected.
     */
    deviceSerialNumber'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Host to use for the web socket. It is optional and if it is omitted, the server will accept connections on the
     * unspecified IPv6 address (::) when IPv6 is available, or the unspecified IPv4 address (0.0.0.0) otherwise. Consider
     * hardening it with picking a specific interface.
     */
    host'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Prevents automatic playwright driver installation on attach. Assumes that the drivers have been installed already.
     */
    omitDriverInstall'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Port to use for the web socket. Defaults to 0 that picks any available port.
     */
    port'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Path at which to serve the Android Server. For security, this defaults to an unguessable string.
     *
     * **NOTE** Any process or web page (including those running in Playwright) with knowledge of the `wsPath` can take
     * control of the OS user. For this reason, you should use an unguessable token when using this option.
     */
    wsPath'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'BrowserServer'
    MethodSignature
      Identifier: '

  /**
   * This setting will change the default maximum time for all the methods accepting `timeout` option.
   * @param timeout Maximum time in milliseconds
   */
  setDefaultTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AndroidDevice'
    MethodSignature
      Identifier: '
  /**
   * Emitted when the device connection gets closed.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidDevice'
            TypeReference
              Identifier: ' AndroidDevice'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a new WebView instance is detected.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidWebView'
            TypeReference
              Identifier: ' AndroidWebView'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidDevice'
            TypeReference
              Identifier: ' AndroidDevice'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidWebView'
            TypeReference
              Identifier: ' AndroidWebView'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the device connection gets closed.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidDevice'
            TypeReference
              Identifier: ' AndroidDevice'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a new WebView instance is detected.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidWebView'
            TypeReference
              Identifier: ' AndroidWebView'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidDevice'
            TypeReference
              Identifier: ' AndroidDevice'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidWebView'
            TypeReference
              Identifier: ' AndroidWebView'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidDevice'
            TypeReference
              Identifier: ' AndroidDevice'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidWebView'
            TypeReference
              Identifier: ' AndroidWebView'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the device connection gets closed.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidDevice'
            TypeReference
              Identifier: ' AndroidDevice'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when a new WebView instance is detected.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'androidWebView'
            TypeReference
              Identifier: ' AndroidWebView'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Disconnects from the device.
   */
  close'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Drags the widget defined by `selector` towards `dest` point.
   * @param selector Selector to drag.
   * @param dest Point to drag to.
   * @param options
   */
  drag'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' dest'
        TypeLiteral
          PropertySignature
            Identifier: '
    x'
            NumberKeyword
          PropertySignature
            Identifier: '

    y'
            NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional speed of the drag in pixels per second.
     */
    speed'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Fills the specific `selector` input box with `text`.
   * @param selector Selector to fill.
   * @param text Text to be filled in the input box.
   * @param options
   */
  fill'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' text'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Flings the widget defined by `selector` in  the specified `direction`.
   * @param selector Selector to fling.
   * @param direction Fling direction.
   * @param options
   */
  fling'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' direction'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional speed of the fling in pixels per second.
     */
    speed'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns information about a widget defined by `selector`.
   * @param selector Selector to return information about.
   */
  info'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'AndroidElementInfo'
    MethodSignature
      Identifier: '

  /**
   * Installs an apk on the device.
   * @param file Either a path to the apk file, or apk file content.
   * @param options
   */
  installApk'
      Parameter
        Identifier: 'file'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'Buffer'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional arguments to pass to the `shell:cmd package install` call. Defaults to `-r -t -S`.
     */
    args'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Launches Chrome browser on the device, and returns its persistent context.
   * @param options
   */
  launchBrowser'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.
     */
    acceptDownloads'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * **NOTE** Use custom browser args at your own risk, as some of them may break Playwright functionality.
     *
     * Additional arguments to pass to the browser instance. The list of Chromium flags can be found
     * [here](https://peter.sh/experiments/chromium-command-line-switches/).
     */
    args'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * When using [page.goto(url[, options])](https://playwright.dev/docs/api/class-page#page-goto),
     * [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route),
     * [page.waitForURL(url[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-url),
     * [page.waitForRequest(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-request),
     * or
     * [page.waitForResponse(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-response)
     * it takes the base URL in consideration by using the
     * [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL.
     * Unset by default. Examples:
     * - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
     * - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in
     *   `http://localhost:3000/foo/bar.html`
     * - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in
     *   `http://localhost:3000/bar.html`
     */
    baseURL'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Toggles bypassing page's Content-Security-Policy. Defaults to `false`.
     */
    bypassCSP'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'light'`.
     */
    colorScheme'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Optional package name to launch instead of default Chrome for Android.
     */
    command'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about
     * [emulating devices with device scale factor](https://playwright.dev/docs/emulation#devices).
     */
    deviceScaleFactor'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * An object containing additional HTTP headers to be sent with every request. Defaults to none.
     */
    extraHTTPHeaders'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'none'`.
     */
    forcedColors'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    geolocation'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Latitude between -90 and 90.
       */
      latitude'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Longitude between -180 and 180.
       */
      longitude'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Non-negative accuracy value. Defaults to `0`.
       */
      accuracy'
                QuestionToken
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Specifies if viewport supports touch events. Defaults to false. Learn more about
     * [mobile emulation](https://playwright.dev/docs/emulation#devices).
     */
    hasTouch'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no
     * origin is specified, the username and password are sent to any servers upon unauthorized responses.
     */
    httpCredentials'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      username'
                StringKeyword
              PropertySignature
                Identifier: '

      password'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Restrain sending http credentials on specific origin (scheme://host:port).
       */
      origin'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * This option only applies to the requests sent from corresponding {@link APIRequestContext} and does not affect
       * requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be
       * sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response
       * with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.
       */
      send'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device,
     * so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more
     * about [mobile emulation](https://playwright.dev/docs/emulation#ismobile).
     */
    isMobile'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about
     * [disabling JavaScript](https://playwright.dev/docs/emulation#javascript-enabled).
     */
    javaScriptEnabled'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value,
     * `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default
     * locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/emulation#locale--timezone).
     */
    locale'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Logger sink for Playwright logging.
     */
    logger'
            QuestionToken
            TypeReference
              Identifier: ' Logger'
          PropertySignature
            Identifier: '

    /**
     * Whether to emulate network being offline. Defaults to `false`. Learn more about
     * [network emulation](https://playwright.dev/docs/emulation#offline).
     */
    offline'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A list of permissions to grant to all pages in this context. See
     * [browserContext.grantPermissions(permissions[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-grant-permissions)
     * for more details. Defaults to none.
     */
    permissions'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Network proxy settings.
     */
    proxy'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
       * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
       */
      server'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
       */
      bypass'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional username to use if HTTP proxy requires authentication.
       */
      username'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional password to use if HTTP proxy requires authentication.
       */
      password'
                QuestionToken
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file.
     * If not specified, the HAR is not recorded. Make sure to await
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
     * the HAR to be saved.
     */
    recordHar'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use
       * `content` policy instead.
       */
      omitContent'
                QuestionToken
                BooleanKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional setting to control resource content management. If `omit` is specified, content is not persisted. If
       * `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is
       * specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output
       * files and to `embed` for all other file extensions.
       */
      content'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
              PropertySignature
                Identifier: '

      /**
       * Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by
       * default.
       */
      path'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page,
       * cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.
       */
      mode'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
              PropertySignature
                Identifier: '

      /**
       * A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was
       * provided and the passed URL is a path, it gets merged via the
       * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.
       */
      urlFilter'
                QuestionToken
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded.
     * Make sure to await
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
     * videos to be saved.
     */
    recordVideo'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Path to the directory to put videos into.
       */
      dir'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to
       * fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of
       * each page will be scaled down if necessary to fit the specified size.
       */
      size'
                QuestionToken
                TypeLiteral
                  PropertySignature
                    Identifier: '
        /**
         * Video frame width.
         */
        width'
                    NumberKeyword
                  PropertySignature
                    Identifier: '

        /**
         * Video frame height.
         */
        height'
                    NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.
     */
    reducedMotion'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the
     * `viewport` is set.
     */
    screen'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * page width in pixels.
       */
      width'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * page height in pixels.
       */
      height'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to allow sites to register Service workers. Defaults to `'allow'`.
     * - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be
     *   registered.
     * - `'block'`: Playwright will block all registration of Service Workers.
     */
    serviceWorkers'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on
     * selectors that imply single target DOM element will throw when more than one element matches the selector. This
     * option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See {@link Locator} to
     * learn more about the strict mode.
     */
    strictSelectors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Changes the timezone of the context. See
     * [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)
     * for a list of supported timezone IDs. Defaults to the system timezone.
     */
    timezoneId'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Specific user agent to use in this context.
     */
    userAgent'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated Use `recordVideo` instead.
     */
    videoSize'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Video frame width.
       */
      width'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Video frame height.
       */
      height'
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * @deprecated Use `recordVideo` instead.
     */
    videosPath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent
     * viewport emulation. Learn more about [viewport emulation](https://playwright.dev/docs/emulation#viewport).
     *
     * **NOTE** The `null` value opts out from the default presets, makes viewport depend on the host window size defined
     * by the operating system. It makes the execution of the tests non-deterministic.
     */
    viewport'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
       * page width in pixels.
       */
      width'
                  NumberKeyword
                PropertySignature
                  Identifier: '

      /**
       * page height in pixels.
       */
      height'
                  NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'BrowserContext'
    MethodSignature
      Identifier: '

  /**
   * Performs a long tap on the widget defined by `selector`.
   * @param selector Selector to tap on.
   * @param options
   */
  longTap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Device model.
   */
  model'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Launches a process in the shell on the device and returns a socket to communicate with the launched process.
   * @param command
   */
  open'
      Parameter
        Identifier: 'command'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'AndroidSocket'
    MethodSignature
      Identifier: '

  /**
   * Pinches the widget defined by `selector` in the closing direction.
   * @param selector Selector to pinch close.
   * @param percent The size of the pinch as a percentage of the widget's size.
   * @param options
   */
  pinchClose'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' percent'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional speed of the pinch in pixels per second.
     */
    speed'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Pinches the widget defined by `selector` in the open direction.
   * @param selector Selector to pinch open.
   * @param percent The size of the pinch as a percentage of the widget's size.
   * @param options
   */
  pinchOpen'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' percent'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional speed of the pinch in pixels per second.
     */
    speed'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Presses the specific `key` in the widget defined by `selector`.
   * @param selector Selector to press the key in.
   * @param key The key to press.
   * @param options
   */
  press'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' key'
        TypeReference
          Identifier: ' AndroidKey'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Copies a file to the device.
   * @param file Either a path to the file, or file content.
   * @param path Path to the file on the device.
   * @param options
   */
  push'
      Parameter
        Identifier: 'file'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'Buffer'
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional file mode, defaults to `644` (`rw-r--r--`).
     */
    mode'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the buffer with the captured screenshot of the device.
   * @param options
   */
  screenshot'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The file path to save the image to. If `path` is a relative path, then it is resolved relative to the current
     * working directory. If no path is provided, the image won't be saved to the disk.
     */
    path'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * Scrolls the widget defined by `selector` in  the specified `direction`.
   * @param selector Selector to scroll.
   * @param direction Scroll direction.
   * @param percent Distance to scroll as a percentage of the widget's size.
   * @param options
   */
  scroll'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' direction'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' percent'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional speed of the scroll in pixels per second.
     */
    speed'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Device serial number.
   */
  serial'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * This setting will change the default maximum time for all the methods accepting `timeout` option.
   * @param timeout Maximum time in milliseconds
   */
  setDefaultTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Executes a shell command on the device and returns its output.
   * @param command Shell command to execute.
   */
  shell'
      Parameter
        Identifier: 'command'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * Swipes the widget defined by `selector` in  the specified `direction`.
   * @param selector Selector to swipe.
   * @param direction Swipe direction.
   * @param percent Distance to swipe as a percentage of the widget's size.
   * @param options
   */
  swipe'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' direction'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' percent'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional speed of the swipe in pixels per second.
     */
    speed'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Taps on the widget defined by `selector`.
   * @param selector Selector to tap on.
   * @param options
   */
  tap'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional duration of the tap in milliseconds.
     */
    duration'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Waits for the specific `selector` to either appear or disappear, depending on the `state`.
   * @param selector Selector to wait for.
   * @param options
   */
  wait'
      Parameter
        Identifier: 'selector'
        TypeReference
          Identifier: ' AndroidSelector'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional state. Can be either:
     * - default - wait for element to be present.
     * - `'gone'` - wait for element to not be present.
     */
    state'
            QuestionToken
            LiteralType
              StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Emitted when the device connection gets closed.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'androidDevice'
                  TypeReference
                    Identifier: ' AndroidDevice'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'androidDevice'
                TypeReference
                  Identifier: ' AndroidDevice'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'AndroidDevice'
    MethodSignature
      Identifier: '

  /**
   * Emitted when a new WebView instance is detected.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'androidWebView'
                  TypeReference
                    Identifier: ' AndroidWebView'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'androidWebView'
                TypeReference
                  Identifier: ' AndroidWebView'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'AndroidWebView'
    MethodSignature
      Identifier: '


  /**
   * This method waits until {@link AndroidWebView} matching the `selector` is opened and returns it. If there is
   * already an open {@link AndroidWebView} matching the `selector`, returns immediately.
   * @param selector
   * @param options
   */
  webView'
      Parameter
        Identifier: 'selector'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional Package identifier.
     */
    pkg'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional webview socket name.
     */
    socketName'
            QuestionToken
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed
     * by using the
     * [androidDevice.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-androiddevice#android-device-set-default-timeout)
     * method.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'AndroidWebView'
    MethodSignature
      Identifier: '

  /**
   * Currently open WebViews.
   */
  webViews'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'AndroidWebView'
    PropertySignature
      Identifier: '

  input'
      TypeReference
        Identifier: ' AndroidInput'
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AndroidInput'
    MethodSignature
      Identifier: '
  /**
   * Performs a drag between `from` and `to` points.
   * @param from The start point of the drag.
   * @param to The end point of the drag.
   * @param steps The number of steps in the drag. Each step takes 5 milliseconds to complete.
   */
  drag'
      Parameter
        Identifier: 'from'
        TypeLiteral
          PropertySignature
            Identifier: '
    x'
            NumberKeyword
          PropertySignature
            Identifier: '

    y'
            NumberKeyword
      Parameter
        Identifier: ' to'
        TypeLiteral
          PropertySignature
            Identifier: '
    x'
            NumberKeyword
          PropertySignature
            Identifier: '

    y'
            NumberKeyword
      Parameter
        Identifier: ' steps'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Presses the `key`.
   * @param key Key to press.
   */
  press'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' AndroidKey'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Swipes following the path defined by `segments`.
   * @param from The point to start swiping from.
   * @param segments Points following the `from` point in the swipe gesture.
   * @param steps The number of steps for each segment. Each step takes 5 milliseconds to complete, so 100 steps means half a second
   * per each segment.
   */
  swipe'
      Parameter
        Identifier: 'from'
        TypeLiteral
          PropertySignature
            Identifier: '
    x'
            NumberKeyword
          PropertySignature
            Identifier: '

    y'
            NumberKeyword
      Parameter
        Identifier: ' segments'
        TypeReference
          Identifier: ' ReadonlyArray'
          TypeLiteral
            PropertySignature
              Identifier: '
    x'
              NumberKeyword
            PropertySignature
              Identifier: '

    y'
              NumberKeyword
      Parameter
        Identifier: ' steps'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Taps at the specified `point`.
   * @param point The point to tap at.
   */
  tap'
      Parameter
        Identifier: 'point'
        TypeLiteral
          PropertySignature
            Identifier: '
    x'
            NumberKeyword
          PropertySignature
            Identifier: '

    y'
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Types `text` into currently focused widget.
   * @param text Text to type.
   */
  type'
      Parameter
        Identifier: 'text'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AndroidSocket'
    MethodSignature
      Identifier: '
  /**
   * Emitted when the socket is closed.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when data is available to read from the socket.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'buffer'
            TypeReference
              Identifier: ' Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'buffer'
            TypeReference
              Identifier: ' Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the socket is closed.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when data is available to read from the socket.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'buffer'
            TypeReference
              Identifier: ' Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'buffer'
            TypeReference
              Identifier: ' Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'buffer'
            TypeReference
              Identifier: ' Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the socket is closed.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when data is available to read from the socket.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'buffer'
            TypeReference
              Identifier: ' Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Closes the socket.
   */
  close'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Writes some `data` to the socket.
   * @param data Data to write.
   */
  write'
      Parameter
        Identifier: 'data'
        TypeReference
          Identifier: ' Buffer'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AndroidWebView'
    MethodSignature
      Identifier: '
  /**
   * Emitted when the WebView is closed.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the WebView is closed.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the WebView is closed.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Connects to the WebView and returns a regular Playwright {@link Page} to interact with.
   */
  page'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * WebView process PID.
   */
  pid'
      NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * WebView package identifier.
   */
  pkg'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' APIRequest'
    MethodSignature
      Identifier: '
  /**
   * Creates new instances of {@link APIRequestContext}.
   * @param options
   */
  newContext'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Methods like
     * [apiRequestContext.get(url[, options])](https://playwright.dev/docs/api/class-apirequestcontext#api-request-context-get)
     * take the base URL into consideration by using the
     * [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL.
     * Examples:
     * - baseURL: `http://localhost:3000` and sending request to `/bar.html` results in `http://localhost:3000/bar.html`
     * - baseURL: `http://localhost:3000/foo/` and sending request to `./bar.html` results in
     *   `http://localhost:3000/foo/bar.html`
     * - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in
     *   `http://localhost:3000/bar.html`
     */
    baseURL'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * TLS Client Authentication allows the server to request a client certificate and verify it.
     *
     * **Details**
     *
     * An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`,
     * a single `pfxPath`, or their corresponding direct value equivalents (`cert` and `key`, or `pfx`). Optionally,
     * `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided
     * with an exact match to the request origin that the certificate is valid for.
     *
     * **NOTE** Using Client Certificates in combination with Proxy Servers is not supported.
     *
     * **NOTE** When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it
     * work by replacing `localhost` with `local.playwright`.
     */
    clientCertificates'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
       * Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.
       */
      origin'
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Path to the file with the certificate in PEM format.
       */
      certPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the certificate in PEM format.
       */
      cert'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Path to the file with the private key in PEM format.
       */
      keyPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the private key in PEM format.
       */
      key'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Path to the PFX or PKCS12 encoded private key and certificate chain.
       */
      pfxPath'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Direct value of the PFX or PKCS12 encoded private key and certificate chain.
       */
      pfx'
                  QuestionToken
                  TypeReference
                    Identifier: ' Buffer'
                PropertySignature
                  Identifier: '

      /**
       * Passphrase for the private key (PEM or PFX).
       */
      passphrase'
                  QuestionToken
                  StringKeyword
          PropertySignature
            Identifier: '

    /**
     * An object containing additional HTTP headers to be sent with every request. Defaults to none.
     */
    extraHTTPHeaders'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no
     * origin is specified, the username and password are sent to any servers upon unauthorized responses.
     */
    httpCredentials'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      username'
                StringKeyword
              PropertySignature
                Identifier: '

      password'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Restrain sending http credentials on specific origin (scheme://host:port).
       */
      origin'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * This option only applies to the requests sent from corresponding {@link APIRequestContext} and does not affect
       * requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be
       * sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response
       * with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.
       */
      send'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Network proxy settings.
     */
    proxy'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
       * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
       */
      server'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
       */
      bypass'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional username to use if HTTP proxy requires authentication.
       */
      username'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional password to use if HTTP proxy requires authentication.
       */
      password'
                QuestionToken
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Populates context with given storage state. This option can be used to initialize context with logged-in
     * information obtained via
     * [browserContext.storageState([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-storage-state)
     * or
     * [apiRequestContext.storageState([options])](https://playwright.dev/docs/api/class-apirequestcontext#api-request-context-storage-state).
     * Either a path to the file with saved storage, or the value returned by one of
     * [browserContext.storageState([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-storage-state)
     * or
     * [apiRequestContext.storageState([options])](https://playwright.dev/docs/api/class-apirequestcontext#api-request-context-storage-state)
     * methods.
     */
    storageState'
            QuestionToken
            UnionType
              StringKeyword
              TypeLiteral
                PropertySignature
                  Identifier: '
      cookies'
                  TypeReference
                    Identifier: ' Array'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
        name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        value'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        domain'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        path'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        /**
         * Unix time in seconds.
         */
        expires'
                        NumberKeyword
                      PropertySignature
                        Identifier: '

        httpOnly'
                        BooleanKeyword
                      PropertySignature
                        Identifier: '

        secure'
                        BooleanKeyword
                      PropertySignature
                        Identifier: '

        sameSite'
                        UnionType
                          LiteralType
                            StringLiteral
                          LiteralType
                            StringLiteral
                          LiteralType
                            StringLiteral
                PropertySignature
                  Identifier: '

      origins'
                  TypeReference
                    Identifier: ' Array'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
        origin'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        localStorage'
                        TypeReference
                          Identifier: ' Array'
                          TypeLiteral
                            PropertySignature
                              Identifier: '
          name'
                              StringKeyword
                            PropertySignature
                              Identifier: '

          value'
                              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds to wait for the response. Defaults to `30000` (30 seconds). Pass `0` to disable
     * timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Specific user agent to use in this context.
     */
    userAgent'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIRequestContext'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' APIRequestContext'
    MethodSignature
      Identifier: '
  /**
   * Sends HTTP(S) [DELETE](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request and returns its
   * response. The method will populate request cookies from the context and update context cookies from the response.
   * The method will automatically follow redirects.
   * @param url Target URL.
   * @param options
   */
  delete'
      Parameter
        Identifier: 'url'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string
     * and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type`
     * header will be set to `application/octet-stream` if not explicitly set.
     */
    data'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status
     * codes.
     */
    failOnStatusCode'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent
     * as this request body. If this parameter is specified `content-type` header will be set to
     * `application/x-www-form-urlencoded` unless explicitly provided.
     */
    form'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by
     * it.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
     */
    maxRedirects'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not
     * retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
     */
    maxRetries'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this
     * request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless
     * explicitly provided. File values can be passed either as
     * [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file
     * name, mime-type and its content.
     */
    multipart'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' FormData'
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
                    TypeReference
                      Identifier: 'ReadStream'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
      /**
       * File name
       */
      name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File type
       */
      mimeType'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File content
       */
      buffer'
                        TypeReference
                          Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Query parameters to be sent with the URL.
     */
    params'
            QuestionToken
            UnionType
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
              TypeReference
                Identifier: 'URLSearchParams'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIResponse'
    MethodSignature
      Identifier: '

  /**
   * All responses returned by
   * [apiRequestContext.get(url[, options])](https://playwright.dev/docs/api/class-apirequestcontext#api-request-context-get)
   * and similar methods are stored in the memory, so that you can later call
   * [apiResponse.body()](https://playwright.dev/docs/api/class-apiresponse#api-response-body).This method discards all
   * its resources, calling any method on disposed {@link APIRequestContext} will throw an exception.
   * @param options
   */
  dispose'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The reason to be reported to the operations interrupted by the context disposal.
     */
    reason'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Sends HTTP(S) request and returns its response. The method will populate request cookies from the context and
   * update context cookies from the response. The method will automatically follow redirects.
   *
   * **Usage**
   *
   * JSON objects can be passed directly to the request:
   *
   * ```js
   * await request.fetch('https://example.com/api/createBook', {
   *   method: 'post',
   *   data: {
   *     title: 'Book Title',
   *     author: 'John Doe',
   *   }
   * });
   * ```
   *
   * The common way to send file(s) in the body of a request is to upload them as form fields with `multipart/form-data`
   * encoding. Use [FormData] to construct request body and pass it to the request as `multipart` parameter:
   *
   * ```js
   * const form = new FormData();
   * form.set('name', 'John');
   * form.append('name', 'Doe');
   * // Send two file fields with the same name.
   * form.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));
   * form.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));
   * await request.fetch('https://example.com/api/uploadForm', {
   *   multipart: form
   * });
   * ```
   *
   * @param urlOrRequest Target URL or Request to get all parameters from.
   * @param options
   */
  fetch'
      Parameter
        Identifier: 'urlOrRequest'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'Request'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string
     * and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type`
     * header will be set to `application/octet-stream` if not explicitly set.
     */
    data'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status
     * codes.
     */
    failOnStatusCode'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent
     * as this request body. If this parameter is specified `content-type` header will be set to
     * `application/x-www-form-urlencoded` unless explicitly provided.
     */
    form'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by
     * it.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
     */
    maxRedirects'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not
     * retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
     */
    maxRetries'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * If set changes the fetch method (e.g. [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) or
     * [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)). If not specified, GET method is used.
     */
    method'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this
     * request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless
     * explicitly provided. File values can be passed either as
     * [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file
     * name, mime-type and its content.
     */
    multipart'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' FormData'
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
                    TypeReference
                      Identifier: 'ReadStream'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
      /**
       * File name
       */
      name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File type
       */
      mimeType'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File content
       */
      buffer'
                        TypeReference
                          Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Query parameters to be sent with the URL.
     */
    params'
            QuestionToken
            UnionType
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
              TypeReference
                Identifier: 'URLSearchParams'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIResponse'
    MethodSignature
      Identifier: '

  /**
   * Sends HTTP(S) [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request and returns its
   * response. The method will populate request cookies from the context and update context cookies from the response.
   * The method will automatically follow redirects.
   *
   * **Usage**
   *
   * Request parameters can be configured with `params` option, they will be serialized into the URL search parameters:
   *
   * ```js
   * // Passing params as object
   * await request.get('https://example.com/api/getText', {
   *   params: {
   *     'isbn': '1234',
   *     'page': 23,
   *   }
   * });
   *
   * // Passing params as URLSearchParams
   * const searchParams = new URLSearchParams();
   * searchParams.set('isbn', '1234');
   * searchParams.append('page', 23);
   * searchParams.append('page', 24);
   * await request.get('https://example.com/api/getText', { params: searchParams });
   *
   * // Passing params as string
   * const queryString = 'isbn=1234&page=23&page=24';
   * await request.get('https://example.com/api/getText', { params: queryString });
   * ```
   *
   * @param url Target URL.
   * @param options
   */
  get'
      Parameter
        Identifier: 'url'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string
     * and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type`
     * header will be set to `application/octet-stream` if not explicitly set.
     */
    data'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status
     * codes.
     */
    failOnStatusCode'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent
     * as this request body. If this parameter is specified `content-type` header will be set to
     * `application/x-www-form-urlencoded` unless explicitly provided.
     */
    form'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by
     * it.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
     */
    maxRedirects'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not
     * retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
     */
    maxRetries'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this
     * request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless
     * explicitly provided. File values can be passed either as
     * [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file
     * name, mime-type and its content.
     */
    multipart'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' FormData'
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
                    TypeReference
                      Identifier: 'ReadStream'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
      /**
       * File name
       */
      name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File type
       */
      mimeType'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File content
       */
      buffer'
                        TypeReference
                          Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Query parameters to be sent with the URL.
     */
    params'
            QuestionToken
            UnionType
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
              TypeReference
                Identifier: 'URLSearchParams'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIResponse'
    MethodSignature
      Identifier: '

  /**
   * Sends HTTP(S) [HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) request and returns its
   * response. The method will populate request cookies from the context and update context cookies from the response.
   * The method will automatically follow redirects.
   * @param url Target URL.
   * @param options
   */
  head'
      Parameter
        Identifier: 'url'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string
     * and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type`
     * header will be set to `application/octet-stream` if not explicitly set.
     */
    data'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status
     * codes.
     */
    failOnStatusCode'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent
     * as this request body. If this parameter is specified `content-type` header will be set to
     * `application/x-www-form-urlencoded` unless explicitly provided.
     */
    form'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by
     * it.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
     */
    maxRedirects'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not
     * retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
     */
    maxRetries'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this
     * request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless
     * explicitly provided. File values can be passed either as
     * [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file
     * name, mime-type and its content.
     */
    multipart'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' FormData'
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
                    TypeReference
                      Identifier: 'ReadStream'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
      /**
       * File name
       */
      name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File type
       */
      mimeType'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File content
       */
      buffer'
                        TypeReference
                          Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Query parameters to be sent with the URL.
     */
    params'
            QuestionToken
            UnionType
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
              TypeReference
                Identifier: 'URLSearchParams'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIResponse'
    MethodSignature
      Identifier: '

  /**
   * Sends HTTP(S) [PATCH](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) request and returns its
   * response. The method will populate request cookies from the context and update context cookies from the response.
   * The method will automatically follow redirects.
   * @param url Target URL.
   * @param options
   */
  patch'
      Parameter
        Identifier: 'url'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string
     * and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type`
     * header will be set to `application/octet-stream` if not explicitly set.
     */
    data'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status
     * codes.
     */
    failOnStatusCode'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent
     * as this request body. If this parameter is specified `content-type` header will be set to
     * `application/x-www-form-urlencoded` unless explicitly provided.
     */
    form'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by
     * it.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
     */
    maxRedirects'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not
     * retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
     */
    maxRetries'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this
     * request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless
     * explicitly provided. File values can be passed either as
     * [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file
     * name, mime-type and its content.
     */
    multipart'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' FormData'
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
                    TypeReference
                      Identifier: 'ReadStream'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
      /**
       * File name
       */
      name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File type
       */
      mimeType'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File content
       */
      buffer'
                        TypeReference
                          Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Query parameters to be sent with the URL.
     */
    params'
            QuestionToken
            UnionType
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
              TypeReference
                Identifier: 'URLSearchParams'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIResponse'
    MethodSignature
      Identifier: '

  /**
   * Sends HTTP(S) [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request and returns its
   * response. The method will populate request cookies from the context and update context cookies from the response.
   * The method will automatically follow redirects.
   *
   * **Usage**
   *
   * JSON objects can be passed directly to the request:
   *
   * ```js
   * await request.post('https://example.com/api/createBook', {
   *   data: {
   *     title: 'Book Title',
   *     author: 'John Doe',
   *   }
   * });
   * ```
   *
   * To send form data to the server use `form` option. Its value will be encoded into the request body with
   * `application/x-www-form-urlencoded` encoding (see below how to use `multipart/form-data` form encoding to send
   * files):
   *
   * ```js
   * await request.post('https://example.com/api/findBook', {
   *   form: {
   *     title: 'Book Title',
   *     author: 'John Doe',
   *   }
   * });
   * ```
   *
   * The common way to send file(s) in the body of a request is to upload them as form fields with `multipart/form-data`
   * encoding. Use [FormData] to construct request body and pass it to the request as `multipart` parameter:
   *
   * ```js
   * const form = new FormData();
   * form.set('name', 'John');
   * form.append('name', 'Doe');
   * // Send two file fields with the same name.
   * form.append('file', new File(['console.log(2024);'], 'f1.js', { type: 'text/javascript' }));
   * form.append('file', new File(['hello'], 'f2.txt', { type: 'text/plain' }));
   * await request.post('https://example.com/api/uploadForm', {
   *   multipart: form
   * });
   * ```
   *
   * @param url Target URL.
   * @param options
   */
  post'
      Parameter
        Identifier: 'url'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string
     * and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type`
     * header will be set to `application/octet-stream` if not explicitly set.
     */
    data'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status
     * codes.
     */
    failOnStatusCode'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent
     * as this request body. If this parameter is specified `content-type` header will be set to
     * `application/x-www-form-urlencoded` unless explicitly provided.
     */
    form'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by
     * it.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
     */
    maxRedirects'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not
     * retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
     */
    maxRetries'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this
     * request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless
     * explicitly provided. File values can be passed either as
     * [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file
     * name, mime-type and its content.
     */
    multipart'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' FormData'
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
                    TypeReference
                      Identifier: 'ReadStream'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
      /**
       * File name
       */
      name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File type
       */
      mimeType'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File content
       */
      buffer'
                        TypeReference
                          Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Query parameters to be sent with the URL.
     */
    params'
            QuestionToken
            UnionType
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
              TypeReference
                Identifier: 'URLSearchParams'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIResponse'
    MethodSignature
      Identifier: '

  /**
   * Sends HTTP(S) [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) request and returns its
   * response. The method will populate request cookies from the context and update context cookies from the response.
   * The method will automatically follow redirects.
   * @param url Target URL.
   * @param options
   */
  put'
      Parameter
        Identifier: 'url'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string
     * and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type`
     * header will be set to `application/octet-stream` if not explicitly set.
     */
    data'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * Whether to throw on response codes other than 2xx and 3xx. By default response object is returned for all status
     * codes.
     */
    failOnStatusCode'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `application/x-www-form-urlencoded` encoding and sent
     * as this request body. If this parameter is specified `content-type` header will be set to
     * `application/x-www-form-urlencoded` unless explicitly provided.
     */
    form'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                UnionType
                  StringKeyword
                  NumberKeyword
                  BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Allows to set HTTP headers. These headers will apply to the fetched request as well as any redirects initiated by
     * it.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
     */
    maxRedirects'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not
     * retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
     */
    maxRetries'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this
     * request body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless
     * explicitly provided. File values can be passed either as
     * [`fs.ReadStream`](https://nodejs.org/api/fs.html#fs_class_fs_readstream) or as file-like object containing file
     * name, mime-type and its content.
     */
    multipart'
            QuestionToken
            UnionType
              TypeReference
                Identifier: ' FormData'
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
                    TypeReference
                      Identifier: 'ReadStream'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
      /**
       * File name
       */
      name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File type
       */
      mimeType'
                        StringKeyword
                      PropertySignature
                        Identifier: '

      /**
       * File content
       */
      buffer'
                        TypeReference
                          Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Query parameters to be sent with the URL.
     */
    params'
            QuestionToken
            UnionType
              TypeLiteral
                IndexSignature
                  Parameter
                    Identifier: 'key'
                    StringKeyword
                  UnionType
                    StringKeyword
                    NumberKeyword
                    BooleanKeyword
              TypeReference
                Identifier: 'URLSearchParams'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIResponse'
    MethodSignature
      Identifier: '

  /**
   * Returns storage state for this request context, contains current cookies and local storage snapshot if it was
   * passed to the constructor.
   * @param options
   */
  storageState'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The file path to save the storage state to. If `path` is a relative path, then it is resolved relative to current
     * working directory. If no path is provided, storage state is still returned, but won't be saved to the disk.
     */
    path'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeLiteral
          PropertySignature
            Identifier: '
    cookies'
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      name'
                  StringKeyword
                PropertySignature
                  Identifier: '

      value'
                  StringKeyword
                PropertySignature
                  Identifier: '

      domain'
                  StringKeyword
                PropertySignature
                  Identifier: '

      path'
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Unix time in seconds.
       */
      expires'
                  NumberKeyword
                PropertySignature
                  Identifier: '

      httpOnly'
                  BooleanKeyword
                PropertySignature
                  Identifier: '

      secure'
                  BooleanKeyword
                PropertySignature
                  Identifier: '

      sameSite'
                  UnionType
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
          PropertySignature
            Identifier: '

    origins'
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      origin'
                  StringKeyword
                PropertySignature
                  Identifier: '

      localStorage'
                  TypeReference
                    Identifier: ' Array'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
        name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        value'
                        StringKeyword
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' APIResponse'
    MethodSignature
      Identifier: '
  /**
   * Returns the buffer with response body.
   */
  body'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * Disposes the body of this response. If not called then the body will stay in memory until the context closes.
   */
  dispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * An object with all the response HTTP headers associated with this response.
   */
  headers'
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * An array with all the response HTTP headers associated with this response. Header names are not lower-cased.
   * Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.
   */
  headersArray'
      TypeReference
        Identifier: ' Array'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Name of the header.
     */
    name'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Value of the header.
     */
    value'
            StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the JSON representation of response body.
   *
   * This method will throw if the response body is not parsable via `JSON.parse`.
   */
  json'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Serializable'
    MethodSignature
      Identifier: '

  /**
   * Contains a boolean stating whether the response was successful (status in the range 200-299) or not.
   */
  ok'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Contains the status code of the response (e.g., 200 for a success).
   */
  status'
      NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Contains the status text of the response (e.g. usually an "OK" for a success).
   */
  statusText'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the text representation of response body.
   */
  text'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Contains the URL of the response.
   */
  url'
      StringKeyword
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BrowserServer'
    MethodSignature
      Identifier: '
  /**
   * Emitted when the browser server closes.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the browser server closes.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Emitted when the browser server closes.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Closes the browser gracefully and makes sure the process is terminated.
   */
  close'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Kills the browser process and waits for the process to exit.
   */
  kill'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Spawned browser application process.
   */
  process'
      TypeReference
        Identifier: ' ChildProcess'
    MethodSignature
      Identifier: '

  /**
   * Browser websocket url.
   *
   * Browser websocket endpoint which can be used as an argument to
   * [browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect)
   * to establish connection to the browser.
   *
   * Note that if the listen `host` option in `launchServer` options is not specified, localhost will be output anyway,
   * even if the actual listening address is an unspecified address.
   */
  wsEndpoint'
      StringKeyword
    MethodSignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'Symbol'
          Identifier: 'asyncDispose'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Clock'
    MethodSignature
      Identifier: '
  /**
   * Advance the clock by jumping forward in time. Only fires due timers at most once. This is equivalent to user
   * closing the laptop lid for a while and reopening it later, after given time.
   *
   * **Usage**
   *
   * ```js
   * await page.clock.fastForward(1000);
   * await page.clock.fastForward('30:00');
   * ```
   *
   * @param ticks Time may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are
   * "08" for eight seconds, "01:00" for one minute and "02:34:10" for two hours, 34 minutes and ten seconds.
   */
  fastForward'
      Parameter
        Identifier: 'ticks'
        UnionType
          NumberKeyword
          StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Install fake implementations for the following time-related functions:
   * - `Date`
   * - `setTimeout`
   * - `clearTimeout`
   * - `setInterval`
   * - `clearInterval`
   * - `requestAnimationFrame`
   * - `cancelAnimationFrame`
   * - `requestIdleCallback`
   * - `cancelIdleCallback`
   * - `performance`
   *
   * Fake timers are used to manually control the flow of time in tests. They allow you to advance time, fire timers,
   * and control the behavior of time-dependent functions. See
   * [clock.runFor(ticks)](https://playwright.dev/docs/api/class-clock#clock-run-for) and
   * [clock.fastForward(ticks)](https://playwright.dev/docs/api/class-clock#clock-fast-forward) for more information.
   * @param options
   */
  install'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to initialize with, current system time by default.
     */
    time'
            QuestionToken
            UnionType
              NumberKeyword
              StringKeyword
              TypeReference
                Identifier: 'Date'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Advance the clock by jumping forward in time and pause the time. Once this method is called, no timers are fired
   * unless [clock.runFor(ticks)](https://playwright.dev/docs/api/class-clock#clock-run-for),
   * [clock.fastForward(ticks)](https://playwright.dev/docs/api/class-clock#clock-fast-forward),
   * [clock.pauseAt(time)](https://playwright.dev/docs/api/class-clock#clock-pause-at) or
   * [clock.resume()](https://playwright.dev/docs/api/class-clock#clock-resume) is called.
   *
   * Only fires due timers at most once. This is equivalent to user closing the laptop lid for a while and reopening it
   * at the specified time and pausing.
   *
   * **Usage**
   *
   * ```js
   * await page.clock.pauseAt(new Date('2020-02-02'));
   * await page.clock.pauseAt('2020-02-02');
   * ```
   *
   * @param time Time to pause at.
   */
  pauseAt'
      Parameter
        Identifier: 'time'
        UnionType
          NumberKeyword
          StringKeyword
          TypeReference
            Identifier: 'Date'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Resumes timers. Once this method is called, time resumes flowing, timers are fired as usual.
   */
  resume'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Advance the clock, firing all the time-related callbacks.
   *
   * **Usage**
   *
   * ```js
   * await page.clock.runFor(1000);
   * await page.clock.runFor('30:00');
   * ```
   *
   * @param ticks Time may be the number of milliseconds to advance the clock by or a human-readable string. Valid string formats are
   * "08" for eight seconds, "01:00" for one minute and "02:34:10" for two hours, 34 minutes and ten seconds.
   */
  runFor'
      Parameter
        Identifier: 'ticks'
        UnionType
          NumberKeyword
          StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Makes `Date.now` and `new Date()` return fixed fake time at all times, keeps all the timers running.
   *
   * **Usage**
   *
   * ```js
   * await page.clock.setFixedTime(Date.now());
   * await page.clock.setFixedTime(new Date('2020-02-02'));
   * await page.clock.setFixedTime('2020-02-02');
   * ```
   *
   * @param time Time to be set in milliseconds.
   */
  setFixedTime'
      Parameter
        Identifier: 'time'
        UnionType
          NumberKeyword
          StringKeyword
          TypeReference
            Identifier: 'Date'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Sets current system time but does not trigger any timers.
   *
   * **Usage**
   *
   * ```js
   * await page.clock.setSystemTime(Date.now());
   * await page.clock.setSystemTime(new Date('2020-02-02'));
   * await page.clock.setSystemTime('2020-02-02');
   * ```
   *
   * @param time Time to be set in milliseconds.
   */
  setSystemTime'
      Parameter
        Identifier: 'time'
        UnionType
          NumberKeyword
          StringKeyword
          TypeReference
            Identifier: 'Date'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConsoleMessage'
    MethodSignature
      Identifier: '
  /**
   * List of arguments passed to a `console` function call. See also
   * [page.on('console')](https://playwright.dev/docs/api/class-page#page-event-console).
   */
  args'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'JSHandle'
    MethodSignature
      Identifier: '

  location'
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * URL of the resource.
     */
    url'
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * 0-based line number in the resource.
     */
    lineNumber'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * 0-based column number in the resource.
     */
    columnNumber'
          NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * The page that produced this console message, if any.
   */
  page'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * The text of the console message.
   */
  text'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * One of the following values: `'log'`, `'debug'`, `'info'`, `'error'`, `'warning'`, `'dir'`, `'dirxml'`, `'table'`,
   * `'trace'`, `'clear'`, `'startGroup'`, `'startGroupCollapsed'`, `'endGroup'`, `'assert'`, `'profile'`,
   * `'profileEnd'`, `'count'`, `'timeEnd'`.
   */
  type'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Coverage'
    MethodSignature
      Identifier: '
  /**
   * Returns coverage is started
   * @param options
   */
  startCSSCoverage'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to reset coverage on every navigation. Defaults to `true`.
     */
    resetOnNavigation'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns coverage is started
   *
   * **NOTE** Anonymous scripts are ones that don't have an associated url. These are scripts that are dynamically
   * created on the page using `eval` or `new Function`. If `reportAnonymousScripts` is set to `true`, anonymous scripts
   * will have `__playwright_evaluation_script__` as their URL.
   * @param options
   */
  startJSCoverage'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether anonymous scripts generated by the page should be reported. Defaults to `false`.
     */
    reportAnonymousScripts'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to reset coverage on every navigation. Defaults to `true`.
     */
    resetOnNavigation'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the array of coverage reports for all stylesheets
   *
   * **NOTE** CSS Coverage doesn't include dynamically injected style tags without sourceURLs.
   */
  stopCSSCoverage'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * StyleSheet URL
     */
    url'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * StyleSheet content, if available.
     */
    text'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * StyleSheet ranges that were used. Ranges are sorted and non-overlapping.
     */
    ranges'
              TypeReference
                Identifier: ' Array'
                TypeLiteral
                  PropertySignature
                    Identifier: '
      /**
       * A start offset in text, inclusive
       */
      start'
                    NumberKeyword
                  PropertySignature
                    Identifier: '

      /**
       * An end offset in text, exclusive
       */
      end'
                    NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the array of coverage reports for all scripts
   *
   * **NOTE** JavaScript Coverage doesn't include anonymous scripts by default. However, scripts with sourceURLs are
   * reported.
   */
  stopJSCoverage'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Script URL
     */
    url'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Script ID
     */
    scriptId'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Script content, if applicable.
     */
    source'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * V8-specific coverage format.
     */
    functions'
              TypeReference
                Identifier: ' Array'
                TypeLiteral
                  PropertySignature
                    Identifier: '
      functionName'
                    StringKeyword
                  PropertySignature
                    Identifier: '

      isBlockCoverage'
                    BooleanKeyword
                  PropertySignature
                    Identifier: '

      ranges'
                    TypeReference
                      Identifier: ' Array'
                      TypeLiteral
                        PropertySignature
                          Identifier: '
        count'
                          NumberKeyword
                        PropertySignature
                          Identifier: '

        startOffset'
                          NumberKeyword
                        PropertySignature
                          Identifier: '

        endOffset'
                          NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Dialog'
    MethodSignature
      Identifier: '
  /**
   * Returns when the dialog has been accepted.
   * @param promptText A text to enter in prompt. Does not cause any effects if the dialog's `type` is not prompt. Optional.
   */
  accept'
      Parameter
        Identifier: 'promptText'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * If dialog is prompt, returns default prompt value. Otherwise, returns empty string.
   */
  defaultValue'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns when the dialog has been dismissed.
   */
  dismiss'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * A message displayed in the dialog.
   */
  message'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * The page that initiated this dialog, if available.
   */
  page'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Page'
    MethodSignature
      Identifier: '

  /**
   * Returns dialog's type, can be one of `alert`, `beforeunload`, `confirm` or `prompt`.
   */
  type'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Download'
    MethodSignature
      Identifier: '
  /**
   * Cancels a download. Will not fail if the download is already finished or canceled. Upon successful cancellations,
   * `download.failure()` would resolve to `'canceled'`.
   */
  cancel'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns a readable stream for a successful download, or throws for a failed/canceled download.
   */
  createReadStream'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Readable'
    MethodSignature
      Identifier: '

  /**
   * Deletes the downloaded file. Will wait for the download to finish if necessary.
   */
  delete'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns download error if any. Will wait for the download to finish if necessary.
   */
  failure'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Get the page that the download belongs to.
   */
  page'
      TypeReference
        Identifier: ' Page'
    MethodSignature
      Identifier: '

  /**
   * Returns path to the downloaded file for a successful download, or throws for a failed/canceled download. The method
   * will wait for the download to finish if necessary. The method throws when connected remotely.
   *
   * Note that the download's file name is a random GUID, use
   * [download.suggestedFilename()](https://playwright.dev/docs/api/class-download#download-suggested-filename) to get
   * suggested file name.
   */
  path'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Copy the download to a user-specified path. It is safe to call this method while the download is still in progress.
   * Will wait for the download to finish if necessary.
   *
   * **Usage**
   *
   * ```js
   * await download.saveAs('/path/to/save/at/' + download.suggestedFilename());
   * ```
   *
   * @param path Path where the download should be copied.
   */
  saveAs'
      Parameter
        Identifier: 'path'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns suggested filename for this download. It is typically computed by the browser from the
   * [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) response
   * header or the `download` attribute. See the spec on [whatwg](https://html.spec.whatwg.org/#downloading-resources).
   * Different browsers can use different logic for computing it.
   */
  suggestedFilename'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns downloaded url.
   */
  url'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Electron'
    MethodSignature
      Identifier: '
  /**
   * Launches electron application specified with the `executablePath`.
   * @param options
   */
  launch'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.
     */
    acceptDownloads'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Additional arguments to pass to the application when launching. You typically pass the main script name here.
     */
    args'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Toggles bypassing page's Content-Security-Policy. Defaults to `false`.
     */
    bypassCSP'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See
     * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
     * Passing `null` resets emulation to system defaults. Defaults to `'light'`.
     */
    colorScheme'
            QuestionToken
            UnionType
              LiteralType
                NullKeyword
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Current working directory to launch application from.
     */
    cwd'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Specifies environment variables that will be visible to Electron. Defaults to `process.env`.
     */
    env'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Launches given Electron application. If not specified, launches the default Electron executable installed in this
     * package, located at `node_modules/.bin/electron`.
     */
    executablePath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * An object containing additional HTTP headers to be sent with every request. Defaults to none.
     */
    extraHTTPHeaders'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    geolocation'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Latitude between -90 and 90.
       */
      latitude'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Longitude between -180 and 180.
       */
      longitude'
                NumberKeyword
              PropertySignature
                Identifier: '

      /**
       * Non-negative accuracy value. Defaults to `0`.
       */
      accuracy'
                QuestionToken
                NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no
     * origin is specified, the username and password are sent to any servers upon unauthorized responses.
     */
    httpCredentials'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      username'
                StringKeyword
              PropertySignature
                Identifier: '

      password'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Restrain sending http credentials on specific origin (scheme://host:port).
       */
      origin'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * This option only applies to the requests sent from corresponding {@link APIRequestContext} and does not affect
       * requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be
       * sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response
       * with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.
       */
      send'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
     */
    ignoreHTTPSErrors'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value,
     * `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default
     * locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/emulation#locale--timezone).
     */
    locale'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to emulate network being offline. Defaults to `false`. Learn more about
     * [network emulation](https://playwright.dev/docs/emulation#offline).
     */
    offline'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file.
     * If not specified, the HAR is not recorded. Make sure to await
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
     * the HAR to be saved.
     */
    recordHar'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use
       * `content` policy instead.
       */
      omitContent'
                QuestionToken
                BooleanKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional setting to control resource content management. If `omit` is specified, content is not persisted. If
       * `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is
       * specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output
       * files and to `embed` for all other file extensions.
       */
      content'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
              PropertySignature
                Identifier: '

      /**
       * Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by
       * default.
       */
      path'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page,
       * cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.
       */
      mode'
                QuestionToken
                UnionType
                  LiteralType
                    StringLiteral
                  LiteralType
                    StringLiteral
              PropertySignature
                Identifier: '

      /**
       * A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was
       * provided and the passed URL is a path, it gets merged via the
       * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.
       */
      urlFilter'
                QuestionToken
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded.
     * Make sure to await
     * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
     * videos to be saved.
     */
    recordVideo'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
      /**
       * Path to the directory to put videos into.
       */
      dir'
                StringKeyword
              PropertySignature
                Identifier: '

      /**
       * Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to
       * fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of
       * each page will be scaled down if necessary to fit the specified size.
       */
      size'
                QuestionToken
                TypeLiteral
                  PropertySignature
                    Identifier: '
        /**
         * Video frame width.
         */
        width'
                    NumberKeyword
                  PropertySignature
                    Identifier: '

        /**
         * Video frame height.
         */
        height'
                    NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds to wait for the application to start. Defaults to `30000` (30 seconds). Pass `0` to
     * disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Changes the timezone of the context. See
     * [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)
     * for a list of supported timezone IDs. Defaults to the system timezone.
     */
    timezoneId'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * If specified, traces are saved into this directory.
     */
    tracesDir'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'ElectronApplication'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FileChooser'
    MethodSignature
      Identifier: '
  /**
   * Returns input element associated with this file chooser.
   */
  element'
      TypeReference
        Identifier: ' ElementHandle'
    MethodSignature
      Identifier: '

  /**
   * Returns whether this file chooser accepts multiple files.
   */
  isMultiple'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns page this file chooser belongs to.
   */
  page'
      TypeReference
        Identifier: ' Page'
    MethodSignature
      Identifier: '

  /**
   * Sets the value of the file input this chooser is associated with. If some of the `filePaths` are relative paths,
   * then they are resolved relative to the current working directory. For empty array, clears the selected files.
   * @param files
   * @param options
   */
  setFiles'
      Parameter
        Identifier: 'files'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * File name
     */
    name'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File type
     */
    mimeType'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * File content
     */
    buffer'
              TypeReference
                Identifier: ' Buffer'
          TypeReference
            Identifier: 'ReadonlyArray'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * File name
     */
    name'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File type
     */
    mimeType'
                StringKeyword
              PropertySignature
                Identifier: '

    /**
     * File content
     */
    buffer'
                TypeReference
                  Identifier: ' Buffer'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * This option has no effect.
     * @deprecated This option has no effect.
     */
    noWaitAfter'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
     * option in the config, or by using the
     * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
     * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '
  /**
   * Returns locator to the first matching frame.
   */
  first'
      TypeReference
        Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '

  /**
   * When working with iframes, you can create a frame locator that will enter the iframe and allow selecting elements
   * in that iframe.
   * @param selector A selector to use when resolving DOM element.
   */
  frameLocator'
      Parameter
        Identifier: 'selector'
        StringKeyword
      TypeReference
        Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their alt text.
   *
   * **Usage**
   *
   * For example, this method will find the image by alt text "Playwright logo":
   *
   * ```html
   * <img alt='Playwright logo'>
   * ```
   *
   * ```js
   * await page.getByAltText('Playwright logo').click();
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByAltText'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating input elements by the text of the associated `<label>` or `aria-labelledby` element, or by the
   * `aria-label` attribute.
   *
   * **Usage**
   *
   * For example, this method will find inputs by label "Username" and "Password" in the following DOM:
   *
   * ```html
   * <input aria-label="Username">
   * <label for="password-input">Password:</label>
   * <input id="password-input">
   * ```
   *
   * ```js
   * await page.getByLabel('Username').fill('john');
   * await page.getByLabel('Password').fill('secret');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByLabel'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating input elements by the placeholder text.
   *
   * **Usage**
   *
   * For example, consider the following DOM structure.
   *
   * ```html
   * <input type="email" placeholder="name@example.com" />
   * ```
   *
   * You can fill the input after locating it by the placeholder text:
   *
   * ```js
   * await page
   *     .getByPlaceholder('name@example.com')
   *     .fill('playwright@microsoft.com');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByPlaceholder'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles),
   * [ARIA attributes](https://www.w3.org/TR/wai-aria-1.2/#aria-attributes) and
   * [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <h3>Sign up</h3>
   * <label>
   *   <input type="checkbox" /> Subscribe
   * </label>
   * <br/>
   * <button>Submit</button>
   * ```
   *
   * You can locate each element by it's implicit role:
   *
   * ```js
   * await expect(page.getByRole('heading', { name: 'Sign up' })).toBeVisible();
   *
   * await page.getByRole('checkbox', { name: 'Subscribe' }).check();
   *
   * await page.getByRole('button', { name: /submit/i }).click();
   * ```
   *
   * **Details**
   *
   * Role selector **does not replace** accessibility audits and conformance tests, but rather gives early feedback
   * about the ARIA guidelines.
   *
   * Many html elements have an implicitly [defined role](https://w3c.github.io/html-aam/#html-element-role-mappings)
   * that is recognized by the role selector. You can find all the
   * [supported roles here](https://www.w3.org/TR/wai-aria-1.2/#role_definitions). ARIA guidelines **do not recommend**
   * duplicating implicit roles and attributes by setting `role` and/or `aria-*` attributes to default values.
   * @param role Required aria role.
   * @param options
   */
  getByRole'
      Parameter
        Identifier: 'role'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * An attribute that is usually set by `aria-checked` or native `<input type=checkbox>` controls.
     *
     * Learn more about [`aria-checked`](https://www.w3.org/TR/wai-aria-1.2/#aria-checked).
     */
    checked'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-disabled` or `disabled`.
     *
     * **NOTE** Unlike most other attributes, `disabled` is inherited through the DOM hierarchy. Learn more about
     * [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.2/#aria-disabled).
     */
    disabled'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether `name` is matched exactly: case-sensitive and whole-string. Defaults to false. Ignored when `name` is a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-expanded`.
     *
     * Learn more about [`aria-expanded`](https://www.w3.org/TR/wai-aria-1.2/#aria-expanded).
     */
    expanded'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Option that controls whether hidden elements are matched. By default, only non-hidden elements, as
     * [defined by ARIA](https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion), are matched by role selector.
     *
     * Learn more about [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.2/#aria-hidden).
     */
    includeHidden'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * A number attribute that is usually present for roles `heading`, `listitem`, `row`, `treeitem`, with default values
     * for `<h1>-<h6>` elements.
     *
     * Learn more about [`aria-level`](https://www.w3.org/TR/wai-aria-1.2/#aria-level).
     */
    level'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Option to match the [accessible name](https://w3c.github.io/accname/#dfn-accessible-name). By default, matching is
     * case-insensitive and searches for a substring, use `exact` to control this behavior.
     *
     * Learn more about [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
     */
    name'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-pressed`.
     *
     * Learn more about [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.2/#aria-pressed).
     */
    pressed'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * An attribute that is usually set by `aria-selected`.
     *
     * Learn more about [`aria-selected`](https://www.w3.org/TR/wai-aria-1.2/#aria-selected).
     */
    selected'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Locate element by the test id.
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <button data-testid="directions">Itinéraire</button>
   * ```
   *
   * You can locate the element by it's test id:
   *
   * ```js
   * await page.getByTestId('directions').click();
   * ```
   *
   * **Details**
   *
   * By default, the `data-testid` attribute is used as a test id. Use
   * [selectors.setTestIdAttribute(attributeName)](https://playwright.dev/docs/api/class-selectors#selectors-set-test-id-attribute)
   * to configure a different test id attribute if necessary.
   *
   * ```js
   * // Set custom test id attribute from @playwright/test config:
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     testIdAttribute: 'data-pw'
   *   },
   * });
   * ```
   *
   * @param testId Id to locate the element by.
   */
  getByTestId'
      Parameter
        Identifier: 'testId'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements that contain given text.
   *
   * See also [locator.filter([options])](https://playwright.dev/docs/api/class-locator#locator-filter) that allows to
   * match by another criteria, like an accessible role, and then filter by the text content.
   *
   * **Usage**
   *
   * Consider the following DOM structure:
   *
   * ```html
   * <div>Hello <span>world</span></div>
   * <div>Hello</div>
   * ```
   *
   * You can locate by text substring, exact string, or a regular expression:
   *
   * ```js
   * // Matches <span>
   * page.getByText('world');
   *
   * // Matches first <div>
   * page.getByText('Hello world');
   *
   * // Matches second <div>
   * page.getByText('Hello', { exact: true });
   *
   * // Matches both <div>s
   * page.getByText(/Hello/);
   *
   * // Matches second <div>
   * page.getByText(/^hello$/i);
   * ```
   *
   * **Details**
   *
   * Matching by text always normalizes whitespace, even with exact match. For example, it turns multiple spaces into
   * one, turns line breaks into spaces and ignores leading and trailing whitespace.
   *
   * Input elements of the type `button` and `submit` are matched by their `value` instead of the text content. For
   * example, locating by text `"Log in"` matches `<input type=button value="Log in">`.
   * @param text Text to locate the element for.
   * @param options
   */
  getByText'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Allows locating elements by their title attribute.
   *
   * **Usage**
   *
   * Consider the following DOM structure.
   *
   * ```html
   * <span title='Issues count'>25 issues</span>
   * ```
   *
   * You can check the issues count after locating it by the title text:
   *
   * ```js
   * await expect(page.getByTitle('Issues count')).toHaveText('25 issues');
   * ```
   *
   * @param text Text to locate the element for.
   * @param options
   */
  getByTitle'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to find an exact match: case-sensitive and whole-string. Default to false. Ignored when locating by a
     * regular expression. Note that exact match still trims whitespace.
     */
    exact'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Returns locator to the last matching frame.
   */
  last'
      TypeReference
        Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '

  /**
   * The method finds an element matching the specified selector in the locator's subtree. It also accepts filter
   * options, similar to [locator.filter([options])](https://playwright.dev/docs/api/class-locator#locator-filter)
   * method.
   *
   * [Learn more about locators](https://playwright.dev/docs/locators).
   * @param selectorOrLocator A selector or locator to use when resolving DOM element.
   * @param options
   */
  locator'
      Parameter
        Identifier: 'selectorOrLocator'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'Locator'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Narrows down the results of the method to those which contain elements matching this relative locator. For example,
     * `article` that has `text=Playwright` matches `<article><div>Playwright</div></article>`.
     *
     * Inner locator **must be relative** to the outer locator and is queried starting with the outer locator match, not
     * the document root. For example, you can find `content` that has `div` in
     * `<article><content><div>Playwright</div></content></article>`. However, looking for `content` that has `article
     * div` will fail, because the inner locator must be relative and should not use any elements outside the `content`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    has'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain an element that matches an inner locator. Inner locator is queried against the
     * outer one. For example, `article` that does not have `div` matches `<article><span>Playwright</span></article>`.
     *
     * Note that outer and inner locators must belong to the same frame. Inner locator must not contain {@link
     * FrameLocator}s.
     */
    hasNot'
            QuestionToken
            TypeReference
              Identifier: ' Locator'
          PropertySignature
            Identifier: '

    /**
     * Matches elements that do not contain specified text somewhere inside, possibly in a child or a descendant element.
     * When passed a [string], matching is case-insensitive and searches for a substring.
     */
    hasNotText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
          PropertySignature
            Identifier: '

    /**
     * Matches elements containing specified text somewhere inside, possibly in a child or a descendant element. When
     * passed a [string], matching is case-insensitive and searches for a substring. For example, `"Playwright"` matches
     * `<article><div>Playwright</div></article>`.
     */
    hasText'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      TypeReference
        Identifier: ' Locator'
    MethodSignature
      Identifier: '

  /**
   * Returns locator to the n-th matching frame. It's zero based, `nth(0)` selects the first frame.
   * @param index
   */
  nth'
      Parameter
        Identifier: 'index'
        NumberKeyword
      TypeReference
        Identifier: ' FrameLocator'
    MethodSignature
      Identifier: '

  /**
   * Returns a {@link Locator} object pointing to the same `iframe` as this frame locator.
   *
   * Useful when you have a {@link FrameLocator} object obtained somewhere, and later on would like to interact with the
   * `iframe` element.
   *
   * For a reverse operation, use
   * [locator.contentFrame()](https://playwright.dev/docs/api/class-locator#locator-content-frame).
   *
   * **Usage**
   *
   * ```js
   * const frameLocator = page.frameLocator('iframe[name="embedded"]');
   * // ...
   * const locator = frameLocator.owner();
   * await expect(locator).toBeVisible();
   * ```
   *
   */
  owner'
      TypeReference
        Identifier: ' Locator'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Keyboard'
    MethodSignature
      Identifier: '
  /**
   * Dispatches a `keydown` event.
   *
   * `key` can specify the intended
   * [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character
   * to generate the text for. A superset of the `key` values can be found
   * [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:
   *
   * `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`,
   * `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`,
   * etc.
   *
   * Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`,
   * `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.
   *
   * Holding down `Shift` will type the text that corresponds to the `key` in the upper case.
   *
   * If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective
   * texts.
   *
   * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`, subsequent key presses will be sent with that
   * modifier active. To release the modifier key, use
   * [keyboard.up(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-up).
   *
   * After the key is pressed once, subsequent calls to
   * [keyboard.down(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-down) will have
   * [repeat](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat) set to true. To release the key,
   * use [keyboard.up(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-up).
   *
   * **NOTE** Modifier keys DO influence `keyboard.down`. Holding down `Shift` will type the text in upper case.
   * @param key Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.
   */
  down'
      Parameter
        Identifier: 'key'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Dispatches only `input` event, does not emit the `keydown`, `keyup` or `keypress` events.
   *
   * **Usage**
   *
   * ```js
   * page.keyboard.insertText('嗨');
   * ```
   *
   * **NOTE** Modifier keys DO NOT effect `keyboard.insertText`. Holding down `Shift` will not type the text in upper
   * case.
   * @param text Sets input to the specified text value.
   */
  insertText'
      Parameter
        Identifier: 'text'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** In most cases, you should use
   * [locator.press(key[, options])](https://playwright.dev/docs/api/class-locator#locator-press) instead.
   *
   * `key` can specify the intended
   * [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) value or a single character
   * to generate the text for. A superset of the `key` values can be found
   * [here](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values). Examples of the keys are:
   *
   * `F1` - `F12`, `Digit0`- `Digit9`, `KeyA`- `KeyZ`, `Backquote`, `Minus`, `Equal`, `Backslash`, `Backspace`, `Tab`,
   * `Delete`, `Escape`, `ArrowDown`, `End`, `Enter`, `Home`, `Insert`, `PageDown`, `PageUp`, `ArrowRight`, `ArrowUp`,
   * etc.
   *
   * Following modification shortcuts are also supported: `Shift`, `Control`, `Alt`, `Meta`, `ShiftLeft`,
   * `ControlOrMeta`. `ControlOrMeta` resolves to `Control` on Windows and Linux and to `Meta` on macOS.
   *
   * Holding down `Shift` will type the text that corresponds to the `key` in the upper case.
   *
   * If `key` is a single character, it is case-sensitive, so the values `a` and `A` will generate different respective
   * texts.
   *
   * Shortcuts such as `key: "Control+o"`, `key: "Control++` or `key: "Control+Shift+T"` are supported as well. When
   * specified with the modifier, modifier is pressed and being held while the subsequent key is being pressed.
   *
   * **Usage**
   *
   * ```js
   * const page = await browser.newPage();
   * await page.goto('https://keycode.info');
   * await page.keyboard.press('A');
   * await page.screenshot({ path: 'A.png' });
   * await page.keyboard.press('ArrowLeft');
   * await page.screenshot({ path: 'ArrowLeft.png' });
   * await page.keyboard.press('Shift+O');
   * await page.screenshot({ path: 'O.png' });
   * await browser.close();
   * ```
   *
   * Shortcut for [keyboard.down(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-down) and
   * [keyboard.up(key)](https://playwright.dev/docs/api/class-keyboard#keyboard-up).
   * @param key Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.
   * @param options
   */
  press'
      Parameter
        Identifier: 'key'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between `keydown` and `keyup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** In most cases, you should use
   * [locator.fill(value[, options])](https://playwright.dev/docs/api/class-locator#locator-fill) instead. You only need
   * to press keys one by one if there is special keyboard handling on the page - in this case use
   * [locator.pressSequentially(text[, options])](https://playwright.dev/docs/api/class-locator#locator-press-sequentially).
   *
   * Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character in the text.
   *
   * To press a special key, like `Control` or `ArrowDown`, use
   * [keyboard.press(key[, options])](https://playwright.dev/docs/api/class-keyboard#keyboard-press).
   *
   * **Usage**
   *
   * ```js
   * await page.keyboard.type('Hello'); // Types instantly
   * await page.keyboard.type('World', { delay: 100 }); // Types slower, like a user
   * ```
   *
   * **NOTE** Modifier keys DO NOT effect `keyboard.type`. Holding down `Shift` will not type the text in upper case.
   *
   * **NOTE** For characters that are not on a US keyboard, only an `input` event will be sent.
   * @param text A text to type into a focused element.
   * @param options
   */
  type'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to wait between key presses in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Dispatches a `keyup` event.
   * @param key Name of the key to press or a character to generate, such as `ArrowLeft` or `a`.
   */
  up'
      Parameter
        Identifier: 'key'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Logger'
    MethodSignature
      Identifier: '
  /**
   * Determines whether sink is interested in the logger with the given name and severity.
   * @param name logger name
   * @param severity
   */
  isEnabled'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' severity'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * @param name logger name
   * @param severity
   * @param message log message format
   * @param args message arguments
   * @param hints optional formatting hints
   */
  log'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' severity'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' message'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'Error'
      Parameter
        Identifier: ' args'
        TypeReference
          Identifier: ' ReadonlyArray'
          TypeReference
            Identifier: 'Object'
      Parameter
        Identifier: ' hints'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Optional preferred logger color.
     */
    color'
            QuestionToken
            StringKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Mouse'
    MethodSignature
      Identifier: '
  /**
   * Shortcut for [mouse.move(x, y[, options])](https://playwright.dev/docs/api/class-mouse#mouse-move),
   * [mouse.down([options])](https://playwright.dev/docs/api/class-mouse#mouse-down),
   * [mouse.up([options])](https://playwright.dev/docs/api/class-mouse#mouse-up).
   * @param x X coordinate relative to the main frame's viewport in CSS pixels.
   * @param y Y coordinate relative to the main frame's viewport in CSS pixels.
   * @param options
   */
  click'
      Parameter
        Identifier: 'x'
        NumberKeyword
      Parameter
        Identifier: ' y'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * defaults to 1. See [UIEvent.detail].
     */
    clickCount'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Shortcut for [mouse.move(x, y[, options])](https://playwright.dev/docs/api/class-mouse#mouse-move),
   * [mouse.down([options])](https://playwright.dev/docs/api/class-mouse#mouse-down),
   * [mouse.up([options])](https://playwright.dev/docs/api/class-mouse#mouse-up),
   * [mouse.down([options])](https://playwright.dev/docs/api/class-mouse#mouse-down) and
   * [mouse.up([options])](https://playwright.dev/docs/api/class-mouse#mouse-up).
   * @param x X coordinate relative to the main frame's viewport in CSS pixels.
   * @param y Y coordinate relative to the main frame's viewport in CSS pixels.
   * @param options
   */
  dblclick'
      Parameter
        Identifier: 'x'
        NumberKeyword
      Parameter
        Identifier: ' y'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Time to wait between `mousedown` and `mouseup` in milliseconds. Defaults to 0.
     */
    delay'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Dispatches a `mousedown` event.
   * @param options
   */
  down'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * defaults to 1. See [UIEvent.detail].
     */
    clickCount'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Dispatches a `mousemove` event.
   * @param x X coordinate relative to the main frame's viewport in CSS pixels.
   * @param y Y coordinate relative to the main frame's viewport in CSS pixels.
   * @param options
   */
  move'
      Parameter
        Identifier: 'x'
        NumberKeyword
      Parameter
        Identifier: ' y'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to 1. Sends intermediate `mousemove` events.
     */
    steps'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Dispatches a `mouseup` event.
   * @param options
   */
  up'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Defaults to `left`.
     */
    button'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * defaults to 1. See [UIEvent.detail].
     */
    clickCount'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Dispatches a `wheel` event. This method is usually used to manually scroll the page. See
   * [scrolling](https://playwright.dev/docs/input#scrolling) for alternative ways to scroll.
   *
   * **NOTE** Wheel events may cause scrolling if they are not handled, and this method does not wait for the scrolling
   * to finish before returning.
   * @param deltaX Pixels to scroll horizontally.
   * @param deltaY Pixels to scroll vertically.
   */
  wheel'
      Parameter
        Identifier: 'deltaX'
        NumberKeyword
      Parameter
        Identifier: ' deltaY'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' chromium'
        TypeReference
          Identifier: ' BrowserType'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' firefox'
        TypeReference
          Identifier: ' BrowserType'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' request'
        TypeReference
          Identifier: ' APIRequest'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' selectors'
        TypeReference
          Identifier: ' Selectors'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' webkit'
        TypeReference
          Identifier: ' BrowserType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Request'
    MethodSignature
      Identifier: '
  /**
   * An object with all the request HTTP headers associated with this request. The header names are lower-cased.
   */
  allHeaders'
      TypeReference
        Identifier: ' Promise'
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'key'
              StringKeyword
            StringKeyword
    MethodSignature
      Identifier: '

  /**
   * The method returns `null` unless this request has failed, as reported by `requestfailed` event.
   *
   * **Usage**
   *
   * Example of logging of all the failed requests:
   *
   * ```js
   * page.on('requestfailed', request => {
   *   console.log(request.url() + ' ' + request.failure().errorText);
   * });
   * ```
   *
   */
  failure'
      UnionType
        LiteralType
          NullKeyword
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Human-readable error message, e.g. `'net::ERR_FAILED'`.
     */
    errorText'
            StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the {@link Frame} that initiated this request.
   *
   * **Usage**
   *
   * ```js
   * const frameUrl = request.frame().url();
   * ```
   *
   * **Details**
   *
   * Note that in some cases the frame is not available, and this method will throw.
   * - When request originates in the Service Worker. You can use `request.serviceWorker()` to check that.
   * - When navigation request is issued before the corresponding frame is created. You can use
   *   [request.isNavigationRequest()](https://playwright.dev/docs/api/class-request#request-is-navigation-request) to
   *   check that.
   *
   * Here is an example that handles all the cases:
   *
   * ```js
   * if (request.serviceWorker())
   *   console.log(`request ${request.url()} from a service worker`);
   * else if (request.isNavigationRequest())
   *   console.log(`request ${request.url()} is a navigation request`);
   * else
   *   console.log(`request ${request.url()} from a frame ${request.frame().url()}`);
   * ```
   *
   */
  frame'
      TypeReference
        Identifier: ' Frame'
    MethodSignature
      Identifier: '

  /**
   * An object with the request HTTP headers. The header names are lower-cased. Note that this method does not return
   * security-related headers, including cookie-related ones. You can use
   * [request.allHeaders()](https://playwright.dev/docs/api/class-request#request-all-headers) for complete list of
   * headers that include `cookie` information.
   */
  headers'
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * An array with all the request HTTP headers associated with this request. Unlike
   * [request.allHeaders()](https://playwright.dev/docs/api/class-request#request-all-headers), header names are NOT
   * lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.
   */
  headersArray'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Name of the header.
     */
    name'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Value of the header.
     */
    value'
              StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the value of the header matching the name. The name is case-insensitive.
   * @param name Name of the header.
   */
  headerValue'
      Parameter
        Identifier: 'name'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Whether this request is driving frame's navigation.
   *
   * Some navigation requests are issued before the corresponding frame is created, and therefore do not have
   * [request.frame()](https://playwright.dev/docs/api/class-request#request-frame) available.
   */
  isNavigationRequest'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Request's method (GET, POST, etc.)
   */
  method'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Request's post body, if any.
   */
  postData'
      UnionType
        LiteralType
          NullKeyword
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Request's post body in a binary form, if any.
   */
  postDataBuffer'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * Returns parsed request's body for `form-urlencoded` and JSON as a fallback if any.
   *
   * When the response is `application/x-www-form-urlencoded` then a key/value object of the values will be returned.
   * Otherwise it will be parsed as JSON.
   */
  postDataJSON'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Serializable'
    MethodSignature
      Identifier: '

  /**
   * Request that was redirected by the server to this one, if any.
   *
   * When the server responds with a redirect, Playwright creates a new {@link Request} object. The two requests are
   * connected by `redirectedFrom()` and `redirectedTo()` methods. When multiple server redirects has happened, it is
   * possible to construct the whole redirect chain by repeatedly calling `redirectedFrom()`.
   *
   * **Usage**
   *
   * For example, if the website `http://example.com` redirects to `https://example.com`:
   *
   * ```js
   * const response = await page.goto('http://example.com');
   * console.log(response.request().redirectedFrom().url()); // 'http://example.com'
   * ```
   *
   * If the website `https://google.com` has no redirects:
   *
   * ```js
   * const response = await page.goto('https://google.com');
   * console.log(response.request().redirectedFrom()); // null
   * ```
   *
   */
  redirectedFrom'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * New request issued by the browser if the server responded with redirect.
   *
   * **Usage**
   *
   * This method is the opposite of
   * [request.redirectedFrom()](https://playwright.dev/docs/api/class-request#request-redirected-from):
   *
   * ```js
   * console.log(request.redirectedFrom().redirectedTo() === request); // true
   * ```
   *
   */
  redirectedTo'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Request'
    MethodSignature
      Identifier: '

  /**
   * Contains the request's resource type as it was perceived by the rendering engine. ResourceType will be one of the
   * following: `document`, `stylesheet`, `image`, `media`, `font`, `script`, `texttrack`, `xhr`, `fetch`,
   * `eventsource`, `websocket`, `manifest`, `other`.
   */
  resourceType'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the matching {@link Response} object, or `null` if the response was not received due to error.
   */
  response'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Response'
    MethodSignature
      Identifier: '

  /**
   * The Service {@link Worker} that is performing the request.
   *
   * **Details**
   *
   * This method is Chromium only. It's safe to call when using other browsers, but it will always be `null`.
   *
   * Requests originated in a Service Worker do not have a
   * [request.frame()](https://playwright.dev/docs/api/class-request#request-frame) available.
   */
  serviceWorker'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Worker'
    MethodSignature
      Identifier: '

  /**
   * Returns resource size information for given request.
   */
  sizes'
      TypeReference
        Identifier: ' Promise'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Size of the request body (POST data payload) in bytes. Set to 0 if there was no body.
     */
    requestBodySize'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Total number of bytes from the start of the HTTP request message until (and including) the double CRLF before the
     * body.
     */
    requestHeadersSize'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Size of the received response body (encoded) in bytes.
     */
    responseBodySize'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Total number of bytes from the start of the HTTP response message until (and including) the double CRLF before the
     * body.
     */
    responseHeadersSize'
            NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns resource timing information for given request. Most of the timing values become available upon the
   * response, `responseEnd` becomes available when request finishes. Find more information at
   * [Resource Timing API](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming).
   *
   * **Usage**
   *
   * ```js
   * const requestFinishedPromise = page.waitForEvent('requestfinished');
   * await page.goto('http://example.com');
   * const request = await requestFinishedPromise;
   * console.log(request.timing());
   * ```
   *
   */
  timing'
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Request start time in milliseconds elapsed since January 1, 1970 00:00:00 UTC
     */
    startTime'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Time immediately before the browser starts the domain name lookup for the resource. The value is given in
     * milliseconds relative to `startTime`, -1 if not available.
     */
    domainLookupStart'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Time immediately after the browser starts the domain name lookup for the resource. The value is given in
     * milliseconds relative to `startTime`, -1 if not available.
     */
    domainLookupEnd'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Time immediately before the user agent starts establishing the connection to the server to retrieve the resource.
     * The value is given in milliseconds relative to `startTime`, -1 if not available.
     */
    connectStart'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Time immediately before the browser starts the handshake process to secure the current connection. The value is
     * given in milliseconds relative to `startTime`, -1 if not available.
     */
    secureConnectionStart'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Time immediately before the user agent starts establishing the connection to the server to retrieve the resource.
     * The value is given in milliseconds relative to `startTime`, -1 if not available.
     */
    connectEnd'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Time immediately before the browser starts requesting the resource from the server, cache, or local resource. The
     * value is given in milliseconds relative to `startTime`, -1 if not available.
     */
    requestStart'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Time immediately after the browser receives the first byte of the response from the server, cache, or local
     * resource. The value is given in milliseconds relative to `startTime`, -1 if not available.
     */
    responseStart'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Time immediately after the browser receives the last byte of the resource or immediately before the transport
     * connection is closed, whichever comes first. The value is given in milliseconds relative to `startTime`, -1 if not
     * available.
     */
    responseEnd'
          NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * URL of the request.
   */
  url'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Response'
    MethodSignature
      Identifier: '
  /**
   * An object with all the response HTTP headers associated with this response.
   */
  allHeaders'
      TypeReference
        Identifier: ' Promise'
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'key'
              StringKeyword
            StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the buffer with response body.
   */
  body'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * Waits for this response to finish, returns always `null`.
   */
  finished'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeReference
            Identifier: 'Error'
    MethodSignature
      Identifier: '

  /**
   * Returns the {@link Frame} that initiated this response.
   */
  frame'
      TypeReference
        Identifier: ' Frame'
    MethodSignature
      Identifier: '

  /**
   * Indicates whether this Response was fulfilled by a Service Worker's Fetch Handler (i.e. via
   * [FetchEvent.respondWith](https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith)).
   */
  fromServiceWorker'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * An object with the response HTTP headers. The header names are lower-cased. Note that this method does not return
   * security-related headers, including cookie-related ones. You can use
   * [response.allHeaders()](https://playwright.dev/docs/api/class-response#response-all-headers) for complete list of
   * headers that include `cookie` information.
   */
  headers'
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * An array with all the request HTTP headers associated with this response. Unlike
   * [response.allHeaders()](https://playwright.dev/docs/api/class-response#response-all-headers), header names are NOT
   * lower-cased. Headers with multiple entries, such as `Set-Cookie`, appear in the array multiple times.
   */
  headersArray'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Name of the header.
     */
    name'
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Value of the header.
     */
    value'
              StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the value of the header matching the name. The name is case-insensitive. If multiple headers have the same
   * name (except `set-cookie`), they are returned as a list separated by `, `. For `set-cookie`, the `\n` separator is
   * used. If no headers are found, `null` is returned.
   * @param name Name of the header.
   */
  headerValue'
      Parameter
        Identifier: 'name'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns all values of the headers matching the name, for example `set-cookie`. The name is case-insensitive.
   * @param name Name of the header.
   */
  headerValues'
      Parameter
        Identifier: 'name'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Array'
          StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the JSON representation of response body.
   *
   * This method will throw if the response body is not parsable via `JSON.parse`.
   */
  json'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'Serializable'
    MethodSignature
      Identifier: '

  /**
   * Contains a boolean stating whether the response was successful (status in the range 200-299) or not.
   */
  ok'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the matching {@link Request} object.
   */
  request'
      TypeReference
        Identifier: ' Request'
    MethodSignature
      Identifier: '

  /**
   * Returns SSL and other security information.
   */
  securityDetails'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Common Name component of the Issuer field. from the certificate. This should only be used for informational
     * purposes. Optional.
     */
    issuer'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * The specific TLS protocol used. (e.g. `TLS 1.3`). Optional.
     */
    protocol'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Common Name component of the Subject field from the certificate. This should only be used for informational
     * purposes. Optional.
     */
    subjectName'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Unix timestamp (in seconds) specifying when this cert becomes valid. Optional.
     */
    validFrom'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

    /**
     * Unix timestamp (in seconds) specifying when this cert becomes invalid. Optional.
     */
    validTo'
              QuestionToken
              NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the IP address and port of the server.
   */
  serverAddr'
      TypeReference
        Identifier: ' Promise'
        UnionType
          LiteralType
            NullKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * IPv4 or IPV6 address of the server.
     */
    ipAddress'
              StringKeyword
            PropertySignature
              Identifier: '

    port'
              NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Contains the status code of the response (e.g., 200 for a success).
   */
  status'
      NumberKeyword
    MethodSignature
      Identifier: '

  /**
   * Contains the status text of the response (e.g. usually an "OK" for a success).
   */
  statusText'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the text representation of response body.
   */
  text'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Contains the URL of the response.
   */
  url'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Route'
    MethodSignature
      Identifier: '
  /**
   * Aborts the route's request.
   * @param errorCode Optional error code. Defaults to `failed`, could be one of the following:
   * - `'aborted'` - An operation was aborted (due to user action)
   * - `'accessdenied'` - Permission to access a resource, other than the network, was denied
   * - `'addressunreachable'` - The IP address is unreachable. This usually means that there is no route to the
   * specified host or network.
   * - `'blockedbyclient'` - The client chose to block the request.
   * - `'blockedbyresponse'` - The request failed because the response was delivered along with requirements which are
   * not met ('X-Frame-Options' and 'Content-Security-Policy' ancestor checks, for instance).
   * - `'connectionaborted'` - A connection timed out as a result of not receiving an ACK for data sent.
   * - `'connectionclosed'` - A connection was closed (corresponding to a TCP FIN).
   * - `'connectionfailed'` - A connection attempt failed.
   * - `'connectionrefused'` - A connection attempt was refused.
   * - `'connectionreset'` - A connection was reset (corresponding to a TCP RST).
   * - `'internetdisconnected'` - The Internet connection has been lost.
   * - `'namenotresolved'` - The host name could not be resolved.
   * - `'timedout'` - An operation timed out.
   * - `'failed'` - A generic failure occurred.
   */
  abort'
      Parameter
        Identifier: 'errorCode'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Sends route's request to the network with optional overrides.
   *
   * **Usage**
   *
   * ```js
   * await page.route('**\/*', async (route, request) => {
   *   // Override headers
   *   const headers = {
   *     ...request.headers(),
   *     foo: 'foo-value', // set "foo" header
   *     bar: undefined, // remove "bar" header
   *   };
   *   await route.continue({ headers });
   * });
   * ```
   *
   * **Details**
   *
   * Note that any overrides such as `url` or `headers` only apply to the request being routed. If this request results
   * in a redirect, overrides will not be applied to the new redirected request. If you want to propagate a header
   * through redirects, use the combination of
   * [route.fetch([options])](https://playwright.dev/docs/api/class-route#route-fetch) and
   * [route.fulfill([options])](https://playwright.dev/docs/api/class-route#route-fulfill) instead.
   *
   * [route.continue([options])](https://playwright.dev/docs/api/class-route#route-continue) will immediately send the
   * request to the network, other matching handlers won't be invoked. Use
   * [route.fallback([options])](https://playwright.dev/docs/api/class-route#route-fallback) If you want next matching
   * handler in the chain to be invoked.
   * @param options
   */
  continue'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * If set changes the request HTTP headers. Header values will be converted to a string.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * If set changes the request method (e.g. GET or POST).
     */
    method'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * If set changes the post data of request.
     */
    postData'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * If set changes the request URL. New URL must have same protocol as original one.
     */
    url'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Continues route's request with optional overrides. The method is similar to
   * [route.continue([options])](https://playwright.dev/docs/api/class-route#route-continue) with the difference that
   * other matching handlers will be invoked before sending the request.
   *
   * **Usage**
   *
   * When several routes match the given pattern, they run in the order opposite to their registration. That way the
   * last registered route can always override all the previous ones. In the example below, request will be handled by
   * the bottom-most handler first, then it'll fall back to the previous one and in the end will be aborted by the first
   * registered route.
   *
   * ```js
   * await page.route('**\/*', async route => {
   *   // Runs last.
   *   await route.abort();
   * });
   * await page.route('**\/*', async route => {
   *   // Runs second.
   *   await route.fallback();
   * });
   * await page.route('**\/*', async route => {
   *   // Runs first.
   *   await route.fallback();
   * });
   * ```
   *
   * Registering multiple routes is useful when you want separate handlers to handle different kinds of requests, for
   * example API calls vs page resources or GET requests vs POST requests as in the example below.
   *
   * ```js
   * // Handle GET requests.
   * await page.route('**\/*', async route => {
   *   if (route.request().method() !== 'GET') {
   *     await route.fallback();
   *     return;
   *   }
   *   // Handling GET only.
   *   // ...
   * });
   *
   * // Handle POST requests.
   * await page.route('**\/*', async route => {
   *   if (route.request().method() !== 'POST') {
   *     await route.fallback();
   *     return;
   *   }
   *   // Handling POST only.
   *   // ...
   * });
   * ```
   *
   * One can also modify request while falling back to the subsequent handler, that way intermediate route handler can
   * modify url, method, headers and postData of the request.
   *
   * ```js
   * await page.route('**\/*', async (route, request) => {
   *   // Override headers
   *   const headers = {
   *     ...request.headers(),
   *     foo: 'foo-value', // set "foo" header
   *     bar: undefined, // remove "bar" header
   *   };
   *   await route.fallback({ headers });
   * });
   * ```
   *
   * Use [route.continue([options])](https://playwright.dev/docs/api/class-route#route-continue) to immediately send the
   * request to the network, other matching handlers won't be invoked in that case.
   * @param options
   */
  fallback'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * If set changes the request HTTP headers. Header values will be converted to a string.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * If set changes the request method (e.g. GET or POST).
     */
    method'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * If set changes the post data of request.
     */
    postData'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * If set changes the request URL. New URL must have same protocol as original one. Changing the URL won't affect the
     * route matching, all the routes are matched using the original request URL.
     */
    url'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Performs the request and fetches result without fulfilling it, so that the response could be modified and then
   * fulfilled.
   *
   * **Usage**
   *
   * ```js
   * await page.route('https://dog.ceo/api/breeds/list/all', async route => {
   *   const response = await route.fetch();
   *   const json = await response.json();
   *   json.message['big_red_dog'] = [];
   *   await route.fulfill({ response, json });
   * });
   * ```
   *
   * **Details**
   *
   * Note that `headers` option will apply to the fetched request as well as any redirects initiated by it. If you want
   * to only apply `headers` to the original request, but not to redirects, look into
   * [route.continue([options])](https://playwright.dev/docs/api/class-route#route-continue) instead.
   * @param options
   */
  fetch'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * If set changes the request HTTP headers. Header values will be converted to a string.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
     */
    maxRedirects'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Maximum number of times network errors should be retried. Currently only `ECONNRESET` error is retried. Does not
     * retry based on HTTP response codes. An error will be thrown if the limit is exceeded. Defaults to `0` - no retries.
     */
    maxRetries'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * If set changes the request method (e.g. GET or POST).
     */
    method'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string
     * and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type`
     * header will be set to `application/octet-stream` if not explicitly set.
     */
    postData'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
              TypeReference
                Identifier: 'Serializable'
          PropertySignature
            Identifier: '

    /**
     * Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * If set changes the request URL. New URL must have same protocol as original one.
     */
    url'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'APIResponse'
    MethodSignature
      Identifier: '

  /**
   * Fulfills route's request with given response.
   *
   * **Usage**
   *
   * An example of fulfilling all requests with 404 responses:
   *
   * ```js
   * await page.route('**\/*', async route => {
   *   await route.fulfill({
   *     status: 404,
   *     contentType: 'text/plain',
   *     body: 'Not Found!'
   *   });
   * });
   * ```
   *
   * An example of serving static file:
   *
   * ```js
   * await page.route('**\/xhr_endpoint', route => route.fulfill({ path: 'mock_data.json' }));
   * ```
   *
   * @param options
   */
  fulfill'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Response body.
     */
    body'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
          PropertySignature
            Identifier: '

    /**
     * If set, equals to setting `Content-Type` response header.
     */
    contentType'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Response headers. Header values will be converted to a string.
     */
    headers'
            QuestionToken
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'key'
                  StringKeyword
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * JSON response. This method will set the content type to `application/json` if not set.
     */
    json'
            QuestionToken
            TypeReference
              Identifier: ' Serializable'
          PropertySignature
            Identifier: '

    /**
     * File path to respond with. The content type will be inferred from file extension. If `path` is a relative path,
     * then it is resolved relative to the current working directory.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * {@link APIResponse} to fulfill route's request with. Individual fields of the response (such as headers) can be
     * overridden using fulfill options.
     */
    response'
            QuestionToken
            TypeReference
              Identifier: ' APIResponse'
          PropertySignature
            Identifier: '

    /**
     * Response status code, defaults to `200`.
     */
    status'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * A request to be routed.
   */
  request'
      TypeReference
        Identifier: ' Request'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Selectors'
    MethodSignature
      Identifier: '
  /**
   * Selectors must be registered before creating the page.
   *
   * **Usage**
   *
   * An example of registering selector engine that queries elements based on a tag name:
   *
   * ```js
   * const { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.
   *
   * (async () => {
   *   // Must be a function that evaluates to a selector engine instance.
   *   const createTagNameEngine = () => ({
   *     // Returns the first element matching given selector in the root's subtree.
   *     query(root, selector) {
   *       return root.querySelector(selector);
   *     },
   *
   *     // Returns all elements matching given selector in the root's subtree.
   *     queryAll(root, selector) {
   *       return Array.from(root.querySelectorAll(selector));
   *     }
   *   });
   *
   *   // Register the engine. Selectors will be prefixed with "tag=".
   *   await selectors.register('tag', createTagNameEngine);
   *
   *   const browser = await firefox.launch();
   *   const page = await browser.newPage();
   *   await page.setContent(`<div><button>Click me</button></div>`);
   *
   *   // Use the selector prefixed with its name.
   *   const button = page.locator('tag=button');
   *   // We can combine it with built-in locators.
   *   await page.locator('tag=div').getByText('Click me').click();
   *   // Can use it in any methods supporting selectors.
   *   const buttonCount = await page.locator('tag=button').count();
   *
   *   await browser.close();
   * })();
   * ```
   *
   * @param name Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only
   * contain `[a-zA-Z0-9_]` characters.
   * @param script Script that evaluates to a selector engine instance. The script is evaluated in the page context.
   * @param options
   */
  register'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' script'
        UnionType
          TypeReference
            Identifier: ' Function'
          StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: '
    /**
     * Path to the JavaScript file. If `path` is a relative path, then it is resolved relative to the current working
     * directory. Optional.
     */
    path'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: '

    /**
     * Raw script content. Optional.
     */
    content'
              QuestionToken
              StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same
     * DOM, but not any JavaScript objects from the frame's scripts. Defaults to `false`. Note that running as a content
     * script is not guaranteed when this engine is used together with other registered engines.
     */
    contentScript'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Defines custom attribute name to be used in
   * [page.getByTestId(testId)](https://playwright.dev/docs/api/class-page#page-get-by-test-id). `data-testid` is used
   * by default.
   * @param attributeName Test id attribute name.
   */
  setTestIdAttribute'
      Parameter
        Identifier: 'attributeName'
        StringKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Touchscreen'
    MethodSignature
      Identifier: '
  /**
   * Dispatches a `touchstart` and `touchend` event with a single touch at the position (`x`,`y`).
   *
   * **NOTE** [page.tap(selector[, options])](https://playwright.dev/docs/api/class-page#page-tap) the method will throw
   * if `hasTouch` option of the browser context is false.
   * @param x X coordinate relative to the main frame's viewport in CSS pixels.
   * @param y Y coordinate relative to the main frame's viewport in CSS pixels.
   */
  tap'
      Parameter
        Identifier: 'x'
        NumberKeyword
      Parameter
        Identifier: ' y'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Tracing'
    MethodSignature
      Identifier: '
  /**
   * Start tracing.
   *
   * **Usage**
   *
   * ```js
   * await context.tracing.start({ screenshots: true, snapshots: true });
   * const page = await context.newPage();
   * await page.goto('https://playwright.dev');
   * await context.tracing.stop({ path: 'trace.zip' });
   * ```
   *
   * @param options
   */
  start'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * If specified, intermediate trace files are going to be saved into the files with the given name prefix inside the
     * `tracesDir` folder specified in
     * [browserType.launch([options])](https://playwright.dev/docs/api/class-browsertype#browser-type-launch). To specify
     * the final trace zip file name, you need to pass `path` option to
     * [tracing.stop([options])](https://playwright.dev/docs/api/class-tracing#tracing-stop) instead.
     */
    name'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to capture screenshots during tracing. Screenshots are used to build a timeline preview.
     */
    screenshots'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * If this option is true tracing will
     * - capture DOM snapshot on every action
     * - record network activity
     */
    snapshots'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to include source files for trace actions.
     */
    sources'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Trace name to be shown in the Trace Viewer.
     */
    title'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Start a new trace chunk. If you'd like to record multiple traces on the same {@link BrowserContext}, use
   * [tracing.start([options])](https://playwright.dev/docs/api/class-tracing#tracing-start) once, and then create
   * multiple trace chunks with
   * [tracing.startChunk([options])](https://playwright.dev/docs/api/class-tracing#tracing-start-chunk) and
   * [tracing.stopChunk([options])](https://playwright.dev/docs/api/class-tracing#tracing-stop-chunk).
   *
   * **Usage**
   *
   * ```js
   * await context.tracing.start({ screenshots: true, snapshots: true });
   * const page = await context.newPage();
   * await page.goto('https://playwright.dev');
   *
   * await context.tracing.startChunk();
   * await page.getByText('Get Started').click();
   * // Everything between startChunk and stopChunk will be recorded in the trace.
   * await context.tracing.stopChunk({ path: 'trace1.zip' });
   *
   * await context.tracing.startChunk();
   * await page.goto('http://example.com');
   * // Save a second trace file with different actions.
   * await context.tracing.stopChunk({ path: 'trace2.zip' });
   * ```
   *
   * @param options
   */
  startChunk'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * If specified, intermediate trace files are going to be saved into the files with the given name prefix inside the
     * `tracesDir` folder specified in
     * [browserType.launch([options])](https://playwright.dev/docs/api/class-browsertype#browser-type-launch). To specify
     * the final trace zip file name, you need to pass `path` option to
     * [tracing.stopChunk([options])](https://playwright.dev/docs/api/class-tracing#tracing-stop-chunk) instead.
     */
    name'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Trace name to be shown in the Trace Viewer.
     */
    title'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Stop tracing.
   * @param options
   */
  stop'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Export trace into the file with the given path.
     */
    path'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Stop the trace chunk. See
   * [tracing.startChunk([options])](https://playwright.dev/docs/api/class-tracing#tracing-start-chunk) for more details
   * about multiple trace chunks.
   * @param options
   */
  stopChunk'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Export trace collected since the last
     * [tracing.startChunk([options])](https://playwright.dev/docs/api/class-tracing#tracing-start-chunk) call into the
     * file with the given path.
     */
    path'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Video'
    MethodSignature
      Identifier: '
  /**
   * Deletes the video file. Will wait for the video to finish if necessary.
   */
  delete'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns the file system path this video will be recorded to. The video is guaranteed to be written to the
   * filesystem upon closing the browser context. This method throws when connected remotely.
   */
  path'
      TypeReference
        Identifier: ' Promise'
        StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Saves the video to a user-specified path. It is safe to call this method while the video is still in progress, or
   * after the page has closed. This method waits until the page is closed and the video is fully saved.
   * @param path Path where the video should be saved.
   */
  saveAs'
      Parameter
        Identifier: 'path'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WebError'
    MethodSignature
      Identifier: '
  /**
   * Unhandled error that was thrown.
   */
  error'
      TypeReference
        Identifier: ' Error'
    MethodSignature
      Identifier: '

  /**
   * The page that produced this unhandled exception, if any.
   */
  page'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'Page'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WebSocket'
    MethodSignature
      Identifier: '
  /**
   * Fired when the websocket closes.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket receives a frame.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket sends a frame.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket has an error.
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'string'
            StringKeyword
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Adds an event listener that will be automatically removed after it is triggered once. See `addListener` for more information about this event.
   */
  once'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'string'
            StringKeyword
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket closes.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket receives a frame.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket sends a frame.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket has an error.
   */
  addListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'string'
            StringKeyword
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  removeListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'string'
            StringKeyword
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Removes an event listener added by `on` or `addListener`.
   */
  off'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'string'
            StringKeyword
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket closes.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'webSocket'
            TypeReference
              Identifier: ' WebSocket'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket receives a frame.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket sends a frame.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'data'
            TypeLiteral
              PropertySignature
                Identifier: '
    /**
     * frame payload
     */
    payload'
                UnionType
                  StringKeyword
                  TypeReference
                    Identifier: 'Buffer'
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket has an error.
   */
  prependListener'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'string'
            StringKeyword
          AnyKeyword
      ThisType
    MethodSignature
      Identifier: '

  /**
   * Indicates that the web socket has been closed.
   */
  isClosed'
      BooleanKeyword
    MethodSignature
      Identifier: '

  /**
   * Contains the URL of the WebSocket.
   */
  url'
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket closes.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'webSocket'
                  TypeReference
                    Identifier: ' WebSocket'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'webSocket'
                TypeReference
                  Identifier: ' WebSocket'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'WebSocket'
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket receives a frame.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'data'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
    /**
     * frame payload
     */
    payload'
                      UnionType
                        StringKeyword
                        TypeReference
                          Identifier: 'Buffer'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'data'
                TypeLiteral
                  PropertySignature
                    Identifier: '
    /**
     * frame payload
     */
    payload'
                    UnionType
                      StringKeyword
                      TypeReference
                        Identifier: 'Buffer'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * frame payload
     */
    payload'
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket sends a frame.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'data'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
    /**
     * frame payload
     */
    payload'
                      UnionType
                        StringKeyword
                        TypeReference
                          Identifier: 'Buffer'
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'data'
                TypeLiteral
                  PropertySignature
                    Identifier: '
    /**
     * frame payload
     */
    payload'
                    UnionType
                      StringKeyword
                      TypeReference
                        Identifier: 'Buffer'
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * frame payload
     */
    payload'
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
    MethodSignature
      Identifier: '

  /**
   * Fired when the websocket has an error.
   */
  waitForEvent'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' optionsOrPredicate'
        QuestionToken
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: ' predicate'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'string'
                  StringKeyword
                UnionType
                  BooleanKeyword
                  TypeReference
                    Identifier: ' Promise'
                    BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'string'
                StringKeyword
              UnionType
                BooleanKeyword
                TypeReference
                  Identifier: ' Promise'
                  BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        StringKeyword
  InterfaceDeclaration
    Identifier: ' AccessibilitySnapshotOptions'
    PropertySignature
      Identifier: '
  /**
   * Prune uninteresting nodes from the tree. Defaults to `true`.
   */
  interestingOnly'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The root DOM element for the snapshot. Defaults to the whole page.
   */
  root'
      QuestionToken
      TypeReference
        Identifier: ' ElementHandle'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LaunchOptions'
    PropertySignature
      Identifier: '
  /**
   * **NOTE** Use custom browser args at your own risk, as some of them may break Playwright functionality.
   *
   * Additional arguments to pass to the browser instance. The list of Chromium flags can be found
   * [here](https://peter.sh/experiments/chromium-command-line-switches/).
   */
  args'
      QuestionToken
      TypeReference
        Identifier: ' Array'
        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Browser distribution channel.  Supported values are "chrome", "chrome-beta", "chrome-dev", "chrome-canary",
   * "msedge", "msedge-beta", "msedge-dev", "msedge-canary". Read more about using
   * [Google Chrome and Microsoft Edge](https://playwright.dev/docs/browsers#google-chrome--microsoft-edge).
   */
  channel'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Enable Chromium sandboxing. Defaults to `false`.
   */
  chromiumSandbox'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * **Chromium-only** Whether to auto-open a Developer Tools panel for each tab. If this option is `true`, the
   * `headless` option will be set `false`.
   * @deprecated Use [debugging tools](https://playwright.dev/docs/debug) instead.
   */
  devtools'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * If specified, accepted downloads are downloaded into this directory. Otherwise, temporary directory is created and
   * is deleted when browser is closed. In either case, the downloads are deleted when the browser context they were
   * created in is closed.
   */
  downloadsPath'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Specify environment variables that will be visible to the browser. Defaults to `process.env`.
   */
  env'
      QuestionToken
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          UnionType
            StringKeyword
            NumberKeyword
            BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Path to a browser executable to run instead of the bundled one. If `executablePath` is a relative path, then it is
   * resolved relative to the current working directory. Note that Playwright only works with the bundled Chromium,
   * Firefox or WebKit, use at your own risk.
   */
  executablePath'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Firefox user preferences. Learn more about the Firefox user preferences at
   * [`about:config`](https://support.mozilla.org/en-US/kb/about-config-editor-firefox).
   */
  firefoxUserPrefs'
      QuestionToken
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          UnionType
            StringKeyword
            NumberKeyword
            BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Close the browser process on SIGHUP. Defaults to `true`.
   */
  handleSIGHUP'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Close the browser process on Ctrl-C. Defaults to `true`.
   */
  handleSIGINT'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Close the browser process on SIGTERM. Defaults to `true`.
   */
  handleSIGTERM'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to run browser in headless mode. More details for
   * [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and
   * [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the
   * `devtools` option is `true`.
   */
  headless'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * If `true`, Playwright does not pass its own configurations args and only uses the ones from `args`. If an array is
   * given, then filters out the given default arguments. Dangerous option; use with care. Defaults to `false`.
   */
  ignoreDefaultArgs'
      QuestionToken
      UnionType
        BooleanKeyword
        TypeReference
          Identifier: 'Array'
          StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Logger sink for Playwright logging.
   */
  logger'
      QuestionToken
      TypeReference
        Identifier: ' Logger'
    PropertySignature
      Identifier: '

  /**
   * Network proxy settings.
   */
  proxy'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
     * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
     */
    server'
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
     */
    bypass'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * Optional username to use if HTTP proxy requires authentication.
     */
    username'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * Optional password to use if HTTP proxy requires authentication.
     */
    password'
          QuestionToken
          StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going
   * on.
   */
  slowMo'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Maximum time in milliseconds to wait for the browser instance to start. Defaults to `30000` (30 seconds). Pass `0`
   * to disable timeout.
   */
  timeout'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * If specified, traces are saved into this directory.
   */
  tracesDir'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConnectOverCDPOptions'
    PropertySignature
      Identifier: '
  /**
   * Deprecated, use the first argument instead. Optional.
   */
  endpointURL'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Additional HTTP headers to be sent with connect request. Optional.
   */
  headers'
      QuestionToken
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Logger sink for Playwright logging. Optional.
   */
  logger'
      QuestionToken
      TypeReference
        Identifier: ' Logger'
    PropertySignature
      Identifier: '

  /**
   * Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going
   * on. Defaults to 0.
   */
  slowMo'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Maximum time in milliseconds to wait for the connection to be established. Defaults to `30000` (30 seconds). Pass
   * `0` to disable timeout.
   */
  timeout'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConnectOptions'
    PropertySignature
      Identifier: '
  /**
   * This option exposes network available on the connecting client to the browser being connected to. Consists of a
   * list of rules separated by comma.
   *
   * Available rules:
   * 1. Hostname pattern, for example: `example.com`, `*.org:99`, `x.*.y.com`, `*foo.org`.
   * 1. IP literal, for example: `127.0.0.1`, `0.0.0.0:99`, `[::1]`, `[0:0::1]:99`.
   * 1. `<loopback>` that matches local loopback interfaces: `localhost`, `*.localhost`, `127.0.0.1`, `[::1]`.
   *
   * Some common examples:
   * 1. `"*"` to expose all network.
   * 1. `"<loopback>"` to expose localhost network.
   * 1. `"*.test.internal-domain,*.staging.internal-domain,<loopback>"` to expose test/staging deployments and
   *    localhost.
   */
  exposeNetwork'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Additional HTTP headers to be sent with web socket connect request. Optional.
   */
  headers'
      QuestionToken
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Logger sink for Playwright logging. Optional.
   */
  logger'
      QuestionToken
      TypeReference
        Identifier: ' Logger'
    PropertySignature
      Identifier: '

  /**
   * Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going
   * on. Defaults to 0.
   */
  slowMo'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Maximum time in milliseconds to wait for the connection to be established. Defaults to `0` (no timeout).
   */
  timeout'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LocatorScreenshotOptions'
    PropertySignature
      Identifier: '
  /**
   * When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different
   * treatment depending on their duration:
   * - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
   * - infinite animations are canceled to initial state, and then played over after the screenshot.
   *
   * Defaults to `"allow"` that leaves animations untouched.
   */
  animations'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be
   * changed.  Defaults to `"hide"`.
   */
  caret'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink
   * box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.
   */
  mask'
      QuestionToken
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Locator'
    PropertySignature
      Identifier: '

  /**
   * Specify the color of the overlay box for masked elements, in
   * [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.
   */
  maskColor'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images.
   * Defaults to `false`.
   */
  omitBackground'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a
   * relative path, then it is resolved relative to the current working directory. If no path is provided, the image
   * won't be saved to the disk.
   */
  path'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The quality of the image, between 0-100. Not applicable to `png` images.
   */
  quality'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this
   * will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so
   * screenshots of high-dpi devices will be twice as large or even larger.
   *
   * Defaults to `"device"`.
   */
  scale'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make
   * elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces
   * the Shadow DOM and applies to the inner frames.
   */
  style'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
   * option in the config, or by using the
   * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
   * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
   */
  timeout'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Specify screenshot type, defaults to `png`.
   */
  type'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  InterfaceDeclaration
    Identifier: ' ElementHandleWaitForSelectorOptions'
    PropertySignature
      Identifier: '
  /**
   * Defaults to `'visible'`. Can be either:
   * - `'attached'` - wait for element to be present in DOM.
   * - `'detached'` - wait for element to not be present in DOM.
   * - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element
   *   without any content or with `display:none` has an empty bounding box and is not considered visible.
   * - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or
   *   `visibility:hidden`. This is opposite to the `'visible'` option.
   */
  state'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
   * element, the call throws an exception.
   */
  strict'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
   * option in the config, or by using the
   * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
   * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
   */
  timeout'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BrowserContextOptions'
    PropertySignature
      Identifier: '
  /**
   * Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.
   */
  acceptDownloads'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * When using [page.goto(url[, options])](https://playwright.dev/docs/api/class-page#page-goto),
   * [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route),
   * [page.waitForURL(url[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-url),
   * [page.waitForRequest(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-request),
   * or
   * [page.waitForResponse(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-response)
   * it takes the base URL in consideration by using the
   * [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL.
   * Unset by default. Examples:
   * - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
   * - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in
   *   `http://localhost:3000/foo/bar.html`
   * - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in
   *   `http://localhost:3000/bar.html`
   */
  baseURL'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Toggles bypassing page's Content-Security-Policy. Defaults to `false`.
   */
  bypassCSP'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * TLS Client Authentication allows the server to request a client certificate and verify it.
   *
   * **Details**
   *
   * An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`,
   * a single `pfxPath`, or their corresponding direct value equivalents (`cert` and `key`, or `pfx`). Optionally,
   * `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided
   * with an exact match to the request origin that the certificate is valid for.
   *
   * **NOTE** Using Client Certificates in combination with Proxy Servers is not supported.
   *
   * **NOTE** When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it
   * work by replacing `localhost` with `local.playwright`.
   */
  clientCertificates'
      QuestionToken
      TypeReference
        Identifier: ' Array'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Exact origin that the certificate is valid for. Origin includes `https` protocol, a hostname and optionally a port.
     */
    origin'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Path to the file with the certificate in PEM format.
     */
    certPath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Direct value of the certificate in PEM format.
     */
    cert'
            QuestionToken
            TypeReference
              Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Path to the file with the private key in PEM format.
     */
    keyPath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Direct value of the private key in PEM format.
     */
    key'
            QuestionToken
            TypeReference
              Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Path to the PFX or PKCS12 encoded private key and certificate chain.
     */
    pfxPath'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Direct value of the PFX or PKCS12 encoded private key and certificate chain.
     */
    pfx'
            QuestionToken
            TypeReference
              Identifier: ' Buffer'
          PropertySignature
            Identifier: '

    /**
     * Passphrase for the private key (PEM or PFX).
     */
    passphrase'
            QuestionToken
            StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See
   * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
   * Passing `null` resets emulation to system defaults. Defaults to `'light'`.
   */
  colorScheme'
      QuestionToken
      UnionType
        LiteralType
          NullKeyword
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about
   * [emulating devices with device scale factor](https://playwright.dev/docs/emulation#devices).
   */
  deviceScaleFactor'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * An object containing additional HTTP headers to be sent with every request. Defaults to none.
   */
  extraHTTPHeaders'
      QuestionToken
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See
   * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
   * Passing `null` resets emulation to system defaults. Defaults to `'none'`.
   */
  forcedColors'
      QuestionToken
      UnionType
        LiteralType
          NullKeyword
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  geolocation'
      QuestionToken
      TypeReference
        Identifier: ' Geolocation'
    PropertySignature
      Identifier: '

  /**
   * Specifies if viewport supports touch events. Defaults to false. Learn more about
   * [mobile emulation](https://playwright.dev/docs/emulation#devices).
   */
  hasTouch'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no
   * origin is specified, the username and password are sent to any servers upon unauthorized responses.
   */
  httpCredentials'
      QuestionToken
      TypeReference
        Identifier: ' HTTPCredentials'
    PropertySignature
      Identifier: '

  /**
   * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
   */
  ignoreHTTPSErrors'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device,
   * so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more
   * about [mobile emulation](https://playwright.dev/docs/emulation#ismobile).
   */
  isMobile'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about
   * [disabling JavaScript](https://playwright.dev/docs/emulation#javascript-enabled).
   */
  javaScriptEnabled'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value,
   * `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default
   * locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/emulation#locale--timezone).
   */
  locale'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Logger sink for Playwright logging.
   */
  logger'
      QuestionToken
      TypeReference
        Identifier: ' Logger'
    PropertySignature
      Identifier: '

  /**
   * Whether to emulate network being offline. Defaults to `false`. Learn more about
   * [network emulation](https://playwright.dev/docs/emulation#offline).
   */
  offline'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * A list of permissions to grant to all pages in this context. See
   * [browserContext.grantPermissions(permissions[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-grant-permissions)
   * for more details. Defaults to none.
   */
  permissions'
      QuestionToken
      TypeReference
        Identifier: ' Array'
        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Network proxy settings to use with this context. Defaults to none.
   */
  proxy'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example `http://myproxy.com:3128` or
     * `socks5://myproxy.com:3128`. Short form `myproxy.com:3128` is considered an HTTP proxy.
     */
    server'
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * Optional comma-separated domains to bypass proxy, for example `".com, chromium.org, .domain.com"`.
     */
    bypass'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * Optional username to use if HTTP proxy requires authentication.
     */
    username'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * Optional password to use if HTTP proxy requires authentication.
     */
    password'
          QuestionToken
          StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Enables [HAR](http://www.softwareishard.com/blog/har-12-spec) recording for all pages into `recordHar.path` file.
   * If not specified, the HAR is not recorded. Make sure to await
   * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
   * the HAR to be saved.
   */
  recordHar'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Optional setting to control whether to omit request content from the HAR. Defaults to `false`. Deprecated, use
     * `content` policy instead.
     */
    omitContent'
          QuestionToken
          BooleanKeyword
        PropertySignature
          Identifier: '

    /**
     * Optional setting to control resource content management. If `omit` is specified, content is not persisted. If
     * `attach` is specified, resources are persisted as separate files or entries in the ZIP archive. If `embed` is
     * specified, content is stored inline the HAR file as per HAR specification. Defaults to `attach` for `.zip` output
     * files and to `embed` for all other file extensions.
     */
    content'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '

    /**
     * Path on the filesystem to write the HAR file to. If the file name ends with `.zip`, `content: 'attach'` is used by
     * default.
     */
    path'
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * When set to `minimal`, only record information necessary for routing from HAR. This omits sizes, timing, page,
     * cookies, security and other types of HAR information that are not used when replaying from HAR. Defaults to `full`.
     */
    mode'
          QuestionToken
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '

    /**
     * A glob or regex pattern to filter requests that are stored in the HAR. When a `baseURL` via the context options was
     * provided and the passed URL is a path, it gets merged via the
     * [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor. Defaults to none.
     */
    urlFilter'
          QuestionToken
          UnionType
            StringKeyword
            TypeReference
              Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Enables video recording for all pages into `recordVideo.dir` directory. If not specified videos are not recorded.
   * Make sure to await
   * [browserContext.close([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-close) for
   * videos to be saved.
   */
  recordVideo'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Path to the directory to put videos into.
     */
    dir'
          StringKeyword
        PropertySignature
          Identifier: '

    /**
     * Optional dimensions of the recorded videos. If not specified the size will be equal to `viewport` scaled down to
     * fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual picture of
     * each page will be scaled down if necessary to fit the specified size.
     */
    size'
          QuestionToken
          TypeLiteral
            PropertySignature
              Identifier: '
      /**
       * Video frame width.
       */
      width'
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * Video frame height.
       */
      height'
              NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce'`, `'no-preference'`. See
   * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
   * Passing `null` resets emulation to system defaults. Defaults to `'no-preference'`.
   */
  reducedMotion'
      QuestionToken
      UnionType
        LiteralType
          NullKeyword
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Emulates consistent window screen size available inside web page via `window.screen`. Is only used when the
   * `viewport` is set.
   */
  screen'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * page width in pixels.
     */
    width'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * page height in pixels.
     */
    height'
          NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to allow sites to register Service workers. Defaults to `'allow'`.
   * - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be
   *   registered.
   * - `'block'`: Playwright will block all registration of Service Workers.
   */
  serviceWorkers'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Learn more about [storage state and auth](https://playwright.dev/docs/auth).
   *
   * Populates context with given storage state. This option can be used to initialize context with logged-in
   * information obtained via
   * [browserContext.storageState([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-storage-state).
   */
  storageState'
      QuestionToken
      UnionType
        StringKeyword
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Cookies to set for context
     */
    cookies'
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      name'
                  StringKeyword
                PropertySignature
                  Identifier: '

      value'
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Domain and path are required. For the cookie to apply to all subdomains as well, prefix domain with a dot, like
       * this: ".example.com"
       */
      domain'
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Domain and path are required
       */
      path'
                  StringKeyword
                PropertySignature
                  Identifier: '

      /**
       * Unix time in seconds.
       */
      expires'
                  NumberKeyword
                PropertySignature
                  Identifier: '

      httpOnly'
                  BooleanKeyword
                PropertySignature
                  Identifier: '

      secure'
                  BooleanKeyword
                PropertySignature
                  Identifier: '

      /**
       * sameSite flag
       */
      sameSite'
                  UnionType
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
          PropertySignature
            Identifier: '

    /**
     * localStorage to set for context
     */
    origins'
            TypeReference
              Identifier: ' Array'
              TypeLiteral
                PropertySignature
                  Identifier: '
      origin'
                  StringKeyword
                PropertySignature
                  Identifier: '

      localStorage'
                  TypeReference
                    Identifier: ' Array'
                    TypeLiteral
                      PropertySignature
                        Identifier: '
        name'
                        StringKeyword
                      PropertySignature
                        Identifier: '

        value'
                        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * If set to true, enables strict selectors mode for this context. In the strict selectors mode all operations on
   * selectors that imply single target DOM element will throw when more than one element matches the selector. This
   * option does not affect any Locator APIs (Locators are always strict). Defaults to `false`. See {@link Locator} to
   * learn more about the strict mode.
   */
  strictSelectors'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Changes the timezone of the context. See
   * [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)
   * for a list of supported timezone IDs. Defaults to the system timezone.
   */
  timezoneId'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Specific user agent to use in this context.
   */
  userAgent'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * @deprecated Use `recordVideo` instead.
   */
  videoSize'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Video frame width.
     */
    width'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Video frame height.
     */
    height'
          NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * @deprecated Use `recordVideo` instead.
   */
  videosPath'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent
   * viewport emulation. Learn more about [viewport emulation](https://playwright.dev/docs/emulation#viewport).
   *
   * **NOTE** The `null` value opts out from the default presets, makes viewport depend on the host window size defined
   * by the operating system. It makes the execution of the tests non-deterministic.
   */
  viewport'
      QuestionToken
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'ViewportSize'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ViewportSize'
    PropertySignature
      Identifier: '
  /**
   * page width in pixels.
   */
  width'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * page height in pixels.
   */
  height'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' HTTPCredentials'
    PropertySignature
      Identifier: '
  username'
      StringKeyword
    PropertySignature
      Identifier: '

  password'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Restrain sending http credentials on specific origin (scheme://host:port).
   */
  origin'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * This option only applies to the requests sent from corresponding {@link APIRequestContext} and does not affect
   * requests sent from the browser. `'always'` - `Authorization` header with basic authentication credentials will be
   * sent with the each API request. `'unauthorized` - the credentials are only sent when 401 (Unauthorized) response
   * with `WWW-Authenticate` header is received. Defaults to `'unauthorized'`.
   */
  send'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Geolocation'
    PropertySignature
      Identifier: '
  /**
   * Latitude between -90 and 90.
   */
  latitude'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Longitude between -180 and 180.
   */
  longitude'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Non-negative accuracy value. Defaults to `0`.
   */
  accuracy'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Cookie'
    PropertySignature
      Identifier: '
  name'
      StringKeyword
    PropertySignature
      Identifier: '

  value'
      StringKeyword
    PropertySignature
      Identifier: '

  domain'
      StringKeyword
    PropertySignature
      Identifier: '

  path'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Unix time in seconds.
   */
  expires'
      NumberKeyword
    PropertySignature
      Identifier: '

  httpOnly'
      BooleanKeyword
    PropertySignature
      Identifier: '

  secure'
      BooleanKeyword
    PropertySignature
      Identifier: '

  sameSite'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  InterfaceDeclaration
    Identifier: ' PageWaitForSelectorOptions'
    PropertySignature
      Identifier: '
  /**
   * Defaults to `'visible'`. Can be either:
   * - `'attached'` - wait for element to be present in DOM.
   * - `'detached'` - wait for element to not be present in DOM.
   * - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element
   *   without any content or with `display:none` has an empty bounding box and is not considered visible.
   * - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or
   *   `visibility:hidden`. This is opposite to the `'visible'` option.
   */
  state'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
   * element, the call throws an exception.
   */
  strict'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
   * option in the config, or by using the
   * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
   * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
   */
  timeout'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' PageWaitForFunctionOptions'
    PropertySignature
      Identifier: '
  /**
   * If `polling` is `'raf'`, then `pageFunction` is constantly executed in `requestAnimationFrame` callback. If
   * `polling` is a number, then it is treated as an interval in milliseconds at which the function would be executed.
   * Defaults to `raf`.
   */
  polling'
      QuestionToken
      UnionType
        NumberKeyword
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Maximum time to wait for in milliseconds. Defaults to `0` - no timeout. The default value can be changed via
   * `actionTimeout` option in the config, or by using the
   * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
   * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
   */
  timeout'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PageScreenshotOptions'
    PropertySignature
      Identifier: '
  /**
   * When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different
   * treatment depending on their duration:
   * - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
   * - infinite animations are canceled to initial state, and then played over after the screenshot.
   *
   * Defaults to `"allow"` that leaves animations untouched.
   */
  animations'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be
   * changed.  Defaults to `"hide"`.
   */
  caret'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * An object which specifies clipping of the resulting image.
   */
  clip'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * x-coordinate of top-left corner of clip area
     */
    x'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * y-coordinate of top-left corner of clip area
     */
    y'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * width of clipping area
     */
    width'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * height of clipping area
     */
    height'
          NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to
   * `false`.
   */
  fullPage'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink
   * box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.
   */
  mask'
      QuestionToken
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Locator'
    PropertySignature
      Identifier: '

  /**
   * Specify the color of the overlay box for masked elements, in
   * [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.
   */
  maskColor'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images.
   * Defaults to `false`.
   */
  omitBackground'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The file path to save the image to. The screenshot type will be inferred from file extension. If `path` is a
   * relative path, then it is resolved relative to the current working directory. If no path is provided, the image
   * won't be saved to the disk.
   */
  path'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The quality of the image, between 0-100. Not applicable to `png` images.
   */
  quality'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this
   * will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so
   * screenshots of high-dpi devices will be twice as large or even larger.
   *
   * Defaults to `"device"`.
   */
  scale'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Text of the stylesheet to apply while making the screenshot. This is where you can hide dynamic elements, make
   * elements invisible or change their properties to help you creating repeatable screenshots. This stylesheet pierces
   * the Shadow DOM and applies to the inner frames.
   */
  style'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Maximum time in milliseconds. Defaults to `0` - no timeout. The default value can be changed via `actionTimeout`
   * option in the config, or by using the
   * [browserContext.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-browsercontext#browser-context-set-default-timeout)
   * or [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout) methods.
   */
  timeout'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Specify screenshot type, defaults to `png`.
   */
  type'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  TypeAliasDeclaration
    Identifier: ' Devices'
    TypeLiteral
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      PropertySignature
        StringLiteral
        TypeReference
          Identifier: ' DeviceDescriptor'
      IndexSignature
        Parameter
          Identifier: 'key'
          StringKeyword
        TypeReference
          Identifier: ' DeviceDescriptor'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ChromiumBrowserContext'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BrowserContext'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ChromiumBrowser'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Browser'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FirefoxBrowser'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Browser'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WebKitBrowser'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Browser'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ChromiumCoverage'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Coverage'
