SourceFile
  ImportEqualsDeclaration
    Identifier: ' basem'
    ExternalModuleReference
      StringLiteral
  ImportEqualsDeclaration
    Identifier: ' VsoBaseInterfaces'
    ExternalModuleReference
      StringLiteral
  ImportEqualsDeclaration
    Identifier: ' GitInterfaces'
    ExternalModuleReference
      StringLiteral
  ImportEqualsDeclaration
    Identifier: ' TfsCoreInterfaces'
    ExternalModuleReference
      StringLiteral
  ImportEqualsDeclaration
    Identifier: ' VSSInterfaces'
    ExternalModuleReference
      StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IGitApi'
    HeritageClause
      ExpressionWithTypeArguments
        PropertyAccessExpression
          Identifier: ' basem'
          Identifier: 'ClientApiBase'
    MethodSignature
      Identifier: '
    deleteEnablementStatus'
      Parameter
        Identifier: 'allProjects'
        BooleanKeyword
      Parameter
        Identifier: ' includeBillableCommitters'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' projectIds'
        QuestionToken
        ArrayType
          StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getEnablementStatus'
      Parameter
        Identifier: 'projectIds'
        QuestionToken
        ArrayType
          StringKeyword
      Parameter
        Identifier: ' billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' take'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'AdvSecEnablementStatus'
    MethodSignature
      Identifier: '
    getEnableOnCreateHost'
      Parameter
        Identifier: 'enableOnCreateHost'
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '
    getEnableOnCreateProject'
      Parameter
        Identifier: 'enableOnCreateProjectId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '
    setEnableOnCreateHost'
      Parameter
        Identifier: 'enableOnCreateHost'
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    setEnableOnCreateProject'
      Parameter
        Identifier: 'enableOnCreateProjectId'
        StringKeyword
      Parameter
        Identifier: ' enableOnStatus'
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    updateEnablementStatus'
      Parameter
        Identifier: 'enablementUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'AdvSecEnablementUpdate'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getEstimatedBillablePushersOrg'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillablePusher'
    MethodSignature
      Identifier: '
    getEstimatedBillablePushersProject'
      Parameter
        Identifier: 'project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillablePusher'
    MethodSignature
      Identifier: '
    getEstimatedBillableCommittersRepo'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillableCommitter'
    MethodSignature
      Identifier: '
    getPermission'
      Parameter
        Identifier: 'projectName'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' permission'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodSignature
      Identifier: '
    createAnnotatedTag'
      Parameter
        Identifier: 'tagObject'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitAnnotatedTag'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitAnnotatedTag'
    MethodSignature
      Identifier: '
    getAnnotatedTag'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' objectId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitAnnotatedTag'
    MethodSignature
      Identifier: '
    getBillableCommitters'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' take'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillableCommitter'
    MethodSignature
      Identifier: '
    getBillableCommittersDetail'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' includeDetails'
        StringKeyword
      Parameter
        Identifier: ' billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillableCommitterDetail'
    MethodSignature
      Identifier: '
    getBlob'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitBlobRef'
    MethodSignature
      Identifier: '
    getBlobContent'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodSignature
      Identifier: '
    getBlobsZip'
      Parameter
        Identifier: 'blobIds'
        ArrayType
          StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' filename'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodSignature
      Identifier: '
    getBlobZip'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodSignature
      Identifier: '
    getBranch'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' name'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' baseVersionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitBranchStats'
    MethodSignature
      Identifier: '
    getBranches'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' baseVersionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitBranchStats'
    MethodSignature
      Identifier: '
    getBranchStatsBatch'
      Parameter
        Identifier: 'searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitQueryBranchStatsCriteria'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitBranchStats'
    MethodSignature
      Identifier: '
    getChanges'
      Parameter
        Identifier: 'commitId'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCommitChanges'
    MethodSignature
      Identifier: '
    getCherryPickConflict'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    getCherryPickConflicts'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' continuationToken'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' excludeResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' onlyResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeObsolete'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'VSSInterfaces'
            Identifier: 'PagedList'
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    updateCherryPickConflict'
      Parameter
        Identifier: 'conflict'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    updateCherryPickConflicts'
      Parameter
        Identifier: 'conflictUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflictUpdateResult'
    MethodSignature
      Identifier: '
    getCherryPickRelationships'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' commitId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodSignature
      Identifier: '
    createCherryPick'
      Parameter
        Identifier: 'cherryPickToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitAsyncRefOperationParameters'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCherryPick'
    MethodSignature
      Identifier: '
    getCherryPick'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCherryPick'
    MethodSignature
      Identifier: '
    getCherryPickForRefName'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' refName'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCherryPick'
    MethodSignature
      Identifier: '
    getCommitDiffs'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' diffCommonCommit'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' baseVersionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitBaseVersionDescriptor'
      Parameter
        Identifier: ' targetVersionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitTargetVersionDescriptor'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCommitDiffs'
    MethodSignature
      Identifier: '
    getCommit'
      Parameter
        Identifier: 'commitId'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' changeCount'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCommit'
    MethodSignature
      Identifier: '
    getCommits'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitQueryCommitsCriteria'
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodSignature
      Identifier: '
    getPushCommits'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pushId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodSignature
      Identifier: '
    getCommitsBatch'
      Parameter
        Identifier: 'searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitQueryCommitsCriteria'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeStatuses'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodSignature
      Identifier: '
    getDeletedRepositories'
      Parameter
        Identifier: 'project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitDeletedRepository'
    MethodSignature
      Identifier: '
    getFileDiffs'
      Parameter
        Identifier: 'fileDiffsCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'FileDiffsCriteria'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'FileDiff'
    MethodSignature
      Identifier: '
    getForks'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' collectionId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRepositoryRef'
    MethodSignature
      Identifier: '
    createForkSyncRequest'
      Parameter
        Identifier: 'syncParams'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitForkSyncRequestParameters'
      Parameter
        Identifier: ' repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitForkSyncRequest'
    MethodSignature
      Identifier: '
    getForkSyncRequest'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' forkSyncOperationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitForkSyncRequest'
    MethodSignature
      Identifier: '
    getForkSyncRequests'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeAbandoned'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitForkSyncRequest'
    MethodSignature
      Identifier: '
    createImportRequest'
      Parameter
        Identifier: 'importRequest'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitImportRequest'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitImportRequest'
    MethodSignature
      Identifier: '
    getImportRequest'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' importRequestId'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitImportRequest'
    MethodSignature
      Identifier: '
    queryImportRequests'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' includeAbandoned'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitImportRequest'
    MethodSignature
      Identifier: '
    updateImportRequest'
      Parameter
        Identifier: 'importRequestToUpdate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitImportRequest'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' importRequestId'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitImportRequest'
    MethodSignature
      Identifier: '
    getItem'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' includeContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' sanitize'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitItem'
    MethodSignature
      Identifier: '
    getItemContent'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' includeContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' sanitize'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodSignature
      Identifier: '
    getItems'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' zipForUnix'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitItem'
    MethodSignature
      Identifier: '
    getItemText'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' includeContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' sanitize'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodSignature
      Identifier: '
    getItemZip'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' includeContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' sanitize'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodSignature
      Identifier: '
    getItemsBatch'
      Parameter
        Identifier: 'requestData'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitItemRequestData'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          ArrayType
            TypeReference
              QualifiedName
                Identifier: 'GitInterfaces'
                Identifier: 'GitItem'
    MethodSignature
      Identifier: '
    getMergeBases'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' commitId'
        StringKeyword
      Parameter
        Identifier: ' otherCommitId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' otherCollectionId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' otherRepositoryId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodSignature
      Identifier: '
    createMergeRequest'
      Parameter
        Identifier: 'mergeParameters'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitMergeParameters'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitMerge'
    MethodSignature
      Identifier: '
    getMergeRequest'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' mergeOperationId'
        NumberKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitMerge'
    MethodSignature
      Identifier: '
    createAttachment'
      Parameter
        Identifier: 'customHeaders'
        AnyKeyword
      Parameter
        Identifier: ' contentStream'
        TypeReference
          QualifiedName
            Identifier: ' NodeJS'
            Identifier: 'ReadableStream'
      Parameter
        Identifier: ' fileName'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'Attachment'
    MethodSignature
      Identifier: '
    deleteAttachment'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getAttachmentContent'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodSignature
      Identifier: '
    getAttachments'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'Attachment'
    MethodSignature
      Identifier: '
    getAttachmentZip'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodSignature
      Identifier: '
    createLike'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    deleteLike'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getLikes'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'VSSInterfaces'
              Identifier: 'IdentityRef'
    MethodSignature
      Identifier: '
    getPullRequestIterationCommits'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodSignature
      Identifier: '
    getPullRequestCommits'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'VSSInterfaces'
            Identifier: 'PagedList'
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodSignature
      Identifier: '
    getPullRequestConflict'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    getPullRequestConflicts'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeObsolete'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' excludeResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' onlyResolved'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    updatePullRequestConflict'
      Parameter
        Identifier: 'conflict'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    updatePullRequestConflicts'
      Parameter
        Identifier: 'conflictUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflictUpdateResult'
    MethodSignature
      Identifier: '
    getPullRequestIterationChanges'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' compareTo'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestIterationChanges'
    MethodSignature
      Identifier: '
    getPullRequestIteration'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestIteration'
    MethodSignature
      Identifier: '
    getPullRequestIterations'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeCommits'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequestIteration'
    MethodSignature
      Identifier: '
    createPullRequestIterationStatus'
      Parameter
        Identifier: 'status'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestStatus'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestStatus'
    MethodSignature
      Identifier: '
    deletePullRequestIterationStatus'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' statusId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getPullRequestIterationStatus'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' statusId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestStatus'
    MethodSignature
      Identifier: '
    getPullRequestIterationStatuses'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequestStatus'
    MethodSignature
      Identifier: '
    updatePullRequestIterationStatuses'
      Parameter
        Identifier: 'customHeaders'
        AnyKeyword
      Parameter
        Identifier: ' patchDocument'
        TypeReference
          QualifiedName
            Identifier: ' VSSInterfaces'
            Identifier: 'JsonPatchDocument'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    createPullRequestLabel'
      Parameter
        Identifier: 'label'
        TypeReference
          QualifiedName
            Identifier: ' TfsCoreInterfaces'
            Identifier: 'WebApiCreateTagRequestData'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'TfsCoreInterfaces'
            Identifier: 'WebApiTagDefinition'
    MethodSignature
      Identifier: '
    deletePullRequestLabels'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' labelIdOrName'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getPullRequestLabel'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' labelIdOrName'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'TfsCoreInterfaces'
            Identifier: 'WebApiTagDefinition'
    MethodSignature
      Identifier: '
    getPullRequestLabels'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'TfsCoreInterfaces'
              Identifier: 'WebApiTagDefinition'
    MethodSignature
      Identifier: '
    getPullRequestProperties'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        AnyKeyword
    MethodSignature
      Identifier: '
    updatePullRequestProperties'
      Parameter
        Identifier: 'customHeaders'
        AnyKeyword
      Parameter
        Identifier: ' patchDocument'
        TypeReference
          QualifiedName
            Identifier: ' VSSInterfaces'
            Identifier: 'JsonPatchDocument'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        AnyKeyword
    MethodSignature
      Identifier: '
    getPullRequestQuery'
      Parameter
        Identifier: 'queries'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestQuery'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestQuery'
    MethodSignature
      Identifier: '
    createPullRequestReviewer'
      Parameter
        Identifier: 'reviewer'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'IdentityRefWithVote'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' reviewerId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'IdentityRefWithVote'
    MethodSignature
      Identifier: '
    createPullRequestReviewers'
      Parameter
        Identifier: 'reviewers'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' VSSInterfaces'
              Identifier: 'IdentityRef'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'IdentityRefWithVote'
    MethodSignature
      Identifier: '
    createUnmaterializedPullRequestReviewer'
      Parameter
        Identifier: 'reviewer'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'IdentityRefWithVote'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'IdentityRefWithVote'
    MethodSignature
      Identifier: '
    deletePullRequestReviewer'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' reviewerId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getPullRequestReviewer'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' reviewerId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'IdentityRefWithVote'
    MethodSignature
      Identifier: '
    getPullRequestReviewers'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'IdentityRefWithVote'
    MethodSignature
      Identifier: '
    updatePullRequestReviewer'
      Parameter
        Identifier: 'reviewer'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'IdentityRefWithVote'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' reviewerId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'IdentityRefWithVote'
    MethodSignature
      Identifier: '
    updatePullRequestReviewers'
      Parameter
        Identifier: 'patchVotes'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'IdentityRefWithVote'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getPullRequestById'
      Parameter
        Identifier: 'pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequest'
    MethodSignature
      Identifier: '
    getPullRequestsByProject'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestSearchCriteria'
      Parameter
        Identifier: ' maxCommentLength'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequest'
    MethodSignature
      Identifier: '
    createPullRequest'
      Parameter
        Identifier: 'gitPullRequestToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequest'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' supportsIterations'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequest'
    MethodSignature
      Identifier: '
    getPullRequest'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' maxCommentLength'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeCommits'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeWorkItemRefs'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequest'
    MethodSignature
      Identifier: '
    getPullRequests'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestSearchCriteria'
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' maxCommentLength'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequest'
    MethodSignature
      Identifier: '
    updatePullRequest'
      Parameter
        Identifier: 'gitPullRequestToUpdate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequest'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequest'
    MethodSignature
      Identifier: '
    sharePullRequest'
      Parameter
        Identifier: 'userMessage'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'ShareNotificationContext'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    createPullRequestStatus'
      Parameter
        Identifier: 'status'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestStatus'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestStatus'
    MethodSignature
      Identifier: '
    deletePullRequestStatus'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' statusId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getPullRequestStatus'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' statusId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestStatus'
    MethodSignature
      Identifier: '
    getPullRequestStatuses'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequestStatus'
    MethodSignature
      Identifier: '
    updatePullRequestStatuses'
      Parameter
        Identifier: 'customHeaders'
        AnyKeyword
      Parameter
        Identifier: ' patchDocument'
        TypeReference
          QualifiedName
            Identifier: ' VSSInterfaces'
            Identifier: 'JsonPatchDocument'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    createComment'
      Parameter
        Identifier: 'comment'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'Comment'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'Comment'
    MethodSignature
      Identifier: '
    deleteComment'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getComment'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'Comment'
    MethodSignature
      Identifier: '
    getComments'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'Comment'
    MethodSignature
      Identifier: '
    updateComment'
      Parameter
        Identifier: 'comment'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'Comment'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'Comment'
    MethodSignature
      Identifier: '
    createThread'
      Parameter
        Identifier: 'commentThread'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
    MethodSignature
      Identifier: '
    getPullRequestThread'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' iteration'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' baseIteration'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
    MethodSignature
      Identifier: '
    getThreads'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' iteration'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' baseIteration'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequestCommentThread'
    MethodSignature
      Identifier: '
    updateThread'
      Parameter
        Identifier: 'commentThread'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
    MethodSignature
      Identifier: '
    getPullRequestWorkItemRefs'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'VSSInterfaces'
              Identifier: 'ResourceRef'
    MethodSignature
      Identifier: '
    createPush'
      Parameter
        Identifier: 'push'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPush'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPush'
    MethodSignature
      Identifier: '
    getPush'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pushId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeCommits'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeRefUpdates'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPush'
    MethodSignature
      Identifier: '
    getPushes'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' searchCriteria'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPushSearchCriteria'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPush'
    MethodSignature
      Identifier: '
    deleteRepositoryFromRecycleBin'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getRecycleBinRepositories'
      Parameter
        Identifier: 'project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitDeletedRepository'
    MethodSignature
      Identifier: '
    restoreRepositoryFromRecycleBin'
      Parameter
        Identifier: 'repositoryDetails'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRecycleBinRepositoryDetails'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodSignature
      Identifier: '
    getRefs'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' filter'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeStatuses'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeMyBranches'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestStatusesOnly'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' peelTags'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' filterContains'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'VSSInterfaces'
            Identifier: 'PagedList'
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRef'
    MethodSignature
      Identifier: '
    updateRef'
      Parameter
        Identifier: 'newRefInfo'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRefUpdate'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' filter'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRef'
    MethodSignature
      Identifier: '
    updateRefs'
      Parameter
        Identifier: 'refUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'GitRefUpdate'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRefUpdateResult'
    MethodSignature
      Identifier: '
    createFavorite'
      Parameter
        Identifier: 'favorite'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRefFavorite'
      Parameter
        Identifier: ' project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRefFavorite'
    MethodSignature
      Identifier: '
    deleteRefFavorite'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' favoriteId'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getRefFavorite'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' favoriteId'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRefFavorite'
    MethodSignature
      Identifier: '
    getRefFavorites'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' identityId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRefFavorite'
    MethodSignature
      Identifier: '
    getRefFavoritesForProject'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' identityId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRefFavorite'
    MethodSignature
      Identifier: '
    createRepository'
      Parameter
        Identifier: 'gitRepositoryToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRepositoryCreateOptions'
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' sourceRef'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodSignature
      Identifier: '
    deleteRepository'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '
    getRepositories'
      Parameter
        Identifier: 'project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeAllUrls'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeHidden'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRepository'
    MethodSignature
      Identifier: '
    getRepository'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodSignature
      Identifier: '
    getRepositoryWithParent'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' includeParent'
        BooleanKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodSignature
      Identifier: '
    updateRepository'
      Parameter
        Identifier: 'newRepositoryInfo'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRepository'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodSignature
      Identifier: '
    getRevertConflict'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    getRevertConflicts'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' continuationToken'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' excludeResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' onlyResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeObsolete'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'VSSInterfaces'
            Identifier: 'PagedList'
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    updateRevertConflict'
      Parameter
        Identifier: 'conflict'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodSignature
      Identifier: '
    updateRevertConflicts'
      Parameter
        Identifier: 'conflictUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflictUpdateResult'
    MethodSignature
      Identifier: '
    createRevert'
      Parameter
        Identifier: 'revertToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitAsyncRefOperationParameters'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRevert'
    MethodSignature
      Identifier: '
    getRevert'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRevert'
    MethodSignature
      Identifier: '
    getRevertForRefName'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' refName'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRevert'
    MethodSignature
      Identifier: '
    createCommitStatus'
      Parameter
        Identifier: 'gitCommitStatusToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitStatus'
      Parameter
        Identifier: ' commitId'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitStatus'
    MethodSignature
      Identifier: '
    getStatuses'
      Parameter
        Identifier: 'commitId'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' latestOnly'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitStatus'
    MethodSignature
      Identifier: '
    getSuggestions'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' preferCompareBranch'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitSuggestion'
    MethodSignature
      Identifier: '
    getTree'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursive'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitTreeRef'
    MethodSignature
      Identifier: '
    getTreeZip'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursive'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
  ClassDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' GitApi'
    HeritageClause
      ExpressionWithTypeArguments
        PropertyAccessExpression
          Identifier: ' basem'
          Identifier: 'ClientApiBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' IGitApi'
    Constructor
      Parameter
        Identifier: 'baseUrl'
        StringKeyword
      Parameter
        Identifier: ' handlers'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' VsoBaseInterfaces'
              Identifier: 'IRequestHandler'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' VsoBaseInterfaces'
            Identifier: 'IRequestOptions'
    PropertyDeclaration
      StaticKeyword
      ReadonlyKeyword
      Identifier: ' RESOURCE_AREA_ID'
      StringLiteral
    MethodDeclaration
      Identifier: '
    /**
     * DELETE Deletes Enablement status and BillableCommitters data from DB. Deleting the enablement data will effectively disable it for the repositories affected.
     *
     * @param {boolean} allProjects
     * @param {boolean} includeBillableCommitters
     * @param {string[]} projectIds
     */
    deleteEnablementStatus'
      Parameter
        Identifier: 'allProjects'
        BooleanKeyword
      Parameter
        Identifier: ' includeBillableCommitters'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' projectIds'
        QuestionToken
        ArrayType
          StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * GET Enablement status for project's repositories.
     *
     * @param {string[]} projectIds - Null defaults to all projects in the host, list of project's repos status to return
     * @param {Date} billingDate - UTC expected, Null defaults to UtcNow(), can be provided for a point in time status
     * @param {number} skip - Skip X rows of resultset to simulate paging.
     * @param {number} take - Return Y rows of resultset to simulate paging.
     */
    getEnablementStatus'
      Parameter
        Identifier: 'projectIds'
        QuestionToken
        ArrayType
          StringKeyword
      Parameter
        Identifier: ' billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' take'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'AdvSecEnablementStatus'
    MethodDeclaration
      Identifier: '
    /**
     * @param {boolean} enableOnCreateHost
     */
    getEnableOnCreateHost'
      Parameter
        Identifier: 'enableOnCreateHost'
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * @param {string} enableOnCreateProjectId
     */
    getEnableOnCreateProject'
      Parameter
        Identifier: 'enableOnCreateProjectId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * @param {boolean} enableOnCreateHost
     */
    setEnableOnCreateHost'
      Parameter
        Identifier: 'enableOnCreateHost'
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * @param {string} enableOnCreateProjectId
     * @param {boolean} enableOnStatus
     */
    setEnableOnCreateProject'
      Parameter
        Identifier: 'enableOnCreateProjectId'
        StringKeyword
      Parameter
        Identifier: ' enableOnStatus'
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * POST Enablement status for repositories.
     *
     * @param {GitInterfaces.AdvSecEnablementUpdate[]} enablementUpdates
     */
    updateEnablementStatus'
      Parameter
        Identifier: 'enablementUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'AdvSecEnablementUpdate'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get estimated billable pushers for an Organization for last 90 days.
     *
     */
    getEstimatedBillablePushersOrg'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillablePusher'
    MethodDeclaration
      Identifier: '
    /**
     * Get estimated billable pushers for a project for last 90 days.
     *
     * @param {string} project - Project ID or project name
     */
    getEstimatedBillablePushersProject'
      Parameter
        Identifier: 'project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillablePusher'
    MethodDeclaration
      Identifier: '
    /**
     * Get estimated billable committers for a repository for the last 90 days.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId
     */
    getEstimatedBillableCommittersRepo'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillableCommitter'
    MethodDeclaration
      Identifier: '
    /**
     * GET Advanced Security Permission status.
     *
     * @param {string} projectName
     * @param {string} repositoryId - Repository user is trying to access
     * @param {string} permission - Permission being requestd, must be "viewAlert" "dismissAlert" "manage" "viewEnablement" or "repoRead"
     */
    getPermission'
      Parameter
        Identifier: 'projectName'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' permission'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Create an annotated tag.
     *
     * @param {GitInterfaces.GitAnnotatedTag} tagObject - Object containing details of tag to be created.
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - ID or name of the repository.
     */
    createAnnotatedTag'
      Parameter
        Identifier: 'tagObject'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitAnnotatedTag'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitAnnotatedTag'
    MethodDeclaration
      Identifier: '
    /**
     * Get an annotated tag.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - ID or name of the repository.
     * @param {string} objectId - ObjectId (Sha1Id) of tag to get.
     */
    getAnnotatedTag'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' objectId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitAnnotatedTag'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve actual billable committers for Advanced Security service for a given date.
     *
     * @param {string} project - Project ID or project name
     * @param {Date} billingDate - UTC expected.  If not specified defaults to the previous billing day.
     * @param {number} skip - Skip X rows of resultset to simulate paging.
     * @param {number} take - Return Y rows of resultset to simulate paging.
     */
    getBillableCommitters'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' take'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillableCommitter'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve detailed actual billable committers for Advanced Security service for a given date. Detailed results intentionally does not filter out soft deleted projects and repositories to help diagnose billing issues.
     *
     * @param {string} project - Project ID or project name
     * @param {string} includeDetails - Return all the details on the billable committers.
     * @param {Date} billingDate - UTC expected. If not specified defaults to the previous billing day.
     */
    getBillableCommittersDetail'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' includeDetails'
        StringKeyword
      Parameter
        Identifier: ' billingDate'
        QuestionToken
        TypeReference
          Identifier: ' Date'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'BillableCommitterDetail'
    MethodDeclaration
      Identifier: '
    /**
     * Get a single blob.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.
     * @param {string} project - Project ID or project name
     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip
     * @param {string} fileName - Provide a fileName to use for a download.
     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types
     */
    getBlob'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitBlobRef'
    MethodDeclaration
      Identifier: '
    /**
     * Get a single blob.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.
     * @param {string} project - Project ID or project name
     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip
     * @param {string} fileName - Provide a fileName to use for a download.
     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types
     */
    getBlobContent'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodDeclaration
      Identifier: '
    /**
     * Gets one or more blobs in a zip file download.
     *
     * @param {string[]} blobIds - Blob IDs (SHA1 hashes) to be returned in the zip file.
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {string} filename
     */
    getBlobsZip'
      Parameter
        Identifier: 'blobIds'
        ArrayType
          StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' filename'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodDeclaration
      Identifier: '
    /**
     * Get a single blob.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} sha1 - SHA1 hash of the file. You can get the SHA1 of a file using the "Git/Items/Get Item" endpoint.
     * @param {string} project - Project ID or project name
     * @param {boolean} download - If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip
     * @param {string} fileName - Provide a fileName to use for a download.
     * @param {boolean} resolveLfs - If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types
     */
    getBlobZip'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve statistics about a single branch.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} name - Name of the branch.
     * @param {string} project - Project ID or project name
     * @param {GitInterfaces.GitVersionDescriptor} baseVersionDescriptor - Identifies the commit or branch to use as the base.
     */
    getBranch'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' name'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' baseVersionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitBranchStats'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve statistics about all branches within a repository.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {GitInterfaces.GitVersionDescriptor} baseVersionDescriptor - Identifies the commit or branch to use as the base.
     */
    getBranches'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' baseVersionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitBranchStats'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve statistics for multiple commits
     *
     * @param {GitInterfaces.GitQueryBranchStatsCriteria} searchCriteria - Base Commit and List of Target Commits to compare.
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     */
    getBranchStatsBatch'
      Parameter
        Identifier: 'searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitQueryBranchStatsCriteria'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitBranchStats'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve changes for a particular commit.
     *
     * @param {string} commitId - The id of the commit.
     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
     * @param {string} project - Project ID or project name
     * @param {number} top - The maximum number of changes to return.
     * @param {number} skip - The number of changes to skip.
     */
    getChanges'
      Parameter
        Identifier: 'commitId'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCommitChanges'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve one conflict for a cherry pick by ID
     *
     * @param {string} repositoryId
     * @param {number} cherryPickId
     * @param {number} conflictId
     * @param {string} project - Project ID or project name
     */
    getCherryPickConflict'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all conflicts for a cherry pick
     *
     * @param {string} repositoryId
     * @param {number} cherryPickId
     * @param {string} project - Project ID or project name
     * @param {string} continuationToken
     * @param {number} top
     * @param {boolean} excludeResolved
     * @param {boolean} onlyResolved
     * @param {boolean} includeObsolete
     */
    getCherryPickConflicts'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' continuationToken'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' excludeResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' onlyResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeObsolete'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'VSSInterfaces'
            Identifier: 'PagedList'
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Update merge conflict resolution
     *
     * @param {GitInterfaces.GitConflict} conflict
     * @param {string} repositoryId
     * @param {number} cherryPickId
     * @param {number} conflictId
     * @param {string} project - Project ID or project name
     */
    updateCherryPickConflict'
      Parameter
        Identifier: 'conflict'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Update multiple merge conflict resolutions
     *
     * @param {GitInterfaces.GitConflict[]} conflictUpdates
     * @param {string} repositoryId
     * @param {number} cherryPickId
     * @param {string} project - Project ID or project name
     */
    updateCherryPickConflicts'
      Parameter
        Identifier: 'conflictUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflictUpdateResult'
    MethodDeclaration
      Identifier: '
    /**
     * Given a commitId, returns a list of commits that are in the same cherry-pick family.
     *
     * @param {string} repositoryNameOrId
     * @param {string} commitId
     * @param {string} project - Project ID or project name
     * @param {boolean} includeLinks
     */
    getCherryPickRelationships'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' commitId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Cherry pick a specific commit or commits that are associated to a pull request into a new branch.
     *
     * @param {GitInterfaces.GitAsyncRefOperationParameters} cherryPickToCreate
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - ID of the repository.
     */
    createCherryPick'
      Parameter
        Identifier: 'cherryPickToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitAsyncRefOperationParameters'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCherryPick'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve information about a cherry pick operation by cherry pick Id.
     *
     * @param {string} project - Project ID or project name
     * @param {number} cherryPickId - ID of the cherry pick.
     * @param {string} repositoryId - ID of the repository.
     */
    getCherryPick'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' cherryPickId'
        NumberKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCherryPick'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve information about a cherry pick operation for a specific branch. This operation is expensive due to the underlying object structure, so this API only looks at the 1000 most recent cherry pick operations.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - ID of the repository.
     * @param {string} refName - The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.
     */
    getCherryPickForRefName'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' refName'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCherryPick'
    MethodDeclaration
      Identifier: '
    /**
     * Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {boolean} diffCommonCommit - If true, diff between common and target commits. If false, diff between base and target commits.
     * @param {number} top - Maximum number of changes to return. Defaults to 100.
     * @param {number} skip - Number of changes to skip
     * @param {GitInterfaces.GitBaseVersionDescriptor} baseVersionDescriptor - Descriptor for base commit.
     * @param {GitInterfaces.GitTargetVersionDescriptor} targetVersionDescriptor - Descriptor for target commit.
     */
    getCommitDiffs'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' diffCommonCommit'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' baseVersionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitBaseVersionDescriptor'
      Parameter
        Identifier: ' targetVersionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitTargetVersionDescriptor'
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCommitDiffs'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a particular commit.
     *
     * @param {string} commitId - The id of the commit.
     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
     * @param {string} project - Project ID or project name
     * @param {number} changeCount - The number of changes to include in the result.
     */
    getCommit'
      Parameter
        Identifier: 'commitId'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' changeCount'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitCommit'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve git commits for a project
     *
     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
     * @param {GitInterfaces.GitQueryCommitsCriteria} searchCriteria
     * @param {string} project - Project ID or project name
     * @param {number} skip
     * @param {number} top
     */
    getCommits'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitQueryCommitsCriteria'
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a list of commits associated with a particular push.
     *
     * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
     * @param {number} pushId - The id of the push.
     * @param {string} project - Project ID or project name
     * @param {number} top - The maximum number of commits to return ("get the top x commits").
     * @param {number} skip - The number of commits to skip.
     * @param {boolean} includeLinks - Set to false to avoid including REST Url links for resources. Defaults to true.
     */
    getPushCommits'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pushId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve git commits for a project matching the search criteria
     *
     * @param {GitInterfaces.GitQueryCommitsCriteria} searchCriteria - Search options
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {number} skip - Number of commits to skip. The value cannot exceed 3,000,000.
     * @param {number} top - Maximum number of commits to return. The value cannot exceed 50,000.
     * @param {boolean} includeStatuses - True to include additional commit status information.
     */
    getCommitsBatch'
      Parameter
        Identifier: 'searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitQueryCommitsCriteria'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeStatuses'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve deleted git repositories.
     *
     * @param {string} project - Project ID or project name
     */
    getDeletedRepositories'
      Parameter
        Identifier: 'project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitDeletedRepository'
    MethodDeclaration
      Identifier: '
    /**
     * Get the file diffs for each of the specified files
     *
     * @param {GitInterfaces.FileDiffsCriteria} fileDiffsCriteria - List of file parameters objects
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - The name or ID of the repository
     */
    getFileDiffs'
      Parameter
        Identifier: 'fileDiffsCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'FileDiffsCriteria'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'FileDiff'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all forks of a repository in the collection.
     *
     * @param {string} repositoryNameOrId - The name or ID of the repository.
     * @param {string} collectionId - Team project collection ID.
     * @param {string} project - Project ID or project name
     * @param {boolean} includeLinks - True to include links.
     */
    getForks'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' collectionId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRepositoryRef'
    MethodDeclaration
      Identifier: '
    /**
     * Request that another repository's refs be fetched into this one. It syncs two existing forks. To create a fork, please see the <a href="https://docs.microsoft.com/en-us/rest/api/vsts/git/repositories/create?view=azure-devops-rest-5.1"> repositories endpoint</a>
     *
     * @param {GitInterfaces.GitForkSyncRequestParameters} syncParams - Source repository and ref mapping.
     * @param {string} repositoryNameOrId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {boolean} includeLinks - True to include links
     */
    createForkSyncRequest'
      Parameter
        Identifier: 'syncParams'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitForkSyncRequestParameters'
      Parameter
        Identifier: ' repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitForkSyncRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Get a specific fork sync operation's details.
     *
     * @param {string} repositoryNameOrId - The name or ID of the repository.
     * @param {number} forkSyncOperationId - OperationId of the sync request.
     * @param {string} project - Project ID or project name
     * @param {boolean} includeLinks - True to include links.
     */
    getForkSyncRequest'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' forkSyncOperationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitForkSyncRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all requested fork sync operations on this repository.
     *
     * @param {string} repositoryNameOrId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {boolean} includeAbandoned - True to include abandoned requests.
     * @param {boolean} includeLinks - True to include links.
     */
    getForkSyncRequests'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeAbandoned'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitForkSyncRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Create an import request.
     *
     * @param {GitInterfaces.GitImportRequest} importRequest - The import request to create.
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - The name or ID of the repository.
     */
    createImportRequest'
      Parameter
        Identifier: 'importRequest'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitImportRequest'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitImportRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a particular import request.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {number} importRequestId - The unique identifier for the import request.
     */
    getImportRequest'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' importRequestId'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitImportRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve import requests for a repository.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {boolean} includeAbandoned - True to include abandoned import requests in the results.
     */
    queryImportRequests'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' includeAbandoned'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitImportRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Retry or abandon a failed import request.
     *
     * @param {GitInterfaces.GitImportRequest} importRequestToUpdate - The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {number} importRequestId - The unique identifier for the import request to update.
     */
    updateImportRequest'
      Parameter
        Identifier: 'importRequestToUpdate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitImportRequest'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' importRequestId'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitImportRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} path - The item path.
     * @param {string} project - Project ID or project name
     * @param {string} scopePath - The path scope.  The default is null.
     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.
     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.
     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.
     * @param {boolean} download - Set to true to download the response as a file.  Default is false.
     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.
     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.
     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.
     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.
     */
    getItem'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' includeContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' sanitize'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitItem'
    MethodDeclaration
      Identifier: '
    /**
     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} path - The item path.
     * @param {string} project - Project ID or project name
     * @param {string} scopePath - The path scope.  The default is null.
     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.
     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.
     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.
     * @param {boolean} download - Set to true to download the response as a file.  Default is false.
     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.
     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.
     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.
     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.
     */
    getItemContent'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' includeContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' sanitize'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodDeclaration
      Identifier: '
    /**
     * Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {string} scopePath - The path scope.  The default is null.
     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.
     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.
     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.
     * @param {boolean} download - Set to true to download the response as a file.  Default is false.
     * @param {boolean} includeLinks - Set to true to include links to items.  Default is false.
     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.
     * @param {boolean} zipForUnix - Set to true to keep the file permissions for unix (and POSIX) systems like executables and symlinks
     */
    getItems'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' zipForUnix'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitItem'
    MethodDeclaration
      Identifier: '
    /**
     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} path - The item path.
     * @param {string} project - Project ID or project name
     * @param {string} scopePath - The path scope.  The default is null.
     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.
     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.
     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.
     * @param {boolean} download - Set to true to download the response as a file.  Default is false.
     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.
     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.
     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.
     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.
     */
    getItemText'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' includeContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' sanitize'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodDeclaration
      Identifier: '
    /**
     * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content, which is always returned as a download.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} path - The item path.
     * @param {string} project - Project ID or project name
     * @param {string} scopePath - The path scope.  The default is null.
     * @param {GitInterfaces.VersionControlRecursionType} recursionLevel - The recursion level of this request. The default is 'none', no recursion.
     * @param {boolean} includeContentMetadata - Set to true to include content metadata.  Default is false.
     * @param {boolean} latestProcessedChange - Set to true to include the latest changes.  Default is false.
     * @param {boolean} download - Set to true to download the response as a file.  Default is false.
     * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor - Version descriptor.  Default is the default branch for the repository.
     * @param {boolean} includeContent - Set to true to include item content when requesting json.  Default is false.
     * @param {boolean} resolveLfs - Set to true to resolve Git LFS pointer files to return actual content from Git LFS.  Default is false.
     * @param {boolean} sanitize - Set to true to sanitize an svg file and return it as image. Useful only if requested for svg file. Default is false.
     */
    getItemZip'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' path'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' scopePath'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursionLevel'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'VersionControlRecursionType'
      Parameter
        Identifier: ' includeContentMetadata'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestProcessedChange'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' download'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' versionDescriptor'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitVersionDescriptor'
      Parameter
        Identifier: ' includeContent'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' resolveLfs'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' sanitize'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodDeclaration
      Identifier: '
    /**
     * Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
     *
     * @param {GitInterfaces.GitItemRequestData} requestData - Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.
     * @param {string} repositoryId - The name or ID of the repository
     * @param {string} project - Project ID or project name
     */
    getItemsBatch'
      Parameter
        Identifier: 'requestData'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitItemRequestData'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          ArrayType
            TypeReference
              QualifiedName
                Identifier: 'GitInterfaces'
                Identifier: 'GitItem'
    MethodDeclaration
      Identifier: '
    /**
     * Find the merge bases of two commits, optionally across forks. If otherRepositoryId is not specified, the merge bases will only be calculated within the context of the local repositoryNameOrId.
     *
     * @param {string} repositoryNameOrId - ID or name of the local repository.
     * @param {string} commitId - First commit, usually the tip of the target branch of the potential merge.
     * @param {string} otherCommitId - Other commit, usually the tip of the source branch of the potential merge.
     * @param {string} project - Project ID or project name
     * @param {string} otherCollectionId - The collection ID where otherCommitId lives.
     * @param {string} otherRepositoryId - The repository ID where otherCommitId lives.
     */
    getMergeBases'
      Parameter
        Identifier: 'repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' commitId'
        StringKeyword
      Parameter
        Identifier: ' otherCommitId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' otherCollectionId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' otherRepositoryId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Request a git merge operation. Currently we support merging only 2 commits.
     *
     * @param {GitInterfaces.GitMergeParameters} mergeParameters - Parents commitIds and merge commit messsage.
     * @param {string} project - Project ID or project name
     * @param {string} repositoryNameOrId - The name or ID of the repository.
     * @param {boolean} includeLinks - True to include links
     */
    createMergeRequest'
      Parameter
        Identifier: 'mergeParameters'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitMergeParameters'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitMerge'
    MethodDeclaration
      Identifier: '
    /**
     * Get a specific merge operation's details.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryNameOrId - The name or ID of the repository.
     * @param {number} mergeOperationId - OperationId of the merge request.
     * @param {boolean} includeLinks - True to include links
     */
    getMergeRequest'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryNameOrId'
        StringKeyword
      Parameter
        Identifier: ' mergeOperationId'
        NumberKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitMerge'
    MethodDeclaration
      Identifier: '
    /**
     * Attach a new file to a pull request.
     *
     * @param {NodeJS.ReadableStream} contentStream - Content to upload
     * @param {string} fileName - The name of the file.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    createAttachment'
      Parameter
        Identifier: 'customHeaders'
        AnyKeyword
      Parameter
        Identifier: ' contentStream'
        TypeReference
          QualifiedName
            Identifier: ' NodeJS'
            Identifier: 'ReadableStream'
      Parameter
        Identifier: ' fileName'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'Attachment'
    MethodDeclaration
      Identifier: '
    /**
     * Delete a pull request attachment.
     *
     * @param {string} fileName - The name of the attachment to delete.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    deleteAttachment'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get the file content of a pull request attachment.
     *
     * @param {string} fileName - The name of the attachment.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    getAttachmentContent'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodDeclaration
      Identifier: '
    /**
     * Get a list of files attached to a given pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    getAttachments'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'Attachment'
    MethodDeclaration
      Identifier: '
    /**
     * Get the file content of a pull request attachment.
     *
     * @param {string} fileName - The name of the attachment.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    getAttachmentZip'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
    MethodDeclaration
      Identifier: '
    /**
     * Add a like on a comment.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - The ID of the thread that contains the comment.
     * @param {number} commentId - The ID of the comment.
     * @param {string} project - Project ID or project name
     */
    createLike'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Delete a like on a comment.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - The ID of the thread that contains the comment.
     * @param {number} commentId - The ID of the comment.
     * @param {string} project - Project ID or project name
     */
    deleteLike'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get likes for a comment.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - The ID of the thread that contains the comment.
     * @param {number} commentId - The ID of the comment.
     * @param {string} project - Project ID or project name
     */
    getLikes'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'VSSInterfaces'
              Identifier: 'IdentityRef'
    MethodDeclaration
      Identifier: '
    /**
     * Get the commits for the specified iteration of a pull request.
     *
     * @param {string} repositoryId - ID or name of the repository.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} iterationId - ID of the iteration from which to get the commits.
     * @param {string} project - Project ID or project name
     * @param {number} top - Maximum number of commits to return. The maximum number of commits that can be returned per batch is 500.
     * @param {number} skip - Number of commits to skip.
     */
    getPullRequestIterationCommits'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Get the commits for the specified pull request.
     *
     * @param {string} repositoryId - ID or name of the repository.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    getPullRequestCommits'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'VSSInterfaces'
            Identifier: 'PagedList'
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitCommitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve one conflict for a pull request by ID
     *
     * @param {string} repositoryId
     * @param {number} pullRequestId
     * @param {number} conflictId
     * @param {string} project - Project ID or project name
     */
    getPullRequestConflict'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all conflicts for a pull request
     *
     * @param {string} repositoryId - The repository of the Pull Request.
     * @param {number} pullRequestId - The pull request ID.
     * @param {string} project - Project ID or project name
     * @param {number} skip - Conflicts to skip.
     * @param {number} top - Conflicts to return after skip.
     * @param {boolean} includeObsolete - Includes obsolete conflicts.
     * @param {boolean} excludeResolved - Excludes conflicts already resolved.
     * @param {boolean} onlyResolved - Returns only the conflicts that are resolved.
     */
    getPullRequestConflicts'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeObsolete'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' excludeResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' onlyResolved'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Update merge conflict resolution
     *
     * @param {GitInterfaces.GitConflict} conflict
     * @param {string} repositoryId
     * @param {number} pullRequestId
     * @param {number} conflictId
     * @param {string} project - Project ID or project name
     */
    updatePullRequestConflict'
      Parameter
        Identifier: 'conflict'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Update multiple merge conflict resolutions
     *
     * @param {GitInterfaces.GitConflict[]} conflictUpdates
     * @param {string} repositoryId
     * @param {number} pullRequestId
     * @param {string} project - Project ID or project name
     */
    updatePullRequestConflicts'
      Parameter
        Identifier: 'conflictUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflictUpdateResult'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve the changes made in a pull request between two iterations.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} iterationId - ID of the pull request iteration. <br /> Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch. Allowed values are between 1 and the maximum iteration on this pull request.
     * @param {string} project - Project ID or project name
     * @param {number} top - Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.
     * @param {number} skip - Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.
     * @param {number} compareTo - ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches
     */
    getPullRequestIterationChanges'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' compareTo'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestIterationChanges'
    MethodDeclaration
      Identifier: '
    /**
     * Get the specified iteration for a pull request.
     *
     * @param {string} repositoryId - ID or name of the repository.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} iterationId - ID of the pull request iteration to return.
     * @param {string} project - Project ID or project name
     */
    getPullRequestIteration'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestIteration'
    MethodDeclaration
      Identifier: '
    /**
     * Get the list of iterations for the specified pull request.
     *
     * @param {string} repositoryId - ID or name of the repository.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     * @param {boolean} includeCommits - If true, include the commits associated with each iteration in the response.
     */
    getPullRequestIterations'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeCommits'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequestIteration'
    MethodDeclaration
      Identifier: '
    /**
     * Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.
     *
     * @param {GitInterfaces.GitPullRequestStatus} status - Pull request status to create.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} iterationId - ID of the pull request iteration.
     * @param {string} project - Project ID or project name
     */
    createPullRequestIterationStatus'
      Parameter
        Identifier: 'status'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestStatus'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Delete pull request iteration status.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} iterationId - ID of the pull request iteration.
     * @param {number} statusId - ID of the pull request status.
     * @param {string} project - Project ID or project name
     */
    deletePullRequestIterationStatus'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' statusId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} iterationId - ID of the pull request iteration.
     * @param {number} statusId - ID of the pull request status.
     * @param {string} project - Project ID or project name
     */
    getPullRequestIterationStatus'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' statusId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Get all the statuses associated with a pull request iteration.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} iterationId - ID of the pull request iteration.
     * @param {string} project - Project ID or project name
     */
    getPullRequestIterationStatuses'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequestStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Update pull request iteration statuses collection. The only supported operation type is `remove`.
     *
     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Operations to apply to the pull request statuses in JSON Patch format.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} iterationId - ID of the pull request iteration.
     * @param {string} project - Project ID or project name
     */
    updatePullRequestIterationStatuses'
      Parameter
        Identifier: 'customHeaders'
        AnyKeyword
      Parameter
        Identifier: ' patchDocument'
        TypeReference
          QualifiedName
            Identifier: ' VSSInterfaces'
            Identifier: 'JsonPatchDocument'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' iterationId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Create a tag (if that does not exists yet) and add that as a label (tag) for a specified pull request. The only required field is the name of the new label (tag).
     *
     * @param {TfsCoreInterfaces.WebApiCreateTagRequestData} label - Label to assign to the pull request.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     * @param {string} projectId - Project ID or project name.
     */
    createPullRequestLabel'
      Parameter
        Identifier: 'label'
        TypeReference
          QualifiedName
            Identifier: ' TfsCoreInterfaces'
            Identifier: 'WebApiCreateTagRequestData'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'TfsCoreInterfaces'
            Identifier: 'WebApiTagDefinition'
    MethodDeclaration
      Identifier: '
    /**
     * Removes a label (tag) from the set of those assigned to the pull request. The tag itself will not be deleted.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} labelIdOrName - The name or ID of the label requested.
     * @param {string} project - Project ID or project name
     * @param {string} projectId - Project ID or project name.
     */
    deletePullRequestLabels'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' labelIdOrName'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Retrieves a single label (tag) that has been assigned to a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} labelIdOrName - The name or ID of the label requested.
     * @param {string} project - Project ID or project name
     * @param {string} projectId - Project ID or project name.
     */
    getPullRequestLabel'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' labelIdOrName'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'TfsCoreInterfaces'
            Identifier: 'WebApiTagDefinition'
    MethodDeclaration
      Identifier: '
    /**
     * Get all the labels (tags) assigned to a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     * @param {string} projectId - Project ID or project name.
     */
    getPullRequestLabels'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'TfsCoreInterfaces'
              Identifier: 'WebApiTagDefinition'
    MethodDeclaration
      Identifier: '
    /**
     * Get external properties of the pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    getPullRequestProperties'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        AnyKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.
     *
     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Properties to add, replace or remove in JSON Patch format.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    updatePullRequestProperties'
      Parameter
        Identifier: 'customHeaders'
        AnyKeyword
      Parameter
        Identifier: ' patchDocument'
        TypeReference
          QualifiedName
            Identifier: ' VSSInterfaces'
            Identifier: 'JsonPatchDocument'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        AnyKeyword
    MethodDeclaration
      Identifier: '
    /**
     * This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -> pull requests.
     *
     * @param {GitInterfaces.GitPullRequestQuery} queries - The list of queries to perform.
     * @param {string} repositoryId - ID of the repository.
     * @param {string} project - Project ID or project name
     */
    getPullRequestQuery'
      Parameter
        Identifier: 'queries'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestQuery'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestQuery'
    MethodDeclaration
      Identifier: '
    /**
     * Add a reviewer to a pull request or cast a vote.
     *
     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} reviewerId - ID of the reviewer.
     * @param {string} project - Project ID or project name
     */
    createPullRequestReviewer'
      Parameter
        Identifier: 'reviewer'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'IdentityRefWithVote'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' reviewerId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'IdentityRefWithVote'
    MethodDeclaration
      Identifier: '
    /**
     * Add reviewers to a pull request.
     *
     * @param {VSSInterfaces.IdentityRef[]} reviewers - Reviewers to add to the pull request.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    createPullRequestReviewers'
      Parameter
        Identifier: 'reviewers'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' VSSInterfaces'
              Identifier: 'IdentityRef'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'IdentityRefWithVote'
    MethodDeclaration
      Identifier: '
    /**
     * Add an unmaterialized identity to the reviewers of a pull request.
     *
     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer to add to the pull request.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    createUnmaterializedPullRequestReviewer'
      Parameter
        Identifier: 'reviewer'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'IdentityRefWithVote'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'IdentityRefWithVote'
    MethodDeclaration
      Identifier: '
    /**
     * Remove a reviewer from a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} reviewerId - ID of the reviewer to remove.
     * @param {string} project - Project ID or project name
     */
    deletePullRequestReviewer'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' reviewerId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve information about a particular reviewer on a pull request
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} reviewerId - ID of the reviewer.
     * @param {string} project - Project ID or project name
     */
    getPullRequestReviewer'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' reviewerId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'IdentityRefWithVote'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve the reviewers for a pull request
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    getPullRequestReviewers'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'IdentityRefWithVote'
    MethodDeclaration
      Identifier: '
    /**
     * Edit a reviewer entry. These fields are patchable: isFlagged, hasDeclined
     *
     * @param {GitInterfaces.IdentityRefWithVote} reviewer - Reviewer data.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} reviewerId - ID of the reviewer.
     * @param {string} project - Project ID or project name
     */
    updatePullRequestReviewer'
      Parameter
        Identifier: 'reviewer'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'IdentityRefWithVote'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' reviewerId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'IdentityRefWithVote'
    MethodDeclaration
      Identifier: '
    /**
     * Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.
     *
     * @param {GitInterfaces.IdentityRefWithVote[]} patchVotes - IDs of the reviewers whose votes will be reset to zero
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request
     * @param {string} project - Project ID or project name
     */
    updatePullRequestReviewers'
      Parameter
        Identifier: 'patchVotes'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'IdentityRefWithVote'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a pull request.
     *
     * @param {number} pullRequestId - The ID of the pull request to retrieve.
     * @param {string} project - Project ID or project name
     */
    getPullRequestById'
      Parameter
        Identifier: 'pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all pull requests matching a specified criteria.
     *
     * @param {string} project - Project ID or project name
     * @param {GitInterfaces.GitPullRequestSearchCriteria} searchCriteria - Pull requests will be returned that match this search criteria.
     * @param {number} maxCommentLength - Not used.
     * @param {number} skip - The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.
     * @param {number} top - The number of pull requests to retrieve.
     */
    getPullRequestsByProject'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestSearchCriteria'
      Parameter
        Identifier: ' maxCommentLength'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Create a pull request.
     *
     * @param {GitInterfaces.GitPullRequest} gitPullRequestToCreate - The pull request to create.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {string} project - Project ID or project name
     * @param {boolean} supportsIterations - If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.
     */
    createPullRequest'
      Parameter
        Identifier: 'gitPullRequestToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequest'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' supportsIterations'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - The ID of the pull request to retrieve.
     * @param {string} project - Project ID or project name
     * @param {number} maxCommentLength - Not used.
     * @param {number} skip - Not used.
     * @param {number} top - Not used.
     * @param {boolean} includeCommits - If true, the pull request will be returned with the associated commits.
     * @param {boolean} includeWorkItemRefs - If true, the pull request will be returned with the associated work item references.
     */
    getPullRequest'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' maxCommentLength'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeCommits'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeWorkItemRefs'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all pull requests matching a specified criteria.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {GitInterfaces.GitPullRequestSearchCriteria} searchCriteria - Pull requests will be returned that match this search criteria.
     * @param {string} project - Project ID or project name
     * @param {number} maxCommentLength - Not used.
     * @param {number} skip - The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.
     * @param {number} top - The number of pull requests to retrieve.
     */
    getPullRequests'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' searchCriteria'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestSearchCriteria'
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' maxCommentLength'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Update a pull request
     *
     * @param {GitInterfaces.GitPullRequest} gitPullRequestToUpdate - The pull request content that should be updated.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request to update.
     * @param {string} project - Project ID or project name
     */
    updatePullRequest'
      Parameter
        Identifier: 'gitPullRequestToUpdate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequest'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequest'
    MethodDeclaration
      Identifier: '
    /**
     * Sends an e-mail notification about a specific pull request to a set of recipients
     *
     * @param {GitInterfaces.ShareNotificationContext} userMessage
     * @param {string} repositoryId - ID of the git repository.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    sharePullRequest'
      Parameter
        Identifier: 'userMessage'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'ShareNotificationContext'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Create a pull request status.
     *
     * @param {GitInterfaces.GitPullRequestStatus} status - Pull request status to create.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    createPullRequestStatus'
      Parameter
        Identifier: 'status'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestStatus'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Delete pull request status.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} statusId - ID of the pull request status.
     * @param {string} project - Project ID or project name
     */
    deletePullRequestStatus'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' statusId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} statusId - ID of the pull request status.
     * @param {string} project - Project ID or project name
     */
    getPullRequestStatus'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' statusId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Get all the statuses associated with a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    getPullRequestStatuses'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequestStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Update pull request statuses collection. The only supported operation type is `remove`.
     *
     * @param {VSSInterfaces.JsonPatchDocument} patchDocument - Operations to apply to the pull request statuses in JSON Patch format.
     * @param {string} repositoryId - The repository ID of the pull request’s target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    updatePullRequestStatuses'
      Parameter
        Identifier: 'customHeaders'
        AnyKeyword
      Parameter
        Identifier: ' patchDocument'
        TypeReference
          QualifiedName
            Identifier: ' VSSInterfaces'
            Identifier: 'JsonPatchDocument'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Create a comment on a specific thread in a pull request (up to 500 comments can be created per thread).
     *
     * @param {GitInterfaces.Comment} comment - The comment to create. Comments can be up to 150,000 characters.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - ID of the thread that the desired comment is in.
     * @param {string} project - Project ID or project name
     */
    createComment'
      Parameter
        Identifier: 'comment'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'Comment'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'Comment'
    MethodDeclaration
      Identifier: '
    /**
     * Delete a comment associated with a specific thread in a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - ID of the thread that the desired comment is in.
     * @param {number} commentId - ID of the comment.
     * @param {string} project - Project ID or project name
     */
    deleteComment'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a comment associated with a specific thread in a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - ID of the thread that the desired comment is in.
     * @param {number} commentId - ID of the comment.
     * @param {string} project - Project ID or project name
     */
    getComment'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'Comment'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all comments associated with a specific thread in a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - ID of the thread.
     * @param {string} project - Project ID or project name
     */
    getComments'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'Comment'
    MethodDeclaration
      Identifier: '
    /**
     * Update a comment associated with a specific thread in a pull request.
     *
     * @param {GitInterfaces.Comment} comment - The comment content that should be updated. Comments can be up to 150,000 characters.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - ID of the thread that the desired comment is in.
     * @param {number} commentId - ID of the comment to update.
     * @param {string} project - Project ID or project name
     */
    updateComment'
      Parameter
        Identifier: 'comment'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'Comment'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' commentId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'Comment'
    MethodDeclaration
      Identifier: '
    /**
     * Create a thread in a pull request.
     *
     * @param {GitInterfaces.GitPullRequestCommentThread} commentThread - The thread to create. Thread must contain at least one comment.
     * @param {string} repositoryId - Repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    createThread'
      Parameter
        Identifier: 'commentThread'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a thread in a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - ID of the thread.
     * @param {string} project - Project ID or project name
     * @param {number} iteration - If specified, thread position will be tracked using this iteration as the right side of the diff.
     * @param {number} baseIteration - If specified, thread position will be tracked using this iteration as the left side of the diff.
     */
    getPullRequestThread'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' iteration'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' baseIteration'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all threads in a pull request.
     *
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     * @param {number} iteration - If specified, thread positions will be tracked using this iteration as the right side of the diff.
     * @param {number} baseIteration - If specified, thread positions will be tracked using this iteration as the left side of the diff.
     */
    getThreads'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' iteration'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' baseIteration'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPullRequestCommentThread'
    MethodDeclaration
      Identifier: '
    /**
     * Update a thread in a pull request.
     *
     * @param {GitInterfaces.GitPullRequestCommentThread} commentThread - The thread content that should be updated.
     * @param {string} repositoryId - The repository ID of the pull request's target branch.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {number} threadId - ID of the thread to update.
     * @param {string} project - Project ID or project name
     */
    updateThread'
      Parameter
        Identifier: 'commentThread'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' threadId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPullRequestCommentThread'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a list of work items associated with a pull request.
     *
     * @param {string} repositoryId - ID or name of the repository.
     * @param {number} pullRequestId - ID of the pull request.
     * @param {string} project - Project ID or project name
     */
    getPullRequestWorkItemRefs'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pullRequestId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'VSSInterfaces'
              Identifier: 'ResourceRef'
    MethodDeclaration
      Identifier: '
    /**
     * Push changes to the repository.
     *
     * @param {GitInterfaces.GitPush} push
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     */
    createPush'
      Parameter
        Identifier: 'push'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPush'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPush'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieves a particular push.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {number} pushId - ID of the push.
     * @param {string} project - Project ID or project name
     * @param {number} includeCommits - The number of commits to include in the result.
     * @param {boolean} includeRefUpdates - If true, include the list of refs that were updated by the push.
     */
    getPush'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' pushId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeCommits'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' includeRefUpdates'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitPush'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieves pushes associated with the specified repository.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {number} skip - Number of pushes to skip.
     * @param {number} top - Number of pushes to return.
     * @param {GitInterfaces.GitPushSearchCriteria} searchCriteria - Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.
     */
    getPushes'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' searchCriteria'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitPushSearchCriteria'
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitPush'
    MethodDeclaration
      Identifier: '
    /**
     * Destroy (hard delete) a soft-deleted Git repository.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - The ID of the repository.
     */
    deleteRepositoryFromRecycleBin'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve soft-deleted git repositories from the recycle bin.
     *
     * @param {string} project - Project ID or project name
     */
    getRecycleBinRepositories'
      Parameter
        Identifier: 'project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitDeletedRepository'
    MethodDeclaration
      Identifier: '
    /**
     * Recover a soft-deleted Git repository. Recently deleted repositories go into a soft-delete state for a period of time before they are hard deleted and become unrecoverable.
     *
     * @param {GitInterfaces.GitRecycleBinRepositoryDetails} repositoryDetails
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - The ID of the repository.
     */
    restoreRepositoryFromRecycleBin'
      Parameter
        Identifier: 'repositoryDetails'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRecycleBinRepositoryDetails'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodDeclaration
      Identifier: '
    /**
     * Queries the provided repository for its refs and returns them.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {string} filter - [optional] A filter to apply to the refs (starts with).
     * @param {boolean} includeLinks - [optional] Specifies if referenceLinks should be included in the result. default is false.
     * @param {boolean} includeStatuses - [optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.
     * @param {boolean} includeMyBranches - [optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.
     * @param {boolean} latestStatusesOnly - [optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.
     * @param {boolean} peelTags - [optional] Annotated tags will populate the PeeledObjectId property. default is false.
     * @param {string} filterContains - [optional] A filter to apply to the refs (contains).
     */
    getRefs'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' filter'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeStatuses'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeMyBranches'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' latestStatusesOnly'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' peelTags'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' filterContains'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'VSSInterfaces'
            Identifier: 'PagedList'
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Lock or Unlock a branch.
     *
     * @param {GitInterfaces.GitRefUpdate} newRefInfo - The ref update action (lock/unlock) to perform
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} filter - The name of the branch to lock/unlock
     * @param {string} project - Project ID or project name
     * @param {string} projectId - ID or name of the team project. Optional if specifying an ID for repository.
     */
    updateRef'
      Parameter
        Identifier: 'newRefInfo'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRefUpdate'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' filter'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRef'
    MethodDeclaration
      Identifier: '
    /**
     * Creating, updating, or deleting refs(branches).
     *
     * @param {GitInterfaces.GitRefUpdate[]} refUpdates - List of ref updates to attempt to perform
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {string} projectId - ID or name of the team project. Optional if specifying an ID for repository.
     */
    updateRefs'
      Parameter
        Identifier: 'refUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'GitRefUpdate'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRefUpdateResult'
    MethodDeclaration
      Identifier: '
    /**
     * Creates a ref favorite
     *
     * @param {GitInterfaces.GitRefFavorite} favorite - The ref favorite to create.
     * @param {string} project - Project ID or project name
     */
    createFavorite'
      Parameter
        Identifier: 'favorite'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRefFavorite'
      Parameter
        Identifier: ' project'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRefFavorite'
    MethodDeclaration
      Identifier: '
    /**
     * Deletes the refs favorite specified
     *
     * @param {string} project - Project ID or project name
     * @param {number} favoriteId - The Id of the ref favorite to delete.
     */
    deleteRefFavorite'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' favoriteId'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the refs favorite for a favorite Id.
     *
     * @param {string} project - Project ID or project name
     * @param {number} favoriteId - The Id of the requested ref favorite.
     */
    getRefFavorite'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' favoriteId'
        NumberKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRefFavorite'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the refs favorites for a repo and an identity.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - The id of the repository.
     * @param {string} identityId - The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.
     */
    getRefFavorites'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' identityId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRefFavorite'
    MethodDeclaration
      Identifier: '
    /**
     * @param {string} project - Project ID or project name
     * @param {string} identityId
     */
    getRefFavoritesForProject'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' identityId'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRefFavorite'
    MethodDeclaration
      Identifier: '
    /**
     * Create a git repository in a team project.
     *
     * @param {GitInterfaces.GitRepositoryCreateOptions} gitRepositoryToCreate - Specify the repo name, team project and/or parent repository. Team project information can be omitted from gitRepositoryToCreate if the request is project-scoped (i.e., includes project Id).
     * @param {string} project - Project ID or project name
     * @param {string} sourceRef - [optional] Specify the source refs to use while creating a fork repo
     */
    createRepository'
      Parameter
        Identifier: 'gitRepositoryToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRepositoryCreateOptions'
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' sourceRef'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodDeclaration
      Identifier: '
    /**
     * Delete a git repository
     *
     * @param {string} repositoryId - The ID of the repository.
     * @param {string} project - Project ID or project name
     */
    deleteRepository'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve git repositories.
     *
     * @param {string} project - Project ID or project name
     * @param {boolean} includeLinks - [optional] True to include reference links. The default value is false.
     * @param {boolean} includeAllUrls - [optional] True to include all remote URLs. The default value is false.
     * @param {boolean} includeHidden - [optional] True to include hidden repositories. The default value is false.
     */
    getRepositories'
      Parameter
        Identifier: 'project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' includeLinks'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeAllUrls'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeHidden'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitRepository'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a git repository.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {string} project - Project ID or project name
     */
    getRepository'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a git repository.
     *
     * @param {string} repositoryId - The name or ID of the repository.
     * @param {boolean} includeParent - True to include parent repository. Only available in authenticated calls.
     * @param {string} project - Project ID or project name
     */
    getRepositoryWithParent'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' includeParent'
        BooleanKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodDeclaration
      Identifier: '
    /**
     * Updates the Git repository with either a new repo name or a new default branch.
     *
     * @param {GitInterfaces.GitRepository} newRepositoryInfo - Specify a new repo name or a new default branch of the repository
     * @param {string} repositoryId - The ID of the repository.
     * @param {string} project - Project ID or project name
     */
    updateRepository'
      Parameter
        Identifier: 'newRepositoryInfo'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitRepository'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRepository'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve one conflict for a revert by ID
     *
     * @param {string} repositoryId
     * @param {number} revertId
     * @param {number} conflictId
     * @param {string} project - Project ID or project name
     */
    getRevertConflict'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve all conflicts for a revert
     *
     * @param {string} repositoryId
     * @param {number} revertId
     * @param {string} project - Project ID or project name
     * @param {string} continuationToken
     * @param {number} top
     * @param {boolean} excludeResolved
     * @param {boolean} onlyResolved
     * @param {boolean} includeObsolete
     */
    getRevertConflicts'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' continuationToken'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' excludeResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' onlyResolved'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' includeObsolete'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'VSSInterfaces'
            Identifier: 'PagedList'
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Update merge conflict resolution
     *
     * @param {GitInterfaces.GitConflict} conflict
     * @param {string} repositoryId
     * @param {number} revertId
     * @param {number} conflictId
     * @param {string} project - Project ID or project name
     */
    updateRevertConflict'
      Parameter
        Identifier: 'conflict'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' conflictId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitConflict'
    MethodDeclaration
      Identifier: '
    /**
     * Update multiple merge conflict resolutions
     *
     * @param {GitInterfaces.GitConflict[]} conflictUpdates
     * @param {string} repositoryId
     * @param {number} revertId
     * @param {string} project - Project ID or project name
     */
    updateRevertConflicts'
      Parameter
        Identifier: 'conflictUpdates'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' GitInterfaces'
              Identifier: 'GitConflict'
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitConflictUpdateResult'
    MethodDeclaration
      Identifier: '
    /**
     * Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.
     *
     * @param {GitInterfaces.GitAsyncRefOperationParameters} revertToCreate
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - ID of the repository.
     */
    createRevert'
      Parameter
        Identifier: 'revertToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitAsyncRefOperationParameters'
      Parameter
        Identifier: ' project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRevert'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve information about a revert operation by revert Id.
     *
     * @param {string} project - Project ID or project name
     * @param {number} revertId - ID of the revert operation.
     * @param {string} repositoryId - ID of the repository.
     */
    getRevert'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' revertId'
        NumberKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRevert'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve information about a revert operation for a specific branch.
     *
     * @param {string} project - Project ID or project name
     * @param {string} repositoryId - ID of the repository.
     * @param {string} refName - The GitAsyncRefOperationParameters generatedRefName used for the revert operation.
     */
    getRevertForRefName'
      Parameter
        Identifier: 'project'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' refName'
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitRevert'
    MethodDeclaration
      Identifier: '
    /**
     * Create Git commit status.
     *
     * @param {GitInterfaces.GitStatus} gitCommitStatusToCreate - Git commit status object to create.
     * @param {string} commitId - ID of the Git commit.
     * @param {string} repositoryId - ID of the repository.
     * @param {string} project - Project ID or project name
     */
    createCommitStatus'
      Parameter
        Identifier: 'gitCommitStatusToCreate'
        TypeReference
          QualifiedName
            Identifier: ' GitInterfaces'
            Identifier: 'GitStatus'
      Parameter
        Identifier: ' commitId'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Get statuses associated with the Git commit.
     *
     * @param {string} commitId - ID of the Git commit.
     * @param {string} repositoryId - ID of the repository.
     * @param {string} project - Project ID or project name
     * @param {number} top - Optional. The number of statuses to retrieve. Default is 1000.
     * @param {number} skip - Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.
     * @param {boolean} latestOnly - The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.
     */
    getStatuses'
      Parameter
        Identifier: 'commitId'
        StringKeyword
      Parameter
        Identifier: ' repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' top'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' skip'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' latestOnly'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitStatus'
    MethodDeclaration
      Identifier: '
    /**
     * Retrieve a pull request suggestion for a particular repository or team project.
     *
     * @param {string} repositoryId - ID of the git repository.
     * @param {string} project - Project ID or project name
     * @param {boolean} preferCompareBranch - If true, prefer the compare branch over the default branch as target branch for pull requests.
     */
    getSuggestions'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' preferCompareBranch'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        ArrayType
          TypeReference
            QualifiedName
              Identifier: 'GitInterfaces'
              Identifier: 'GitSuggestion'
    MethodDeclaration
      Identifier: '
    /**
     * The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
     *
     * @param {string} repositoryId - Repository Id.
     * @param {string} sha1 - SHA1 hash of the tree object.
     * @param {string} project - Project ID or project name
     * @param {string} projectId - Project Id.
     * @param {boolean} recursive - Search recursively. Include trees underneath this tree. Default is false.
     * @param {string} fileName - Name to use if a .zip file is returned. Default is the object ID.
     */
    getTree'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursive'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'GitInterfaces'
            Identifier: 'GitTreeRef'
    MethodDeclaration
      Identifier: '
    /**
     * The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.
     *
     * @param {string} repositoryId - Repository Id.
     * @param {string} sha1 - SHA1 hash of the tree object.
     * @param {string} project - Project ID or project name
     * @param {string} projectId - Project Id.
     * @param {boolean} recursive - Search recursively. Include trees underneath this tree. Default is false.
     * @param {string} fileName - Name to use if a .zip file is returned. Default is the object ID.
     */
    getTreeZip'
      Parameter
        Identifier: 'repositoryId'
        StringKeyword
      Parameter
        Identifier: ' sha1'
        StringKeyword
      Parameter
        Identifier: ' project'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' projectId'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' recursive'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' fileName'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          QualifiedName
            Identifier: 'NodeJS'
            Identifier: 'ReadableStream'
