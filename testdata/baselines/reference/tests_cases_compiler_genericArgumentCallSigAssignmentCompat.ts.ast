SourceFile
  ModuleDeclaration
    Identifier: ' Underscore'
    ModuleBlock
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Iterator'
        TypeParameter
          Identifier: 'T'
        TypeParameter
          Identifier: ' U'
        CallSignature
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            AnyKeyword
          Parameter
            Identifier: ' list'
            AnyKeyword
          TypeReference
            Identifier: ' U'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Static'
        MethodSignature
          Identifier: '
        all'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'list'
            ArrayType
              TypeReference
                Identifier: ' T'
          Parameter
            Identifier: ' iterator'
            QuestionToken
            TypeReference
              Identifier: ' Iterator'
              TypeReference
                Identifier: 'T'
              BooleanKeyword
          Parameter
            Identifier: ' context'
            QuestionToken
            AnyKeyword
          BooleanKeyword
        MethodSignature
          Identifier: '
        identity'
          TypeParameter
            Identifier: 'T'
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          TypeReference
            Identifier: ' T'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' _'
        TypeReference
          QualifiedName
            Identifier: ' Underscore'
            Identifier: 'Static'
  ExpressionStatement
    CallExpression
      PropertyAccessExpression
        Identifier: '
 
// No error, Call signatures of types '<T>(value: T) => T' and 'Underscore.Iterator<{}, boolean>' are compatible when instantiated with any.
// Ideally, we would not have a generic signature here, because it should be instantiated with {} during inferential typing
_'
        Identifier: 'all'
      ArrayLiteralExpression
        TrueKeyword
        NumericLiteral
        NullKeyword
        StringLiteral
      PropertyAccessExpression
        Identifier: ' _'
        Identifier: 'identity'
  ExpressionStatement
    CallExpression
      PropertyAccessExpression
        Identifier: '
 
// Ok, because fixing makes us infer boolean for T
_'
        Identifier: 'all'
      ArrayLiteralExpression
        TrueKeyword
      PropertyAccessExpression
        Identifier: ' _'
        Identifier: 'identity'
