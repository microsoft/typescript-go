SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: '
    BaseNodeFactory'
        ImportSpecifier
          Identifier: '
    CreateSourceFileOptions'
        ImportSpecifier
          Identifier: '
    EmitHelperFactory'
        ImportSpecifier
          Identifier: '
    GetCanonicalFileName'
        ImportSpecifier
          Identifier: '
    MapLike'
        ImportSpecifier
          Identifier: '
    ModeAwareCache'
        ImportSpecifier
          Identifier: '
    ModeAwareCacheKey'
        ImportSpecifier
          Identifier: '
    ModuleResolutionCache'
        ImportSpecifier
          Identifier: '
    MultiMap'
        ImportSpecifier
          Identifier: '
    NodeFactoryFlags'
        ImportSpecifier
          Identifier: '
    OptionsNameMap'
        ImportSpecifier
          Identifier: '
    PackageJsonInfo'
        ImportSpecifier
          Identifier: '
    PackageJsonInfoCache'
        ImportSpecifier
          Identifier: '
    Pattern'
        ImportSpecifier
          Identifier: '
    SymlinkCache'
        ImportSpecifier
          Identifier: '
    ThisContainer'
    StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Path'
    IntersectionType
      StringKeyword
      TypeLiteral
        PropertySignature
          Identifier: ' __pathBrand'
          AnyKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MatchingKeys'
    TypeParameter
      Identifier: 'TRecord'
    TypeParameter
      Identifier: ' TMatch'
    TypeParameter
      Identifier: ' K'
      TypeOperator
        TypeReference
          Identifier: ' TRecord'
      TypeOperator
        TypeReference
          Identifier: ' TRecord'
    ConditionalType
      TypeReference
        Identifier: ' K'
      ParenthesizedType
        ConditionalType
          IndexedAccessType
            TypeReference
              Identifier: 'TRecord'
            TypeReference
              Identifier: 'K'
          TypeReference
            Identifier: ' TMatch'
          TypeReference
            Identifier: ' K'
          NeverKeyword
      TypeReference
        Identifier: ' K'
      NeverKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TextRange'
    PropertySignature
      Identifier: '
    pos'
      NumberKeyword
    PropertySignature
      Identifier: '
    end'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReadonlyTextRange'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' pos'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' end'
      NumberKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' SyntaxKind'
    EnumMember
      Identifier: '
    Unknown'
    EnumMember
      Identifier: '
    EndOfFileToken'
    EnumMember
      Identifier: '
    SingleLineCommentTrivia'
    EnumMember
      Identifier: '
    MultiLineCommentTrivia'
    EnumMember
      Identifier: '
    NewLineTrivia'
    EnumMember
      Identifier: '
    WhitespaceTrivia'
    EnumMember
      Identifier: '
    // We detect and preserve #! on the first line
    ShebangTrivia'
    EnumMember
      Identifier: '
    // We detect and provide better error recovery when we encounter a git merge marker.  This
    // allows us to edit files with git-conflict markers in them in a much more pleasant manner.
    ConflictMarkerTrivia'
    EnumMember
      Identifier: '
    // If a file is actually binary, with any luck, we'll get U+FFFD REPLACEMENT CHARACTER
    // in position zero and can just skip what is surely a doomed parse.
    NonTextFileMarkerTrivia'
    EnumMember
      Identifier: '
    // Literals
    NumericLiteral'
    EnumMember
      Identifier: '
    BigIntLiteral'
    EnumMember
      Identifier: '
    StringLiteral'
    EnumMember
      Identifier: '
    JsxText'
    EnumMember
      Identifier: '
    JsxTextAllWhiteSpaces'
    EnumMember
      Identifier: '
    RegularExpressionLiteral'
    EnumMember
      Identifier: '
    NoSubstitutionTemplateLiteral'
    EnumMember
      Identifier: '
    // Pseudo-literals
    TemplateHead'
    EnumMember
      Identifier: '
    TemplateMiddle'
    EnumMember
      Identifier: '
    TemplateTail'
    EnumMember
      Identifier: '
    // Punctuation
    OpenBraceToken'
    EnumMember
      Identifier: '
    CloseBraceToken'
    EnumMember
      Identifier: '
    OpenParenToken'
    EnumMember
      Identifier: '
    CloseParenToken'
    EnumMember
      Identifier: '
    OpenBracketToken'
    EnumMember
      Identifier: '
    CloseBracketToken'
    EnumMember
      Identifier: '
    DotToken'
    EnumMember
      Identifier: '
    DotDotDotToken'
    EnumMember
      Identifier: '
    SemicolonToken'
    EnumMember
      Identifier: '
    CommaToken'
    EnumMember
      Identifier: '
    QuestionDotToken'
    EnumMember
      Identifier: '
    LessThanToken'
    EnumMember
      Identifier: '
    LessThanSlashToken'
    EnumMember
      Identifier: '
    GreaterThanToken'
    EnumMember
      Identifier: '
    LessThanEqualsToken'
    EnumMember
      Identifier: '
    GreaterThanEqualsToken'
    EnumMember
      Identifier: '
    EqualsEqualsToken'
    EnumMember
      Identifier: '
    ExclamationEqualsToken'
    EnumMember
      Identifier: '
    EqualsEqualsEqualsToken'
    EnumMember
      Identifier: '
    ExclamationEqualsEqualsToken'
    EnumMember
      Identifier: '
    EqualsGreaterThanToken'
    EnumMember
      Identifier: '
    PlusToken'
    EnumMember
      Identifier: '
    MinusToken'
    EnumMember
      Identifier: '
    AsteriskToken'
    EnumMember
      Identifier: '
    AsteriskAsteriskToken'
    EnumMember
      Identifier: '
    SlashToken'
    EnumMember
      Identifier: '
    PercentToken'
    EnumMember
      Identifier: '
    PlusPlusToken'
    EnumMember
      Identifier: '
    MinusMinusToken'
    EnumMember
      Identifier: '
    LessThanLessThanToken'
    EnumMember
      Identifier: '
    GreaterThanGreaterThanToken'
    EnumMember
      Identifier: '
    GreaterThanGreaterThanGreaterThanToken'
    EnumMember
      Identifier: '
    AmpersandToken'
    EnumMember
      Identifier: '
    BarToken'
    EnumMember
      Identifier: '
    CaretToken'
    EnumMember
      Identifier: '
    ExclamationToken'
    EnumMember
      Identifier: '
    TildeToken'
    EnumMember
      Identifier: '
    AmpersandAmpersandToken'
    EnumMember
      Identifier: '
    BarBarToken'
    EnumMember
      Identifier: '
    QuestionToken'
    EnumMember
      Identifier: '
    ColonToken'
    EnumMember
      Identifier: '
    AtToken'
    EnumMember
      Identifier: '
    QuestionQuestionToken'
    EnumMember
      Identifier: '
    /** Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */
    BacktickToken'
    EnumMember
      Identifier: '
    /** Only the JSDoc scanner produces HashToken. The normal scanner produces PrivateIdentifier. */
    HashToken'
    EnumMember
      Identifier: '
    // Assignments
    EqualsToken'
    EnumMember
      Identifier: '
    PlusEqualsToken'
    EnumMember
      Identifier: '
    MinusEqualsToken'
    EnumMember
      Identifier: '
    AsteriskEqualsToken'
    EnumMember
      Identifier: '
    AsteriskAsteriskEqualsToken'
    EnumMember
      Identifier: '
    SlashEqualsToken'
    EnumMember
      Identifier: '
    PercentEqualsToken'
    EnumMember
      Identifier: '
    LessThanLessThanEqualsToken'
    EnumMember
      Identifier: '
    GreaterThanGreaterThanEqualsToken'
    EnumMember
      Identifier: '
    GreaterThanGreaterThanGreaterThanEqualsToken'
    EnumMember
      Identifier: '
    AmpersandEqualsToken'
    EnumMember
      Identifier: '
    BarEqualsToken'
    EnumMember
      Identifier: '
    BarBarEqualsToken'
    EnumMember
      Identifier: '
    AmpersandAmpersandEqualsToken'
    EnumMember
      Identifier: '
    QuestionQuestionEqualsToken'
    EnumMember
      Identifier: '
    CaretEqualsToken'
    EnumMember
      Identifier: '
    // Identifiers and PrivateIdentifiers
    Identifier'
    EnumMember
      Identifier: '
    PrivateIdentifier'
    EnumMember
      Identifier: '
    /**
     * Only the special JSDoc comment text scanner produces JSDocCommentTextTokes. One of these tokens spans all text after a tag comment's start and before the next @
     * @internal
     */
    JSDocCommentTextToken'
    EnumMember
      Identifier: '
    // Reserved words
    BreakKeyword'
    EnumMember
      Identifier: '
    CaseKeyword'
    EnumMember
      Identifier: '
    CatchKeyword'
    EnumMember
      Identifier: '
    ClassKeyword'
    EnumMember
      Identifier: '
    ConstKeyword'
    EnumMember
      Identifier: '
    ContinueKeyword'
    EnumMember
      Identifier: '
    DebuggerKeyword'
    EnumMember
      Identifier: '
    DefaultKeyword'
    EnumMember
      Identifier: '
    DeleteKeyword'
    EnumMember
      Identifier: '
    DoKeyword'
    EnumMember
      Identifier: '
    ElseKeyword'
    EnumMember
      Identifier: '
    EnumKeyword'
    EnumMember
      Identifier: '
    ExportKeyword'
    EnumMember
      Identifier: '
    ExtendsKeyword'
    EnumMember
      Identifier: '
    FalseKeyword'
    EnumMember
      Identifier: '
    FinallyKeyword'
    EnumMember
      Identifier: '
    ForKeyword'
    EnumMember
      Identifier: '
    FunctionKeyword'
    EnumMember
      Identifier: '
    IfKeyword'
    EnumMember
      Identifier: '
    ImportKeyword'
    EnumMember
      Identifier: '
    InKeyword'
    EnumMember
      Identifier: '
    InstanceOfKeyword'
    EnumMember
      Identifier: '
    NewKeyword'
    EnumMember
      Identifier: '
    NullKeyword'
    EnumMember
      Identifier: '
    ReturnKeyword'
    EnumMember
      Identifier: '
    SuperKeyword'
    EnumMember
      Identifier: '
    SwitchKeyword'
    EnumMember
      Identifier: '
    ThisKeyword'
    EnumMember
      Identifier: '
    ThrowKeyword'
    EnumMember
      Identifier: '
    TrueKeyword'
    EnumMember
      Identifier: '
    TryKeyword'
    EnumMember
      Identifier: '
    TypeOfKeyword'
    EnumMember
      Identifier: '
    VarKeyword'
    EnumMember
      Identifier: '
    VoidKeyword'
    EnumMember
      Identifier: '
    WhileKeyword'
    EnumMember
      Identifier: '
    WithKeyword'
    EnumMember
      Identifier: '
    // Strict mode reserved words
    ImplementsKeyword'
    EnumMember
      Identifier: '
    InterfaceKeyword'
    EnumMember
      Identifier: '
    LetKeyword'
    EnumMember
      Identifier: '
    PackageKeyword'
    EnumMember
      Identifier: '
    PrivateKeyword'
    EnumMember
      Identifier: '
    ProtectedKeyword'
    EnumMember
      Identifier: '
    PublicKeyword'
    EnumMember
      Identifier: '
    StaticKeyword'
    EnumMember
      Identifier: '
    YieldKeyword'
    EnumMember
      Identifier: '
    // Contextual keywords
    AbstractKeyword'
    EnumMember
      Identifier: '
    AccessorKeyword'
    EnumMember
      Identifier: '
    AsKeyword'
    EnumMember
      Identifier: '
    AssertsKeyword'
    EnumMember
      Identifier: '
    AssertKeyword'
    EnumMember
      Identifier: '
    AnyKeyword'
    EnumMember
      Identifier: '
    AsyncKeyword'
    EnumMember
      Identifier: '
    AwaitKeyword'
    EnumMember
      Identifier: '
    BooleanKeyword'
    EnumMember
      Identifier: '
    ConstructorKeyword'
    EnumMember
      Identifier: '
    DeclareKeyword'
    EnumMember
      Identifier: '
    GetKeyword'
    EnumMember
      Identifier: '
    InferKeyword'
    EnumMember
      Identifier: '
    IntrinsicKeyword'
    EnumMember
      Identifier: '
    IsKeyword'
    EnumMember
      Identifier: '
    KeyOfKeyword'
    EnumMember
      Identifier: '
    ModuleKeyword'
    EnumMember
      Identifier: '
    NamespaceKeyword'
    EnumMember
      Identifier: '
    NeverKeyword'
    EnumMember
      Identifier: '
    OutKeyword'
    EnumMember
      Identifier: '
    ReadonlyKeyword'
    EnumMember
      Identifier: '
    RequireKeyword'
    EnumMember
      Identifier: '
    NumberKeyword'
    EnumMember
      Identifier: '
    ObjectKeyword'
    EnumMember
      Identifier: '
    SatisfiesKeyword'
    EnumMember
      Identifier: '
    SetKeyword'
    EnumMember
      Identifier: '
    StringKeyword'
    EnumMember
      Identifier: '
    SymbolKeyword'
    EnumMember
      Identifier: '
    TypeKeyword'
    EnumMember
      Identifier: '
    UndefinedKeyword'
    EnumMember
      Identifier: '
    UniqueKeyword'
    EnumMember
      Identifier: '
    UnknownKeyword'
    EnumMember
      Identifier: '
    UsingKeyword'
    EnumMember
      Identifier: '
    FromKeyword'
    EnumMember
      Identifier: '
    GlobalKeyword'
    EnumMember
      Identifier: '
    BigIntKeyword'
    EnumMember
      Identifier: '
    OverrideKeyword'
    EnumMember
      Identifier: '
    OfKeyword'
    EnumMember
      Identifier: ' // LastKeyword and LastToken and LastContextualKeyword

    // Parse tree nodes

    // Names
    QualifiedName'
    EnumMember
      Identifier: '
    ComputedPropertyName'
    EnumMember
      Identifier: '
    // Signature elements
    TypeParameter'
    EnumMember
      Identifier: '
    Parameter'
    EnumMember
      Identifier: '
    Decorator'
    EnumMember
      Identifier: '
    // TypeMember
    PropertySignature'
    EnumMember
      Identifier: '
    PropertyDeclaration'
    EnumMember
      Identifier: '
    MethodSignature'
    EnumMember
      Identifier: '
    MethodDeclaration'
    EnumMember
      Identifier: '
    ClassStaticBlockDeclaration'
    EnumMember
      Identifier: '
    Constructor'
    EnumMember
      Identifier: '
    GetAccessor'
    EnumMember
      Identifier: '
    SetAccessor'
    EnumMember
      Identifier: '
    CallSignature'
    EnumMember
      Identifier: '
    ConstructSignature'
    EnumMember
      Identifier: '
    IndexSignature'
    EnumMember
      Identifier: '
    // Type
    TypePredicate'
    EnumMember
      Identifier: '
    TypeReference'
    EnumMember
      Identifier: '
    FunctionType'
    EnumMember
      Identifier: '
    ConstructorType'
    EnumMember
      Identifier: '
    TypeQuery'
    EnumMember
      Identifier: '
    TypeLiteral'
    EnumMember
      Identifier: '
    ArrayType'
    EnumMember
      Identifier: '
    TupleType'
    EnumMember
      Identifier: '
    OptionalType'
    EnumMember
      Identifier: '
    RestType'
    EnumMember
      Identifier: '
    UnionType'
    EnumMember
      Identifier: '
    IntersectionType'
    EnumMember
      Identifier: '
    ConditionalType'
    EnumMember
      Identifier: '
    InferType'
    EnumMember
      Identifier: '
    ParenthesizedType'
    EnumMember
      Identifier: '
    ThisType'
    EnumMember
      Identifier: '
    TypeOperator'
    EnumMember
      Identifier: '
    IndexedAccessType'
    EnumMember
      Identifier: '
    MappedType'
    EnumMember
      Identifier: '
    LiteralType'
    EnumMember
      Identifier: '
    NamedTupleMember'
    EnumMember
      Identifier: '
    TemplateLiteralType'
    EnumMember
      Identifier: '
    TemplateLiteralTypeSpan'
    EnumMember
      Identifier: '
    ImportType'
    EnumMember
      Identifier: '
    // Binding patterns
    ObjectBindingPattern'
    EnumMember
      Identifier: '
    ArrayBindingPattern'
    EnumMember
      Identifier: '
    BindingElement'
    EnumMember
      Identifier: '
    // Expression
    ArrayLiteralExpression'
    EnumMember
      Identifier: '
    ObjectLiteralExpression'
    EnumMember
      Identifier: '
    PropertyAccessExpression'
    EnumMember
      Identifier: '
    ElementAccessExpression'
    EnumMember
      Identifier: '
    CallExpression'
    EnumMember
      Identifier: '
    NewExpression'
    EnumMember
      Identifier: '
    TaggedTemplateExpression'
    EnumMember
      Identifier: '
    TypeAssertionExpression'
    EnumMember
      Identifier: '
    ParenthesizedExpression'
    EnumMember
      Identifier: '
    FunctionExpression'
    EnumMember
      Identifier: '
    ArrowFunction'
    EnumMember
      Identifier: '
    DeleteExpression'
    EnumMember
      Identifier: '
    TypeOfExpression'
    EnumMember
      Identifier: '
    VoidExpression'
    EnumMember
      Identifier: '
    AwaitExpression'
    EnumMember
      Identifier: '
    PrefixUnaryExpression'
    EnumMember
      Identifier: '
    PostfixUnaryExpression'
    EnumMember
      Identifier: '
    BinaryExpression'
    EnumMember
      Identifier: '
    ConditionalExpression'
    EnumMember
      Identifier: '
    TemplateExpression'
    EnumMember
      Identifier: '
    YieldExpression'
    EnumMember
      Identifier: '
    SpreadElement'
    EnumMember
      Identifier: '
    ClassExpression'
    EnumMember
      Identifier: '
    OmittedExpression'
    EnumMember
      Identifier: '
    ExpressionWithTypeArguments'
    EnumMember
      Identifier: '
    AsExpression'
    EnumMember
      Identifier: '
    NonNullExpression'
    EnumMember
      Identifier: '
    MetaProperty'
    EnumMember
      Identifier: '
    SyntheticExpression'
    EnumMember
      Identifier: '
    SatisfiesExpression'
    EnumMember
      Identifier: '

    // Misc
    TemplateSpan'
    EnumMember
      Identifier: '
    SemicolonClassElement'
    EnumMember
      Identifier: '
    // Element
    Block'
    EnumMember
      Identifier: '
    EmptyStatement'
    EnumMember
      Identifier: '
    VariableStatement'
    EnumMember
      Identifier: '
    ExpressionStatement'
    EnumMember
      Identifier: '
    IfStatement'
    EnumMember
      Identifier: '
    DoStatement'
    EnumMember
      Identifier: '
    WhileStatement'
    EnumMember
      Identifier: '
    ForStatement'
    EnumMember
      Identifier: '
    ForInStatement'
    EnumMember
      Identifier: '
    ForOfStatement'
    EnumMember
      Identifier: '
    ContinueStatement'
    EnumMember
      Identifier: '
    BreakStatement'
    EnumMember
      Identifier: '
    ReturnStatement'
    EnumMember
      Identifier: '
    WithStatement'
    EnumMember
      Identifier: '
    SwitchStatement'
    EnumMember
      Identifier: '
    LabeledStatement'
    EnumMember
      Identifier: '
    ThrowStatement'
    EnumMember
      Identifier: '
    TryStatement'
    EnumMember
      Identifier: '
    DebuggerStatement'
    EnumMember
      Identifier: '
    VariableDeclaration'
    EnumMember
      Identifier: '
    VariableDeclarationList'
    EnumMember
      Identifier: '
    FunctionDeclaration'
    EnumMember
      Identifier: '
    ClassDeclaration'
    EnumMember
      Identifier: '
    InterfaceDeclaration'
    EnumMember
      Identifier: '
    TypeAliasDeclaration'
    EnumMember
      Identifier: '
    EnumDeclaration'
    EnumMember
      Identifier: '
    ModuleDeclaration'
    EnumMember
      Identifier: '
    ModuleBlock'
    EnumMember
      Identifier: '
    CaseBlock'
    EnumMember
      Identifier: '
    NamespaceExportDeclaration'
    EnumMember
      Identifier: '
    ImportEqualsDeclaration'
    EnumMember
      Identifier: '
    ImportDeclaration'
    EnumMember
      Identifier: '
    ImportClause'
    EnumMember
      Identifier: '
    NamespaceImport'
    EnumMember
      Identifier: '
    NamedImports'
    EnumMember
      Identifier: '
    ImportSpecifier'
    EnumMember
      Identifier: '
    ExportAssignment'
    EnumMember
      Identifier: '
    ExportDeclaration'
    EnumMember
      Identifier: '
    NamedExports'
    EnumMember
      Identifier: '
    NamespaceExport'
    EnumMember
      Identifier: '
    ExportSpecifier'
    EnumMember
      Identifier: '
    MissingDeclaration'
    EnumMember
      Identifier: '

    // Module references
    ExternalModuleReference'
    EnumMember
      Identifier: '

    // JSX
    JsxElement'
    EnumMember
      Identifier: '
    JsxSelfClosingElement'
    EnumMember
      Identifier: '
    JsxOpeningElement'
    EnumMember
      Identifier: '
    JsxClosingElement'
    EnumMember
      Identifier: '
    JsxFragment'
    EnumMember
      Identifier: '
    JsxOpeningFragment'
    EnumMember
      Identifier: '
    JsxClosingFragment'
    EnumMember
      Identifier: '
    JsxAttribute'
    EnumMember
      Identifier: '
    JsxAttributes'
    EnumMember
      Identifier: '
    JsxSpreadAttribute'
    EnumMember
      Identifier: '
    JsxExpression'
    EnumMember
      Identifier: '
    JsxNamespacedName'
    EnumMember
      Identifier: '

    // Clauses
    CaseClause'
    EnumMember
      Identifier: '
    DefaultClause'
    EnumMember
      Identifier: '
    HeritageClause'
    EnumMember
      Identifier: '
    CatchClause'
    EnumMember
      Identifier: '

    ImportAttributes'
    EnumMember
      Identifier: '
    ImportAttribute'
    EnumMember
      Identifier: '
    /** @deprecated */ AssertClause'
      Identifier: ' ImportAttributes'
    EnumMember
      Identifier: '
    /** @deprecated */ AssertEntry'
      Identifier: ' ImportAttribute'
    EnumMember
      Identifier: '
    /** @deprecated */ ImportTypeAssertionContainer'
    EnumMember
      Identifier: '

    // Property assignments
    PropertyAssignment'
    EnumMember
      Identifier: '
    ShorthandPropertyAssignment'
    EnumMember
      Identifier: '
    SpreadAssignment'
    EnumMember
      Identifier: '

    // Enum
    EnumMember'
    EnumMember
      Identifier: '

    // Top-level nodes
    SourceFile'
    EnumMember
      Identifier: '
    Bundle'
    EnumMember
      Identifier: '

    // JSDoc nodes
    JSDocTypeExpression'
    EnumMember
      Identifier: '
    JSDocNameReference'
    EnumMember
      Identifier: '
    JSDocMemberName'
    EnumMember
      Identifier: ' // C#p
    JSDocAllType'
    EnumMember
      Identifier: ' // The * type
    JSDocUnknownType'
    EnumMember
      Identifier: ' // The ? type
    JSDocNullableType'
    EnumMember
      Identifier: '
    JSDocNonNullableType'
    EnumMember
      Identifier: '
    JSDocOptionalType'
    EnumMember
      Identifier: '
    JSDocFunctionType'
    EnumMember
      Identifier: '
    JSDocVariadicType'
    EnumMember
      Identifier: '
    JSDocNamepathType'
    EnumMember
      Identifier: ' // https://jsdoc.app/about-namepaths.html
    JSDoc'
    EnumMember
      Identifier: '
    /** @deprecated Use SyntaxKind.JSDoc */
    JSDocComment'
      Identifier: ' JSDoc'
    EnumMember
      Identifier: '
    JSDocText'
    EnumMember
      Identifier: '
    JSDocTypeLiteral'
    EnumMember
      Identifier: '
    JSDocSignature'
    EnumMember
      Identifier: '
    JSDocLink'
    EnumMember
      Identifier: '
    JSDocLinkCode'
    EnumMember
      Identifier: '
    JSDocLinkPlain'
    EnumMember
      Identifier: '
    JSDocTag'
    EnumMember
      Identifier: '
    JSDocAugmentsTag'
    EnumMember
      Identifier: '
    JSDocImplementsTag'
    EnumMember
      Identifier: '
    JSDocAuthorTag'
    EnumMember
      Identifier: '
    JSDocDeprecatedTag'
    EnumMember
      Identifier: '
    JSDocClassTag'
    EnumMember
      Identifier: '
    JSDocPublicTag'
    EnumMember
      Identifier: '
    JSDocPrivateTag'
    EnumMember
      Identifier: '
    JSDocProtectedTag'
    EnumMember
      Identifier: '
    JSDocReadonlyTag'
    EnumMember
      Identifier: '
    JSDocOverrideTag'
    EnumMember
      Identifier: '
    JSDocCallbackTag'
    EnumMember
      Identifier: '
    JSDocOverloadTag'
    EnumMember
      Identifier: '
    JSDocEnumTag'
    EnumMember
      Identifier: '
    JSDocParameterTag'
    EnumMember
      Identifier: '
    JSDocReturnTag'
    EnumMember
      Identifier: '
    JSDocThisTag'
    EnumMember
      Identifier: '
    JSDocTypeTag'
    EnumMember
      Identifier: '
    JSDocTemplateTag'
    EnumMember
      Identifier: '
    JSDocTypedefTag'
    EnumMember
      Identifier: '
    JSDocSeeTag'
    EnumMember
      Identifier: '
    JSDocPropertyTag'
    EnumMember
      Identifier: '
    JSDocThrowsTag'
    EnumMember
      Identifier: '
    JSDocSatisfiesTag'
    EnumMember
      Identifier: '
    JSDocImportTag'
    EnumMember
      Identifier: '

    // Synthesized list
    SyntaxList'
    EnumMember
      Identifier: '

    // Transformation nodes
    NotEmittedStatement'
    EnumMember
      Identifier: '
    NotEmittedTypeElement'
    EnumMember
      Identifier: '
    PartiallyEmittedExpression'
    EnumMember
      Identifier: '
    CommaListExpression'
    EnumMember
      Identifier: '
    SyntheticReferenceExpression'
    EnumMember
      Identifier: '

    // Enum value count
    Count'
    EnumMember
      Identifier: '

    // Markers
    FirstAssignment'
      Identifier: ' EqualsToken'
    EnumMember
      Identifier: '
    LastAssignment'
      Identifier: ' CaretEqualsToken'
    EnumMember
      Identifier: '
    FirstCompoundAssignment'
      Identifier: ' PlusEqualsToken'
    EnumMember
      Identifier: '
    LastCompoundAssignment'
      Identifier: ' CaretEqualsToken'
    EnumMember
      Identifier: '
    FirstReservedWord'
      Identifier: ' BreakKeyword'
    EnumMember
      Identifier: '
    LastReservedWord'
      Identifier: ' WithKeyword'
    EnumMember
      Identifier: '
    FirstKeyword'
      Identifier: ' BreakKeyword'
    EnumMember
      Identifier: '
    LastKeyword'
      Identifier: ' OfKeyword'
    EnumMember
      Identifier: '
    FirstFutureReservedWord'
      Identifier: ' ImplementsKeyword'
    EnumMember
      Identifier: '
    LastFutureReservedWord'
      Identifier: ' YieldKeyword'
    EnumMember
      Identifier: '
    FirstTypeNode'
      Identifier: ' TypePredicate'
    EnumMember
      Identifier: '
    LastTypeNode'
      Identifier: ' ImportType'
    EnumMember
      Identifier: '
    FirstPunctuation'
      Identifier: ' OpenBraceToken'
    EnumMember
      Identifier: '
    LastPunctuation'
      Identifier: ' CaretEqualsToken'
    EnumMember
      Identifier: '
    FirstToken'
      Identifier: ' Unknown'
    EnumMember
      Identifier: '
    LastToken'
      Identifier: ' LastKeyword'
    EnumMember
      Identifier: '
    FirstTriviaToken'
      Identifier: ' SingleLineCommentTrivia'
    EnumMember
      Identifier: '
    LastTriviaToken'
      Identifier: ' ConflictMarkerTrivia'
    EnumMember
      Identifier: '
    FirstLiteralToken'
      Identifier: ' NumericLiteral'
    EnumMember
      Identifier: '
    LastLiteralToken'
      Identifier: ' NoSubstitutionTemplateLiteral'
    EnumMember
      Identifier: '
    FirstTemplateToken'
      Identifier: ' NoSubstitutionTemplateLiteral'
    EnumMember
      Identifier: '
    LastTemplateToken'
      Identifier: ' TemplateTail'
    EnumMember
      Identifier: '
    FirstBinaryOperator'
      Identifier: ' LessThanToken'
    EnumMember
      Identifier: '
    LastBinaryOperator'
      Identifier: ' CaretEqualsToken'
    EnumMember
      Identifier: '
    FirstStatement'
      Identifier: ' VariableStatement'
    EnumMember
      Identifier: '
    LastStatement'
      Identifier: ' DebuggerStatement'
    EnumMember
      Identifier: '
    FirstNode'
      Identifier: ' QualifiedName'
    EnumMember
      Identifier: '
    FirstJSDocNode'
      Identifier: ' JSDocTypeExpression'
    EnumMember
      Identifier: '
    LastJSDocNode'
      Identifier: ' JSDocImportTag'
    EnumMember
      Identifier: '
    FirstJSDocTagNode'
      Identifier: ' JSDocTag'
    EnumMember
      Identifier: '
    LastJSDocTagNode'
      Identifier: ' JSDocImportTag'
    EnumMember
      Identifier: '
    /** @internal */ FirstContextualKeyword'
      Identifier: ' AbstractKeyword'
    EnumMember
      Identifier: '
    /** @internal */ LastContextualKeyword'
      Identifier: ' OfKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TriviaSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SingleLineCommentTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MultiLineCommentTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NewLineTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'WhitespaceTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ShebangTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConflictMarkerTrivia'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LiteralSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NumericLiteral'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BigIntLiteral'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'StringLiteral'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxText'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxTextAllWhiteSpaces'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'RegularExpressionLiteral'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NoSubstitutionTemplateLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PseudoLiteralSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateHead'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateMiddle'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateTail'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PunctuationSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OpenBraceToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CloseBraceToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OpenParenToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CloseParenToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OpenBracketToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CloseBracketToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DotToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DotDotDotToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SemicolonToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CommaToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'QuestionDotToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanSlashToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EqualsEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExclamationEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EqualsEqualsEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExclamationEqualsEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EqualsGreaterThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PlusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsteriskToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsteriskAsteriskToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SlashToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PercentToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PlusPlusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusMinusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanLessThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanGreaterThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanGreaterThanGreaterThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CaretToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExclamationToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TildeToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandAmpersandToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandAmpersandEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarBarToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarBarEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'QuestionQuestionToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'QuestionQuestionEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'QuestionToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ColonToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AtToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BacktickToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'HashToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PlusEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsteriskEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsteriskAsteriskEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SlashEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PercentEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanLessThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanGreaterThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanGreaterThanGreaterThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CaretEqualsToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PunctuationOrKeywordSyntaxKind'
    UnionType
      TypeReference
        Identifier: ' PunctuationSyntaxKind'
      TypeReference
        Identifier: ' KeywordSyntaxKind'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' KeywordSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AbstractKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AccessorKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AnyKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AssertsKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AssertKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsyncKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AwaitKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BigIntKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BooleanKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BreakKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CaseKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CatchKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ClassKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConstKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConstructorKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ContinueKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DebuggerKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DeclareKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DefaultKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DeleteKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DoKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ElseKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EnumKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExportKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExtendsKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FalseKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FinallyKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ForKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FromKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FunctionKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GetKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GlobalKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IfKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImplementsKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InferKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InstanceOfKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InterfaceKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IntrinsicKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IsKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'KeyOfKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LetKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ModuleKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NamespaceKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NeverKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NewKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NullKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NumberKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ObjectKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OfKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PackageKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PrivateKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ProtectedKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PublicKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ReadonlyKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OutKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OverrideKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'RequireKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ReturnKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SatisfiesKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SetKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'StaticKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'StringKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SuperKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SwitchKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SymbolKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ThisKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ThrowKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TrueKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TryKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeOfKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UndefinedKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UniqueKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UnknownKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UsingKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'VarKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'VoidKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'WhileKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'WithKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'YieldKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ModifierSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AbstractKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AccessorKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsyncKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConstKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DeclareKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DefaultKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExportKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PrivateKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ProtectedKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PublicKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ReadonlyKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OutKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OverrideKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'StaticKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' KeywordTypeSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AnyKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BigIntKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BooleanKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IntrinsicKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NeverKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NumberKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ObjectKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'StringKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SymbolKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UndefinedKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UnknownKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'VoidKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeNodeSyntaxKind'
    UnionType
      TypeReference
        Identifier: ' KeywordTypeSyntaxKind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypePredicate'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeReference'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FunctionType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConstructorType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeQuery'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeLiteral'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ArrayType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TupleType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NamedTupleMember'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OptionalType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'RestType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UnionType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IntersectionType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConditionalType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InferType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ParenthesizedType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ThisType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeOperator'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IndexedAccessType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MappedType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LiteralType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateLiteralType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateLiteralTypeSpan'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExpressionWithTypeArguments'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocTypeExpression'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocAllType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocUnknownType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocNonNullableType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocNullableType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocOptionalType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocFunctionType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocVariadicType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocNamepathType'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocSignature'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocTypeLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TokenSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Unknown'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EndOfFileToken'
      TypeReference
        Identifier: ' TriviaSyntaxKind'
      TypeReference
        Identifier: ' LiteralSyntaxKind'
      TypeReference
        Identifier: ' PseudoLiteralSyntaxKind'
      TypeReference
        Identifier: ' PunctuationSyntaxKind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Identifier'
      TypeReference
        Identifier: ' KeywordSyntaxKind'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JsxTokenSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanSlashToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EndOfFileToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConflictMarkerTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxText'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxTextAllWhiteSpaces'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OpenBraceToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSDocSyntaxKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EndOfFileToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'WhitespaceTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AtToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NewLineTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsteriskToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OpenBraceToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CloseBraceToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OpenBracketToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CloseBracketToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OpenParenToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CloseParenToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CommaToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DotToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Identifier'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BacktickToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'HashToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Unknown'
      TypeReference
        Identifier: ' KeywordSyntaxKind'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' NodeFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Let'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Variable declaration
    Const'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Variable declaration
    Using'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Variable declaration
    AwaitUsing'
      BinaryExpression
        Identifier: ' Const'
        BarToken
        Identifier: ' Using'
    EnumMember
      Identifier: ' // Variable declaration (NOTE: on a single node these flags would otherwise be mutually exclusive)
    NestedNamespace'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Namespace declaration
    Synthesized'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Node was synthesized during transformation
    Namespace'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Namespace declaration
    OptionalChain'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Chained MemberExpression rooted to a pseudo-OptionalExpression
    ExportContext'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Export context (initialized by binding)
    ContainsThis'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Interface contains references to "this"
    HasImplicitReturn'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // If function implicitly returns on one of codepaths (initialized by binding)
    HasExplicitReturn'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // If function has explicit reachable return on one of codepaths (initialized by binding)
    GlobalAugmentation'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Set if module declaration is an augmentation for the global scope
    HasAsyncFunctions'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If the file has async functions (initialized by binding)
    DisallowInContext'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was parsed in a context where 'in-expressions' are not allowed
    YieldContext'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was parsed in the 'yield' context created when parsing a generator
    DecoratorContext'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was parsed as part of a decorator
    AwaitContext'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was parsed in the 'await' context created when parsing an async function
    DisallowConditionalTypesContext'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was parsed in a context where conditional types are not allowed
    ThisNodeHasError'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If the parser encountered an error when parsing the code that created this node
    JavaScriptFile'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was parsed in a JavaScript
    ThisNodeOrAnySubNodesHasError'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If this node or any of its children had an error
    HasAggregatedChildData'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If we've computed data from children and cached it in this node

    // These flags will be set when the parser encounters a dynamic import expression or 'import.meta' to avoid
    // walking the tree if the flags are not set. However, these flags are just a approximation
    // (hence why it's named "PossiblyContainsDynamicImport") because once set, the flags never get cleared.
    // During editing, if a dynamic import is removed, incremental parsing will *NOT* clear this flag.
    // This means that the tree will always be traversed during module resolution, or when looking for external module indicators.
    // However, the removal operation should not occur often and in the case of the
    // removal, it is likely that users will add the import anyway.
    // The advantage of this approach is its simplicity. For the case of batch compilation,
    // we guarantee that users won't have to pay the price of walking the tree if a dynamic import isn't used.
    /** @internal */ PossiblyContainsDynamicImport'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */ PossiblyContainsImportMeta'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    JSDoc'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was parsed inside jsdoc
    /** @internal */ Ambient'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was inside an ambient context -- a declaration file, or inside something with the `declare` modifier.
    /** @internal */ InWithStatement'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If any ancestor of node was the `statement` of a WithStatement (not the `expression`)
    JsonFile'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If node was parsed in a Json
    /** @internal */ TypeCached'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If a type was cached for node at any point
    /** @internal */ Deprecated'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // If has '@deprecated' JSDoc tag

    BlockScoped'
      BinaryExpression
        BinaryExpression
          Identifier: ' Let'
          BarToken
          Identifier: ' Const'
        BarToken
        Identifier: ' Using'
    EnumMember
      Identifier: '
    Constant'
      BinaryExpression
        Identifier: ' Const'
        BarToken
        Identifier: ' Using'
    EnumMember
      Identifier: '

    ReachabilityCheckFlags'
      BinaryExpression
        Identifier: ' HasImplicitReturn'
        BarToken
        Identifier: ' HasExplicitReturn'
    EnumMember
      Identifier: '
    ReachabilityAndEmitFlags'
      BinaryExpression
        Identifier: ' ReachabilityCheckFlags'
        BarToken
        Identifier: ' HasAsyncFunctions'
    EnumMember
      Identifier: '

    // Parsing context flags
    ContextFlags'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    Identifier: ' DisallowInContext'
                    BarToken
                    Identifier: ' DisallowConditionalTypesContext'
                  BarToken
                  Identifier: ' YieldContext'
                BarToken
                Identifier: ' DecoratorContext'
              BarToken
              Identifier: ' AwaitContext'
            BarToken
            Identifier: ' JavaScriptFile'
          BarToken
          Identifier: ' InWithStatement'
        BarToken
        Identifier: ' Ambient'
    EnumMember
      Identifier: '

    // Exclude these flags when parsing a Type
    TypeExcludesFlags'
      BinaryExpression
        Identifier: ' YieldContext'
        BarToken
        Identifier: ' AwaitContext'
    EnumMember
      Identifier: '

    // Represents all flags that are potentially set once and
    // never cleared on SourceFiles which get re-used in between incremental parses.
    // See the comment above on `PossiblyContainsDynamicImport` and `PossiblyContainsImportMeta`.
    /** @internal */ PermanentlySetIncrementalFlags'
      BinaryExpression
        Identifier: ' PossiblyContainsDynamicImport'
        BarToken
        Identifier: ' PossiblyContainsImportMeta'
    EnumMember
      Identifier: '

    // The following flags repurpose other NodeFlags as different meanings for Identifier nodes
    /** @internal */ IdentifierHasExtendedUnicodeEscape'
      Identifier: ' ContainsThis'
    EnumMember
      Identifier: ' // Indicates whether the identifier contains an extended unicode escape sequence
    /** @internal */ IdentifierIsInJSDocNamespace'
      Identifier: ' HasAsyncFunctions'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ModifierFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '

    // Syntactic/JSDoc modifiers
    Public'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Property/Method
    Private'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Property/Method
    Protected'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Property/Method
    Readonly'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Property/Method
    Override'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Override method.

    // Syntactic-only modifiers
    Export'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Declarations
    Abstract'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Class/Method/ConstructSignature
    Ambient'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Declarations
    Static'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Property/Method
    Accessor'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Property
    Async'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Property/Method/Function
    Default'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Function/Class (export default declaration)
    Const'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Const enum
    In'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Contravariance modifier
    Out'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Covariance modifier
    Decorator'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Contains a decorator.

    // JSDoc-only modifiers
    Deprecated'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Deprecated tag.

    // Cache-only JSDoc-modifiers. Should match order of Syntactic/JSDoc modifiers, above.
    /** @internal */ JSDocPublic'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // if this value changes, `selectEffectiveModifierFlags` must change accordingly
    /** @internal */ JSDocPrivate'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */ JSDocProtected'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */ JSDocReadonly'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */ JSDocOverride'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    /** @internal */ SyntacticOrJSDocModifiers'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' Public'
              BarToken
              Identifier: ' Private'
            BarToken
            Identifier: ' Protected'
          BarToken
          Identifier: ' Readonly'
        BarToken
        Identifier: ' Override'
    EnumMember
      Identifier: '
    /** @internal */ SyntacticOnlyModifiers'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        BinaryExpression
                          Identifier: ' Export'
                          BarToken
                          Identifier: ' Ambient'
                        BarToken
                        Identifier: ' Abstract'
                      BarToken
                      Identifier: ' Static'
                    BarToken
                    Identifier: ' Accessor'
                  BarToken
                  Identifier: ' Async'
                BarToken
                Identifier: ' Default'
              BarToken
              Identifier: ' Const'
            BarToken
            Identifier: ' In'
          BarToken
          Identifier: ' Out'
        BarToken
        Identifier: ' Decorator'
    EnumMember
      Identifier: '
    /** @internal */ SyntacticModifiers'
      BinaryExpression
        Identifier: ' SyntacticOrJSDocModifiers'
        BarToken
        Identifier: ' SyntacticOnlyModifiers'
    EnumMember
      Identifier: '
    /** @internal */ JSDocCacheOnlyModifiers'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' JSDocPublic'
              BarToken
              Identifier: ' JSDocPrivate'
            BarToken
            Identifier: ' JSDocProtected'
          BarToken
          Identifier: ' JSDocReadonly'
        BarToken
        Identifier: ' JSDocOverride'
    EnumMember
      Identifier: '
    /** @internal */ JSDocOnlyModifiers'
      Identifier: ' Deprecated'
    EnumMember
      Identifier: '
    /** @internal */ NonCacheOnlyModifiers'
      BinaryExpression
        BinaryExpression
          Identifier: ' SyntacticOrJSDocModifiers'
          BarToken
          Identifier: ' SyntacticOnlyModifiers'
        BarToken
        Identifier: ' JSDocOnlyModifiers'
    EnumMember
      Identifier: '

    HasComputedJSDocModifiers'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Indicates the computed modifier flags include modifiers from JSDoc.
    HasComputedFlags'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Modifier flags have been computed

    AccessibilityModifier'
      BinaryExpression
        BinaryExpression
          Identifier: ' Public'
          BarToken
          Identifier: ' Private'
        BarToken
        Identifier: ' Protected'
    EnumMember
      Identifier: '
    // Accessibility modifiers and 'readonly' can be attached to a parameter in a constructor to make it a property.
    ParameterPropertyModifier'
      BinaryExpression
        BinaryExpression
          Identifier: ' AccessibilityModifier'
          BarToken
          Identifier: ' Readonly'
        BarToken
        Identifier: ' Override'
    EnumMember
      Identifier: '
    NonPublicAccessibilityModifier'
      BinaryExpression
        Identifier: ' Private'
        BarToken
        Identifier: ' Protected'
    EnumMember
      Identifier: '

    TypeScriptModifier'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        Identifier: ' Ambient'
                        BarToken
                        Identifier: ' Public'
                      BarToken
                      Identifier: ' Private'
                    BarToken
                    Identifier: ' Protected'
                  BarToken
                  Identifier: ' Readonly'
                BarToken
                Identifier: ' Abstract'
              BarToken
              Identifier: ' Const'
            BarToken
            Identifier: ' Override'
          BarToken
          Identifier: ' In'
        BarToken
        Identifier: ' Out'
    EnumMember
      Identifier: '
    ExportDefault'
      BinaryExpression
        Identifier: ' Export'
        BarToken
        Identifier: ' Default'
    EnumMember
      Identifier: '
    All'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        BinaryExpression
                          BinaryExpression
                            BinaryExpression
                              BinaryExpression
                                BinaryExpression
                                  BinaryExpression
                                    BinaryExpression
                                      Identifier: ' Export'
                                      BarToken
                                      Identifier: ' Ambient'
                                    BarToken
                                    Identifier: ' Public'
                                  BarToken
                                  Identifier: ' Private'
                                BarToken
                                Identifier: ' Protected'
                              BarToken
                              Identifier: ' Static'
                            BarToken
                            Identifier: ' Readonly'
                          BarToken
                          Identifier: ' Abstract'
                        BarToken
                        Identifier: ' Accessor'
                      BarToken
                      Identifier: ' Async'
                    BarToken
                    Identifier: ' Default'
                  BarToken
                  Identifier: ' Const'
                BarToken
                Identifier: ' Deprecated'
              BarToken
              Identifier: ' Override'
            BarToken
            Identifier: ' In'
          BarToken
          Identifier: ' Out'
        BarToken
        Identifier: ' Decorator'
    EnumMember
      Identifier: '
    Modifier'
      BinaryExpression
        Identifier: ' All'
        AmpersandToken
        PrefixUnaryExpression
          Identifier: 'Decorator'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' JsxFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    /** An element from a named property of the JSX.IntrinsicElements interface */
    IntrinsicNamedElement'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** An element inferred from the string index signature of the JSX.IntrinsicElements interface */
    IntrinsicIndexedElement'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    IntrinsicElement'
      BinaryExpression
        Identifier: ' IntrinsicNamedElement'
        BarToken
        Identifier: ' IntrinsicIndexedElement'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' RelationComparisonResult'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Succeeded'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Should be truthy
    Failed'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    ReportsUnmeasurable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ReportsUnreliable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ReportsMask'
      BinaryExpression
        Identifier: ' ReportsUnmeasurable'
        BarToken
        Identifier: ' ReportsUnreliable'
    EnumMember
      Identifier: '

    ComplexityOverflow'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    StackDepthOverflow'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Overflow'
      BinaryExpression
        Identifier: ' ComplexityOverflow'
        BarToken
        Identifier: ' StackDepthOverflow'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' PredicateSemantics'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Always'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Never'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Sometimes'
      BinaryExpression
        Identifier: ' Always'
        BarToken
        Identifier: ' Never'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' NodeId'
    NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Node'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ReadonlyTextRange'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        Identifier: ' SyntaxKind'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' flags'
      TypeReference
        Identifier: ' NodeFlags'
    PropertySignature
      Identifier: '
    /** @internal */ modifierFlagsCache'
      TypeReference
        Identifier: ' ModifierFlags'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' transformFlags'
      TypeReference
        Identifier: ' TransformFlags'
    PropertySignature
      Identifier: ' // Flags for transforms
    /** @internal */ id'
      QuestionToken
      TypeReference
        Identifier: ' NodeId'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' Node'
    PropertySignature
      Identifier: ' // Parent node (initialized by binding)
    /** @internal */ original'
      QuestionToken
      TypeReference
        Identifier: ' Node'
    PropertySignature
      Identifier: ' // The original node if this is an updated node.
    /** @internal */ emitNode'
      QuestionToken
      TypeReference
        Identifier: ' EmitNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocContainer'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    _jsdocContainerBrand'
      AnyKeyword
    PropertySignature
      Identifier: '
    /** @internal */ jsDoc'
      QuestionToken
      TypeReference
        Identifier: ' JSDocArray'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocArray'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Array'
        TypeReference
          Identifier: 'JSDoc'
    PropertySignature
      Identifier: '
    jsDocCache'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' JSDocTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LocalsContainer'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    _localsContainerBrand'
      AnyKeyword
    PropertySignature
      Identifier: '
    /** @internal */ locals'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: ' // Locals associated with node (initialized by binding)
    /** @internal */ nextContainer'
      QuestionToken
      TypeReference
        Identifier: ' HasLocals'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowContainer'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    _flowContainerBrand'
      AnyKeyword
    PropertySignature
      Identifier: '
    /** @internal */ flowNode'
      QuestionToken
      TypeReference
        Identifier: ' FlowNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasFlowNode'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' ThisExpression'
      TypeReference
        Identifier: ' SuperExpression'
      TypeReference
        Identifier: ' QualifiedName'
      TypeReference
        Identifier: ' MetaProperty'
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' BindingElement'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' VariableStatement'
      TypeReference
        Identifier: ' ExpressionStatement'
      TypeReference
        Identifier: ' IfStatement'
      TypeReference
        Identifier: ' DoStatement'
      TypeReference
        Identifier: ' WhileStatement'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' ContinueStatement'
      TypeReference
        Identifier: ' BreakStatement'
      TypeReference
        Identifier: ' ReturnStatement'
      TypeReference
        Identifier: ' WithStatement'
      TypeReference
        Identifier: ' SwitchStatement'
      TypeReference
        Identifier: ' LabeledStatement'
      TypeReference
        Identifier: ' ThrowStatement'
      TypeReference
        Identifier: ' TryStatement'
      TypeReference
        Identifier: ' DebuggerStatement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ForEachChildNodes'
    UnionType
      TypeReference
        Identifier: ' HasChildren'
      TypeReference
        Identifier: ' MissingDeclaration'
      TypeReference
        Identifier: ' JSDocTypeExpression'
      TypeReference
        Identifier: ' JSDocNonNullableType'
      TypeReference
        Identifier: ' JSDocNullableType'
      TypeReference
        Identifier: ' JSDocOptionalType'
      TypeReference
        Identifier: ' JSDocVariadicType'
      TypeReference
        Identifier: ' JSDocFunctionType'
      TypeReference
        Identifier: ' JSDoc'
      TypeReference
        Identifier: ' JSDocSeeTag'
      TypeReference
        Identifier: ' JSDocNameReference'
      TypeReference
        Identifier: ' JSDocMemberName'
      TypeReference
        Identifier: ' JSDocParameterTag'
      TypeReference
        Identifier: ' JSDocPropertyTag'
      TypeReference
        Identifier: ' JSDocAuthorTag'
      TypeReference
        Identifier: ' JSDocImplementsTag'
      TypeReference
        Identifier: ' JSDocAugmentsTag'
      TypeReference
        Identifier: ' JSDocTemplateTag'
      TypeReference
        Identifier: ' JSDocTypedefTag'
      TypeReference
        Identifier: ' JSDocCallbackTag'
      TypeReference
        Identifier: ' JSDocReturnTag'
      TypeReference
        Identifier: ' JSDocTypeTag'
      TypeReference
        Identifier: ' JSDocThisTag'
      TypeReference
        Identifier: ' JSDocEnumTag'
      TypeReference
        Identifier: ' JSDocSignature'
      TypeReference
        Identifier: ' JSDocLink'
      TypeReference
        Identifier: ' JSDocLinkCode'
      TypeReference
        Identifier: ' JSDocLinkPlain'
      TypeReference
        Identifier: ' JSDocTypeLiteral'
      TypeReference
        Identifier: ' JSDocUnknownTag'
      TypeReference
        Identifier: ' JSDocClassTag'
      TypeReference
        Identifier: ' JSDocPublicTag'
      TypeReference
        Identifier: ' JSDocPrivateTag'
      TypeReference
        Identifier: ' JSDocProtectedTag'
      TypeReference
        Identifier: ' JSDocReadonlyTag'
      TypeReference
        Identifier: ' JSDocDeprecatedTag'
      TypeReference
        Identifier: ' JSDocThrowsTag'
      TypeReference
        Identifier: ' JSDocOverrideTag'
      TypeReference
        Identifier: ' JSDocSatisfiesTag'
      TypeReference
        Identifier: ' JSDocOverloadTag'
      TypeReference
        Identifier: ' JSDocImportTag'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasChildren'
    UnionType
      TypeReference
        Identifier: ' QualifiedName'
      TypeReference
        Identifier: ' ComputedPropertyName'
      TypeReference
        Identifier: ' TypeParameterDeclaration'
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' Decorator'
      TypeReference
        Identifier: ' PropertySignature'
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeReference
        Identifier: ' MethodSignature'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
      TypeReference
        Identifier: ' CallSignatureDeclaration'
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
      TypeReference
        Identifier: ' TypePredicateNode'
      TypeReference
        Identifier: ' TypeReferenceNode'
      TypeReference
        Identifier: ' FunctionTypeNode'
      TypeReference
        Identifier: ' ConstructorTypeNode'
      TypeReference
        Identifier: ' TypeQueryNode'
      TypeReference
        Identifier: ' TypeLiteralNode'
      TypeReference
        Identifier: ' ArrayTypeNode'
      TypeReference
        Identifier: ' TupleTypeNode'
      TypeReference
        Identifier: ' OptionalTypeNode'
      TypeReference
        Identifier: ' RestTypeNode'
      TypeReference
        Identifier: ' UnionTypeNode'
      TypeReference
        Identifier: ' IntersectionTypeNode'
      TypeReference
        Identifier: ' ConditionalTypeNode'
      TypeReference
        Identifier: ' InferTypeNode'
      TypeReference
        Identifier: ' ImportTypeNode'
      TypeReference
        Identifier: ' ImportTypeAssertionContainer'
      TypeReference
        Identifier: ' NamedTupleMember'
      TypeReference
        Identifier: ' ParenthesizedTypeNode'
      TypeReference
        Identifier: ' TypeOperatorNode'
      TypeReference
        Identifier: ' IndexedAccessTypeNode'
      TypeReference
        Identifier: ' MappedTypeNode'
      TypeReference
        Identifier: ' LiteralTypeNode'
      TypeReference
        Identifier: ' TemplateLiteralTypeNode'
      TypeReference
        Identifier: ' TemplateLiteralTypeSpan'
      TypeReference
        Identifier: ' ObjectBindingPattern'
      TypeReference
        Identifier: ' ArrayBindingPattern'
      TypeReference
        Identifier: ' BindingElement'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' CallExpression'
      TypeReference
        Identifier: ' NewExpression'
      TypeReference
        Identifier: ' TaggedTemplateExpression'
      TypeReference
        Identifier: ' TypeAssertion'
      TypeReference
        Identifier: ' ParenthesizedExpression'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
      TypeReference
        Identifier: ' DeleteExpression'
      TypeReference
        Identifier: ' TypeOfExpression'
      TypeReference
        Identifier: ' VoidExpression'
      TypeReference
        Identifier: ' AwaitExpression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
      TypeReference
        Identifier: ' PostfixUnaryExpression'
      TypeReference
        Identifier: ' BinaryExpression'
      TypeReference
        Identifier: ' ConditionalExpression'
      TypeReference
        Identifier: ' TemplateExpression'
      TypeReference
        Identifier: ' YieldExpression'
      TypeReference
        Identifier: ' SpreadElement'
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' ExpressionWithTypeArguments'
      TypeReference
        Identifier: ' AsExpression'
      TypeReference
        Identifier: ' NonNullExpression'
      TypeReference
        Identifier: ' SatisfiesExpression'
      TypeReference
        Identifier: ' MetaProperty'
      TypeReference
        Identifier: ' TemplateSpan'
      TypeReference
        Identifier: ' Block'
      TypeReference
        Identifier: ' VariableStatement'
      TypeReference
        Identifier: ' ExpressionStatement'
      TypeReference
        Identifier: ' IfStatement'
      TypeReference
        Identifier: ' DoStatement'
      TypeReference
        Identifier: ' WhileStatement'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' ContinueStatement'
      TypeReference
        Identifier: ' BreakStatement'
      TypeReference
        Identifier: ' ReturnStatement'
      TypeReference
        Identifier: ' WithStatement'
      TypeReference
        Identifier: ' SwitchStatement'
      TypeReference
        Identifier: ' LabeledStatement'
      TypeReference
        Identifier: ' ThrowStatement'
      TypeReference
        Identifier: ' TryStatement'
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' VariableDeclarationList'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' ClassDeclaration'
      TypeReference
        Identifier: ' InterfaceDeclaration'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
      TypeReference
        Identifier: ' EnumDeclaration'
      TypeReference
        Identifier: ' ModuleDeclaration'
      TypeReference
        Identifier: ' ModuleBlock'
      TypeReference
        Identifier: ' CaseBlock'
      TypeReference
        Identifier: ' NamespaceExportDeclaration'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
      TypeReference
        Identifier: ' ImportDeclaration'
      TypeReference
        Identifier: ' AssertClause'
      TypeReference
        Identifier: ' AssertEntry'
      TypeReference
        Identifier: ' ImportAttributes'
      TypeReference
        Identifier: ' ImportAttribute'
      TypeReference
        Identifier: ' ImportClause'
      TypeReference
        Identifier: ' NamespaceImport'
      TypeReference
        Identifier: ' NamespaceExport'
      TypeReference
        Identifier: ' NamedImports'
      TypeReference
        Identifier: ' ImportSpecifier'
      TypeReference
        Identifier: ' ExportAssignment'
      TypeReference
        Identifier: ' ExportDeclaration'
      TypeReference
        Identifier: ' NamedExports'
      TypeReference
        Identifier: ' ExportSpecifier'
      TypeReference
        Identifier: ' ExternalModuleReference'
      TypeReference
        Identifier: ' JsxElement'
      TypeReference
        Identifier: ' JsxSelfClosingElement'
      TypeReference
        Identifier: ' JsxOpeningElement'
      TypeReference
        Identifier: ' JsxClosingElement'
      TypeReference
        Identifier: ' JsxFragment'
      TypeReference
        Identifier: ' JsxAttribute'
      TypeReference
        Identifier: ' JsxAttributes'
      TypeReference
        Identifier: ' JsxSpreadAttribute'
      TypeReference
        Identifier: ' JsxExpression'
      TypeReference
        Identifier: ' JsxNamespacedName'
      TypeReference
        Identifier: ' CaseClause'
      TypeReference
        Identifier: ' DefaultClause'
      TypeReference
        Identifier: ' HeritageClause'
      TypeReference
        Identifier: ' CatchClause'
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
      TypeReference
        Identifier: ' SpreadAssignment'
      TypeReference
        Identifier: ' EnumMember'
      TypeReference
        Identifier: ' SourceFile'
      TypeReference
        Identifier: ' PartiallyEmittedExpression'
      TypeReference
        Identifier: ' CommaListExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasJSDoc'
    UnionType
      TypeReference
        Identifier: ' AccessorDeclaration'
      TypeReference
        Identifier: ' ArrowFunction'
      TypeReference
        Identifier: ' BinaryExpression'
      TypeReference
        Identifier: ' Block'
      TypeReference
        Identifier: ' BreakStatement'
      TypeReference
        Identifier: ' CallSignatureDeclaration'
      TypeReference
        Identifier: ' CaseClause'
      TypeReference
        Identifier: ' ClassLikeDeclaration'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' ConstructorTypeNode'
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
      TypeReference
        Identifier: ' ContinueStatement'
      TypeReference
        Identifier: ' DebuggerStatement'
      TypeReference
        Identifier: ' DoStatement'
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' EmptyStatement'
      TypeReference
        Identifier: ' EndOfFileToken'
      TypeReference
        Identifier: ' EnumDeclaration'
      TypeReference
        Identifier: ' EnumMember'
      TypeReference
        Identifier: ' ExportAssignment'
      TypeReference
        Identifier: ' ExportDeclaration'
      TypeReference
        Identifier: ' ExportSpecifier'
      TypeReference
        Identifier: ' ExpressionStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' FunctionTypeNode'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' IfStatement'
      TypeReference
        Identifier: ' ImportDeclaration'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
      TypeReference
        Identifier: ' InterfaceDeclaration'
      TypeReference
        Identifier: ' JSDocFunctionType'
      TypeReference
        Identifier: ' JSDocSignature'
      TypeReference
        Identifier: ' LabeledStatement'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' MethodSignature'
      TypeReference
        Identifier: ' ModuleDeclaration'
      TypeReference
        Identifier: ' NamedTupleMember'
      TypeReference
        Identifier: ' NamespaceExportDeclaration'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' ParenthesizedExpression'
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeReference
        Identifier: ' PropertySignature'
      TypeReference
        Identifier: ' ReturnStatement'
      TypeReference
        Identifier: ' SemicolonClassElement'
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
      TypeReference
        Identifier: ' SpreadAssignment'
      TypeReference
        Identifier: ' SwitchStatement'
      TypeReference
        Identifier: ' ThrowStatement'
      TypeReference
        Identifier: ' TryStatement'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
      TypeReference
        Identifier: ' TypeParameterDeclaration'
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' VariableStatement'
      TypeReference
        Identifier: ' WhileStatement'
      TypeReference
        Identifier: ' WithStatement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasType'
    UnionType
      TypeReference
        Identifier: ' SignatureDeclaration'
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' PropertySignature'
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeReference
        Identifier: ' TypePredicateNode'
      TypeReference
        Identifier: ' ParenthesizedTypeNode'
      TypeReference
        Identifier: ' TypeOperatorNode'
      TypeReference
        Identifier: ' MappedTypeNode'
      TypeReference
        Identifier: ' AssertionExpression'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
      TypeReference
        Identifier: ' JSDocTypeExpression'
      TypeReference
        Identifier: ' JSDocNonNullableType'
      TypeReference
        Identifier: ' JSDocNullableType'
      TypeReference
        Identifier: ' JSDocOptionalType'
      TypeReference
        Identifier: ' JSDocVariadicType'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasIllegalType'
    UnionType
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasIllegalTypeParameters'
    UnionType
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasTypeArguments'
    UnionType
      TypeReference
        Identifier: ' CallExpression'
      TypeReference
        Identifier: ' NewExpression'
      TypeReference
        Identifier: ' TaggedTemplateExpression'
      TypeReference
        Identifier: ' JsxOpeningElement'
      TypeReference
        Identifier: ' JsxSelfClosingElement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasInitializer'
    UnionType
      TypeReference
        Identifier: ' HasExpressionInitializer'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' JsxAttribute'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasExpressionInitializer'
    UnionType
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' BindingElement'
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' EnumMember'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasIllegalExpressionInitializer'
    TypeReference
      Identifier: ' PropertySignature'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasDecorators'
    UnionType
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' ClassDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasIllegalDecorators'
    UnionType
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
      TypeReference
        Identifier: ' MissingDeclaration'
      TypeReference
        Identifier: ' VariableStatement'
      TypeReference
        Identifier: ' InterfaceDeclaration'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
      TypeReference
        Identifier: ' EnumDeclaration'
      TypeReference
        Identifier: ' ModuleDeclaration'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
      TypeReference
        Identifier: ' ImportDeclaration'
      TypeReference
        Identifier: ' NamespaceExportDeclaration'
      TypeReference
        Identifier: ' ExportDeclaration'
      TypeReference
        Identifier: ' ExportAssignment'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasModifiers'
    UnionType
      TypeReference
        Identifier: ' TypeParameterDeclaration'
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' ConstructorTypeNode'
      TypeReference
        Identifier: ' PropertySignature'
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeReference
        Identifier: ' MethodSignature'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' VariableStatement'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' ClassDeclaration'
      TypeReference
        Identifier: ' InterfaceDeclaration'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
      TypeReference
        Identifier: ' EnumDeclaration'
      TypeReference
        Identifier: ' ModuleDeclaration'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
      TypeReference
        Identifier: ' ImportDeclaration'
      TypeReference
        Identifier: ' ExportAssignment'
      TypeReference
        Identifier: ' ExportDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasIllegalModifiers'
    UnionType
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
      TypeReference
        Identifier: ' MissingDeclaration'
      TypeReference
        Identifier: ' NamespaceExportDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PrimitiveLiteral'
    UnionType
      TypeReference
        Identifier: ' BooleanLiteral'
      TypeReference
        Identifier: ' NumericLiteral'
      TypeReference
        Identifier: ' StringLiteral'
      TypeReference
        Identifier: ' NoSubstitutionTemplateLiteral'
      TypeReference
        Identifier: ' BigIntLiteral'
      IntersectionType
        TypeReference
          Identifier: ' PrefixUnaryExpression'
        TypeLiteral
          PropertySignature
            Identifier: ' operator'
            TypeReference
              QualifiedName
                Identifier: ' SyntaxKind'
                Identifier: 'PlusToken'
          PropertySignature
            Identifier: ' operand'
            TypeReference
              Identifier: ' NumericLiteral'
      IntersectionType
        TypeReference
          Identifier: ' PrefixUnaryExpression'
        TypeLiteral
          PropertySignature
            Identifier: ' operator'
            TypeReference
              QualifiedName
                Identifier: ' SyntaxKind'
                Identifier: 'MinusToken'
          PropertySignature
            Identifier: ' operand'
            UnionType
              TypeReference
                Identifier: ' NumericLiteral'
              TypeReference
                Identifier: ' BigIntLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IsContainer'
    UnionType
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' ClassDeclaration'
      TypeReference
        Identifier: ' EnumDeclaration'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
      TypeReference
        Identifier: ' TypeLiteralNode'
      TypeReference
        Identifier: ' JSDocTypeLiteral'
      TypeReference
        Identifier: ' JsxAttributes'
      TypeReference
        Identifier: ' InterfaceDeclaration'
      TypeReference
        Identifier: ' ModuleDeclaration'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
      TypeReference
        Identifier: ' MappedTypeNode'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
      TypeReference
        Identifier: ' SourceFile'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' MethodSignature'
      TypeReference
        Identifier: ' CallSignatureDeclaration'
      TypeReference
        Identifier: ' JSDocSignature'
      TypeReference
        Identifier: ' JSDocFunctionType'
      TypeReference
        Identifier: ' FunctionTypeNode'
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
      TypeReference
        Identifier: ' ConstructorTypeNode'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IsBlockScopedContainer'
    UnionType
      TypeReference
        Identifier: ' IsContainer'
      TypeReference
        Identifier: ' CatchClause'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' CaseBlock'
      TypeReference
        Identifier: ' Block'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IsControlFlowContainer'
    UnionType
      TypeReference
        Identifier: ' SourceFile'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' MethodSignature'
      TypeReference
        Identifier: ' CallSignatureDeclaration'
      TypeReference
        Identifier: ' JSDocSignature'
      TypeReference
        Identifier: ' JSDocFunctionType'
      TypeReference
        Identifier: ' FunctionTypeNode'
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
      TypeReference
        Identifier: ' ConstructorTypeNode'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
      TypeReference
        Identifier: ' ModuleBlock'
      TypeReference
        Identifier: ' PropertyDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IsFunctionLike'
    UnionType
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' MethodSignature'
      TypeReference
        Identifier: ' CallSignatureDeclaration'
      TypeReference
        Identifier: ' JSDocSignature'
      TypeReference
        Identifier: ' JSDocFunctionType'
      TypeReference
        Identifier: ' FunctionTypeNode'
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
      TypeReference
        Identifier: ' ConstructorTypeNode'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IsFunctionExpression'
    UnionType
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasLocals'
    UnionType
      TypeReference
        Identifier: ' ArrowFunction'
      TypeReference
        Identifier: ' Block'
      TypeReference
        Identifier: ' CallSignatureDeclaration'
      TypeReference
        Identifier: ' CaseBlock'
      TypeReference
        Identifier: ' CatchClause'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
      TypeReference
        Identifier: ' ConditionalTypeNode'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' ConstructorTypeNode'
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' FunctionTypeNode'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
      TypeReference
        Identifier: ' JSDocCallbackTag'
      TypeReference
        Identifier: ' JSDocEnumTag'
      TypeReference
        Identifier: ' JSDocFunctionType'
      TypeReference
        Identifier: ' JSDocSignature'
      TypeReference
        Identifier: ' JSDocTypedefTag'
      TypeReference
        Identifier: ' MappedTypeNode'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' MethodSignature'
      TypeReference
        Identifier: ' ModuleDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' SourceFile'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IsInterface'
    TypeReference
      Identifier: ' InterfaceDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IsObjectLiteralOrClassExpressionMethodOrAccessor'
    UnionType
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' MethodDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasContainerFlags'
    UnionType
      TypeReference
        Identifier: ' IsContainer'
      TypeReference
        Identifier: ' IsBlockScopedContainer'
      TypeReference
        Identifier: ' IsControlFlowContainer'
      TypeReference
        Identifier: ' IsFunctionLike'
      TypeReference
        Identifier: ' IsFunctionExpression'
      TypeReference
        Identifier: ' HasLocals'
      TypeReference
        Identifier: ' IsInterface'
      TypeReference
        Identifier: ' IsObjectLiteralOrClassExpressionMethodOrAccessor'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MutableNodeArray'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Array'
        TypeReference
          Identifier: 'T'
      ExpressionWithTypeArguments
        Identifier: ' TextRange'
    PropertySignature
      Identifier: '
    hasTrailingComma'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ transformFlags'
      TypeReference
        Identifier: ' TransformFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NodeArray'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ReadonlyArray'
        TypeReference
          Identifier: 'T'
      ExpressionWithTypeArguments
        Identifier: ' ReadonlyTextRange'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' hasTrailingComma'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ transformFlags'
      TypeReference
        Identifier: ' TransformFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Token'
    TypeParameter
      Identifier: 'TKind'
      TypeReference
        Identifier: ' SyntaxKind'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        Identifier: ' TKind'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EndOfFileToken'
    IntersectionType
      TypeReference
        Identifier: ' Token'
        TypeReference
          QualifiedName
            Identifier: 'SyntaxKind'
            Identifier: 'EndOfFileToken'
      TypeReference
        Identifier: ' JSDocContainer'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PunctuationToken'
    TypeParameter
      Identifier: 'TKind'
      TypeReference
        Identifier: ' PunctuationSyntaxKind'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Token'
        TypeReference
          Identifier: 'TKind'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DotToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'DotToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DotDotDotToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'DotDotDotToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' QuestionToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'QuestionToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ExclamationToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'ExclamationToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ColonToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'ColonToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EqualsToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'EqualsToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AmpersandAmpersandEqualsToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'AmpersandAmpersandEqualsToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BarBarEqualsToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'BarBarEqualsToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' QuestionQuestionEqualsToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'QuestionQuestionEqualsToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AsteriskToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'AsteriskToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EqualsGreaterThanToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'EqualsGreaterThanToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PlusToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'PlusToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MinusToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'MinusToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' QuestionDotToken'
    TypeReference
      Identifier: ' PunctuationToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'QuestionDotToken'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' KeywordToken'
    TypeParameter
      Identifier: 'TKind'
      TypeReference
        Identifier: ' KeywordSyntaxKind'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Token'
        TypeReference
          Identifier: 'TKind'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssertsKeyword'
    TypeReference
      Identifier: ' KeywordToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'AssertsKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssertKeyword'
    TypeReference
      Identifier: ' KeywordToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'AssertKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AwaitKeyword'
    TypeReference
      Identifier: ' KeywordToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'AwaitKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CaseKeyword'
    TypeReference
      Identifier: ' KeywordToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'CaseKeyword'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ModifierToken'
    TypeParameter
      Identifier: 'TKind'
      TypeReference
        Identifier: ' ModifierSyntaxKind'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' KeywordToken'
        TypeReference
          Identifier: 'TKind'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AbstractKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'AbstractKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AccessorKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'AccessorKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AsyncKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'AsyncKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ConstKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'ConstKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DeclareKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'DeclareKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DefaultKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'DefaultKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ExportKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'ExportKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' InKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'InKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PrivateKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'PrivateKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ProtectedKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'ProtectedKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PublicKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'PublicKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ReadonlyKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'ReadonlyKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OutKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'OutKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OverrideKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'OverrideKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' StaticKeyword'
    TypeReference
      Identifier: ' ModifierToken'
      TypeReference
        QualifiedName
          Identifier: 'SyntaxKind'
          Identifier: 'StaticKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Modifier'
    UnionType
      TypeReference
        Identifier: ' AbstractKeyword'
      TypeReference
        Identifier: ' AccessorKeyword'
      TypeReference
        Identifier: ' AsyncKeyword'
      TypeReference
        Identifier: ' ConstKeyword'
      TypeReference
        Identifier: ' DeclareKeyword'
      TypeReference
        Identifier: ' DefaultKeyword'
      TypeReference
        Identifier: ' ExportKeyword'
      TypeReference
        Identifier: ' InKeyword'
      TypeReference
        Identifier: ' PrivateKeyword'
      TypeReference
        Identifier: ' ProtectedKeyword'
      TypeReference
        Identifier: ' PublicKeyword'
      TypeReference
        Identifier: ' OutKeyword'
      TypeReference
        Identifier: ' OverrideKeyword'
      TypeReference
        Identifier: ' ReadonlyKeyword'
      TypeReference
        Identifier: ' StaticKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ModifierLike'
    UnionType
      TypeReference
        Identifier: ' Modifier'
      TypeReference
        Identifier: ' Decorator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AccessibilityModifier'
    UnionType
      TypeReference
        Identifier: ' PublicKeyword'
      TypeReference
        Identifier: ' PrivateKeyword'
      TypeReference
        Identifier: ' ProtectedKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ParameterPropertyModifier'
    UnionType
      TypeReference
        Identifier: ' AccessibilityModifier'
      TypeReference
        Identifier: ' ReadonlyKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ClassMemberModifier'
    UnionType
      TypeReference
        Identifier: ' AccessibilityModifier'
      TypeReference
        Identifier: ' ReadonlyKeyword'
      TypeReference
        Identifier: ' StaticKeyword'
      TypeReference
        Identifier: ' AccessorKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ModifiersArray'
    TypeReference
      Identifier: ' NodeArray'
      TypeReference
        Identifier: 'Modifier'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' GeneratedIdentifierFlags'
    EnumMember
      Identifier: '
    // Kinds
    None'
      NumericLiteral
    EnumMember
      Identifier: '                           // Not automatically generated.
    /** @internal */ Auto'
      NumericLiteral
    EnumMember
      Identifier: '             // Automatically generated identifier.
    /** @internal */ Loop'
      NumericLiteral
    EnumMember
      Identifier: '             // Automatically generated identifier with a preference for '_i'.
    /** @internal */ Unique'
      NumericLiteral
    EnumMember
      Identifier: '           // Unique name based on the 'text' property.
    /** @internal */ Node'
      NumericLiteral
    EnumMember
      Identifier: '             // Unique name based on the node in the 'original' property.
    /** @internal */ KindMask'
      NumericLiteral
    EnumMember
      Identifier: '         // Mask to extract the kind of identifier from its flags.

    // Flags
    ReservedInNestedScopes'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '    // Reserve the generated name in nested scopes
    Optimistic'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // First instance won't use '_#' if there's no conflict
    FileLevel'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                 // Use only the file identifiers list and not generated names to search for conflicts
    AllowNameSubstitution'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Identifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' escapedText'
      TypeReference
        Identifier: ' __String'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TransientIdentifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    resolvedSymbol'
      TypeReference
        Identifier: ' Symbol'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AutoGenerateInfo'
    PropertySignature
      Identifier: '
    flags'
      TypeReference
        Identifier: ' GeneratedIdentifierFlags'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' id'
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prefix'
      QuestionToken
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' GeneratedNamePart'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' suffix'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' GeneratedIdentifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' emitNode'
      IntersectionType
        TypeReference
          Identifier: ' EmitNode'
        TypeLiteral
          PropertySignature
            Identifier: ' autoGenerate'
            TypeReference
              Identifier: ' AutoGenerateInfo'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' QualifiedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'QualifiedName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' EntityName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' right'
      TypeReference
        Identifier: ' Identifier'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EntityName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' QualifiedName'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PropertyName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' StringLiteral'
      TypeReference
        Identifier: ' NoSubstitutionTemplateLiteral'
      TypeReference
        Identifier: ' NumericLiteral'
      TypeReference
        Identifier: ' ComputedPropertyName'
      TypeReference
        Identifier: ' PrivateIdentifier'
      TypeReference
        Identifier: ' BigIntLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MemberName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' PrivateIdentifier'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DeclarationName'
    UnionType
      TypeReference
        Identifier: ' PropertyName'
      TypeReference
        Identifier: ' JsxAttributeName'
      TypeReference
        Identifier: ' StringLiteralLike'
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' BindingPattern'
      TypeReference
        Identifier: ' EntityNameExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Declaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    _declarationBrand'
      AnyKeyword
    PropertySignature
      Identifier: '
    /** @internal */ symbol'
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: ' // Symbol declared by node (initialized by binding)
    /** @internal */ localSymbol'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NamedDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' DeclarationName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DynamicNamedDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' ComputedPropertyName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DynamicNamedBinaryExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BinaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' ElementAccessExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LateBoundDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DynamicNamedDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' LateBoundName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LateBoundBinaryExpressionDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DynamicNamedBinaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' LateBoundElementAccessExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LateBoundElementAccessExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ElementAccessExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' argumentExpression'
      TypeReference
        Identifier: ' EntityNameExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DeclarationStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' Statement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' StringLiteral'
        TypeReference
          Identifier: ' NumericLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ComputedPropertyName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ComputedPropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrivateIdentifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PrivateIdentifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' escapedText'
      TypeReference
        Identifier: ' __String'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' GeneratedPrivateIdentifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrivateIdentifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' emitNode'
      IntersectionType
        TypeReference
          Identifier: ' EmitNode'
        TypeLiteral
          PropertySignature
            Identifier: ' autoGenerate'
            TypeReference
              Identifier: ' AutoGenerateInfo'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LateBoundName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ComputedPropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' EntityNameExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Decorator'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Decorator'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' NamedDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeParameterDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeParameter'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' DeclarationWithTypeParameterChildren'
        TypeReference
          Identifier: ' InferTypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Modifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' constraint'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' default'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '

    // For error recovery purposes (see `isGrammarError` in utilities.ts).
    expression'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SignatureDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      IndexedAccessType
        TypeReference
          Identifier: ' SignatureDeclaration'
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TypeParameterDeclaration'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parameters'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ParameterDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /** @internal */ typeArguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SignatureDeclaration'
    UnionType
      TypeReference
        Identifier: ' CallSignatureDeclaration'
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
      TypeReference
        Identifier: ' MethodSignature'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
      TypeReference
        Identifier: ' FunctionTypeNode'
      TypeReference
        Identifier: ' ConstructorTypeNode'
      TypeReference
        Identifier: ' JSDocFunctionType'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' AccessorDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CallSignatureDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SignatureDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' TypeElement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CallSignature'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConstructSignatureDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SignatureDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' TypeElement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConstructSignature'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindingName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' BindingPattern'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' VariableDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'VariableDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' VariableDeclarationList'
        TypeReference
          Identifier: ' CatchClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' BindingName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exclamationToken'
      QuestionToken
      TypeReference
        Identifier: ' ExclamationToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' InitializedVariableDeclaration'
    IntersectionType
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' initializer'
          TypeReference
            Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' VariableDeclarationList'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'VariableDeclarationList'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' VariableStatement'
        TypeReference
          Identifier: ' ForStatement'
        TypeReference
          Identifier: ' ForOfStatement'
        TypeReference
          Identifier: ' ForInStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' declarations'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'VariableDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParameterDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Parameter'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' SignatureDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dotDotDotToken'
      QuestionToken
      TypeReference
        Identifier: ' DotDotDotToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' BindingName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      TypeReference
        Identifier: ' QuestionToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BindingElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BindingElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' BindingPattern'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' propertyName'
      QuestionToken
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dotDotDotToken'
      QuestionToken
      TypeReference
        Identifier: ' DotDotDotToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' BindingName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindingElementGrandparent'
    IndexedAccessType
      IndexedAccessType
        TypeReference
          Identifier: ' BindingElement'
        LiteralType
          StringLiteral
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PropertySignature'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PropertySignature'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' TypeLiteralNode'
        TypeReference
          Identifier: ' InterfaceDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Modifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      TypeReference
        Identifier: ' QuestionToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Expression'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PropertyDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PropertyDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ClassLikeDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      TypeReference
        Identifier: ' QuestionToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exclamationToken'
      QuestionToken
      TypeReference
        Identifier: ' ExclamationToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AutoAccessorPropertyDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDeclaration'
    PropertySignature
      Identifier: '
    _autoAccessorBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrivateIdentifierPropertyDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDeclaration'
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' PrivateIdentifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrivateIdentifierAutoAccessorPropertyDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' AutoAccessorPropertyDeclaration'
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' PrivateIdentifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrivateIdentifierMethodDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MethodDeclaration'
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' PrivateIdentifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrivateIdentifierGetAccessorDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' GetAccessorDeclaration'
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' PrivateIdentifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrivateIdentifierSetAccessorDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SetAccessorDeclaration'
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' PrivateIdentifier'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PrivateIdentifierAccessorDeclaration'
    UnionType
      TypeReference
        Identifier: ' PrivateIdentifierGetAccessorDeclaration'
      TypeReference
        Identifier: ' PrivateIdentifierSetAccessorDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PrivateClassElementDeclaration'
    UnionType
      TypeReference
        Identifier: ' PrivateIdentifierPropertyDeclaration'
      TypeReference
        Identifier: ' PrivateIdentifierAutoAccessorPropertyDeclaration'
      TypeReference
        Identifier: ' PrivateIdentifierMethodDeclaration'
      TypeReference
        Identifier: ' PrivateIdentifierGetAccessorDeclaration'
      TypeReference
        Identifier: ' PrivateIdentifierSetAccessorDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' InitializedPropertyDeclaration'
    IntersectionType
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' initializer'
          TypeReference
            Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ObjectLiteralElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
    PropertySignature
      Identifier: '
    _objectLiteralBrand'
      AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' PropertyName'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ObjectLiteralElementLike'
    UnionType
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
      TypeReference
        Identifier: ' SpreadAssignment'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' AccessorDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PropertyAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectLiteralElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PropertyAssignment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ModifierLike'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' QuestionToken'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exclamationToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ExclamationToken'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ShorthandPropertyAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectLiteralElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ShorthandPropertyAssignment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' equalsToken'
      QuestionToken
      TypeReference
        Identifier: ' EqualsToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' objectAssignmentInitializer'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ModifierLike'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' QuestionToken'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exclamationToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ExclamationToken'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SpreadAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectLiteralElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SpreadAssignment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' VariableLikeDeclaration'
    UnionType
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' BindingElement'
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' PropertySignature'
      TypeReference
        Identifier: ' JsxAttribute'
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
      TypeReference
        Identifier: ' EnumMember'
      TypeReference
        Identifier: ' JSDocPropertyTag'
      TypeReference
        Identifier: ' JSDocParameterTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ObjectBindingPattern'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ObjectBindingPattern'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' VariableDeclaration'
        TypeReference
          Identifier: ' ParameterDeclaration'
        TypeReference
          Identifier: ' BindingElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'BindingElement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ArrayBindingPattern'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ArrayBindingPattern'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' VariableDeclaration'
        TypeReference
          Identifier: ' ParameterDeclaration'
        TypeReference
          Identifier: ' BindingElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ArrayBindingElement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindingPattern'
    UnionType
      TypeReference
        Identifier: ' ObjectBindingPattern'
      TypeReference
        Identifier: ' ArrayBindingPattern'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ArrayBindingElement'
    UnionType
      TypeReference
        Identifier: ' BindingElement'
      TypeReference
        Identifier: ' OmittedExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FunctionLikeDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SignatureDeclarationBase'
    PropertySignature
      Identifier: '
    _functionLikeDeclarationBrand'
      AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' asteriskToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' AsteriskToken'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' QuestionToken'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exclamationToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ExclamationToken'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Block'
        TypeReference
          Identifier: ' Expression'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /** @internal */ endFlowNode'
      QuestionToken
      TypeReference
        Identifier: ' FlowNode'
    PropertySignature
      Identifier: '
    /** @internal */ returnFlowNode'
      QuestionToken
      TypeReference
        Identifier: ' FlowNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FunctionLikeDeclaration'
    UnionType
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' MethodDeclaration'
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
      TypeReference
        Identifier: ' ConstructorDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' ArrowFunction'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FunctionLike'
    TypeReference
      Identifier: ' SignatureDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FunctionDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FunctionDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      TypeReference
        Identifier: ' FunctionBody'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MethodSignature'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SignatureDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' TypeElement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MethodSignature'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' TypeLiteralNode'
        TypeReference
          Identifier: ' InterfaceDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Modifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PropertyName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MethodDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' ClassElement'
      ExpressionWithTypeArguments
        Identifier: ' ObjectLiteralElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MethodDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' ClassLikeDeclaration'
        TypeReference
          Identifier: ' ObjectLiteralExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ModifierLike'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' FunctionBody'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exclamationToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ExclamationToken'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConstructorDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' ClassElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Constructor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ClassLikeDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ModifierLike'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' FunctionBody'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeParameterDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SemicolonClassElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SemicolonClassElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ClassLikeDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' GetAccessorDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' ClassElement'
      ExpressionWithTypeArguments
        Identifier: ' TypeElement'
      ExpressionWithTypeArguments
        Identifier: ' ObjectLiteralElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GetAccessor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' ClassLikeDeclaration'
        TypeReference
          Identifier: ' ObjectLiteralExpression'
        TypeReference
          Identifier: ' TypeLiteralNode'
        TypeReference
          Identifier: ' InterfaceDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      TypeReference
        Identifier: ' FunctionBody'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TypeParameterDeclaration'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SetAccessorDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' ClassElement'
      ExpressionWithTypeArguments
        Identifier: ' TypeElement'
      ExpressionWithTypeArguments
        Identifier: ' ObjectLiteralElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SetAccessor'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' ClassLikeDeclaration'
        TypeReference
          Identifier: ' ObjectLiteralExpression'
        TypeReference
          Identifier: ' TypeLiteralNode'
        TypeReference
          Identifier: ' InterfaceDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      TypeReference
        Identifier: ' FunctionBody'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TypeParameterDeclaration'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AccessorDeclaration'
    UnionType
      TypeReference
        Identifier: ' GetAccessorDeclaration'
      TypeReference
        Identifier: ' SetAccessorDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IndexSignatureDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SignatureDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' ClassElement'
      ExpressionWithTypeArguments
        Identifier: ' TypeElement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IndexSignature'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ObjectTypeDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ClassStaticBlockDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassElement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ClassStaticBlockDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' ClassDeclaration'
        TypeReference
          Identifier: ' ClassExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      TypeReference
        Identifier: ' Block'
    PropertySignature
      Identifier: '

    /** @internal */ endFlowNode'
      QuestionToken
      TypeReference
        Identifier: ' FlowNode'
    PropertySignature
      Identifier: '
    /** @internal */ returnFlowNode'
      QuestionToken
      TypeReference
        Identifier: ' FlowNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ModifierLike'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    _typeNodeBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        Identifier: ' TypeNodeSyntaxKind'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' KeywordTypeNode'
    TypeParameter
      Identifier: 'TKind'
      TypeReference
        Identifier: ' KeywordTypeSyntaxKind'
      TypeReference
        Identifier: ' KeywordTypeSyntaxKind'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' KeywordToken'
        TypeReference
          Identifier: 'TKind'
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        Identifier: ' TKind'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportTypeAssertionContainer'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportTypeAssertionContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ImportTypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' assertClause'
      TypeReference
        Identifier: ' AssertClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' multiLine'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NodeWithTypeArguments'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isTypeOf'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' argument'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' assertions'
      QuestionToken
      TypeReference
        Identifier: ' ImportTypeAssertionContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' attributes'
      QuestionToken
      TypeReference
        Identifier: ' ImportAttributes'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' qualifier'
      QuestionToken
      TypeReference
        Identifier: ' EntityName'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LiteralImportTypeNode'
    IntersectionType
      TypeReference
        Identifier: ' ImportTypeNode'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' argument'
          IntersectionType
            TypeReference
              Identifier: ' LiteralTypeNode'
            TypeLiteral
              PropertySignature
                ReadonlyKeyword
                Identifier: ' literal'
                TypeReference
                  Identifier: ' StringLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ThisTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ThisType'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FunctionOrConstructorTypeNode'
    UnionType
      TypeReference
        Identifier: ' FunctionTypeNode'
      TypeReference
        Identifier: ' ConstructorTypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FunctionOrConstructorTypeNodeBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
      ExpressionWithTypeArguments
        Identifier: ' SignatureDeclarationBase'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'FunctionType'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'ConstructorType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FunctionTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionOrConstructorTypeNodeBase'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FunctionType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConstructorTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionOrConstructorTypeNodeBase'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConstructorType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Modifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NodeWithTypeArguments'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeArguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeReferenceType'
    UnionType
      TypeReference
        Identifier: ' TypeReferenceNode'
      TypeReference
        Identifier: ' ExpressionWithTypeArguments'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeReferenceNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NodeWithTypeArguments'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeReference'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeName'
      TypeReference
        Identifier: ' EntityName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypePredicateNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypePredicate'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' SignatureDeclaration'
        TypeReference
          Identifier: ' JSDocTypeExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' assertsModifier'
      QuestionToken
      TypeReference
        Identifier: ' AssertsKeyword'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parameterName'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' ThisTypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeQueryNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NodeWithTypeArguments'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeQuery'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exprName'
      TypeReference
        Identifier: ' EntityName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeLiteralNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeLiteral'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' members'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeElement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ArrayTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ArrayType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elementType'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TupleTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TupleType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elements'
      TypeReference
        Identifier: ' NodeArray'
        UnionType
          TypeReference
            Identifier: 'TypeNode'
          TypeReference
            Identifier: ' NamedTupleMember'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NamedTupleMember'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NamedTupleMember'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dotDotDotToken'
      QuestionToken
      TypeReference
        Identifier: ' Token'
        TypeReference
          QualifiedName
            Identifier: 'SyntaxKind'
            Identifier: 'DotDotDotToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      TypeReference
        Identifier: ' Token'
        TypeReference
          QualifiedName
            Identifier: 'SyntaxKind'
            Identifier: 'QuestionToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OptionalTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OptionalType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' RestTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'RestType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' UnionOrIntersectionTypeNode'
    UnionType
      TypeReference
        Identifier: ' UnionTypeNode'
      TypeReference
        Identifier: ' IntersectionTypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UnionTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UnionType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' types'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IntersectionTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IntersectionType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' types'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConditionalTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConditionalType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' checkType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' extendsType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' trueType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' falseType'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InferTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InferType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameter'
      TypeReference
        Identifier: ' TypeParameterDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParenthesizedTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ParenthesizedType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeOperatorNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeOperator'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operator'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'KeyOfKeyword'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'UniqueKeyword'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'ReadonlyKeyword'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UniqueTypeOperatorNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeOperatorNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operator'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'UniqueKeyword'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IndexedAccessTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IndexedAccessType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' objectType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' indexType'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MappedTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MappedType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' readonlyToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ReadonlyKeyword'
        TypeReference
          Identifier: ' PlusToken'
        TypeReference
          Identifier: ' MinusToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameter'
      TypeReference
        Identifier: ' TypeParameterDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' nameType'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' QuestionToken'
        TypeReference
          Identifier: ' PlusToken'
        TypeReference
          Identifier: ' MinusToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' members'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeElement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LiteralTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LiteralType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' literal'
      UnionType
        TypeReference
          Identifier: ' NullLiteral'
        TypeReference
          Identifier: ' BooleanLiteral'
        TypeReference
          Identifier: ' LiteralExpression'
        TypeReference
          Identifier: ' PrefixUnaryExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' StringLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralExpression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'StringLiteral'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' textSourceNode'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' StringLiteralLike'
        TypeReference
          Identifier: ' NumericLiteral'
        TypeReference
          Identifier: ' PrivateIdentifier'
        TypeReference
          Identifier: ' JsxNamespacedName'
        TypeReference
          Identifier: ' BigIntLiteral'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' singleQuote'
      QuestionToken
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' StringLiteralLike'
    UnionType
      TypeReference
        Identifier: ' StringLiteral'
      TypeReference
        Identifier: ' NoSubstitutionTemplateLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PropertyNameLiteral'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' StringLiteralLike'
      TypeReference
        Identifier: ' NumericLiteral'
      TypeReference
        Identifier: ' JsxNamespacedName'
      TypeReference
        Identifier: ' BigIntLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateLiteralTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateLiteralType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' head'
      TypeReference
        Identifier: ' TemplateHead'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' templateSpans'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TemplateLiteralTypeSpan'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateLiteralTypeSpan'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateLiteralTypeSpan'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' TemplateLiteralTypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' literal'
      UnionType
        TypeReference
          Identifier: ' TemplateMiddle'
        TypeReference
          Identifier: ' TemplateTail'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Expression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    _expressionBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' OmittedExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'OmittedExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PartiallyEmittedExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PartiallyEmittedExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UnaryExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    _unaryExpressionBrand'
      AnyKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' IncrementExpression'
    TypeReference
      Identifier: ' UpdateExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UpdateExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnaryExpression'
    PropertySignature
      Identifier: '
    _updateExpressionBrand'
      AnyKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PrefixUnaryOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PlusPlusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusMinusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PlusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TildeToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExclamationToken'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrefixUnaryExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UpdateExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PrefixUnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operator'
      TypeReference
        Identifier: ' PrefixUnaryOperator'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operand'
      TypeReference
        Identifier: ' UnaryExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PostfixUnaryOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PlusPlusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusMinusToken'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PostfixUnaryExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UpdateExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PostfixUnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operand'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operator'
      TypeReference
        Identifier: ' PostfixUnaryOperator'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LeftHandSideExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UpdateExpression'
    PropertySignature
      Identifier: '
    _leftHandSideExpressionBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MemberExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      Identifier: '
    _memberExpressionBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrimaryExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MemberExpression'
    PropertySignature
      Identifier: '
    _primaryExpressionBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NullLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NullKeyword'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TrueLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TrueKeyword'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FalseLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FalseKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BooleanLiteral'
    UnionType
      TypeReference
        Identifier: ' TrueLiteral'
      TypeReference
        Identifier: ' FalseLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ThisExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ThisKeyword'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SuperExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SuperKeyword'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportKeyword'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DeleteExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DeleteExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' UnaryExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeOfExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeOfExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' UnaryExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' VoidExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'VoidExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' UnaryExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AwaitExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AwaitExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' UnaryExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' YieldExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'YieldExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' asteriskToken'
      QuestionToken
      TypeReference
        Identifier: ' AsteriskToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SyntheticExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SyntheticExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isSpread'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tupleNameSource'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ParameterDeclaration'
        TypeReference
          Identifier: ' NamedTupleMember'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ExponentiationOperator'
    TypeReference
      QualifiedName
        Identifier: ' SyntaxKind'
        Identifier: 'AsteriskAsteriskToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MultiplicativeOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsteriskToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SlashToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PercentToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MultiplicativeOperatorOrHigher'
    UnionType
      TypeReference
        Identifier: ' ExponentiationOperator'
      TypeReference
        Identifier: ' MultiplicativeOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AdditiveOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PlusToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AdditiveOperatorOrHigher'
    UnionType
      TypeReference
        Identifier: ' MultiplicativeOperatorOrHigher'
      TypeReference
        Identifier: ' AdditiveOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ShiftOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanLessThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanGreaterThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanGreaterThanGreaterThanToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ShiftOperatorOrHigher'
    UnionType
      TypeReference
        Identifier: ' AdditiveOperatorOrHigher'
      TypeReference
        Identifier: ' ShiftOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' RelationalOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InstanceOfKeyword'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' RelationalOperatorOrHigher'
    UnionType
      TypeReference
        Identifier: ' ShiftOperatorOrHigher'
      TypeReference
        Identifier: ' RelationalOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EqualityOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EqualsEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EqualsEqualsEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExclamationEqualsEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExclamationEqualsToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EqualityOperatorOrHigher'
    UnionType
      TypeReference
        Identifier: ' RelationalOperatorOrHigher'
      TypeReference
        Identifier: ' EqualityOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BitwiseOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CaretToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BitwiseOperatorOrHigher'
    UnionType
      TypeReference
        Identifier: ' EqualityOperatorOrHigher'
      TypeReference
        Identifier: ' BitwiseOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LogicalOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandAmpersandToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarBarToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LogicalOperatorOrHigher'
    UnionType
      TypeReference
        Identifier: ' BitwiseOperatorOrHigher'
      TypeReference
        Identifier: ' LogicalOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CompoundAssignmentOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PlusEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsteriskAsteriskEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsteriskEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SlashEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PercentEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CaretEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LessThanLessThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanGreaterThanGreaterThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'GreaterThanGreaterThanEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarBarEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandAmpersandEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'QuestionQuestionEqualsToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssignmentOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EqualsToken'
      TypeReference
        Identifier: ' CompoundAssignmentOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssignmentOperatorOrHigher'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'QuestionQuestionToken'
      TypeReference
        Identifier: ' LogicalOperatorOrHigher'
      TypeReference
        Identifier: ' AssignmentOperator'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BinaryOperator'
    UnionType
      TypeReference
        Identifier: ' AssignmentOperatorOrHigher'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CommaToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LogicalOrCoalescingAssignmentOperator'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AmpersandAmpersandEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BarBarEqualsToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'QuestionQuestionEqualsToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BinaryOperatorToken'
    TypeReference
      Identifier: ' Token'
      TypeReference
        Identifier: 'BinaryOperator'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BinaryExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BinaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operatorToken'
      TypeReference
        Identifier: ' BinaryOperatorToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' right'
      TypeReference
        Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssignmentOperatorToken'
    TypeReference
      Identifier: ' Token'
      TypeReference
        Identifier: 'AssignmentOperator'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AssignmentExpression'
    TypeParameter
      Identifier: 'TOperator'
      TypeReference
        Identifier: ' AssignmentOperatorToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BinaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operatorToken'
      TypeReference
        Identifier: ' TOperator'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ObjectDestructuringAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' AssignmentExpression'
        TypeReference
          Identifier: 'EqualsToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ArrayDestructuringAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' AssignmentExpression'
        TypeReference
          Identifier: 'EqualsToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DestructuringAssignment'
    UnionType
      TypeReference
        Identifier: ' ObjectDestructuringAssignment'
      TypeReference
        Identifier: ' ArrayDestructuringAssignment'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindingOrAssignmentElement'
    UnionType
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' ObjectBindingOrAssignmentElement'
      TypeReference
        Identifier: ' ArrayBindingOrAssignmentElement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ObjectBindingOrAssignmentElement'
    UnionType
      TypeReference
        Identifier: ' BindingElement'
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
      TypeReference
        Identifier: ' SpreadAssignment'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ObjectAssignmentElement'
    TypeReference
      Identifier: ' Exclude'
      TypeReference
        Identifier: 'ObjectBindingOrAssignmentElement'
      TypeReference
        Identifier: ' BindingElement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ArrayBindingOrAssignmentElement'
    UnionType
      TypeReference
        Identifier: ' BindingElement'
      TypeReference
        Identifier: ' OmittedExpression'
      TypeReference
        Identifier: ' SpreadElement'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
      TypeReference
        Identifier: ' AssignmentExpression'
        TypeReference
          Identifier: 'EqualsToken'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' ElementAccessExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ArrayAssignmentElement'
    TypeReference
      Identifier: ' Exclude'
      TypeReference
        Identifier: 'ArrayBindingOrAssignmentElement'
      TypeReference
        Identifier: ' BindingElement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindingOrAssignmentElementRestIndicator'
    UnionType
      TypeReference
        Identifier: ' DotDotDotToken'
      TypeReference
        Identifier: ' SpreadElement'
      TypeReference
        Identifier: ' SpreadAssignment'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindingOrAssignmentElementTarget'
    UnionType
      TypeReference
        Identifier: ' BindingOrAssignmentPattern'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' OmittedExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssignmentElementTarget'
    TypeReference
      Identifier: ' Exclude'
      TypeReference
        Identifier: 'BindingOrAssignmentElementTarget'
      TypeReference
        Identifier: ' BindingPattern'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ObjectBindingOrAssignmentPattern'
    UnionType
      TypeReference
        Identifier: ' ObjectBindingPattern'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ArrayBindingOrAssignmentPattern'
    UnionType
      TypeReference
        Identifier: ' ArrayBindingPattern'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssignmentPattern'
    UnionType
      TypeReference
        Identifier: ' ObjectLiteralExpression'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindingOrAssignmentPattern'
    UnionType
      TypeReference
        Identifier: ' ObjectBindingOrAssignmentPattern'
      TypeReference
        Identifier: ' ArrayBindingOrAssignmentPattern'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConditionalExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ConditionalExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' condition'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      TypeReference
        Identifier: ' QuestionToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' whenTrue'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' colonToken'
      TypeReference
        Identifier: ' ColonToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' whenFalse'
      TypeReference
        Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FunctionBody'
    TypeReference
      Identifier: ' Block'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ConciseBody'
    UnionType
      TypeReference
        Identifier: ' FunctionBody'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FunctionExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' FunctionLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'FunctionExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Modifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      TypeReference
        Identifier: ' FunctionBody'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ArrowFunction'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
      ExpressionWithTypeArguments
        Identifier: ' FunctionLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ArrowFunction'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Modifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' equalsGreaterThanToken'
      TypeReference
        Identifier: ' EqualsGreaterThanToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      TypeReference
        Identifier: ' ConciseBody'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      NeverKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LiteralLikeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    text'
      StringKeyword
    PropertySignature
      Identifier: '
    isUnterminated'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    hasExtendedUnicodeEscape'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateLiteralLikeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralLikeNode'
    PropertySignature
      Identifier: '
    rawText'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    templateFlags'
      QuestionToken
      TypeReference
        Identifier: ' TokenFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LiteralExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralLikeNode'
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      Identifier: '
    _literalExpressionBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' RegularExpressionLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'RegularExpressionLiteral'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' RegularExpressionFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    HasIndices'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // d
    Global'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // g
    IgnoreCase'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // i
    Multiline'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // m
    DotAll'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // s
    Unicode'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // u
    UnicodeSets'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // v
    Sticky'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // y
    AnyUnicodeMode'
      BinaryExpression
        Identifier: ' Unicode'
        BarToken
        Identifier: ' UnicodeSets'
    EnumMember
      Identifier: '
    Modifiers'
      BinaryExpression
        BinaryExpression
          Identifier: ' IgnoreCase'
          BarToken
          Identifier: ' Multiline'
        BarToken
        Identifier: ' DotAll'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NoSubstitutionTemplateLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralExpression'
      ExpressionWithTypeArguments
        Identifier: ' TemplateLiteralLikeNode'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NoSubstitutionTemplateLiteral'
    PropertySignature
      Identifier: '
    /** @internal */
    templateFlags'
      QuestionToken
      TypeReference
        Identifier: ' TokenFlags'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' TokenFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */
    PrecedingLineBreak'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */
    PrecedingJSDocComment'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */
    Unterminated'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */
    ExtendedUnicodeEscape'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '     // e.g. `\u{10ffff}`
    Scientific'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // e.g. `10e2`
    Octal'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                     // e.g. `0777`
    HexSpecifier'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '              // e.g. `0x00000000`
    BinarySpecifier'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '           // e.g. `0b0110010000000000`
    OctalSpecifier'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '            // e.g. `0o777`
    /** @internal */
    ContainsSeparator'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // e.g. `0b1100_0101`
    /** @internal */
    UnicodeEscape'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '            // e.g. `\u00a0`
    /** @internal */
    ContainsInvalidEscape'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '    // e.g. `\uhello`
    /** @internal */
    HexEscape'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // e.g. `\xa0`
    /** @internal */
    ContainsLeadingZero'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '      // e.g. `0888`
    /** @internal */
    ContainsInvalidSeparator'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // e.g. `0_1`
    /** @internal */
    PrecedingJSDocLeadingAsterisks'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /** @internal */
    BinaryOrOctalSpecifier'
      BinaryExpression
        Identifier: ' BinarySpecifier'
        BarToken
        Identifier: ' OctalSpecifier'
    EnumMember
      Identifier: '
    /** @internal */
    WithSpecifier'
      BinaryExpression
        Identifier: ' HexSpecifier'
        BarToken
        Identifier: ' BinaryOrOctalSpecifier'
    EnumMember
      Identifier: '
    /** @internal */
    StringLiteralFlags'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' HexEscape'
            BarToken
            Identifier: ' UnicodeEscape'
          BarToken
          Identifier: ' ExtendedUnicodeEscape'
        BarToken
        Identifier: ' ContainsInvalidEscape'
    EnumMember
      Identifier: '
    /** @internal */
    NumericLiteralFlags'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                Identifier: ' Scientific'
                BarToken
                Identifier: ' Octal'
              BarToken
              Identifier: ' ContainsLeadingZero'
            BarToken
            Identifier: ' WithSpecifier'
          BarToken
          Identifier: ' ContainsSeparator'
        BarToken
        Identifier: ' ContainsInvalidSeparator'
    EnumMember
      Identifier: '
    /** @internal */
    TemplateLiteralLikeFlags'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' HexEscape'
            BarToken
            Identifier: ' UnicodeEscape'
          BarToken
          Identifier: ' ExtendedUnicodeEscape'
        BarToken
        Identifier: ' ContainsInvalidEscape'
    EnumMember
      Identifier: '
    /** @internal */
    IsInvalid'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' Octal'
            BarToken
            Identifier: ' ContainsLeadingZero'
          BarToken
          Identifier: ' ContainsInvalidSeparator'
        BarToken
        Identifier: ' ContainsInvalidEscape'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NumericLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralExpression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NumericLiteral'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' numericLiteralFlags'
      TypeReference
        Identifier: ' TokenFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BigIntLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BigIntLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LiteralToken'
    UnionType
      TypeReference
        Identifier: ' NumericLiteral'
      TypeReference
        Identifier: ' BigIntLiteral'
      TypeReference
        Identifier: ' StringLiteral'
      TypeReference
        Identifier: ' JsxText'
      TypeReference
        Identifier: ' RegularExpressionLiteral'
      TypeReference
        Identifier: ' NoSubstitutionTemplateLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateHead'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TemplateLiteralLikeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateHead'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' TemplateExpression'
        TypeReference
          Identifier: ' TemplateLiteralTypeNode'
    PropertySignature
      Identifier: '
    /** @internal */
    templateFlags'
      QuestionToken
      TypeReference
        Identifier: ' TokenFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateMiddle'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TemplateLiteralLikeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateMiddle'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' TemplateSpan'
        TypeReference
          Identifier: ' TemplateLiteralTypeSpan'
    PropertySignature
      Identifier: '
    /** @internal */
    templateFlags'
      QuestionToken
      TypeReference
        Identifier: ' TokenFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateTail'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TemplateLiteralLikeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateTail'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' TemplateSpan'
        TypeReference
          Identifier: ' TemplateLiteralTypeSpan'
    PropertySignature
      Identifier: '
    /** @internal */
    templateFlags'
      QuestionToken
      TypeReference
        Identifier: ' TokenFlags'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PseudoLiteralToken'
    UnionType
      TypeReference
        Identifier: ' TemplateHead'
      TypeReference
        Identifier: ' TemplateMiddle'
      TypeReference
        Identifier: ' TemplateTail'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TemplateLiteralToken'
    UnionType
      TypeReference
        Identifier: ' NoSubstitutionTemplateLiteral'
      TypeReference
        Identifier: ' PseudoLiteralToken'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' head'
      TypeReference
        Identifier: ' TemplateHead'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' templateSpans'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TemplateSpan'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TemplateLiteral'
    UnionType
      TypeReference
        Identifier: ' TemplateExpression'
      TypeReference
        Identifier: ' NoSubstitutionTemplateLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateSpan'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TemplateSpan'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' TemplateExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' literal'
      UnionType
        TypeReference
          Identifier: ' TemplateMiddle'
        TypeReference
          Identifier: ' TemplateTail'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParenthesizedExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ParenthesizedExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocTypeAssertion'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ParenthesizedExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' _jsDocTypeAssertionBrand'
      NeverKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ArrayLiteralExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ArrayLiteralExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Expression'
    PropertySignature
      Identifier: '
    /** @internal */
    multiLine'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SpreadElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SpreadElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' ArrayLiteralExpression'
        TypeReference
          Identifier: ' CallExpression'
        TypeReference
          Identifier: ' NewExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ObjectLiteralExpressionBase'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' ObjectLiteralElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' properties'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'T'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ObjectLiteralExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectLiteralExpressionBase'
        TypeReference
          Identifier: 'ObjectLiteralElementLike'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ObjectLiteralExpression'
    PropertySignature
      Identifier: '
    /** @internal */
    multiLine'
      QuestionToken
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EntityNameExpression'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' PropertyAccessEntityNameExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EntityNameOrEntityNameExpression'
    UnionType
      TypeReference
        Identifier: ' EntityName'
      TypeReference
        Identifier: ' EntityNameExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AccessExpression'
    UnionType
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' ElementAccessExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PropertyAccessExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MemberExpression'
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PropertyAccessExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionDotToken'
      QuestionToken
      TypeReference
        Identifier: ' QuestionDotToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' MemberName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrivateIdentifierPropertyAccessExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyAccessExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PrivateIdentifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PropertyAccessChain'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyAccessExpression'
    PropertySignature
      Identifier: '
    _optionalChainBrand'
      AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' MemberName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PropertyAccessChainRoot'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyAccessChain'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionDotToken'
      TypeReference
        Identifier: ' QuestionDotToken'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SuperPropertyAccessExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyAccessExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' SuperExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PropertyAccessEntityNameExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyAccessExpression'
    PropertySignature
      Identifier: '
    _propertyAccessExpressionLikeQualifiedNameBrand'
      QuestionToken
      AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' EntityNameExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ElementAccessExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MemberExpression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ElementAccessExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionDotToken'
      QuestionToken
      TypeReference
        Identifier: ' QuestionDotToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' argumentExpression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ElementAccessChain'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ElementAccessExpression'
    PropertySignature
      Identifier: '
    _optionalChainBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ElementAccessChainRoot'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ElementAccessChain'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionDotToken'
      TypeReference
        Identifier: ' QuestionDotToken'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SuperElementAccessExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ElementAccessExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' SuperExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SuperProperty'
    UnionType
      TypeReference
        Identifier: ' SuperPropertyAccessExpression'
      TypeReference
        Identifier: ' SuperElementAccessExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CallExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LeftHandSideExpression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CallExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionDotToken'
      QuestionToken
      TypeReference
        Identifier: ' QuestionDotToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeArguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' arguments'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CallChain'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CallExpression'
    PropertySignature
      Identifier: '
    _optionalChainBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CallChainRoot'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CallChain'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionDotToken'
      TypeReference
        Identifier: ' QuestionDotToken'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OptionalChain'
    UnionType
      TypeReference
        Identifier: ' PropertyAccessChain'
      TypeReference
        Identifier: ' ElementAccessChain'
      TypeReference
        Identifier: ' CallChain'
      TypeReference
        Identifier: ' NonNullChain'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OptionalChainRoot'
    UnionType
      TypeReference
        Identifier: ' PropertyAccessChainRoot'
      TypeReference
        Identifier: ' ElementAccessChainRoot'
      TypeReference
        Identifier: ' CallChainRoot'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindableObjectDefinePropertyCall'
    IntersectionType
      TypeReference
        Identifier: ' CallExpression'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' arguments'
          IntersectionType
            TypeOperator
              TupleType
                TypeReference
                  Identifier: 'BindableStaticNameExpression'
                UnionType
                  TypeReference
                    Identifier: ' StringLiteralLike'
                  TypeReference
                    Identifier: ' NumericLiteral'
                TypeReference
                  Identifier: ' ObjectLiteralExpression'
            TypeReference
              Identifier: ' Readonly'
              TypeReference
                Identifier: 'TextRange'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindableStaticNameExpression'
    UnionType
      TypeReference
        Identifier: ' EntityNameExpression'
      TypeReference
        Identifier: ' BindableStaticElementAccessExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LiteralLikeElementAccessExpression'
    IntersectionType
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' Declaration'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' argumentExpression'
          UnionType
            TypeReference
              Identifier: ' StringLiteralLike'
            TypeReference
              Identifier: ' NumericLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindableStaticElementAccessExpression'
    IntersectionType
      TypeReference
        Identifier: ' LiteralLikeElementAccessExpression'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' expression'
          TypeReference
            Identifier: ' BindableStaticNameExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindableElementAccessExpression'
    IntersectionType
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' expression'
          TypeReference
            Identifier: ' BindableStaticNameExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindableStaticAccessExpression'
    UnionType
      TypeReference
        Identifier: ' PropertyAccessEntityNameExpression'
      TypeReference
        Identifier: ' BindableStaticElementAccessExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindableAccessExpression'
    UnionType
      TypeReference
        Identifier: ' PropertyAccessEntityNameExpression'
      TypeReference
        Identifier: ' BindableElementAccessExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BindableStaticPropertyAssignmentExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BinaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' BindableStaticAccessExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BindablePropertyAssignmentExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BinaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      TypeReference
        Identifier: ' BindableAccessExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SuperCall'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CallExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' SuperExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportCall'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CallExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' ImportExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ExpressionWithTypeArguments'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MemberExpression'
      ExpressionWithTypeArguments
        Identifier: ' NodeWithTypeArguments'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExpressionWithTypeArguments'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NewExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NewExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeArguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' arguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TaggedTemplateExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MemberExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TaggedTemplateExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tag'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeArguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' template'
      TypeReference
        Identifier: ' TemplateLiteral'
    PropertySignature
      Identifier: '
    /** @internal */ questionDotToken'
      QuestionToken
      TypeReference
        Identifier: ' QuestionDotToken'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InstanceofExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BinaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operatorToken'
      TypeReference
        Identifier: ' Token'
        TypeReference
          QualifiedName
            Identifier: 'SyntaxKind'
            Identifier: 'InstanceOfKeyword'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CallLikeExpression'
    UnionType
      TypeReference
        Identifier: ' CallExpression'
      TypeReference
        Identifier: ' NewExpression'
      TypeReference
        Identifier: ' TaggedTemplateExpression'
      TypeReference
        Identifier: ' Decorator'
      TypeReference
        Identifier: ' JsxOpeningLikeElement'
      TypeReference
        Identifier: ' InstanceofExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AsExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'AsExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeAssertion'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeAssertionExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' UnaryExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SatisfiesExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SatisfiesExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssertionExpression'
    UnionType
      TypeReference
        Identifier: ' TypeAssertion'
      TypeReference
        Identifier: ' AsExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NonNullExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NonNullExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NonNullChain'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NonNullExpression'
    PropertySignature
      Identifier: '
    _optionalChainBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MetaProperty'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MetaProperty'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' keywordToken'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'NewKeyword'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'ImportKeyword'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportMetaProperty'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MetaProperty'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' keywordToken'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportKeyword'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      IntersectionType
        TypeReference
          Identifier: ' Identifier'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' escapedText'
            IntersectionType
              TypeReference
                Identifier: ' __String'
              LiteralType
                StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' openingElement'
      TypeReference
        Identifier: ' JsxOpeningElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' children'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'JsxChild'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' closingElement'
      TypeReference
        Identifier: ' JsxClosingElement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JsxOpeningLikeElement'
    UnionType
      TypeReference
        Identifier: ' JsxSelfClosingElement'
      TypeReference
        Identifier: ' JsxOpeningElement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JsxAttributeLike'
    UnionType
      TypeReference
        Identifier: ' JsxAttribute'
      TypeReference
        Identifier: ' JsxSpreadAttribute'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JsxAttributeName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' JsxNamespacedName'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JsxTagNameExpression'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' ThisExpression'
      TypeReference
        Identifier: ' JsxTagNamePropertyAccess'
      TypeReference
        Identifier: ' JsxNamespacedName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxTagNamePropertyAccess'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyAccessExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' ThisExpression'
        TypeReference
          Identifier: ' JsxTagNamePropertyAccess'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxAttributes'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' properties'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'JsxAttributeLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxAttributes'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JsxOpeningLikeElement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxNamespacedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxNamespacedName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' namespace'
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxOpeningElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxOpeningElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JsxElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tagName'
      TypeReference
        Identifier: ' JsxTagNameExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeArguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' attributes'
      TypeReference
        Identifier: ' JsxAttributes'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxSelfClosingElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxSelfClosingElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tagName'
      TypeReference
        Identifier: ' JsxTagNameExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeArguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' attributes'
      TypeReference
        Identifier: ' JsxAttributes'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxFragment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxFragment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' openingFragment'
      TypeReference
        Identifier: ' JsxOpeningFragment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' children'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'JsxChild'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' closingFragment'
      TypeReference
        Identifier: ' JsxClosingFragment'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxOpeningFragment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxOpeningFragment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JsxFragment'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxClosingFragment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxClosingFragment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JsxFragment'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxAttribute'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxAttribute'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JsxAttributes'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' JsxAttributeName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      QuestionToken
      TypeReference
        Identifier: ' JsxAttributeValue'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JsxAttributeValue'
    UnionType
      TypeReference
        Identifier: ' StringLiteral'
      TypeReference
        Identifier: ' JsxExpression'
      TypeReference
        Identifier: ' JsxElement'
      TypeReference
        Identifier: ' JsxSelfClosingElement'
      TypeReference
        Identifier: ' JsxFragment'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxSpreadAttribute'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectLiteralElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxSpreadAttribute'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JsxAttributes'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxClosingElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxClosingElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JsxElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tagName'
      TypeReference
        Identifier: ' JsxTagNameExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' JsxElement'
        TypeReference
          Identifier: ' JsxFragment'
        TypeReference
          Identifier: ' JsxAttributeLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dotDotDotToken'
      QuestionToken
      TypeReference
        Identifier: ' Token'
        TypeReference
          QualifiedName
            Identifier: 'SyntaxKind'
            Identifier: 'DotDotDotToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsxText'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralLikeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JsxText'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' JsxElement'
        TypeReference
          Identifier: ' JsxFragment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' containsOnlyTriviaWhiteSpaces'
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JsxChild'
    UnionType
      TypeReference
        Identifier: ' JsxText'
      TypeReference
        Identifier: ' JsxExpression'
      TypeReference
        Identifier: ' JsxElement'
      TypeReference
        Identifier: ' JsxSelfClosingElement'
      TypeReference
        Identifier: ' JsxFragment'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Statement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      Identifier: '
    _statementBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NotEmittedStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NotEmittedStatement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NotEmittedTypeElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeElement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NotEmittedTypeElement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommaListExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CommaListExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SyntheticReferenceExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SyntheticReferenceExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' thisArg'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmptyStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EmptyStatement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DebuggerStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DebuggerStatement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MissingDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MissingDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ModifierLike'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BlockLike'
    UnionType
      TypeReference
        Identifier: ' SourceFile'
      TypeReference
        Identifier: ' Block'
      TypeReference
        Identifier: ' ModuleBlock'
      TypeReference
        Identifier: ' CaseOrDefaultClause'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Block'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Block'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Statement'
    PropertySignature
      Identifier: '
    /** @internal */ multiLine'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' VariableStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'VariableStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' declarationList'
      TypeReference
        Identifier: ' VariableDeclarationList'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ExpressionStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExpressionStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrologueDirective'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ExpressionStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' StringLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IfStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'IfStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' thenStatement'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elseStatement'
      QuestionToken
      TypeReference
        Identifier: ' Statement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IterationStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statement'
      TypeReference
        Identifier: ' Statement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DoStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' IterationStatement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DoStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WhileStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' IterationStatement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'WhileStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ForInitializer'
    UnionType
      TypeReference
        Identifier: ' VariableDeclarationList'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ForStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' IterationStatement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ForStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      QuestionToken
      TypeReference
        Identifier: ' ForInitializer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' condition'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' incrementor'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ForInOrOfStatement'
    UnionType
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ForInStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' IterationStatement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ForInStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      TypeReference
        Identifier: ' ForInitializer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ForOfStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' IterationStatement'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ForOfStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' awaitModifier'
      QuestionToken
      TypeReference
        Identifier: ' AwaitKeyword'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      TypeReference
        Identifier: ' ForInitializer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BreakStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'BreakStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' label'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ContinueStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ContinueStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' label'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BreakOrContinueStatement'
    UnionType
      TypeReference
        Identifier: ' BreakStatement'
      TypeReference
        Identifier: ' ContinueStatement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReturnStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ReturnStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WithStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'WithStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statement'
      TypeReference
        Identifier: ' Statement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SwitchStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SwitchStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' caseBlock'
      TypeReference
        Identifier: ' CaseBlock'
    PropertySignature
      Identifier: '
    possiblyExhaustive'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CaseBlock'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CaseBlock'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' SwitchStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' clauses'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'CaseOrDefaultClause'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CaseClause'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CaseClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' CaseBlock'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Statement'
    PropertySignature
      Identifier: '
    /** @internal */ fallthroughFlowNode'
      QuestionToken
      TypeReference
        Identifier: ' FlowNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DefaultClause'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'DefaultClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' CaseBlock'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Statement'
    PropertySignature
      Identifier: '
    /** @internal */ fallthroughFlowNode'
      QuestionToken
      TypeReference
        Identifier: ' FlowNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CaseOrDefaultClause'
    UnionType
      TypeReference
        Identifier: ' CaseClause'
      TypeReference
        Identifier: ' DefaultClause'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LabeledStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'LabeledStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' label'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statement'
      TypeReference
        Identifier: ' Statement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ThrowStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ThrowStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TryStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
      ExpressionWithTypeArguments
        Identifier: ' FlowContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TryStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tryBlock'
      TypeReference
        Identifier: ' Block'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' catchClause'
      QuestionToken
      TypeReference
        Identifier: ' CatchClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' finallyBlock'
      QuestionToken
      TypeReference
        Identifier: ' Block'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CatchClause'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'CatchClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' TryStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' variableDeclaration'
      QuestionToken
      TypeReference
        Identifier: ' VariableDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' block'
      TypeReference
        Identifier: ' Block'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ObjectTypeDeclaration'
    UnionType
      TypeReference
        Identifier: ' ClassLikeDeclaration'
      TypeReference
        Identifier: ' InterfaceDeclaration'
      TypeReference
        Identifier: ' TypeLiteralNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DeclarationWithTypeParameters'
    UnionType
      TypeReference
        Identifier: ' DeclarationWithTypeParameterChildren'
      TypeReference
        Identifier: ' JSDocTypedefTag'
      TypeReference
        Identifier: ' JSDocCallbackTag'
      TypeReference
        Identifier: ' JSDocSignature'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DeclarationWithTypeParameterChildren'
    UnionType
      TypeReference
        Identifier: ' SignatureDeclaration'
      TypeReference
        Identifier: ' ClassLikeDeclaration'
      TypeReference
        Identifier: ' InterfaceDeclaration'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
      TypeReference
        Identifier: ' JSDocTemplateTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ClassLikeDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'ClassDeclaration'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'ClassExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeParameterDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' heritageClauses'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'HeritageClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' members'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ClassElement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ClassDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ClassDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ClassExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassLikeDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' PrimaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ClassExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ClassLikeDeclaration'
    UnionType
      TypeReference
        Identifier: ' ClassDeclaration'
      TypeReference
        Identifier: ' ClassExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ClassElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
    PropertySignature
      Identifier: '
    _classElementBrand'
      AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' PropertyName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
    PropertySignature
      Identifier: '
    _typeElementBrand'
      AnyKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' questionToken'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' QuestionToken'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InterfaceDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'InterfaceDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeParameterDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' heritageClauses'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'HeritageClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' members'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeElement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' HeritageClause'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'HeritageClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' InterfaceDeclaration'
        TypeReference
          Identifier: ' ClassLikeDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' token'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'ExtendsKeyword'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'ImplementsKeyword'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' types'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ExpressionWithTypeArguments'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeAliasDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'TypeAliasDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeParameterDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EnumMember'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EnumMember'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' EnumDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EnumDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'EnumDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' members'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'EnumMember'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ModuleName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' StringLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ModuleBody'
    UnionType
      TypeReference
        Identifier: ' NamespaceBody'
      TypeReference
        Identifier: ' JSDocNamespaceBody'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AmbientModuleDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ModuleDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      TypeReference
        Identifier: ' ModuleBlock'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ModuleDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ModuleDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' ModuleBody'
        TypeReference
          Identifier: ' SourceFile'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' ModuleName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ModuleBody'
        TypeReference
          Identifier: ' JSDocNamespaceDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' NamespaceBody'
    UnionType
      TypeReference
        Identifier: ' ModuleBlock'
      TypeReference
        Identifier: ' NamespaceDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NamespaceDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ModuleDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      TypeReference
        Identifier: ' NamespaceBody'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSDocNamespaceBody'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' JSDocNamespaceDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocNamespaceDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ModuleDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' body'
      QuestionToken
      TypeReference
        Identifier: ' JSDocNamespaceBody'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ModuleBlock'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
      ExpressionWithTypeArguments
        Identifier: ' Statement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ModuleBlock'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ModuleDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Statement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ModuleReference'
    UnionType
      TypeReference
        Identifier: ' EntityName'
      TypeReference
        Identifier: ' ExternalModuleReference'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportEqualsDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportEqualsDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        TypeReference
          Identifier: ' ModuleBlock'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isTypeOnly'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' moduleReference'
      TypeReference
        Identifier: ' ModuleReference'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ExternalModuleReference'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExternalModuleReference'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Statement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        TypeReference
          Identifier: ' ModuleBlock'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' importClause'
      QuestionToken
      TypeReference
        Identifier: ' ImportClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' moduleSpecifier'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' assertClause'
      QuestionToken
      TypeReference
        Identifier: ' AssertClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' attributes'
      QuestionToken
      TypeReference
        Identifier: ' ImportAttributes'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' NamedImportBindings'
    UnionType
      TypeReference
        Identifier: ' NamespaceImport'
      TypeReference
        Identifier: ' NamedImports'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' NamedExportBindings'
    UnionType
      TypeReference
        Identifier: ' NamespaceExport'
      TypeReference
        Identifier: ' NamedExports'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportClause'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' ImportDeclaration'
        TypeReference
          Identifier: ' JSDocImportTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isTypeOnly'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' namedBindings'
      QuestionToken
      TypeReference
        Identifier: ' NamedImportBindings'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AssertionKey'
    TypeReference
      Identifier: ' ImportAttributeName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AssertEntry'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ImportAttribute'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AssertClause'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ImportAttributes'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ImportAttributeName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' StringLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportAttribute'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportAttribute'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ImportAttributes'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' ImportAttributeName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' value'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportAttributes'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' token'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'WithKeyword'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'AssertKeyword'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportAttributes'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' ImportDeclaration'
        TypeReference
          Identifier: ' ExportDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ImportAttribute'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' multiLine'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NamespaceImport'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NamespaceImport'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ImportClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NamespaceExport'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NamespaceExport'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ExportDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' ModuleExportName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NamespaceExportDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NamespaceExportDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ModifierLike'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ExportDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExportDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        TypeReference
          Identifier: ' ModuleBlock'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isTypeOnly'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' exportClause'
      QuestionToken
      TypeReference
        Identifier: ' NamedExportBindings'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' moduleSpecifier'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' assertClause'
      QuestionToken
      TypeReference
        Identifier: ' AssertClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' attributes'
      QuestionToken
      TypeReference
        Identifier: ' ImportAttributes'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NamedImports'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NamedImports'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ImportClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ImportSpecifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NamedExports'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'NamedExports'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' ExportDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' elements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ExportSpecifier'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' NamedImportsOrExports'
    UnionType
      TypeReference
        Identifier: ' NamedImports'
      TypeReference
        Identifier: ' NamedExports'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ImportSpecifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ImportSpecifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' NamedImports'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' propertyName'
      QuestionToken
      TypeReference
        Identifier: ' ModuleExportName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isTypeOnly'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ExportSpecifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExportSpecifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' NamedExports'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isTypeOnly'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' propertyName'
      QuestionToken
      TypeReference
        Identifier: ' ModuleExportName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' ModuleExportName'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ModuleExportName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' StringLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ImportOrExportSpecifier'
    UnionType
      TypeReference
        Identifier: ' ImportSpecifier'
      TypeReference
        Identifier: ' ExportSpecifier'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeOnlyCompatibleAliasDeclaration'
    UnionType
      TypeReference
        Identifier: ' ImportClause'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
      TypeReference
        Identifier: ' NamespaceImport'
      TypeReference
        Identifier: ' ImportOrExportSpecifier'
      TypeReference
        Identifier: ' ExportDeclaration'
      TypeReference
        Identifier: ' NamespaceExport'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeOnlyImportDeclaration'
    UnionType
      IntersectionType
        TypeReference
          Identifier: ' ImportClause'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' isTypeOnly'
            LiteralType
              TrueKeyword
          PropertySignature
            ReadonlyKeyword
            Identifier: ' name'
            TypeReference
              Identifier: ' Identifier'
      IntersectionType
        TypeReference
          Identifier: ' ImportEqualsDeclaration'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' isTypeOnly'
            LiteralType
              TrueKeyword
      IntersectionType
        TypeReference
          Identifier: ' NamespaceImport'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' parent'
            IntersectionType
              TypeReference
                Identifier: ' ImportClause'
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' isTypeOnly'
                  LiteralType
                    TrueKeyword
      IntersectionType
        TypeReference
          Identifier: ' ImportSpecifier'
        ParenthesizedType
          UnionType
            TypeLiteral
              PropertySignature
                ReadonlyKeyword
                Identifier: ' isTypeOnly'
                LiteralType
                  TrueKeyword
            TypeLiteral
              PropertySignature
                ReadonlyKeyword
                Identifier: ' parent'
                IntersectionType
                  TypeReference
                    Identifier: ' NamedImports'
                  TypeLiteral
                    PropertySignature
                      ReadonlyKeyword
                      Identifier: ' parent'
                      IntersectionType
                        TypeReference
                          Identifier: ' ImportClause'
                        TypeLiteral
                          PropertySignature
                            ReadonlyKeyword
                            Identifier: ' isTypeOnly'
                            LiteralType
                              TrueKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeOnlyExportDeclaration'
    UnionType
      IntersectionType
        TypeReference
          Identifier: ' ExportSpecifier'
        ParenthesizedType
          UnionType
            TypeLiteral
              PropertySignature
                ReadonlyKeyword
                Identifier: ' isTypeOnly'
                LiteralType
                  TrueKeyword
            TypeLiteral
              PropertySignature
                ReadonlyKeyword
                Identifier: ' parent'
                IntersectionType
                  TypeReference
                    Identifier: ' NamedExports'
                  TypeLiteral
                    PropertySignature
                      ReadonlyKeyword
                      Identifier: ' parent'
                      IntersectionType
                        TypeReference
                          Identifier: ' ExportDeclaration'
                        TypeLiteral
                          PropertySignature
                            ReadonlyKeyword
                            Identifier: ' isTypeOnly'
                            LiteralType
                              TrueKeyword
      IntersectionType
        TypeReference
          Identifier: ' ExportDeclaration'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' isTypeOnly'
            LiteralType
              TrueKeyword
          PropertySignature
            ReadonlyKeyword
            Identifier: ' moduleSpecifier'
            TypeReference
              Identifier: ' Expression'
      IntersectionType
        TypeReference
          Identifier: ' NamespaceExport'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' parent'
            IntersectionType
              TypeReference
                Identifier: ' ExportDeclaration'
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' isTypeOnly'
                  LiteralType
                    TrueKeyword
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' moduleSpecifier'
                  TypeReference
                    Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeOnlyAliasDeclaration'
    UnionType
      TypeReference
        Identifier: ' TypeOnlyImportDeclaration'
      TypeReference
        Identifier: ' TypeOnlyExportDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ExportAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DeclarationStatement'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'ExportAssignment'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' SourceFile'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' modifiers'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'ModifierLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isExportEquals'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FileReference'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TextRange'
    PropertySignature
      Identifier: '
    fileName'
      StringKeyword
    PropertySignature
      Identifier: '
    resolutionMode'
      QuestionToken
      TypeReference
        Identifier: ' ResolutionMode'
    PropertySignature
      Identifier: '
    preserve'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CheckJsDirective'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TextRange'
    PropertySignature
      Identifier: '
    enabled'
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CommentKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SingleLineCommentTrivia'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MultiLineCommentTrivia'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommentRange'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TextRange'
    PropertySignature
      Identifier: '
    hasTrailingNewLine'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        Identifier: ' CommentKind'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SynthesizedComment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommentRange'
    PropertySignature
      Identifier: '
    text'
      StringKeyword
    PropertySignature
      Identifier: '
    pos'
      LiteralType
        PrefixUnaryExpression
          NumericLiteral
    PropertySignature
      Identifier: '
    end'
      LiteralType
        PrefixUnaryExpression
          NumericLiteral
    PropertySignature
      Identifier: '
    hasLeadingNewline'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocTypeExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocTypeExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocNameReference'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocNameReference'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      UnionType
        TypeReference
          Identifier: ' EntityName'
        TypeReference
          Identifier: ' JSDocMemberName'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocMemberName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocMemberName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' left'
      UnionType
        TypeReference
          Identifier: ' EntityName'
        TypeReference
          Identifier: ' JSDocMemberName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' right'
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    _jsDocTypeBrand'
      AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocAllType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocAllType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocUnknownType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocUnknownType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocNonNullableType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocNonNullableType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' postfix'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocNullableType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocNullableType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' postfix'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocOptionalType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocOptionalType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocFunctionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
      ExpressionWithTypeArguments
        Identifier: ' SignatureDeclarationBase'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocFunctionType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocVariadicType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocVariadicType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocNamepathType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocNamepathType'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      TypeReference
        Identifier: ' TypeNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSDocTypeReferencingNode'
    UnionType
      TypeReference
        Identifier: ' JSDocVariadicType'
      TypeReference
        Identifier: ' JSDocOptionalType'
      TypeReference
        Identifier: ' JSDocNullableType'
      TypeReference
        Identifier: ' JSDocNonNullableType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDoc'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDoc'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' HasJSDoc'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tags'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' comment'
      QuestionToken
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'JSDocComment'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      UnionType
        TypeReference
          Identifier: ' JSDoc'
        TypeReference
          Identifier: ' JSDocTypeLiteral'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' tagName'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' comment'
      QuestionToken
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'JSDocComment'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocLink'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocLink'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' EntityName'
        TypeReference
          Identifier: ' JSDocMemberName'
    PropertySignature
      Identifier: '
    text'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocLinkCode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocLinkCode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' EntityName'
        TypeReference
          Identifier: ' JSDocMemberName'
    PropertySignature
      Identifier: '
    text'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocLinkPlain'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocLinkPlain'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' EntityName'
        TypeReference
          Identifier: ' JSDocMemberName'
    PropertySignature
      Identifier: '
    text'
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JSDocComment'
    UnionType
      TypeReference
        Identifier: ' JSDocText'
      TypeReference
        Identifier: ' JSDocLink'
      TypeReference
        Identifier: ' JSDocLinkCode'
      TypeReference
        Identifier: ' JSDocLinkPlain'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocText'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocText'
    PropertySignature
      Identifier: '
    text'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocUnknownTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocAugmentsTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocAugmentsTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' class'
      IntersectionType
        TypeReference
          Identifier: ' ExpressionWithTypeArguments'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' expression'
            UnionType
              TypeReference
                Identifier: ' Identifier'
              TypeReference
                Identifier: ' PropertyAccessEntityNameExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocImplementsTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocImplementsTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' class'
      IntersectionType
        TypeReference
          Identifier: ' ExpressionWithTypeArguments'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' expression'
            UnionType
              TypeReference
                Identifier: ' Identifier'
              TypeReference
                Identifier: ' PropertyAccessEntityNameExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocAuthorTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocAuthorTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocDeprecatedTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocDeprecatedTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocClassTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocClassTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocPublicTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocPublicTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocPrivateTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocPrivateTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocProtectedTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocProtectedTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocReadonlyTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocReadonlyTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocOverrideTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocOverrideTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocEnumTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocEnumTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JSDoc'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      TypeReference
        Identifier: ' JSDocTypeExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocThisTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocThisTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      TypeReference
        Identifier: ' JSDocTypeExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocTemplateTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocTemplateTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' constraint'
      UnionType
        TypeReference
          Identifier: ' JSDocTypeExpression'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeParameterDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocSeeTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocSeeTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' JSDocNameReference'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocReturnTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocReturnTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      QuestionToken
      TypeReference
        Identifier: ' JSDocTypeExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocTypeTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocTypeTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      TypeReference
        Identifier: ' JSDocTypeExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocTypedefTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocTypedefTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JSDoc'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' fullName'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSDocNamespaceDeclaration'
        TypeReference
          Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSDocTypeExpression'
        TypeReference
          Identifier: ' JSDocTypeLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocCallbackTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
      ExpressionWithTypeArguments
        Identifier: ' NamedDeclaration'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocCallbackTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JSDoc'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' fullName'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' JSDocNamespaceDeclaration'
        TypeReference
          Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      TypeReference
        Identifier: ' JSDocSignature'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocOverloadTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocOverloadTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JSDoc'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      TypeReference
        Identifier: ' JSDocSignature'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocThrowsTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocThrowsTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      QuestionToken
      TypeReference
        Identifier: ' JSDocTypeExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocSignature'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
      ExpressionWithTypeArguments
        Identifier: ' JSDocContainer'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocSignature'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeParameters'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' JSDocTemplateTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parameters'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' JSDocParameterTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' type'
      UnionType
        TypeReference
          Identifier: ' JSDocReturnTag'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocPropertyLikeTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JSDoc'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      TypeReference
        Identifier: ' EntityName'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      QuestionToken
      TypeReference
        Identifier: ' JSDocTypeExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isNameFirst'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isBracketed'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocPropertyTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocPropertyLikeTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocPropertyTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocParameterTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocPropertyLikeTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocParameterTag'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocTypeLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocType'
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocTypeLiteral'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' jsDocPropertyTags'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' JSDocPropertyLikeTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' isArrayType'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocSatisfiesTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocSatisfiesTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' typeExpression'
      TypeReference
        Identifier: ' JSDocTypeExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocSatisfiesExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ParenthesizedExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' _jsDocSatisfiesExpressionBrand'
      NeverKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JSDocImportTag'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JSDocTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'JSDocImportTag'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parent'
      TypeReference
        Identifier: ' JSDoc'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' importClause'
      QuestionToken
      TypeReference
        Identifier: ' ImportClause'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' moduleSpecifier'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' attributes'
      QuestionToken
      TypeReference
        Identifier: ' ImportAttributes'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' FlowFlags'
    EnumMember
      Identifier: '
    Unreachable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Unreachable code
    Start'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Start of flow graph
    BranchLabel'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Non-looping junction
    LoopLabel'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Looping junction
    Assignment'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Assignment
    TrueCondition'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Condition known to be true
    FalseCondition'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Condition known to be false
    SwitchClause'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Switch statement clause
    ArrayMutation'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Potential array mutation
    Call'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Potential assertion call
    ReduceLabel'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Temporarily reduce antecedents of label
    Referenced'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Referenced as antecedent once
    Shared'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Referenced as antecedent more than once

    Label'
      BinaryExpression
        Identifier: ' BranchLabel'
        BarToken
        Identifier: ' LoopLabel'
    EnumMember
      Identifier: '
    Condition'
      BinaryExpression
        Identifier: ' TrueCondition'
        BarToken
        Identifier: ' FalseCondition'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FlowNode'
    UnionType
      TypeReference
        Identifier: ' FlowUnreachable'
      TypeReference
        Identifier: ' FlowStart'
      TypeReference
        Identifier: ' FlowLabel'
      TypeReference
        Identifier: ' FlowAssignment'
      TypeReference
        Identifier: ' FlowCondition'
      TypeReference
        Identifier: ' FlowSwitchClause'
      TypeReference
        Identifier: ' FlowArrayMutation'
      TypeReference
        Identifier: ' FlowCall'
      TypeReference
        Identifier: ' FlowReduceLabel'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    flags'
      TypeReference
        Identifier: ' FlowFlags'
    PropertySignature
      Identifier: '
    id'
      NumberKeyword
    PropertySignature
      Identifier: ' // Node id used by flow type cache in checker
    node'
      UnknownKeyword
    PropertySignature
      Identifier: ' // Node or other data
    antecedent'
      UnionType
        TypeReference
          Identifier: ' FlowNode'
        ArrayType
          TypeReference
            Identifier: ' FlowNode'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowUnreachable'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      UndefinedKeyword
    PropertySignature
      Identifier: '
    antecedent'
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowStart'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      UnionType
        TypeReference
          Identifier: ' FunctionExpression'
        TypeReference
          Identifier: ' ArrowFunction'
        TypeReference
          Identifier: ' MethodDeclaration'
        TypeReference
          Identifier: ' GetAccessorDeclaration'
        TypeReference
          Identifier: ' SetAccessorDeclaration'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    antecedent'
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowLabel'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      UndefinedKeyword
    PropertySignature
      Identifier: '
    antecedent'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' FlowNode'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      UnionType
        TypeReference
          Identifier: ' Expression'
        TypeReference
          Identifier: ' VariableDeclaration'
        TypeReference
          Identifier: ' BindingElement'
    PropertySignature
      Identifier: '
    antecedent'
      TypeReference
        Identifier: ' FlowNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowCall'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      TypeReference
        Identifier: ' CallExpression'
    PropertySignature
      Identifier: '
    antecedent'
      TypeReference
        Identifier: ' FlowNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowCondition'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    antecedent'
      TypeReference
        Identifier: ' FlowNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowSwitchClause'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      TypeReference
        Identifier: ' FlowSwitchClauseData'
    PropertySignature
      Identifier: '
    antecedent'
      TypeReference
        Identifier: ' FlowNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowSwitchClauseData'
    PropertySignature
      Identifier: '
    switchStatement'
      TypeReference
        Identifier: ' SwitchStatement'
    PropertySignature
      Identifier: '
    clauseStart'
      NumberKeyword
    PropertySignature
      Identifier: ' // Start index of case/default clause range
    clauseEnd'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowArrayMutation'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      UnionType
        TypeReference
          Identifier: ' CallExpression'
        TypeReference
          Identifier: ' BinaryExpression'
    PropertySignature
      Identifier: '
    antecedent'
      TypeReference
        Identifier: ' FlowNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowReduceLabel'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FlowNodeBase'
    PropertySignature
      Identifier: '
    node'
      TypeReference
        Identifier: ' FlowReduceLabelData'
    PropertySignature
      Identifier: '
    antecedent'
      TypeReference
        Identifier: ' FlowNode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FlowReduceLabelData'
    PropertySignature
      Identifier: '
    target'
      TypeReference
        Identifier: ' FlowLabel'
    PropertySignature
      Identifier: '
    antecedents'
      ArrayType
        TypeReference
          Identifier: ' FlowNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FlowType'
    UnionType
      TypeReference
        Identifier: ' Type'
      TypeReference
        Identifier: ' IncompleteType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IncompleteType'
    PropertySignature
      Identifier: '
    flags'
      UnionType
        TypeReference
          Identifier: ' TypeFlags'
        LiteralType
          NumericLiteral
    PropertySignature
      Identifier: '  // No flags set
    type'
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AmdDependency'
    PropertySignature
      Identifier: '
    path'
      StringKeyword
    PropertySignature
      Identifier: '
    name'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceFileLike'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' text'
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    lineMap'
      QuestionToken
      TypeOperator
        ArrayType
          NumberKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getPositionOfLineAndCharacter'
      QuestionToken
      Parameter
        Identifier: 'line'
        NumberKeyword
      Parameter
        Identifier: ' character'
        NumberKeyword
      Parameter
        Identifier: ' allowEdits'
        QuestionToken
        LiteralType
          TrueKeyword
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FutureSourceFile'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' path'
      TypeReference
        Identifier: ' Path'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' fileName'
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' impliedNodeFormat'
      QuestionToken
      TypeReference
        Identifier: ' ResolutionMode'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' packageJsonScope'
      QuestionToken
      TypeReference
        Identifier: ' PackageJsonInfo'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' externalModuleIndicator'
      QuestionToken
      UnionType
        LiteralType
          TrueKeyword
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' commonJsModuleIndicator'
      QuestionToken
      UnionType
        LiteralType
          TrueKeyword
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statements'
      TypeOperator
        ArrayType
          NeverKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' imports'
      TypeOperator
        ArrayType
          NeverKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' RedirectInfo'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' redirectTarget'
      TypeReference
        Identifier: ' SourceFile'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' unredirected'
      TypeReference
        Identifier: ' SourceFile'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ResolutionMode'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' ModuleKind'
          Identifier: 'ESNext'
      TypeReference
        QualifiedName
          Identifier: ' ModuleKind'
          Identifier: 'CommonJS'
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceFile'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Declaration'
      ExpressionWithTypeArguments
        Identifier: ' LocalsContainer'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SourceFile'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Statement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' endOfFileToken'
      TypeReference
        Identifier: ' Token'
        TypeReference
          QualifiedName
            Identifier: 'SyntaxKind'
            Identifier: 'EndOfFileToken'
    PropertySignature
      Identifier: '

    fileName'
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ path'
      TypeReference
        Identifier: ' Path'
    PropertySignature
      Identifier: '
    text'
      StringKeyword
    PropertySignature
      Identifier: '
    /** Resolved path can be different from path property,
     * when file is included through project reference is mapped to its output instead of source
     * in that case resolvedPath = path to output file
     * path = input file's path
     *
     * @internal
     */
    resolvedPath'
      TypeReference
        Identifier: ' Path'
    PropertySignature
      Identifier: '
    /** Original file name that can be different from fileName,
     * when file is included through project reference is mapped to its output instead of source
     * in that case originalFileName = name of input file
     * fileName = output file's name
     *
     * @internal
     */
    originalFileName'
      StringKeyword
    PropertySignature
      Identifier: '

    /**
     * If two source files are for the same version of the same package, one will redirect to the other.
     * (See `createRedirectSourceFile` in program.ts.)
     * The redirect will have this set. The redirected-to source file will be in `redirectTargetsMap`.
     *
     * @internal
     */
    redirectInfo'
      QuestionToken
      TypeReference
        Identifier: ' RedirectInfo'
    PropertySignature
      Identifier: '

    amdDependencies'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' AmdDependency'
    PropertySignature
      Identifier: '
    moduleName'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    referencedFiles'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    typeReferenceDirectives'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    libReferenceDirectives'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    languageVariant'
      TypeReference
        Identifier: ' LanguageVariant'
    PropertySignature
      Identifier: '
    isDeclarationFile'
      BooleanKeyword
    PropertySignature
      Identifier: '

    // this map is used by transpiler to supply alternative names for dependencies (i.e. in case of bundling)
    /** @internal */
    renamedDependencies'
      QuestionToken
      TypeReference
        Identifier: ' ReadonlyMap'
        StringKeyword
        StringKeyword
    PropertySignature
      Identifier: '

    /**
     * lib.d.ts should have a reference comment like
     *
     *  /// <reference no-default-lib="true"/>
     *
     * If any other file has this comment, it signals not to include lib.d.ts
     * because this containing file is intended to act as a default library.
     */
    hasNoDefaultLib'
      BooleanKeyword
    PropertySignature
      Identifier: '

    languageVersion'
      TypeReference
        Identifier: ' ScriptTarget'
    PropertySignature
      Identifier: '

    /**
     * When `module` is `Node16` or `NodeNext`, this field controls whether the
     * source file in question is an ESNext-output-format file, or a CommonJS-output-format
     * module. This is derived by the module resolver as it looks up the file, since
     * it is derived from either the file extension of the module, or the containing
     * `package.json` context, and affects both checking and emit.
     *
     * It is _public_ so that (pre)transformers can set this field,
     * since it switches the builtin `node` module transform. Generally speaking, if unset,
     * the field is treated as though it is `ModuleKind.CommonJS`.
     *
     * Note that this field is only set by the module resolution process when
     * `moduleResolution` is `Node16` or `NodeNext`, which is implied by the `module` setting
     * of `Node16` or `NodeNext`, respectively, but may be overriden (eg, by a `moduleResolution`
     * of `node`). If so, this field will be unset and source files will be considered to be
     * CommonJS-output-format by the node module transformer and type checker, regardless of extension or context.
     */
    impliedNodeFormat'
      QuestionToken
      TypeReference
        Identifier: ' ResolutionMode'
    PropertySignature
      Identifier: '
    /** @internal */ packageJsonLocations'
      QuestionToken
      TypeOperator
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ packageJsonScope'
      QuestionToken
      TypeReference
        Identifier: ' PackageJsonInfo'
    PropertySignature
      Identifier: '

    /** @internal */ scriptKind'
      TypeReference
        Identifier: ' ScriptKind'
    PropertySignature
      Identifier: '

    /**
     * The first "most obvious" node that makes a file an external module.
     * This is intended to be the first top-level import/export,
     * but could be arbitrarily nested (e.g. `import.meta`).
     *
     * @internal
     */
    externalModuleIndicator'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Node'
        LiteralType
          TrueKeyword
    PropertySignature
      Identifier: '
    /**
     * The callback used to set the external module indicator - this is saved to
     * be later reused during incremental reparsing, which otherwise lacks the information
     * to set this field
     *
     * @internal
     */
    setExternalModuleIndicator'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'file'
          TypeReference
            Identifier: ' SourceFile'
        VoidKeyword
    PropertySignature
      Identifier: '
    // The first node that causes this file to be a CommonJS module
    /** @internal */ commonJsModuleIndicator'
      QuestionToken
      TypeReference
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    // JS identifier-declarations that are intended to merge with globals
    /** @internal */ jsGlobalAugmentations'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: '

    /** @internal */ identifiers'
      TypeReference
        Identifier: ' ReadonlyMap'
        StringKeyword
        StringKeyword
    PropertySignature
      Identifier: ' // Map from a string to an interned string
    /** @internal */ nodeCount'
      NumberKeyword
    PropertySignature
      Identifier: '
    /** @internal */ identifierCount'
      NumberKeyword
    PropertySignature
      Identifier: '
    /** @internal */ symbolCount'
      NumberKeyword
    PropertySignature
      Identifier: '

    // File-level diagnostics reported by the parser (includes diagnostics about /// references
    // as well as code diagnostics).
    /** @internal */ parseDiagnostics'
      ArrayType
        TypeReference
          Identifier: ' DiagnosticWithLocation'
    PropertySignature
      Identifier: '

    // File-level diagnostics reported by the binder.
    /** @internal */ bindDiagnostics'
      ArrayType
        TypeReference
          Identifier: ' DiagnosticWithLocation'
    PropertySignature
      Identifier: '
    /** @internal */ bindSuggestionDiagnostics'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' DiagnosticWithLocation'
    PropertySignature
      Identifier: '

    // File-level JSDoc diagnostics reported by the JSDoc parser
    /** @internal */ jsDocDiagnostics'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' DiagnosticWithLocation'
    PropertySignature
      Identifier: '

    // Stores additional file-level diagnostics reported by the program
    /** @internal */ additionalSyntacticDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' DiagnosticWithLocation'
    PropertySignature
      Identifier: '

    // Stores a line map for the file.
    // This field should never be used directly to obtain line map, use getLineMap function instead.
    /** @internal */ lineMap'
      TypeOperator
        ArrayType
          NumberKeyword
    PropertySignature
      Identifier: '
    /** @internal */ classifiableNames'
      QuestionToken
      TypeReference
        Identifier: ' ReadonlySet'
        TypeReference
          Identifier: '__String'
    PropertySignature
      Identifier: '
    // Comments containing @ts-* directives, in order.
    /** @internal */ commentDirectives'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' CommentDirective'
    PropertySignature
      Identifier: '
    /** @internal */ imports'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' StringLiteralLike'
    PropertySignature
      Identifier: '
    // Identifier only if `declare global`
    /** @internal */ moduleAugmentations'
      TypeOperator
        ArrayType
          ParenthesizedType
            UnionType
              TypeReference
                Identifier: 'StringLiteral'
              TypeReference
                Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    /** @internal */ patternAmbientModules'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' PatternAmbientModule'
    PropertySignature
      Identifier: '
    /** @internal */ ambientModuleNames'
      TypeOperator
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ checkJsDirective'
      QuestionToken
      TypeReference
        Identifier: ' CheckJsDirective'
    PropertySignature
      Identifier: '
    /** @internal */ version'
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ pragmas'
      TypeReference
        Identifier: ' ReadonlyPragmaMap'
    PropertySignature
      Identifier: '
    /** @internal */ localJsxNamespace'
      QuestionToken
      TypeReference
        Identifier: ' __String'
    PropertySignature
      Identifier: '
    /** @internal */ localJsxFragmentNamespace'
      QuestionToken
      TypeReference
        Identifier: ' __String'
    PropertySignature
      Identifier: '
    /** @internal */ localJsxFactory'
      QuestionToken
      TypeReference
        Identifier: ' EntityName'
    PropertySignature
      Identifier: '
    /** @internal */ localJsxFragmentFactory'
      QuestionToken
      TypeReference
        Identifier: ' EntityName'
    PropertySignature
      Identifier: '

    /** @internal */ endFlowNode'
      QuestionToken
      TypeReference
        Identifier: ' FlowNode'
    PropertySignature
      Identifier: '

    /** @internal */ jsDocParsingMode'
      QuestionToken
      TypeReference
        Identifier: ' JSDocParsingMode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReadonlyPragmaContext'
    PropertySignature
      Identifier: '
    languageVersion'
      TypeReference
        Identifier: ' ScriptTarget'
    PropertySignature
      Identifier: '
    pragmas'
      QuestionToken
      TypeReference
        Identifier: ' ReadonlyPragmaMap'
    PropertySignature
      Identifier: '
    checkJsDirective'
      QuestionToken
      TypeReference
        Identifier: ' CheckJsDirective'
    PropertySignature
      Identifier: '
    referencedFiles'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    typeReferenceDirectives'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    libReferenceDirectives'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    amdDependencies'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' AmdDependency'
    PropertySignature
      Identifier: '
    hasNoDefaultLib'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    moduleName'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PragmaContext'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ReadonlyPragmaContext'
    PropertySignature
      Identifier: '
    pragmas'
      QuestionToken
      TypeReference
        Identifier: ' PragmaMap'
    PropertySignature
      Identifier: '
    referencedFiles'
      ArrayType
        TypeReference
          Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    typeReferenceDirectives'
      ArrayType
        TypeReference
          Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    libReferenceDirectives'
      ArrayType
        TypeReference
          Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    amdDependencies'
      ArrayType
        TypeReference
          Identifier: ' AmdDependency'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceFile'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ReadonlyPragmaContext'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommentDirective'
    PropertySignature
      Identifier: '
    range'
      TypeReference
        Identifier: ' TextRange'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' CommentDirectiveType'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' CommentDirectiveType'
    EnumMember
      Identifier: '
    ExpectError'
    EnumMember
      Identifier: '
    Ignore'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Bundle'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'Bundle'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' sourceFiles'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' SourceFile'
    PropertySignature
      Identifier: '
    /** @internal */ syntheticFileReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    /** @internal */ syntheticTypeReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    /** @internal */ syntheticLibReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' FileReference'
    PropertySignature
      Identifier: '
    /** @internal */ hasNoDefaultLib'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsonSourceFile'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SourceFile'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' statements'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'JsonObjectExpressionStatement'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TsConfigSourceFile'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' JsonSourceFile'
    PropertySignature
      Identifier: '
    extendedSourceFiles'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ configFileSpecs'
      QuestionToken
      TypeReference
        Identifier: ' ConfigFileSpecs'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsonMinusNumericLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PrefixUnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'PrefixUnaryExpression'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operator'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'MinusToken'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' operand'
      TypeReference
        Identifier: ' NumericLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' JsonObjectExpression'
    UnionType
      TypeReference
        Identifier: ' ObjectLiteralExpression'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
      TypeReference
        Identifier: ' JsonMinusNumericLiteral'
      TypeReference
        Identifier: ' NumericLiteral'
      TypeReference
        Identifier: ' StringLiteral'
      TypeReference
        Identifier: ' BooleanLiteral'
      TypeReference
        Identifier: ' NullLiteral'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' JsonObjectExpressionStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ExpressionStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' expression'
      TypeReference
        Identifier: ' JsonObjectExpression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ScriptReferenceHost'
    MethodSignature
      Identifier: '
    getCompilerOptions'
      TypeReference
        Identifier: ' CompilerOptions'
    MethodSignature
      Identifier: '
    getSourceFile'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getSourceFileByPath'
      Parameter
        Identifier: 'path'
        TypeReference
          Identifier: ' Path'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParseConfigHost'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ModuleResolutionHost'
    PropertySignature
      Identifier: '
    useCaseSensitiveFileNames'
      BooleanKeyword
    MethodSignature
      Identifier: '

    readDirectory'
      Parameter
        Identifier: 'rootDir'
        StringKeyword
      Parameter
        Identifier: ' extensions'
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' excludes'
        UnionType
          TypeOperator
            ArrayType
              StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' includes'
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' depth'
        QuestionToken
        NumberKeyword
      TypeOperator
        ArrayType
          StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets a value indicating whether the specified path exists and is a file.
     * @param path The path to test.
     */
    fileExists'
      Parameter
        Identifier: 'path'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    readFile'
      Parameter
        Identifier: 'path'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    trace'
      QuestionToken
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ResolvedConfigFileName'
    IntersectionType
      StringKeyword
      TypeLiteral
        PropertySignature
          Identifier: ' _isResolvedConfigFileName'
          NeverKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WriteFileCallbackData'
    PropertySignature
      Identifier: '
    /** @internal */ sourceMapUrlPos'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '
    /** @internal */ buildInfo'
      QuestionToken
      TypeReference
        Identifier: ' BuildInfo'
    PropertySignature
      Identifier: '
    /** @internal */ diagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' DiagnosticWithLocation'
    PropertySignature
      Identifier: '
    /** @internal */ differsOnlyInMap'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    /** @internal */ skippedDtsWrite'
      QuestionToken
      LiteralType
        TrueKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' WriteFileCallback'
    FunctionType
      Parameter
        Identifier: '
    fileName'
        StringKeyword
      Parameter
        Identifier: '
    text'
        StringKeyword
      Parameter
        Identifier: '
    writeByteOrderMark'
        BooleanKeyword
      Parameter
        Identifier: '
    onError'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'message'
            StringKeyword
          VoidKeyword
      Parameter
        Identifier: '
    sourceFiles'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' SourceFile'
      Parameter
        Identifier: '
    data'
        QuestionToken
        TypeReference
          Identifier: ' WriteFileCallbackData'
      VoidKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' OperationCanceledException'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CancellationToken'
    MethodSignature
      Identifier: '
    isCancellationRequested'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /** @throws OperationCanceledException if isCancellationRequested is true */
    throwIfCancellationRequested'
      VoidKeyword
  EnumDeclaration
    ExportKeyword
    Identifier: ' FileIncludeKind'
    EnumMember
      Identifier: '
    RootFile'
    EnumMember
      Identifier: '
    SourceFromProjectReference'
    EnumMember
      Identifier: '
    OutputFromProjectReference'
    EnumMember
      Identifier: '
    Import'
    EnumMember
      Identifier: '
    ReferenceFile'
    EnumMember
      Identifier: '
    TypeReferenceDirective'
    EnumMember
      Identifier: '
    LibFile'
    EnumMember
      Identifier: '
    LibReferenceDirective'
    EnumMember
      Identifier: '
    AutomaticTypeDirectiveFile'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' RootFile'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'RootFile'
    PropertySignature
      Identifier: '
    index'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LibFile'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'LibFile'
    PropertySignature
      Identifier: '
    index'
      QuestionToken
      NumberKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ProjectReferenceFileKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'SourceFromProjectReference'
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'OutputFromProjectReference'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectReferenceFile'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        Identifier: ' ProjectReferenceFileKind'
    PropertySignature
      Identifier: '
    index'
      NumberKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ReferencedFileKind'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'Import'
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'ReferenceFile'
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'TypeReferenceDirective'
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'LibReferenceDirective'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReferencedFile'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        Identifier: ' ReferencedFileKind'
    PropertySignature
      Identifier: '
    file'
      TypeReference
        Identifier: ' Path'
    PropertySignature
      Identifier: '
    index'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AutomaticTypeDirectiveFile'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' FileIncludeKind'
          Identifier: 'AutomaticTypeDirectiveFile'
    PropertySignature
      Identifier: '
    typeReference'
      StringKeyword
    PropertySignature
      Identifier: '
    packageId'
      UnionType
        TypeReference
          Identifier: ' PackageId'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FileIncludeReason'
    UnionType
      TypeReference
        Identifier: ' RootFile'
      TypeReference
        Identifier: ' LibFile'
      TypeReference
        Identifier: ' ProjectReferenceFile'
      TypeReference
        Identifier: ' ReferencedFile'
      TypeReference
        Identifier: ' AutomaticTypeDirectiveFile'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' FilePreprocessingDiagnosticsKind'
    EnumMember
      Identifier: '
    FilePreprocessingLibReferenceDiagnostic'
    EnumMember
      Identifier: '
    FilePreprocessingFileExplainingDiagnostic'
    EnumMember
      Identifier: '
    ResolutionDiagnostics'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FilePreprocessingLibReferenceDiagnostic'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' FilePreprocessingDiagnosticsKind'
          Identifier: 'FilePreprocessingLibReferenceDiagnostic'
    PropertySignature
      Identifier: '
    reason'
      IntersectionType
        TypeReference
          Identifier: ' ReferencedFile'
        TypeLiteral
          PropertySignature
            Identifier: ' kind'
            TypeReference
              QualifiedName
                Identifier: ' FileIncludeKind'
                Identifier: 'LibReferenceDirective'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FilePreprocessingFileExplainingDiagnostic'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' FilePreprocessingDiagnosticsKind'
          Identifier: 'FilePreprocessingFileExplainingDiagnostic'
    PropertySignature
      Identifier: '
    file'
      UnionType
        TypeReference
          Identifier: ' Path'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    fileProcessingReason'
      TypeReference
        Identifier: ' FileIncludeReason'
    PropertySignature
      Identifier: '
    diagnostic'
      TypeReference
        Identifier: ' DiagnosticMessage'
    PropertySignature
      Identifier: '
    args'
      TypeReference
        Identifier: ' DiagnosticArguments'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolutionDiagnostics'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' FilePreprocessingDiagnosticsKind'
          Identifier: 'ResolutionDiagnostics'
    PropertySignature
      Identifier: '
    diagnostics'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' FilePreprocessingDiagnostics'
    UnionType
      TypeReference
        Identifier: ' FilePreprocessingLibReferenceDiagnostic'
      TypeReference
        Identifier: ' FilePreprocessingFileExplainingDiagnostic'
      TypeReference
        Identifier: ' ResolutionDiagnostics'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' EmitOnly'
    EnumMember
      Identifier: '
    Js'
    EnumMember
      Identifier: '
    Dts'
    EnumMember
      Identifier: '
    BuilderSignature'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LibResolution'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' ResolvedModuleWithFailedLookupLocations'
      TypeReference
        Identifier: ' ResolvedModuleWithFailedLookupLocations'
    PropertySignature
      Identifier: '
    resolution'
      TypeReference
        Identifier: ' T'
    PropertySignature
      Identifier: '
    actual'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Program'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ScriptReferenceHost'
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Get a list of root file names that were passed to a 'createProgram'
     */
    getRootFileNames'
      TypeOperator
        ArrayType
          StringKeyword
    MethodSignature
      Identifier: '

    /**
     * Get a list of files in the program
     */
    getSourceFiles'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' SourceFile'
    MethodSignature
      Identifier: '

    /**
     * Get a list of file names that were passed to 'createProgram' or referenced in a
     * program source file but could not be located.
     *
     * @internal
     */
    getMissingFilePaths'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'Path'
        StringKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getModuleResolutionCache'
      UnionType
        TypeReference
          Identifier: ' ModuleResolutionCache'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getFilesByNameMap'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'Path'
        UnionType
          TypeReference
            Identifier: ' SourceFile'
          LiteralType
            FalseKeyword
          UndefinedKeyword
    PropertySignature
      Identifier: '

    /** @internal */
    resolvedModules'
      UnionType
        TypeReference
          Identifier: ' Map'
          TypeReference
            Identifier: 'Path'
          TypeReference
            Identifier: ' ModeAwareCache'
            TypeReference
              Identifier: 'ResolvedModuleWithFailedLookupLocations'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedTypeReferenceDirectiveNames'
      UnionType
        TypeReference
          Identifier: ' Map'
          TypeReference
            Identifier: 'Path'
          TypeReference
            Identifier: ' ModeAwareCache'
            TypeReference
              Identifier: 'ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getResolvedModule'
      Parameter
        Identifier: 'f'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' moduleName'
        StringKeyword
      Parameter
        Identifier: ' mode'
        TypeReference
          Identifier: ' ResolutionMode'
      UnionType
        TypeReference
          Identifier: ' ResolvedModuleWithFailedLookupLocations'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getResolvedModuleFromModuleSpecifier'
      Parameter
        Identifier: 'moduleSpecifier'
        TypeReference
          Identifier: ' StringLiteralLike'
      Parameter
        Identifier: ' sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      UnionType
        TypeReference
          Identifier: ' ResolvedModuleWithFailedLookupLocations'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getResolvedTypeReferenceDirective'
      Parameter
        Identifier: 'f'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' typeDirectiveName'
        StringKeyword
      Parameter
        Identifier: ' mode'
        TypeReference
          Identifier: ' ResolutionMode'
      UnionType
        TypeReference
          Identifier: ' ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    getResolvedTypeReferenceDirectiveFromTypeReferenceDirective'
      Parameter
        Identifier: 'typedRef'
        TypeReference
          Identifier: ' FileReference'
      Parameter
        Identifier: ' sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      UnionType
        TypeReference
          Identifier: ' ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    forEachResolvedModule'
      Parameter
        Identifier: '
        callback'
        FunctionType
          Parameter
            Identifier: 'resolution'
            TypeReference
              Identifier: ' ResolvedModuleWithFailedLookupLocations'
          Parameter
            Identifier: ' moduleName'
            StringKeyword
          Parameter
            Identifier: ' mode'
            TypeReference
              Identifier: ' ResolutionMode'
          Parameter
            Identifier: ' filePath'
            TypeReference
              Identifier: ' Path'
          VoidKeyword
      Parameter
        Identifier: '
        file'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    forEachResolvedTypeReferenceDirective'
      Parameter
        Identifier: '
        callback'
        FunctionType
          Parameter
            Identifier: 'resolution'
            TypeReference
              Identifier: ' ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
          Parameter
            Identifier: ' moduleName'
            StringKeyword
          Parameter
            Identifier: ' mode'
            TypeReference
              Identifier: ' ResolutionMode'
          Parameter
            Identifier: ' filePath'
            TypeReference
              Identifier: ' Path'
          VoidKeyword
      Parameter
        Identifier: '
        file'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Emits the JavaScript and declaration files.  If targetSourceFile is not specified, then
     * the JavaScript and declaration files will be produced for all the files in this program.
     * If targetSourceFile is specified, then only the JavaScript and declaration for that
     * specific file will be generated.
     *
     * If writeFile is not specified then the writeFile callback from the compiler host will be
     * used for writing the JavaScript and declaration files.  Otherwise, the writeFile parameter
     * will be invoked when writing the JavaScript and declaration files.
     */
    emit'
      Parameter
        Identifier: 'targetSourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' writeFile'
        QuestionToken
        TypeReference
          Identifier: ' WriteFileCallback'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      Parameter
        Identifier: ' emitOnlyDtsFiles'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' customTransformers'
        QuestionToken
        TypeReference
          Identifier: ' CustomTransformers'
      TypeReference
        Identifier: ' EmitResult'
    MethodSignature
      Identifier: '
    /** @internal */
    emit'
      Parameter
        Identifier: 'targetSourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' writeFile'
        QuestionToken
        TypeReference
          Identifier: ' WriteFileCallback'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      Parameter
        Identifier: ' emitOnly'
        QuestionToken
        UnionType
          BooleanKeyword
          TypeReference
            Identifier: ' EmitOnly'
      Parameter
        Identifier: ' customTransformers'
        QuestionToken
        TypeReference
          Identifier: ' CustomTransformers'
      Parameter
        Identifier: ' forceDtsEmit'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' skipBuildInfo'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' EmitResult'
    MethodSignature
      Identifier: '

    getOptionsDiagnostics'
      Parameter
        Identifier: 'cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    getGlobalDiagnostics'
      Parameter
        Identifier: 'cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    getSyntacticDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' DiagnosticWithLocation'
    MethodSignature
      Identifier: '
    /** The first time this is called, it will return global diagnostics (no location). */
    getSemanticDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /** @internal */
    getSemanticDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        UnionType
          TypeReference
            Identifier: ' SourceFile'
          UndefinedKeyword
      Parameter
        Identifier: ' cancellationToken'
        UnionType
          TypeReference
            Identifier: ' CancellationToken'
          UndefinedKeyword
      Parameter
        Identifier: ' nodesToCheck'
        ArrayType
          TypeReference
            Identifier: ' Node'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '

    getDeclarationDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' DiagnosticWithLocation'
    MethodSignature
      Identifier: '
    getConfigFileParsingDiagnostics'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /** @internal */ getSuggestionDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' DiagnosticWithLocation'
    MethodSignature
      Identifier: '

    /** @internal */ getBindAndCheckDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /** @internal */ getProgramDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '

    /**
     * Gets a type checker that can be used to semantically analyze source files in the program.
     */
    getTypeChecker'
      TypeReference
        Identifier: ' TypeChecker'
    MethodSignature
      Identifier: '

    /** @internal */ getCommonSourceDirectory'
      StringKeyword
    MethodSignature
      Identifier: '

    /** @internal */ getCachedSemanticDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Diagnostic'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /** @internal */ getClassifiableNames'
      TypeReference
        Identifier: ' Set'
        TypeReference
          Identifier: '__String'
    MethodSignature
      Identifier: '

    getNodeCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    getIdentifierCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    getSymbolCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    getTypeCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    getInstantiationCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    getRelationCacheSizes'
      TypeLiteral
        PropertySignature
          Identifier: ' assignable'
          NumberKeyword
        PropertySignature
          Identifier: ' identity'
          NumberKeyword
        PropertySignature
          Identifier: ' subtype'
          NumberKeyword
        PropertySignature
          Identifier: ' strictSubtype'
          NumberKeyword
    MethodSignature
      Identifier: '

    /** @internal */ getFileProcessingDiagnostics'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' FilePreprocessingDiagnostics'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getAutomaticTypeDirectiveNames'
      ArrayType
        StringKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getAutomaticTypeDirectiveResolutions'
      TypeReference
        Identifier: ' ModeAwareCache'
        TypeReference
          Identifier: 'ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
    MethodSignature
      Identifier: '
    isSourceFileFromExternalLibrary'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isSourceFileDefaultLibrary'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Calculates the final resolution mode for a given module reference node. This function only returns a result when module resolution
     * settings allow differing resolution between ESM imports and CJS requires, or when a mode is explicitly provided via import attributes,
     * which cause an `import` or `require` condition to be used during resolution regardless of module resolution settings. In absence of
     * overriding attributes, and in modes that support differing resolution, the result indicates the syntax the usage would emit to JavaScript.
     * Some examples:
     *
     * ```ts
     * // tsc foo.mts --module nodenext
     * import {} from "mod";
     * // Result: ESNext - the import emits as ESM due to `impliedNodeFormat` set by .mts file extension
     *
     * // tsc foo.cts --module nodenext
     * import {} from "mod";
     * // Result: CommonJS - the import emits as CJS due to `impliedNodeFormat` set by .cts file extension
     *
     * // tsc foo.ts --module preserve --moduleResolution bundler
     * import {} from "mod";
     * // Result: ESNext - the import emits as ESM due to `--module preserve` and `--moduleResolution bundler`
     * // supports conditional imports/exports
     *
     * // tsc foo.ts --module preserve --moduleResolution node10
     * import {} from "mod";
     * // Result: undefined - the import emits as ESM due to `--module preserve`, but `--moduleResolution node10`
     * // does not support conditional imports/exports
     *
     * // tsc foo.ts --module commonjs --moduleResolution node10
     * import type {} from "mod" with { "resolution-mode": "import" };
     * // Result: ESNext - conditional imports/exports always supported with "resolution-mode" attribute
     * ```
     */
    getModeForUsageLocation'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' usage'
        TypeReference
          Identifier: ' StringLiteralLike'
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    /**
     * Calculates the final resolution mode for an import at some index within a file's `imports` list. This function only returns a result
     * when module resolution settings allow differing resolution between ESM imports and CJS requires, or when a mode is explicitly provided
     * via import attributes, which cause an `import` or `require` condition to be used during resolution regardless of module resolution
     * settings. In absence of overriding attributes, and in modes that support differing resolution, the result indicates the syntax the
     * usage would emit to JavaScript. Some examples:
     *
     * ```ts
     * // tsc foo.mts --module nodenext
     * import {} from "mod";
     * // Result: ESNext - the import emits as ESM due to `impliedNodeFormat` set by .mts file extension
     *
     * // tsc foo.cts --module nodenext
     * import {} from "mod";
     * // Result: CommonJS - the import emits as CJS due to `impliedNodeFormat` set by .cts file extension
     *
     * // tsc foo.ts --module preserve --moduleResolution bundler
     * import {} from "mod";
     * // Result: ESNext - the import emits as ESM due to `--module preserve` and `--moduleResolution bundler`
     * // supports conditional imports/exports
     *
     * // tsc foo.ts --module preserve --moduleResolution node10
     * import {} from "mod";
     * // Result: undefined - the import emits as ESM due to `--module preserve`, but `--moduleResolution node10`
     * // does not support conditional imports/exports
     *
     * // tsc foo.ts --module commonjs --moduleResolution node10
     * import type {} from "mod" with { "resolution-mode": "import" };
     * // Result: ESNext - conditional imports/exports always supported with "resolution-mode" attribute
     * ```
     */
    getModeForResolutionAtIndex'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' index'
        NumberKeyword
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    /**
     * @internal
     * The resolution mode to use for module resolution or module specifier resolution
     * outside the context of an existing module reference, where
     * `program.getModeForUsageLocation` should be used instead.
     */
    getDefaultResolutionModeForFile'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    /** @internal */ getImpliedNodeFormatForEmit'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    /** @internal */ getEmitModuleFormatOfFile'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' ModuleKind'
    MethodSignature
      Identifier: '
    /** @internal */ shouldTransformImportCall'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' structureIsReused'
      TypeReference
        Identifier: ' StructureIsReused'
    MethodSignature
      Identifier: '

    /** @internal */ getSourceFileFromReference'
      Parameter
        Identifier: 'referencingFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' ref'
        TypeReference
          Identifier: ' FileReference'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getLibFileFromReference'
      Parameter
        Identifier: 'ref'
        TypeReference
          Identifier: ' FileReference'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    PropertySignature
      Identifier: '

    /**
     * Given a source file, get the name of the package it was imported from.
     *
     * @internal
     */
    sourceFileToPackageName'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'Path'
        StringKeyword
    PropertySignature
      Identifier: '
    /**
     * Set of all source files that some other source file redirects to.
     *
     * @internal
     */
    redirectTargetsMap'
      TypeReference
        Identifier: ' MultiMap'
        TypeReference
          Identifier: 'Path'
        StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' usesUriStyleNodeCoreModules'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Map from libFileName to actual resolved location of the lib
     * @internal
     */
    resolvedLibReferences'
      UnionType
        TypeReference
          Identifier: ' Map'
          StringKeyword
          TypeReference
            Identifier: ' LibResolution'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getCurrentPackagesMap'
      UnionType
        TypeReference
          Identifier: ' Map'
          StringKeyword
          BooleanKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Is the file emitted file
     *
     * @internal
     */
    isEmittedFile'
      Parameter
        Identifier: 'file'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getFileIncludeReasons'
      TypeReference
        Identifier: ' MultiMap'
        TypeReference
          Identifier: 'Path'
        TypeReference
          Identifier: ' FileIncludeReason'
    MethodSignature
      Identifier: '
    /** @internal */ useCaseSensitiveFileNames'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ getCanonicalFileName'
      TypeReference
        Identifier: ' GetCanonicalFileName'
    MethodSignature
      Identifier: '

    getProjectReferences'
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ProjectReference'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getResolvedProjectReferences'
      UnionType
        TypeOperator
          ArrayType
            ParenthesizedType
              UnionType
                TypeReference
                  Identifier: 'ResolvedProjectReference'
                UndefinedKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getProjectReferenceRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * @internal
     * Get the referenced project if the file is input file from that reference project
     */
    getResolvedProjectReferenceToRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' ResolvedProjectReference'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ forEachResolvedProjectReference'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'cb'
        FunctionType
          Parameter
            Identifier: 'resolvedProjectReference'
            TypeReference
              Identifier: ' ResolvedProjectReference'
          UnionType
            TypeReference
              Identifier: ' T'
            UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' T'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getResolvedProjectReferenceByPath'
      Parameter
        Identifier: 'projectReferencePath'
        TypeReference
          Identifier: ' Path'
      UnionType
        TypeReference
          Identifier: ' ResolvedProjectReference'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getRedirectReferenceForResolutionFromSourceOfProject'
      Parameter
        Identifier: 'filePath'
        TypeReference
          Identifier: ' Path'
      UnionType
        TypeReference
          Identifier: ' ResolvedProjectReference'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ isSourceOfProjectReferenceRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getCompilerOptionsForFile'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' CompilerOptions'
    MethodSignature
      Identifier: '
    /** @internal */ getBuildInfo'
      QuestionToken
      TypeReference
        Identifier: ' BuildInfo'
    MethodSignature
      Identifier: '
    /** @internal */ emitBuildInfo'
      Parameter
        Identifier: 'writeFile'
        QuestionToken
        TypeReference
          Identifier: ' WriteFileCallback'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeReference
        Identifier: ' EmitResult'
    MethodSignature
      Identifier: '
    /**
     * This implementation handles file exists to be true if file is source of project reference redirect when program is created using useSourceOfProjectReferenceRedirect
     *
     * @internal
     */
    fileExists'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Call compilerHost.writeFile on host program was created with
     *
     * @internal
     */
    writeFile'
      TypeReference
        Identifier: ' WriteFileCallback'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Program'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeCheckerHost'
      ExpressionWithTypeArguments
        Identifier: ' ModuleSpecifierResolutionHost'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' RedirectTargetsMap'
    TypeReference
      Identifier: ' ReadonlyMap'
      TypeReference
        Identifier: 'Path'
      TypeOperator
        ArrayType
          StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolvedProjectReference'
    PropertySignature
      Identifier: '
    commandLine'
      TypeReference
        Identifier: ' ParsedCommandLine'
    PropertySignature
      Identifier: '
    sourceFile'
      TypeReference
        Identifier: ' SourceFile'
    PropertySignature
      Identifier: '
    references'
      QuestionToken
      TypeOperator
        ArrayType
          ParenthesizedType
            UnionType
              TypeReference
                Identifier: 'ResolvedProjectReference'
              UndefinedKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' StructureIsReused'
    EnumMember
      Identifier: '
    Not'
    EnumMember
      Identifier: '
    SafeModules'
    EnumMember
      Identifier: '
    Completely'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CustomTransformerFactory'
    FunctionType
      Parameter
        Identifier: 'context'
        TypeReference
          Identifier: ' TransformationContext'
      TypeReference
        Identifier: ' CustomTransformer'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CustomTransformer'
    MethodSignature
      Identifier: '
    transformSourceFile'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' SourceFile'
    MethodSignature
      Identifier: '
    transformBundle'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Bundle'
      TypeReference
        Identifier: ' Bundle'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CustomTransformers'
    PropertySignature
      Identifier: '
    /** Custom transformers to evaluate before built-in .js transformations. */
    before'
      QuestionToken
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'TransformerFactory'
              TypeReference
                Identifier: 'SourceFile'
            TypeReference
              Identifier: ' CustomTransformerFactory'
    PropertySignature
      Identifier: '
    /** Custom transformers to evaluate after built-in .js transformations. */
    after'
      QuestionToken
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'TransformerFactory'
              TypeReference
                Identifier: 'SourceFile'
            TypeReference
              Identifier: ' CustomTransformerFactory'
    PropertySignature
      Identifier: '
    /** Custom transformers to evaluate after built-in .d.ts transformations. */
    afterDeclarations'
      QuestionToken
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'TransformerFactory'
              UnionType
                TypeReference
                  Identifier: 'Bundle'
                TypeReference
                  Identifier: ' SourceFile'
            TypeReference
              Identifier: ' CustomTransformerFactory'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmitTransformers'
    PropertySignature
      Identifier: '
    scriptTransformers'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' TransformerFactory'
            UnionType
              TypeReference
                Identifier: 'SourceFile'
              TypeReference
                Identifier: ' Bundle'
    PropertySignature
      Identifier: '
    declarationTransformers'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' TransformerFactory'
            UnionType
              TypeReference
                Identifier: 'SourceFile'
              TypeReference
                Identifier: ' Bundle'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceMapSpan'
    PropertySignature
      Identifier: '
    /** Line number in the .js file. */
    emittedLine'
      NumberKeyword
    PropertySignature
      Identifier: '
    /** Column number in the .js file. */
    emittedColumn'
      NumberKeyword
    PropertySignature
      Identifier: '
    /** Line number in the .ts file. */
    sourceLine'
      NumberKeyword
    PropertySignature
      Identifier: '
    /** Column number in the .ts file. */
    sourceColumn'
      NumberKeyword
    PropertySignature
      Identifier: '
    /** Optional name (index into names array) associated with this span. */
    nameIndex'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '
    /** .ts file (index into sources array) associated with this span */
    sourceIndex'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceMapEmitResult'
    PropertySignature
      Identifier: '
    inputSourceFileNames'
      TypeOperator
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: ' // Input source file (which one can use on program to get the file), 1:1 mapping with the sourceMap.sources list
    sourceMap'
      TypeReference
        Identifier: ' RawSourceMap'
  EnumDeclaration
    ExportKeyword
    Identifier: ' ExitStatus'
    EnumMember
      Identifier: '
    // Compiler ran successfully.  Either this was a simple do-nothing compilation (for example,
    // when -version or -help was provided, or this was a normal compilation, no diagnostics
    // were produced, and all outputs were generated successfully.
    Success'
      NumericLiteral
    EnumMember
      Identifier: '

    // Diagnostics were produced and because of them no code was generated.
    DiagnosticsPresent_OutputsSkipped'
      NumericLiteral
    EnumMember
      Identifier: '

    // Diagnostics were produced and outputs were generated in spite of them.
    DiagnosticsPresent_OutputsGenerated'
      NumericLiteral
    EnumMember
      Identifier: '

    // When build skipped because passed in project is invalid
    InvalidProject_OutputsSkipped'
      NumericLiteral
    EnumMember
      Identifier: '

    // When build is skipped because project references form cycle
    ProjectReferenceCycle_OutputsSkipped'
      NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmitResult'
    PropertySignature
      Identifier: '
    emitSkipped'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** Contains declaration emit diagnostics */
    diagnostics'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    PropertySignature
      Identifier: '
    emittedFiles'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: ' // Array of files the compiler wrote to disk
    /** @internal */ sourceMaps'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' SourceMapEmitResult'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeCheckerHost'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ModuleSpecifierResolutionHost'
    MethodSignature
      Identifier: '
    getCompilerOptions'
      TypeReference
        Identifier: ' CompilerOptions'
    MethodSignature
      Identifier: '

    getSourceFiles'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' SourceFile'
    MethodSignature
      Identifier: '
    getSourceFile'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getProjectReferenceRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isSourceOfProjectReferenceRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    getEmitSyntaxForUsageLocation'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' usage'
        TypeReference
          Identifier: ' StringLiteralLike'
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    getRedirectReferenceForResolutionFromSourceOfProject'
      Parameter
        Identifier: 'filePath'
        TypeReference
          Identifier: ' Path'
      UnionType
        TypeReference
          Identifier: ' ResolvedProjectReference'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getModeForUsageLocation'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' usage'
        TypeReference
          Identifier: ' StringLiteralLike'
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    getDefaultResolutionModeForFile'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    getImpliedNodeFormatForEmit'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    getEmitModuleFormatOfFile'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' ModuleKind'
    MethodSignature
      Identifier: '

    getResolvedModule'
      Parameter
        Identifier: 'f'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' moduleName'
        StringKeyword
      Parameter
        Identifier: ' mode'
        TypeReference
          Identifier: ' ResolutionMode'
      UnionType
        TypeReference
          Identifier: ' ResolvedModuleWithFailedLookupLocations'
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' redirectTargetsMap'
      TypeReference
        Identifier: ' RedirectTargetsMap'
    MethodSignature
      Identifier: '

    typesPackageExists'
      Parameter
        Identifier: 'packageName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    packageBundlesTypes'
      Parameter
        Identifier: 'packageName'
        StringKeyword
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeChecker'
    MethodSignature
      Identifier: '
    getTypeOfSymbolAtLocation'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getTypeOfSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getDeclaredTypeOfSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getPropertiesOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    getPropertyOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' propertyName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getPrivateIdentifierPropertyOfType'
      Parameter
        Identifier: 'leftType'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' name'
        StringKeyword
      Parameter
        Identifier: ' location'
        TypeReference
          Identifier: ' Node'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getTypeOfPropertyOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' propertyName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getIndexInfoOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' kind'
        TypeReference
          Identifier: ' IndexKind'
      UnionType
        TypeReference
          Identifier: ' IndexInfo'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getIndexInfosOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' IndexInfo'
    PropertySignature
      Identifier: '
    getIndexInfosOfIndexSymbol'
      FunctionType
        Parameter
          Identifier: 'indexSymbol'
          TypeReference
            Identifier: ' Symbol'
        Parameter
          Identifier: ' siblingSymbols'
          QuestionToken
          UnionType
            ArrayType
              TypeReference
                Identifier: ' Symbol'
            UndefinedKeyword
        ArrayType
          TypeReference
            Identifier: ' IndexInfo'
    MethodSignature
      Identifier: '
    getSignaturesOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' kind'
        TypeReference
          Identifier: ' SignatureKind'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Signature'
    MethodSignature
      Identifier: '
    getIndexTypeOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' kind'
        TypeReference
          Identifier: ' IndexKind'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getIndexType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getBaseTypes'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' InterfaceType'
      ArrayType
        TypeReference
          Identifier: ' BaseType'
    MethodSignature
      Identifier: '
    getBaseTypeOfLiteralType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getWidenedType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */
    getWidenedLiteralType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */
    getPromisedTypeOfPromise'
      Parameter
        Identifier: 'promise'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' errorNode'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Gets the "awaited type" of a type.
     *
     * If an expression has a Promise-like type, the "awaited type" of the expression is
     * derived from the type of the first argument of the fulfillment callback for that
     * Promise's `then` method. If the "awaited type" is itself a Promise-like, it is
     * recursively unwrapped in the same manner until a non-promise type is found.
     *
     * If an expression does not have a Promise-like type, its "awaited type" is the type
     * of the expression.
     *
     * If the resulting "awaited type" is a generic object type, then it is wrapped in
     * an `Awaited<T>`.
     *
     * In the event the "awaited type" circularly references itself, or is a non-Promise
     * object-type with a callable `then()` method, an "awaited type" cannot be determined
     * and the value `undefined` will be returned.
     *
     * This is used to reflect the runtime behavior of the `await` keyword.
     */
    getAwaitedType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    isEmptyAnonymousObjectType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getReturnTypeOfSignature'
      Parameter
        Identifier: 'signature'
        TypeReference
          Identifier: ' Signature'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /**
     * Gets the type of a parameter at a given position in a signature.
     * Returns `any` if the index is not valid.
     *
     * @internal
     */
    getParameterType'
      Parameter
        Identifier: 'signature'
        TypeReference
          Identifier: ' Signature'
      Parameter
        Identifier: ' parameterIndex'
        NumberKeyword
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getParameterIdentifierInfoAtPosition'
      Parameter
        Identifier: 'signature'
        TypeReference
          Identifier: ' Signature'
      Parameter
        Identifier: ' parameterIndex'
        NumberKeyword
      UnionType
        TypeLiteral
          PropertySignature
            Identifier: ' parameter'
            TypeReference
              Identifier: ' Identifier'
          PropertySignature
            Identifier: ' parameterName'
            TypeReference
              Identifier: ' __String'
          PropertySignature
            Identifier: ' isRestParameter'
            BooleanKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getNullableType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' flags'
        TypeReference
          Identifier: ' TypeFlags'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getNonNullableType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getNonOptionalType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ isNullableType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getTypeArguments'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeReference'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Type'
    MethodSignature
      Identifier: '

    // TODO: GH#18217 `xToDeclaration` calls are frequently asserted as defined.
    /** Note that the resulting nodes cannot be checked. */
    typeToTypeNode'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ typeToTypeNode'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' internalFlags'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' InternalNodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' tracker'
        QuestionToken
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    /** @internal */ typePredicateToTypePredicateNode'
      Parameter
        Identifier: 'typePredicate'
        TypeReference
          Identifier: ' TypePredicate'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' internalFlags'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' InternalNodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' tracker'
        QuestionToken
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        TypeReference
          Identifier: ' TypePredicateNode'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** Note that the resulting nodes cannot be checked. */
    signatureToSignatureDeclaration'
      Parameter
        Identifier: 'signature'
        TypeReference
          Identifier: ' Signature'
      Parameter
        Identifier: ' kind'
        TypeReference
          Identifier: ' SyntaxKind'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      UnionType
        IntersectionType
          TypeReference
            Identifier: ' SignatureDeclaration'
          TypeLiteral
            PropertySignature
              Identifier: ' typeArguments'
              QuestionToken
              TypeReference
                Identifier: ' NodeArray'
                TypeReference
                  Identifier: 'TypeNode'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ signatureToSignatureDeclaration'
      Parameter
        Identifier: 'signature'
        TypeReference
          Identifier: ' Signature'
      Parameter
        Identifier: ' kind'
        TypeReference
          Identifier: ' SyntaxKind'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' internalFlags'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' InternalNodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' tracker'
        QuestionToken
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        IntersectionType
          TypeReference
            Identifier: ' SignatureDeclaration'
          TypeLiteral
            PropertySignature
              Identifier: ' typeArguments'
              QuestionToken
              TypeReference
                Identifier: ' NodeArray'
                TypeReference
                  Identifier: 'TypeNode'
        UndefinedKeyword
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    /** Note that the resulting nodes cannot be checked. */
    indexInfoToIndexSignatureDeclaration'
      Parameter
        Identifier: 'indexInfo'
        TypeReference
          Identifier: ' IndexInfo'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' IndexSignatureDeclaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ indexInfoToIndexSignatureDeclaration'
      Parameter
        Identifier: 'indexInfo'
        TypeReference
          Identifier: ' IndexInfo'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' internalFlags'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' InternalNodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' tracker'
        QuestionToken
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        TypeReference
          Identifier: ' IndexSignatureDeclaration'
        UndefinedKeyword
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    /** Note that the resulting nodes cannot be checked. */
    symbolToEntityName'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' EntityName'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** Note that the resulting nodes cannot be checked. */
    symbolToExpression'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' Expression'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Note that the resulting nodes cannot be checked.
     *
     * @internal
     */
    symbolToNode'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' internalFlags'
        UnionType
          TypeReference
            Identifier: ' InternalNodeBuilderFlags'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' Node'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** Note that the resulting nodes cannot be checked. */
    symbolToTypeParameterDeclarations'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TypeParameterDeclaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** Note that the resulting nodes cannot be checked. */
    symbolToParameterDeclaration'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' ParameterDeclaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** Note that the resulting nodes cannot be checked. */
    typeParameterToDeclaration'
      Parameter
        Identifier: 'parameter'
        TypeReference
          Identifier: ' TypeParameter'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        UnionType
          TypeReference
            Identifier: ' NodeBuilderFlags'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' TypeParameterDeclaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    getSymbolsInScope'
      Parameter
        Identifier: 'location'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    getSymbolAtLocation'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getIndexInfosAtLocation'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' IndexInfo'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getSymbolsOfParameterPropertyDeclaration'
      Parameter
        Identifier: 'parameter'
        TypeReference
          Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' parameterName'
        StringKeyword
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /**
     * The function returns the value (local variable) symbol of an identifier in the short-hand property assignment.
     * This is necessary as an identifier in short-hand property assignment can contains two meaning: property name and property value.
     */
    getShorthandAssignmentValueSymbol'
      Parameter
        Identifier: 'location'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    getExportSpecifierLocalTargetSymbol'
      Parameter
        Identifier: 'location'
        UnionType
          TypeReference
            Identifier: ' ExportSpecifier'
          TypeReference
            Identifier: ' Identifier'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * If a symbol is a local symbol with an associated exported symbol, returns the exported symbol.
     * Otherwise returns its input.
     * For example, at `export type T = number;`:
     *     - `getSymbolAtLocation` at the location `T` will return the exported symbol for `T`.
     *     - But the result of `getSymbolsInScope` will contain the *local* symbol for `T`, not the exported symbol.
     *     - Calling `getExportSymbolOfSymbol` on that local symbol will return the exported symbol.
     */
    getExportSymbolOfSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      TypeReference
        Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    getPropertySymbolOfDestructuringAssignment'
      Parameter
        Identifier: 'location'
        TypeReference
          Identifier: ' Identifier'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getTypeOfAssignmentPattern'
      Parameter
        Identifier: 'pattern'
        TypeReference
          Identifier: ' AssignmentPattern'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getTypeAtLocation'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getTypeFromTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '

    signatureToString'
      Parameter
        Identifier: 'signature'
        TypeReference
          Identifier: ' Signature'
      Parameter
        Identifier: ' enclosingDeclaration'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' TypeFormatFlags'
      Parameter
        Identifier: ' kind'
        QuestionToken
        TypeReference
          Identifier: ' SignatureKind'
      StringKeyword
    MethodSignature
      Identifier: '
    typeToString'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' enclosingDeclaration'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' TypeFormatFlags'
      StringKeyword
    MethodSignature
      Identifier: '
    symbolToString'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' enclosingDeclaration'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' meaning'
        QuestionToken
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' SymbolFormatFlags'
      StringKeyword
    MethodSignature
      Identifier: '
    typePredicateToString'
      Parameter
        Identifier: 'predicate'
        TypeReference
          Identifier: ' TypePredicate'
      Parameter
        Identifier: ' enclosingDeclaration'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' TypeFormatFlags'
      StringKeyword
    MethodSignature
      Identifier: '

    /** @internal */ writeSignature'
      Parameter
        Identifier: 'signature'
        TypeReference
          Identifier: ' Signature'
      Parameter
        Identifier: ' enclosingDeclaration'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' TypeFormatFlags'
      Parameter
        Identifier: ' kind'
        QuestionToken
        TypeReference
          Identifier: ' SignatureKind'
      Parameter
        Identifier: ' writer'
        QuestionToken
        TypeReference
          Identifier: ' EmitTextWriter'
      StringKeyword
    MethodSignature
      Identifier: '
    /** @internal */ writeType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' enclosingDeclaration'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' TypeFormatFlags'
      Parameter
        Identifier: ' writer'
        QuestionToken
        TypeReference
          Identifier: ' EmitTextWriter'
      StringKeyword
    MethodSignature
      Identifier: '
    /** @internal */ writeSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' enclosingDeclaration'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' meaning'
        QuestionToken
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' SymbolFormatFlags'
      Parameter
        Identifier: ' writer'
        QuestionToken
        TypeReference
          Identifier: ' EmitTextWriter'
      StringKeyword
    MethodSignature
      Identifier: '
    /** @internal */ writeTypePredicate'
      Parameter
        Identifier: 'predicate'
        TypeReference
          Identifier: ' TypePredicate'
      Parameter
        Identifier: ' enclosingDeclaration'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' TypeFormatFlags'
      Parameter
        Identifier: ' writer'
        QuestionToken
        TypeReference
          Identifier: ' EmitTextWriter'
      StringKeyword
    MethodSignature
      Identifier: '

    getFullyQualifiedName'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      StringKeyword
    MethodSignature
      Identifier: '
    getAugmentedPropertiesOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '

    getRootSymbols'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    getSymbolOfExpando'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' allowDeclaration'
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getContextualType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Expression'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getContextualType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' contextFlags'
        QuestionToken
        TypeReference
          Identifier: ' ContextFlags'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    /** @internal */ getContextualTypeForObjectLiteralElement'
      Parameter
        Identifier: 'element'
        TypeReference
          Identifier: ' ObjectLiteralElementLike'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getContextualTypeForArgumentAtIndex'
      Parameter
        Identifier: 'call'
        TypeReference
          Identifier: ' CallLikeExpression'
      Parameter
        Identifier: ' argIndex'
        NumberKeyword
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getContextualTypeForJsxAttribute'
      Parameter
        Identifier: 'attribute'
        UnionType
          TypeReference
            Identifier: ' JsxAttribute'
          TypeReference
            Identifier: ' JsxSpreadAttribute'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ isContextSensitive'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' Expression'
          TypeReference
            Identifier: ' MethodDeclaration'
          TypeReference
            Identifier: ' ObjectLiteralElementLike'
          TypeReference
            Identifier: ' JsxAttributeLike'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getTypeOfPropertyOfContextualType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' __String'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * returns unknownSignature in the case of an error.
     * returns undefined if the node is not valid.
     * @param argumentCount Apparent number of arguments, passed in case of a possibly incomplete call. This should come from an ArgumentListInfo. See `signatureHelp.ts`.
     */
    getResolvedSignature'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CallLikeExpression'
      Parameter
        Identifier: ' candidatesOutArray'
        QuestionToken
        ArrayType
          TypeReference
            Identifier: ' Signature'
      Parameter
        Identifier: ' argumentCount'
        QuestionToken
        NumberKeyword
      UnionType
        TypeReference
          Identifier: ' Signature'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getResolvedSignatureForSignatureHelp'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CallLikeExpression'
      Parameter
        Identifier: ' candidatesOutArray'
        QuestionToken
        ArrayType
          TypeReference
            Identifier: ' Signature'
      Parameter
        Identifier: ' argumentCount'
        QuestionToken
        NumberKeyword
      UnionType
        TypeReference
          Identifier: ' Signature'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getCandidateSignaturesForStringLiteralCompletions'
      Parameter
        Identifier: 'call'
        TypeReference
          Identifier: ' CallLikeExpression'
      Parameter
        Identifier: ' editingArgument'
        TypeReference
          Identifier: ' Node'
      ArrayType
        TypeReference
          Identifier: ' Signature'
    MethodSignature
      Identifier: '
    /** @internal */ getExpandedParameters'
      Parameter
        Identifier: 'sig'
        TypeReference
          Identifier: ' Signature'
      TypeOperator
        ArrayType
          ParenthesizedType
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /** @internal */ hasEffectiveRestParameter'
      Parameter
        Identifier: 'sig'
        TypeReference
          Identifier: ' Signature'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ containsArgumentsReference'
      Parameter
        Identifier: 'declaration'
        TypeReference
          Identifier: ' SignatureDeclaration'
      BooleanKeyword
    MethodSignature
      Identifier: '

    getSignatureFromDeclaration'
      Parameter
        Identifier: 'declaration'
        TypeReference
          Identifier: ' SignatureDeclaration'
      UnionType
        TypeReference
          Identifier: ' Signature'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isImplementationOfOverload'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SignatureDeclaration'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isUndefinedSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isArgumentsSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isUnknownSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getMergedSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      TypeReference
        Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /** @internal */ symbolIsValue'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' includeTypeOnlyMembers'
        QuestionToken
        BooleanKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    getConstantValue'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' EnumMember'
          TypeReference
            Identifier: ' PropertyAccessExpression'
          TypeReference
            Identifier: ' ElementAccessExpression'
      UnionType
        StringKeyword
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isValidPropertyAccess'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' PropertyAccessExpression'
          TypeReference
            Identifier: ' QualifiedName'
          TypeReference
            Identifier: ' ImportTypeNode'
      Parameter
        Identifier: ' propertyName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Exclude accesses to private properties.
     *
     * @internal
     */
    isValidPropertyAccessForCompletions'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' PropertyAccessExpression'
          TypeReference
            Identifier: ' ImportTypeNode'
          TypeReference
            Identifier: ' QualifiedName'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' property'
        TypeReference
          Identifier: ' Symbol'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** Follow all aliases to get the original symbol. */
    getAliasedSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      TypeReference
        Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /** Follow a *single* alias to get the immediately aliased symbol. */
    getImmediateAliasedSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getExportsOfModule'
      Parameter
        Identifier: 'moduleSymbol'
        TypeReference
          Identifier: ' Symbol'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /**
     * Unlike `getExportsOfModule`, this includes properties of an `export =` value.
     *
     * @internal
     */
    getExportsAndPropertiesOfModule'
      Parameter
        Identifier: 'moduleSymbol'
        TypeReference
          Identifier: ' Symbol'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /** @internal */ forEachExportAndPropertyOfModule'
      Parameter
        Identifier: 'moduleSymbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' cb'
        FunctionType
          Parameter
            Identifier: 'symbol'
            TypeReference
              Identifier: ' Symbol'
          Parameter
            Identifier: ' key'
            TypeReference
              Identifier: ' __String'
          VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    getJsxIntrinsicTagNamesAt'
      Parameter
        Identifier: 'location'
        TypeReference
          Identifier: ' Node'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    isOptionalParameter'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ParameterDeclaration'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getAmbientModules'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '

    tryGetMemberInModuleExports'
      Parameter
        Identifier: 'memberName'
        StringKeyword
      Parameter
        Identifier: ' moduleSymbol'
        TypeReference
          Identifier: ' Symbol'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Unlike `tryGetMemberInModuleExports`, this includes properties of an `export =` value.
     * Does *not* return properties of primitive types.
     *
     * @internal
     */
    tryGetMemberInModuleExportsAndProperties'
      Parameter
        Identifier: 'memberName'
        StringKeyword
      Parameter
        Identifier: ' moduleSymbol'
        TypeReference
          Identifier: ' Symbol'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getApparentType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getSuggestedSymbolForNonexistentProperty'
      Parameter
        Identifier: 'name'
        UnionType
          TypeReference
            Identifier: ' MemberName'
          StringKeyword
      Parameter
        Identifier: ' containingType'
        TypeReference
          Identifier: ' Type'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getSuggestedSymbolForNonexistentJSXAttribute'
      Parameter
        Identifier: 'name'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          StringKeyword
      Parameter
        Identifier: ' containingType'
        TypeReference
          Identifier: ' Type'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getSuggestedSymbolForNonexistentSymbol'
      Parameter
        Identifier: 'location'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' name'
        StringKeyword
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getSuggestedSymbolForNonexistentModule'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' target'
        TypeReference
          Identifier: ' Symbol'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getSuggestedSymbolForNonexistentClassMember'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' baseType'
        TypeReference
          Identifier: ' Type'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getBaseConstraintOfType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getDefaultFromTypeParameter'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Gets the intrinsic `any` type. There are multiple types that act as `any` used internally in the compiler,
     * so the type returned by this function should not be used in equality checks to determine if another type
     * is `any`. Instead, use `type.flags & TypeFlags.Any`.
     */
    getAnyType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getStringType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getStringLiteralType'
      Parameter
        Identifier: 'value'
        StringKeyword
      TypeReference
        Identifier: ' StringLiteralType'
    MethodSignature
      Identifier: '
    getNumberType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getNumberLiteralType'
      Parameter
        Identifier: 'value'
        NumberKeyword
      TypeReference
        Identifier: ' NumberLiteralType'
    MethodSignature
      Identifier: '
    getBigIntType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getBigIntLiteralType'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' PseudoBigInt'
      TypeReference
        Identifier: ' BigIntLiteralType'
    MethodSignature
      Identifier: '
    getBooleanType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /* eslint-disable @typescript-eslint/unified-signatures */
    /** @internal */
    getFalseType'
      Parameter
        Identifier: 'fresh'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getFalseType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */
    getTrueType'
      Parameter
        Identifier: 'fresh'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getTrueType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /* eslint-enable @typescript-eslint/unified-signatures */
    getVoidType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /**
     * Gets the intrinsic `undefined` type. There are multiple types that act as `undefined` used internally in the compiler
     * depending on compiler options, so the type returned by this function should not be used in equality checks to determine
     * if another type is `undefined`. Instead, use `type.flags & TypeFlags.Undefined`.
     */
    getUndefinedType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /**
     * Gets the intrinsic `null` type. There are multiple types that act as `null` used internally in the compiler,
     * so the type returned by this function should not be used in equality checks to determine if another type
     * is `null`. Instead, use `type.flags & TypeFlags.Null`.
     */
    getNullType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    getESSymbolType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /**
     * Gets the intrinsic `never` type. There are multiple types that act as `never` used internally in the compiler,
     * so the type returned by this function should not be used in equality checks to determine if another type
     * is `never`. Instead, use `type.flags & TypeFlags.Never`.
     */
    getNeverType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getOptionalType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getUnionType'
      Parameter
        Identifier: 'types'
        ArrayType
          TypeReference
            Identifier: ' Type'
      Parameter
        Identifier: ' subtypeReduction'
        QuestionToken
        TypeReference
          Identifier: ' UnionReduction'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ createArrayType'
      Parameter
        Identifier: 'elementType'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getElementTypeOfArrayType'
      Parameter
        Identifier: 'arrayType'
        TypeReference
          Identifier: ' Type'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ createPromiseType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getPromiseType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getPromiseLikeType'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ getAnyAsyncIterableType'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns true if the "source" type is assignable to the "target" type.
     *
     * ```ts
     * declare const abcLiteral: ts.Type; // Type of "abc"
     * declare const stringType: ts.Type; // Type of string
     *
     * isTypeAssignableTo(abcLiteral, abcLiteral); // true; "abc" is assignable to "abc"
     * isTypeAssignableTo(abcLiteral, stringType); // true; "abc" is assignable to string
     * isTypeAssignableTo(stringType, abcLiteral); // false; string is not assignable to "abc"
     * isTypeAssignableTo(stringType, stringType); // true; string is assignable to string
     * ```
     */
    isTypeAssignableTo'
      Parameter
        Identifier: 'source'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' target'
        TypeReference
          Identifier: ' Type'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ createAnonymousType'
      Parameter
        Identifier: 'symbol'
        UnionType
          TypeReference
            Identifier: ' Symbol'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        TypeReference
          Identifier: ' SymbolTable'
      Parameter
        Identifier: ' callSignatures'
        ArrayType
          TypeReference
            Identifier: ' Signature'
      Parameter
        Identifier: ' constructSignatures'
        ArrayType
          TypeReference
            Identifier: ' Signature'
      Parameter
        Identifier: ' indexInfos'
        ArrayType
          TypeReference
            Identifier: ' IndexInfo'
      TypeReference
        Identifier: ' Type'
    MethodSignature
      Identifier: '
    /** @internal */ createSignature'
      Parameter
        Identifier: '
        declaration'
        UnionType
          TypeReference
            Identifier: ' SignatureDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: '
        typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameter'
          UndefinedKeyword
      Parameter
        Identifier: '
        thisParameter'
        UnionType
          TypeReference
            Identifier: ' Symbol'
          UndefinedKeyword
      Parameter
        Identifier: '
        parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Symbol'
      Parameter
        Identifier: '
        resolvedReturnType'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: '
        typePredicate'
        UnionType
          TypeReference
            Identifier: ' TypePredicate'
          UndefinedKeyword
      Parameter
        Identifier: '
        minArgumentCount'
        NumberKeyword
      Parameter
        Identifier: '
        flags'
        TypeReference
          Identifier: ' SignatureFlags'
      TypeReference
        Identifier: ' Signature'
    MethodSignature
      Identifier: '
    /** @internal */ createSymbol'
      Parameter
        Identifier: 'flags'
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' __String'
      TypeReference
        Identifier: ' TransientSymbol'
    MethodSignature
      Identifier: '
    /** @internal */ createIndexInfo'
      Parameter
        Identifier: 'keyType'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' isReadonly'
        BooleanKeyword
      Parameter
        Identifier: ' declaration'
        QuestionToken
        TypeReference
          Identifier: ' SignatureDeclaration'
      TypeReference
        Identifier: ' IndexInfo'
    MethodSignature
      Identifier: '
    /** @internal */ isSymbolAccessible'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' shouldComputeAliasToMarkVisible'
        BooleanKeyword
      TypeReference
        Identifier: ' SymbolAccessibilityResult'
    MethodSignature
      Identifier: '
    /** @internal */ tryFindAmbientModule'
      Parameter
        Identifier: 'moduleName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /** @internal */ getSymbolWalker'
      Parameter
        Identifier: 'accept'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'symbol'
            TypeReference
              Identifier: ' Symbol'
          BooleanKeyword
      TypeReference
        Identifier: ' SymbolWalker'
    MethodSignature
      Identifier: '

    // Should not be called directly.  Should only be accessed through the Program instance.
    /** @internal */ getDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      Parameter
        Identifier: ' nodesToCheck'
        QuestionToken
        ArrayType
          TypeReference
            Identifier: ' Node'
      ArrayType
        TypeReference
          Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /** @internal */ getGlobalDiagnostics'
      ArrayType
        TypeReference
          Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /** @internal */ getEmitResolver'
      Parameter
        Identifier: 'sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      Parameter
        Identifier: ' forceDts'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' EmitResolver'
    MethodSignature
      Identifier: '
    /** @internal */ requiresAddingImplicitUndefined'
      Parameter
        Identifier: 'parameter'
        UnionType
          TypeReference
            Identifier: ' ParameterDeclaration'
          TypeReference
            Identifier: ' JSDocParameterTag'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '

    /** @internal */ getNodeCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getIdentifierCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getSymbolCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getTypeCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getInstantiationCount'
      NumberKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getRelationCacheSizes'
      TypeLiteral
        PropertySignature
          Identifier: ' assignable'
          NumberKeyword
        PropertySignature
          Identifier: ' identity'
          NumberKeyword
        PropertySignature
          Identifier: ' subtype'
          NumberKeyword
        PropertySignature
          Identifier: ' strictSubtype'
          NumberKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getRecursionIdentity'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      UnionType
        ObjectKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getUnmatchedProperties'
      Parameter
        Identifier: 'source'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' target'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' requireOptionalProperties'
        BooleanKeyword
      Parameter
        Identifier: ' matchDiscriminantProperties'
        BooleanKeyword
      TypeReference
        Identifier: ' IterableIterator'
        TypeReference
          Identifier: 'Symbol'
    MethodSignature
      Identifier: '

    /**
     * True if this type is the `Array` or `ReadonlyArray` type from lib.d.ts.
     * This function will _not_ return true if passed a type which
     * extends `Array` (for example, the TypeScript AST's `NodeArray` type).
     */
    isArrayType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * True if this type is a tuple type. This function will _not_ return true if
     * passed a type which extends from a tuple.
     */
    isTupleType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * True if this type is assignable to `ReadonlyArray<any>`.
     */
    isArrayLikeType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * True if `contextualType` should not be considered for completions because
     * e.g. it specifies `kind: "a"` and obj has `kind: "b"`.
     *
     * @internal
     */
    isTypeInvalidDueToUnionDiscriminant'
      Parameter
        Identifier: 'contextualType'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' obj'
        UnionType
          TypeReference
            Identifier: ' ObjectLiteralExpression'
          TypeReference
            Identifier: ' JsxAttributes'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getExactOptionalProperties'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /**
     * For a union, will include a property if it's defined in *any* of the member types.
     * So for `{ a } | { b }`, this will include both `a` and `b`.
     * Does not include properties of primitive types.
     *
     * @internal
     */
    getAllPossiblePropertiesOfTypes'
      Parameter
        Identifier: 'type'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Type'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    resolveName'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' location'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' excludeGlobals'
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getJsxNamespace'
      Parameter
        Identifier: 'location'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      StringKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getJsxFragmentFactory'
      Parameter
        Identifier: 'location'
        TypeReference
          Identifier: ' Node'
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Note that this will return undefined in the following case:
     *     // a.ts
     *     export namespace N { export class C { } }
     *     // b.ts
     *     <<enclosingDeclaration>>
     * Where `C` is the symbol we're looking for.
     * This should be called in a loop climbing parents of the symbol, so we'll get `N`.
     *
     * @internal
     */
    getAccessibleSymbolChain'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      Parameter
        Identifier: ' useOnlyExternalAliasing'
        BooleanKeyword
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getTypePredicateOfSignature'
      Parameter
        Identifier: 'signature'
        TypeReference
          Identifier: ' Signature'
      UnionType
        TypeReference
          Identifier: ' TypePredicate'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ resolveExternalModuleName'
      Parameter
        Identifier: 'moduleSpecifier'
        TypeReference
          Identifier: ' Expression'
      UnionType
        TypeReference
          Identifier: ' Symbol'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * An external module with an 'export =' declaration resolves to the target of the 'export =' declaration,
     * and an external module with no 'export =' declaration resolves to the module itself.
     *
     * @internal
     */
    resolveExternalModuleSymbol'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      TypeReference
        Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /**
     * @param node A location where we might consider accessing `this`. Not necessarily a ThisExpression.
     *
     * @internal
     */
    tryGetThisTypeAt'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' includeGlobalThis'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' container'
        QuestionToken
        TypeReference
          Identifier: ' ThisContainer'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getTypeArgumentConstraint'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeNode'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Does *not* get *all* suggestion diagnostics, just the ones that were convenient to report in the checker.
     * Others are added in computeSuggestionDiagnostics.
     *
     * @internal
     */
    getSuggestionDiagnostics'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' DiagnosticWithLocation'
    MethodSignature
      Identifier: '

    /**
     * Depending on the operation performed, it may be appropriate to throw away the checker
     * if the cancellation token is triggered. Typically, if it is used for error checking
     * and the operation is cancelled, then it should be discarded, otherwise it is safe to keep.
     */
    runWithCancellationToken'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'token'
        TypeReference
          Identifier: ' CancellationToken'
      Parameter
        Identifier: ' cb'
        FunctionType
          Parameter
            Identifier: 'checker'
            TypeReference
              Identifier: ' TypeChecker'
          TypeReference
            Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**@internal */
    runWithCancellationToken'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'token'
        UnionType
          TypeReference
            Identifier: ' CancellationToken'
          UndefinedKeyword
      Parameter
        Identifier: ' cb'
        FunctionType
          Parameter
            Identifier: 'checker'
            TypeReference
              Identifier: ' TypeChecker'
          TypeReference
            Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures

    /** @internal */ getLocalTypeParametersOfClassOrInterfaceOrTypeAlias'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeParameter'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ isDeclarationVisible'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' Declaration'
          TypeReference
            Identifier: ' AnyImportSyntax'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ isPropertyAccessible'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' isSuper'
        BooleanKeyword
      Parameter
        Identifier: ' isWrite'
        BooleanKeyword
      Parameter
        Identifier: ' containingType'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' property'
        TypeReference
          Identifier: ' Symbol'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getTypeOnlyAliasDeclaration'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      UnionType
        TypeReference
          Identifier: ' TypeOnlyAliasDeclaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getMemberOverrideModifierStatus'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ClassLikeDeclaration'
      Parameter
        Identifier: ' member'
        TypeReference
          Identifier: ' ClassElement'
      Parameter
        Identifier: ' memberSymbol'
        TypeReference
          Identifier: ' Symbol'
      TypeReference
        Identifier: ' MemberOverrideStatus'
    MethodSignature
      Identifier: '
    /** @internal */ isTypeParameterPossiblyReferenced'
      Parameter
        Identifier: 'tp'
        TypeReference
          Identifier: ' TypeParameter'
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Node'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ typeHasCallOrConstructSignatures'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getSymbolFlags'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      TypeReference
        Identifier: ' SymbolFlags'
    MethodSignature
      Identifier: '
    /** @internal */ fillMissingTypeArguments'
      Parameter
        Identifier: 'typeArguments'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Type'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameter'
          UndefinedKeyword
      Parameter
        Identifier: ' minTypeArgumentCount'
        NumberKeyword
      Parameter
        Identifier: ' isJavaScriptImplicitAny'
        BooleanKeyword
      ArrayType
        TypeReference
          Identifier: ' Type'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' MemberOverrideStatus'
    EnumMember
      Identifier: '
    Ok'
    EnumMember
      Identifier: '
    NeedsOverride'
    EnumMember
      Identifier: '
    HasInvalidOverride'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' UnionReduction'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Literal'
    EnumMember
      Identifier: '
    Subtype'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' IntersectionFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    NoSupertypeReduction'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    NoConstraintReduction'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ContextFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Signature'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Obtaining contextual signature
    NoConstraints'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Don't obtain type variable constraints
    Completions'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Ignore inference to current node and parent nodes out to the containing call for completions
    SkipBindingPatterns'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' NodeBuilderFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    // Options
    NoTruncation'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Don't truncate result
    WriteArrayAsGenericType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Write Array<T> instead T[]
    GenerateNamesForShadowedTypeParams'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // When a type parameter T is shadowing another T, generate a name for it so it can still be referenced
    UseStructuralFallback'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // When an alias cannot be named by its symbol, rather than report an error, fallback to a structural printout if possible
    ForbidIndexedAccessSymbolReferences'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Forbid references like `I["a"]["b"]` - print `typeof I.a<x>.b<y>` instead
    WriteTypeArgumentsOfSignature'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Write the type arguments instead of type parameters of the signature
    UseFullyQualifiedType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Write out the fully qualified type name (eg. Module.Type, instead of Type)
    UseOnlyExternalAliasing'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Only use external aliases for a symbol
    SuppressAnyReturnType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // If the return type is any-like and can be elided, don't offer a return type.
    WriteTypeParametersInQualifiedName'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    MultilineObjectLiterals'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Always write object literals across multiple lines
    WriteClassExpressionAsTypeLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Write class {} as { new(): {} } - used for mixin declaration emit
    UseTypeOfFunction'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Build using typeof instead of function type literal
    OmitParameterModifiers'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Omit modifiers on parameters
    UseAliasDefinedOutsideCurrentScope'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Allow non-visible aliases
    UseSingleQuotesForStringLiteralType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Use single quotes for string literal type
    NoTypeReduction'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Don't call getReducedType
    OmitThisParameter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // Error handling
    AllowThisInObjectLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    AllowQualifiedNameInPlaceOfIdentifier'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    AllowAnonymousIdentifier'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    AllowEmptyUnionOrIntersection'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    AllowEmptyTuple'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    AllowUniqueESSymbolType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    AllowEmptyIndexInfoType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    // Errors (cont.)
    AllowNodeModulesRelativePaths'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '


    IgnoreErrors'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' AllowThisInObjectLiteral'
                  BarToken
                  Identifier: ' AllowQualifiedNameInPlaceOfIdentifier'
                BarToken
                Identifier: ' AllowAnonymousIdentifier'
              BarToken
              Identifier: ' AllowEmptyUnionOrIntersection'
            BarToken
            Identifier: ' AllowEmptyTuple'
          BarToken
          Identifier: ' AllowEmptyIndexInfoType'
        BarToken
        Identifier: ' AllowNodeModulesRelativePaths'
    EnumMember
      Identifier: '

    // State
    InObjectTypeLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    InTypeAlias'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '    // Writing type in type alias declaration
    InInitialEntityName'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' InternalNodeBuilderFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    WriteComputedProps'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // { [E.A]: 1 }
    NoSyntacticPrinter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    DoNotIncludeSymbolChain'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '    // Skip looking up and printing an accessible symbol chain
    AllowUnresolvedNames'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' TypeFormatFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    NoTruncation'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Don't truncate typeToString result
    WriteArrayAsGenericType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Write Array<T> instead T[]
    GenerateNamesForShadowedTypeParams'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // When a type parameter T is shadowing another T, generate a name for it so it can still be referenced
    UseStructuralFallback'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // When an alias cannot be named by its symbol, rather than report an error, fallback to a structural printout if possible
    // hole because there's a hole in node builder flags
    WriteTypeArgumentsOfSignature'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Write the type arguments instead of type parameters of the signature
    UseFullyQualifiedType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Write out the fully qualified type name (eg. Module.Type, instead of Type)
    // hole because `UseOnlyExternalAliasing` is here in node builder flags, but functions which take old flags use `SymbolFormatFlags` instead
    SuppressAnyReturnType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // If the return type is any-like, don't offer a return type.
    // hole because `WriteTypeParametersInQualifiedName` is here in node builder flags, but functions which take old flags use `SymbolFormatFlags` for this instead
    MultilineObjectLiterals'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Always print object literals across multiple lines (only used to map into node builder flags)
    WriteClassExpressionAsTypeLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Write a type literal instead of (Anonymous class)
    UseTypeOfFunction'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Write typeof instead of function type literal
    OmitParameterModifiers'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Omit modifiers on parameters

    UseAliasDefinedOutsideCurrentScope'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // For a `type T = ... ` defined in a different file, write `T` instead of its value, even though `T` can't be accessed in the current scope.
    UseSingleQuotesForStringLiteralType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Use single quotes for string literal type
    NoTypeReduction'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Don't call getReducedType
    OmitThisParameter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // Error Handling
    AllowUniqueESSymbolType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // This is bit 20 to align with the same bit in `NodeBuilderFlags`

    // TypeFormatFlags exclusive
    AddUndefined'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Add undefined to types of initialized, non-optional parameters
    WriteArrowStyleSignature'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Write arrow style signature

    // State
    InArrayType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Writing an array element type
    InElementType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Writing an array or union element type
    InFirstTypeArgument'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Writing first type argument of the instantiated type
    InTypeAlias'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Writing type in type alias declaration

    NodeBuilderFlagsMask'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        BinaryExpression
                          BinaryExpression
                            BinaryExpression
                              BinaryExpression
                                BinaryExpression
                                  BinaryExpression
                                    BinaryExpression
                                      Identifier: ' NoTruncation'
                                      BarToken
                                      Identifier: ' WriteArrayAsGenericType'
                                    BarToken
                                    Identifier: ' GenerateNamesForShadowedTypeParams'
                                  BarToken
                                  Identifier: ' UseStructuralFallback'
                                BarToken
                                Identifier: ' WriteTypeArgumentsOfSignature'
                              BarToken
                              Identifier: '
        UseFullyQualifiedType'
                            BarToken
                            Identifier: ' SuppressAnyReturnType'
                          BarToken
                          Identifier: ' MultilineObjectLiterals'
                        BarToken
                        Identifier: ' WriteClassExpressionAsTypeLiteral'
                      BarToken
                      Identifier: '
        UseTypeOfFunction'
                    BarToken
                    Identifier: ' OmitParameterModifiers'
                  BarToken
                  Identifier: ' UseAliasDefinedOutsideCurrentScope'
                BarToken
                Identifier: ' AllowUniqueESSymbolType'
              BarToken
              Identifier: ' InTypeAlias'
            BarToken
            Identifier: '
        UseSingleQuotesForStringLiteralType'
          BarToken
          Identifier: ' NoTypeReduction'
        BarToken
        Identifier: ' OmitThisParameter'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' SymbolFormatFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '

    // Write symbols's type argument if it is instantiated symbol
    // eg. class C<T> { p: T }   <-- Show p as C<T>.p here
    //     var a: C<number>;
    //     var p = a.p; <--- Here p is property of C<number> so show it as C<number>.p instead of just C.p
    WriteTypeParametersOrArguments'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // Use only external alias information to get the symbol name in the given context
    // eg.  module m { export class c { } } import x = m.c;
    // When this flag is specified m.c will be used to refer to the class instead of alias symbol x
    UseOnlyExternalAliasing'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // Build symbol name using any nodes needed, instead of just components of an entity name
    AllowAnyNodeKind'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // Prefer aliases which are not directly visible
    UseAliasDefinedOutsideCurrentScope'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // { [E.A]: 1 }
    /** @internal */ WriteComputedProps'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // Skip building an accessible symbol chain
    /** @internal */ DoNotIncludeSymbolChain'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SymbolWalker'
    MethodSignature
      Identifier: '
    /** Note: Return values are not ordered. */
    walkType'
      Parameter
        Identifier: 'root'
        TypeReference
          Identifier: ' Type'
      TypeLiteral
        PropertySignature
          Identifier: ' visitedTypes'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Type'
        PropertySignature
          Identifier: ' visitedSymbols'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    /** Note: Return values are not ordered. */
    walkSymbol'
      Parameter
        Identifier: 'root'
        TypeReference
          Identifier: ' Symbol'
      TypeLiteral
        PropertySignature
          Identifier: ' visitedTypes'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Type'
        PropertySignature
          Identifier: ' visitedSymbols'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Symbol'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SymbolWriter'
    MethodSignature
      Identifier: '
    writeKeyword'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeOperator'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writePunctuation'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeSpace'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeStringLiteral'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeParameter'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeProperty'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeSymbol'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' symbol'
        TypeReference
          Identifier: ' Symbol'
      VoidKeyword
    MethodSignature
      Identifier: '
    writeLine'
      Parameter
        Identifier: 'force'
        QuestionToken
        BooleanKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    increaseIndent'
      VoidKeyword
    MethodSignature
      Identifier: '
    decreaseIndent'
      VoidKeyword
    MethodSignature
      Identifier: '
    clear'
      VoidKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' SymbolAccessibility'
    EnumMember
      Identifier: '
    Accessible'
    EnumMember
      Identifier: '
    NotAccessible'
    EnumMember
      Identifier: '
    CannotBeNamed'
    EnumMember
      Identifier: '
    NotResolved'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' TypePredicateKind'
    EnumMember
      Identifier: '
    This'
    EnumMember
      Identifier: '
    Identifier'
    EnumMember
      Identifier: '
    AssertsThis'
    EnumMember
      Identifier: '
    AssertsIdentifier'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypePredicateBase'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        Identifier: ' TypePredicateKind'
    PropertySignature
      Identifier: '
    type'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ThisTypePredicate'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypePredicateBase'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' TypePredicateKind'
          Identifier: 'This'
    PropertySignature
      Identifier: '
    parameterName'
      UndefinedKeyword
    PropertySignature
      Identifier: '
    parameterIndex'
      UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IdentifierTypePredicate'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypePredicateBase'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' TypePredicateKind'
          Identifier: 'Identifier'
    PropertySignature
      Identifier: '
    parameterName'
      StringKeyword
    PropertySignature
      Identifier: '
    parameterIndex'
      NumberKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AssertsThisTypePredicate'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypePredicateBase'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' TypePredicateKind'
          Identifier: 'AssertsThis'
    PropertySignature
      Identifier: '
    parameterName'
      UndefinedKeyword
    PropertySignature
      Identifier: '
    parameterIndex'
      UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AssertsIdentifierTypePredicate'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypePredicateBase'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' TypePredicateKind'
          Identifier: 'AssertsIdentifier'
    PropertySignature
      Identifier: '
    parameterName'
      StringKeyword
    PropertySignature
      Identifier: '
    parameterIndex'
      NumberKeyword
    PropertySignature
      Identifier: '
    type'
      UnionType
        TypeReference
          Identifier: ' Type'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypePredicate'
    UnionType
      TypeReference
        Identifier: ' ThisTypePredicate'
      TypeReference
        Identifier: ' IdentifierTypePredicate'
      TypeReference
        Identifier: ' AssertsThisTypePredicate'
      TypeReference
        Identifier: ' AssertsIdentifierTypePredicate'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AnyImportSyntax'
    UnionType
      TypeReference
        Identifier: ' ImportDeclaration'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AnyImportOrJsDocImport'
    UnionType
      TypeReference
        Identifier: ' AnyImportSyntax'
      TypeReference
        Identifier: ' JSDocImportTag'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AnyImportOrRequire'
    UnionType
      TypeReference
        Identifier: ' AnyImportOrJsDocImport'
      TypeReference
        Identifier: ' VariableDeclarationInitializedTo'
        TypeReference
          Identifier: 'RequireOrImportCall'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AnyImportOrBareOrAccessedRequire'
    UnionType
      TypeReference
        Identifier: ' AnyImportSyntax'
      TypeReference
        Identifier: ' VariableDeclarationInitializedTo'
        UnionType
          TypeReference
            Identifier: 'RequireOrImportCall'
          TypeReference
            Identifier: ' AccessExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AliasDeclarationNode'
    UnionType
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
      TypeReference
        Identifier: ' VariableDeclarationInitializedTo'
        UnionType
          TypeReference
            Identifier: ' RequireOrImportCall'
          TypeReference
            Identifier: ' AccessExpression'
      TypeReference
        Identifier: ' ImportClause'
      TypeReference
        Identifier: ' NamespaceImport'
      TypeReference
        Identifier: ' ImportSpecifier'
      TypeReference
        Identifier: ' ExportSpecifier'
      TypeReference
        Identifier: ' NamespaceExport'
      TypeReference
        Identifier: ' BindingElementOfBareOrAccessedRequire'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BindingElementOfBareOrAccessedRequire'
    IntersectionType
      TypeReference
        Identifier: ' BindingElement'
      TypeLiteral
        PropertySignature
          Identifier: ' parent'
          TypeLiteral
            PropertySignature
              Identifier: ' parent'
              TypeReference
                Identifier: ' VariableDeclarationInitializedTo'
                UnionType
                  TypeReference
                    Identifier: 'RequireOrImportCall'
                  TypeReference
                    Identifier: ' AccessExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AnyImportOrRequireStatement'
    UnionType
      TypeReference
        Identifier: ' AnyImportSyntax'
      TypeReference
        Identifier: ' RequireVariableStatement'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AnyImportOrReExport'
    UnionType
      TypeReference
        Identifier: ' AnyImportSyntax'
      TypeReference
        Identifier: ' ExportDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ValidImportTypeNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ImportTypeNode'
    PropertySignature
      Identifier: '
    argument'
      IntersectionType
        TypeReference
          Identifier: ' LiteralTypeNode'
        TypeLiteral
          PropertySignature
            Identifier: ' literal'
            TypeReference
              Identifier: ' StringLiteral'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AnyValidImportOrReExport'
    UnionType
      IntersectionType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'ImportDeclaration'
            TypeReference
              Identifier: ' ExportDeclaration'
            TypeReference
              Identifier: ' JSDocImportTag'
        TypeLiteral
          PropertySignature
            Identifier: ' moduleSpecifier'
            TypeReference
              Identifier: ' StringLiteral'
      IntersectionType
        TypeReference
          Identifier: ' ImportEqualsDeclaration'
        TypeLiteral
          PropertySignature
            Identifier: ' moduleReference'
            IntersectionType
              TypeReference
                Identifier: ' ExternalModuleReference'
              TypeLiteral
                PropertySignature
                  Identifier: ' expression'
                  TypeReference
                    Identifier: ' StringLiteral'
      TypeReference
        Identifier: ' RequireOrImportCall'
      TypeReference
        Identifier: ' ValidImportTypeNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' RequireOrImportCall'
    IntersectionType
      TypeReference
        Identifier: ' CallExpression'
      TypeLiteral
        PropertySignature
          Identifier: ' expression'
          TypeReference
            Identifier: ' Identifier'
        PropertySignature
          Identifier: ' arguments'
          TupleType
            TypeReference
              Identifier: 'StringLiteralLike'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' VariableDeclarationInitializedTo'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Expression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VariableDeclaration'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' initializer'
      TypeReference
        Identifier: ' T'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' RequireVariableStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VariableStatement'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' declarationList'
      TypeReference
        Identifier: ' RequireVariableDeclarationList'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' RequireVariableDeclarationList'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VariableDeclarationList'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' declarations'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'VariableDeclarationInitializedTo'
          TypeReference
            Identifier: 'RequireOrImportCall'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CanHaveModuleSpecifier'
    UnionType
      TypeReference
        Identifier: ' AnyImportOrBareOrAccessedRequire'
      TypeReference
        Identifier: ' AliasDeclarationNode'
      TypeReference
        Identifier: ' ExportDeclaration'
      TypeReference
        Identifier: ' ImportTypeNode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LateVisibilityPaintedStatement'
    UnionType
      TypeReference
        Identifier: ' AnyImportOrJsDocImport'
      TypeReference
        Identifier: ' VariableStatement'
      TypeReference
        Identifier: ' ClassDeclaration'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' ModuleDeclaration'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
      TypeReference
        Identifier: ' InterfaceDeclaration'
      TypeReference
        Identifier: ' EnumDeclaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SymbolVisibilityResult'
    PropertySignature
      Identifier: '
    accessibility'
      TypeReference
        Identifier: ' SymbolAccessibility'
    PropertySignature
      Identifier: '
    aliasesToMakeVisible'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' LateVisibilityPaintedStatement'
    PropertySignature
      Identifier: ' // aliases that need to have this symbol visible
    errorSymbolName'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: ' // Optional symbol name that results in error
    errorNode'
      QuestionToken
      TypeReference
        Identifier: ' Node'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SymbolAccessibilityResult'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SymbolVisibilityResult'
    PropertySignature
      Identifier: '
    errorModuleName'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AllAccessorDeclarations'
    PropertySignature
      Identifier: '
    firstAccessor'
      TypeReference
        Identifier: ' AccessorDeclaration'
    PropertySignature
      Identifier: '
    secondAccessor'
      UnionType
        TypeReference
          Identifier: ' AccessorDeclaration'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    getAccessor'
      UnionType
        TypeReference
          Identifier: ' GetAccessorDeclaration'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    setAccessor'
      UnionType
        TypeReference
          Identifier: ' SetAccessorDeclaration'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AllDecorators'
    PropertySignature
      Identifier: '
    decorators'
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Decorator'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    parameters'
      QuestionToken
      TypeOperator
        ArrayType
          ParenthesizedType
            UnionType
              TypeOperator
                ArrayType
                  TypeReference
                    Identifier: ' Decorator'
              UndefinedKeyword
    PropertySignature
      Identifier: '
    getDecorators'
      QuestionToken
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Decorator'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    setDecorators'
      QuestionToken
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Decorator'
        UndefinedKeyword
  EnumDeclaration
    ExportKeyword
    Identifier: ' TypeReferenceSerializationKind'
    EnumMember
      Identifier: '
    // The TypeReferenceNode could not be resolved.
    // The type name should be emitted using a safe fallback.
    Unknown'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to a type with a constructor
    // function that can be reached at runtime (e.g. a `class`
    // declaration or a `var` declaration for the static side
    // of a type, such as the global `Promise` type in lib.d.ts).
    TypeWithConstructSignatureAndValue'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to a Void-like, Nullable, or Never type.
    VoidNullableOrNeverType'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to a Number-like type.
    NumberLikeType'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to a BigInt-like type.
    BigIntLikeType'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to a String-like type.
    StringLikeType'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to a Boolean-like type.
    BooleanType'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to an Array-like type.
    ArrayLikeType'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to the ESSymbol type.
    ESSymbolType'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolved to the global Promise constructor symbol.
    Promise'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to a Function type or a type with call signatures.
    TypeWithCallSignature'
    EnumMember
      Identifier: '

    // The TypeReferenceNode resolves to any other type.
    ObjectType'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LazyNodeCheckFlags'
    UnionType
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'SuperInstance'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'SuperStatic'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'MethodWithSuperPropertyAccessInAsync'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'MethodWithSuperPropertyAssignmentInAsync'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'ContainsSuperPropertyInStaticInitializer'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'CaptureArguments'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'ContainsCapturedBlockScopeBinding'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'NeedsLoopOutParameter'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'ContainsConstructorReference'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'ConstructorReference'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'CapturedBlockScopedBinding'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'BlockScopedBindingInLoop'
      TypeReference
        QualifiedName
          Identifier: ' NodeCheckFlags'
          Identifier: 'LoopWithCapturedBlockScopedBinding'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmitResolver'
    MethodSignature
      Identifier: '
    hasGlobalName'
      Parameter
        Identifier: 'name'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    getReferencedExportContainer'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' prefixLocals'
        QuestionToken
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        TypeReference
          Identifier: ' ModuleDeclaration'
        TypeReference
          Identifier: ' EnumDeclaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getReferencedImportDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Identifier'
      UnionType
        TypeReference
          Identifier: ' Declaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getReferencedDeclarationWithCollidingName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Identifier'
      UnionType
        TypeReference
          Identifier: ' Declaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isDeclarationWithCollidingName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Declaration'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isValueAliasDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isReferencedAliasDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' checkChildren'
        QuestionToken
        BooleanKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    isTopLevelValueImportEqualsWithEntityName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportEqualsDeclaration'
      BooleanKeyword
    MethodSignature
      Identifier: '
    hasNodeCheckFlag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        TypeReference
          Identifier: ' LazyNodeCheckFlags'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isDeclarationVisible'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' Declaration'
          TypeReference
            Identifier: ' AnyImportSyntax'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isLateBound'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Declaration'
      TypePredicate
        Identifier: ' node'
        TypeReference
          Identifier: ' LateBoundDeclaration'
    MethodSignature
      Identifier: '
    collectLinkedAliases'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ModuleExportName'
      Parameter
        Identifier: ' setVisibility'
        QuestionToken
        BooleanKeyword
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Node'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    markLinkedReferences'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      VoidKeyword
    MethodSignature
      Identifier: '
    isImplementationOfOverload'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SignatureDeclaration'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    requiresAddingImplicitUndefined'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    isExpandoFunctionDeclaration'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' FunctionDeclaration'
          TypeReference
            Identifier: ' VariableDeclaration'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getPropertiesOfContainerFunction'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Declaration'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    MethodSignature
      Identifier: '
    createTypeOfDeclaration'
      Parameter
        Identifier: 'declaration'
        UnionType
          TypeReference
            Identifier: ' AccessorDeclaration'
          TypeReference
            Identifier: ' VariableLikeDeclaration'
          TypeReference
            Identifier: ' PropertyAccessExpression'
          TypeReference
            Identifier: ' ElementAccessExpression'
          TypeReference
            Identifier: ' BinaryExpression'
      Parameter
        Identifier: ' enclosingDeclaration'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        TypeReference
          Identifier: ' NodeBuilderFlags'
      Parameter
        Identifier: ' internalFlags'
        TypeReference
          Identifier: ' InternalNodeBuilderFlags'
      Parameter
        Identifier: ' tracker'
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    createReturnTypeOfSignatureDeclaration'
      Parameter
        Identifier: 'signatureDeclaration'
        TypeReference
          Identifier: ' SignatureDeclaration'
      Parameter
        Identifier: ' enclosingDeclaration'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        TypeReference
          Identifier: ' NodeBuilderFlags'
      Parameter
        Identifier: ' internalFlags'
        TypeReference
          Identifier: ' InternalNodeBuilderFlags'
      Parameter
        Identifier: ' tracker'
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    createTypeOfExpression'
      Parameter
        Identifier: 'expr'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' enclosingDeclaration'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        TypeReference
          Identifier: ' NodeBuilderFlags'
      Parameter
        Identifier: ' internalFlags'
        TypeReference
          Identifier: ' InternalNodeBuilderFlags'
      Parameter
        Identifier: ' tracker'
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    createLiteralConstValue'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' VariableDeclaration'
          TypeReference
            Identifier: ' PropertyDeclaration'
          TypeReference
            Identifier: ' PropertySignature'
          TypeReference
            Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' tracker'
        TypeReference
          Identifier: ' SymbolTracker'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    isSymbolAccessible'
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' meaning'
        UnionType
          TypeReference
            Identifier: ' SymbolFlags'
          UndefinedKeyword
      Parameter
        Identifier: ' shouldComputeAliasToMarkVisible'
        BooleanKeyword
      TypeReference
        Identifier: ' SymbolAccessibilityResult'
    MethodSignature
      Identifier: '
    isEntityNameVisible'
      Parameter
        Identifier: 'entityName'
        TypeReference
          Identifier: ' EntityNameOrEntityNameExpression'
      Parameter
        Identifier: ' enclosingDeclaration'
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' SymbolVisibilityResult'
    MethodSignature
      Identifier: '
    // Returns the constant value this property access resolves to, or 'undefined' for a non-constant
    getConstantValue'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' EnumMember'
          TypeReference
            Identifier: ' PropertyAccessExpression'
          TypeReference
            Identifier: ' ElementAccessExpression'
      UnionType
        StringKeyword
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getEnumMemberValue'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' EnumMember'
      UnionType
        TypeReference
          Identifier: ' EvaluatorResult'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getReferencedValueDeclaration'
      Parameter
        Identifier: 'reference'
        TypeReference
          Identifier: ' Identifier'
      UnionType
        TypeReference
          Identifier: ' Declaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getReferencedValueDeclarations'
      Parameter
        Identifier: 'reference'
        TypeReference
          Identifier: ' Identifier'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Declaration'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getTypeReferenceSerializationKind'
      Parameter
        Identifier: 'typeName'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' location'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' TypeReferenceSerializationKind'
    MethodSignature
      Identifier: '
    isOptionalParameter'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ParameterDeclaration'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isArgumentsLocalBinding'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Identifier'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getExternalModuleFileFromDeclaration'
      Parameter
        Identifier: 'declaration'
        UnionType
          TypeReference
            Identifier: ' ImportEqualsDeclaration'
          TypeReference
            Identifier: ' ImportDeclaration'
          TypeReference
            Identifier: ' ExportDeclaration'
          TypeReference
            Identifier: ' ModuleDeclaration'
          TypeReference
            Identifier: ' ImportTypeNode'
          TypeReference
            Identifier: ' ImportCall'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isLiteralConstDeclaration'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' VariableDeclaration'
          TypeReference
            Identifier: ' PropertyDeclaration'
          TypeReference
            Identifier: ' PropertySignature'
          TypeReference
            Identifier: ' ParameterDeclaration'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getJsxFactoryEntity'
      Parameter
        Identifier: 'location'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      UnionType
        TypeReference
          Identifier: ' EntityName'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getJsxFragmentFactoryEntity'
      Parameter
        Identifier: 'location'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      UnionType
        TypeReference
          Identifier: ' EntityName'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isBindingCapturedByNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' decl'
        UnionType
          TypeReference
            Identifier: ' VariableDeclaration'
          TypeReference
            Identifier: ' BindingElement'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getDeclarationStatementsForSourceFile'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' flags'
        TypeReference
          Identifier: ' NodeBuilderFlags'
      Parameter
        Identifier: ' internalFlags'
        TypeReference
          Identifier: ' InternalNodeBuilderFlags'
      Parameter
        Identifier: ' tracker'
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Statement'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isImportRequiredByAugmentation'
      Parameter
        Identifier: 'decl'
        TypeReference
          Identifier: ' ImportDeclaration'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isDefinitelyReferenceToGlobalSymbolObject'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      BooleanKeyword
    MethodSignature
      Identifier: '
    createLateBoundIndexSignatures'
      Parameter
        Identifier: 'cls'
        TypeReference
          Identifier: ' ClassLikeDeclaration'
      Parameter
        Identifier: ' enclosingDeclaration'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' flags'
        TypeReference
          Identifier: ' NodeBuilderFlags'
      Parameter
        Identifier: ' internalFlags'
        TypeReference
          Identifier: ' InternalNodeBuilderFlags'
      Parameter
        Identifier: ' tracker'
        TypeReference
          Identifier: ' SymbolTracker'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' IndexSignatureDeclaration'
        UndefinedKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' SymbolFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    FunctionScopedVariable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Variable (var) or parameter
    BlockScopedVariable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // A block-scoped variable (let or const)
    Property'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Property or enum member
    EnumMember'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Enum member
    Function'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Function
    Class'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Class
    Interface'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Interface
    ConstEnum'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Const enum
    RegularEnum'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Enum
    ValueModule'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Instantiated module
    NamespaceModule'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Uninstantiated module
    TypeLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Type Literal or mapped type
    ObjectLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Object Literal
    Method'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Method
    Constructor'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Constructor
    GetAccessor'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Get accessor
    SetAccessor'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Set accessor
    Signature'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Call, construct, or index signature
    TypeParameter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Type parameter
    TypeAlias'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Type alias
    ExportValue'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Exported value marker (see comment in declareModuleMember in binder)
    Alias'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // An alias for another symbol (see comment in isAliasSymbolDeclaration in checker)
    Prototype'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Prototype property (no source representation)
    ExportStar'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Export * declaration
    Optional'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Optional property
    Transient'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Transient symbol (created during type check)
    Assignment'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Assignment treated as declaration (eg `this.prop = 1`)
    ModuleExports'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Symbol for CommonJS `module` of `module.exports`
    All'
      PrefixUnaryExpression
        NumericLiteral
    EnumMember
      Identifier: '

    Enum'
      BinaryExpression
        Identifier: ' RegularEnum'
        BarToken
        Identifier: ' ConstEnum'
    EnumMember
      Identifier: '
    Variable'
      BinaryExpression
        Identifier: ' FunctionScopedVariable'
        BarToken
        Identifier: ' BlockScopedVariable'
    EnumMember
      Identifier: '
    Value'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        BinaryExpression
                          Identifier: ' Variable'
                          BarToken
                          Identifier: ' Property'
                        BarToken
                        Identifier: ' EnumMember'
                      BarToken
                      Identifier: ' ObjectLiteral'
                    BarToken
                    Identifier: ' Function'
                  BarToken
                  Identifier: ' Class'
                BarToken
                Identifier: ' Enum'
              BarToken
              Identifier: ' ValueModule'
            BarToken
            Identifier: ' Method'
          BarToken
          Identifier: ' GetAccessor'
        BarToken
        Identifier: ' SetAccessor'
    EnumMember
      Identifier: '
    Type'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' Class'
                  BarToken
                  Identifier: ' Interface'
                BarToken
                Identifier: ' Enum'
              BarToken
              Identifier: ' EnumMember'
            BarToken
            Identifier: ' TypeLiteral'
          BarToken
          Identifier: ' TypeParameter'
        BarToken
        Identifier: ' TypeAlias'
    EnumMember
      Identifier: '
    Namespace'
      BinaryExpression
        BinaryExpression
          Identifier: ' ValueModule'
          BarToken
          Identifier: ' NamespaceModule'
        BarToken
        Identifier: ' Enum'
    EnumMember
      Identifier: '
    Module'
      BinaryExpression
        Identifier: ' ValueModule'
        BarToken
        Identifier: ' NamespaceModule'
    EnumMember
      Identifier: '
    Accessor'
      BinaryExpression
        Identifier: ' GetAccessor'
        BarToken
        Identifier: ' SetAccessor'
    EnumMember
      Identifier: '

    // Variables can be redeclared, but can not redeclare a block-scoped declaration with the
    // same name, or any other value that is not a variable, e.g. ValueModule or Class
    FunctionScopedVariableExcludes'
      BinaryExpression
        Identifier: ' Value'
        AmpersandToken
        PrefixUnaryExpression
          Identifier: 'FunctionScopedVariable'
    EnumMember
      Identifier: '

    // Block-scoped declarations are not allowed to be re-declared
    // they can not merge with anything in the value space
    BlockScopedVariableExcludes'
      Identifier: ' Value'
    EnumMember
      Identifier: '

    ParameterExcludes'
      Identifier: ' Value'
    EnumMember
      Identifier: '
    PropertyExcludes'
      Identifier: ' None'
    EnumMember
      Identifier: '
    EnumMemberExcludes'
      BinaryExpression
        Identifier: ' Value'
        BarToken
        Identifier: ' Type'
    EnumMember
      Identifier: '
    FunctionExcludes'
      BinaryExpression
        Identifier: ' Value'
        AmpersandToken
        PrefixUnaryExpression
          ParenthesizedExpression
            BinaryExpression
              BinaryExpression
                Identifier: 'Function'
                BarToken
                Identifier: ' ValueModule'
              BarToken
              Identifier: ' Class'
    EnumMember
      Identifier: '
    ClassExcludes'
      BinaryExpression
        ParenthesizedExpression
          BinaryExpression
            Identifier: 'Value'
            BarToken
            Identifier: ' Type'
        AmpersandToken
        PrefixUnaryExpression
          ParenthesizedExpression
            BinaryExpression
              BinaryExpression
                Identifier: 'ValueModule'
                BarToken
                Identifier: ' Interface'
              BarToken
              Identifier: ' Function'
    EnumMember
      Identifier: ' // class-interface mergability done in checker.ts
    InterfaceExcludes'
      BinaryExpression
        Identifier: ' Type'
        AmpersandToken
        PrefixUnaryExpression
          ParenthesizedExpression
            BinaryExpression
              Identifier: 'Interface'
              BarToken
              Identifier: ' Class'
    EnumMember
      Identifier: '
    RegularEnumExcludes'
      BinaryExpression
        ParenthesizedExpression
          BinaryExpression
            Identifier: 'Value'
            BarToken
            Identifier: ' Type'
        AmpersandToken
        PrefixUnaryExpression
          ParenthesizedExpression
            BinaryExpression
              Identifier: 'RegularEnum'
              BarToken
              Identifier: ' ValueModule'
    EnumMember
      Identifier: ' // regular enums merge only with regular enums and modules
    ConstEnumExcludes'
      BinaryExpression
        ParenthesizedExpression
          BinaryExpression
            Identifier: 'Value'
            BarToken
            Identifier: ' Type'
        AmpersandToken
        PrefixUnaryExpression
          Identifier: 'ConstEnum'
    EnumMember
      Identifier: ' // const enums merge only with const enums
    ValueModuleExcludes'
      BinaryExpression
        Identifier: ' Value'
        AmpersandToken
        PrefixUnaryExpression
          ParenthesizedExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: 'Function'
                  BarToken
                  Identifier: ' Class'
                BarToken
                Identifier: ' RegularEnum'
              BarToken
              Identifier: ' ValueModule'
    EnumMember
      Identifier: '
    NamespaceModuleExcludes'
      NumericLiteral
    EnumMember
      Identifier: '
    MethodExcludes'
      BinaryExpression
        Identifier: ' Value'
        AmpersandToken
        PrefixUnaryExpression
          Identifier: 'Method'
    EnumMember
      Identifier: '
    GetAccessorExcludes'
      BinaryExpression
        Identifier: ' Value'
        AmpersandToken
        PrefixUnaryExpression
          Identifier: 'SetAccessor'
    EnumMember
      Identifier: '
    SetAccessorExcludes'
      BinaryExpression
        Identifier: ' Value'
        AmpersandToken
        PrefixUnaryExpression
          Identifier: 'GetAccessor'
    EnumMember
      Identifier: '
    AccessorExcludes'
      BinaryExpression
        Identifier: ' Value'
        AmpersandToken
        PrefixUnaryExpression
          Identifier: 'Accessor'
    EnumMember
      Identifier: '
    TypeParameterExcludes'
      BinaryExpression
        Identifier: ' Type'
        AmpersandToken
        PrefixUnaryExpression
          Identifier: 'TypeParameter'
    EnumMember
      Identifier: '
    TypeAliasExcludes'
      Identifier: ' Type'
    EnumMember
      Identifier: '
    AliasExcludes'
      Identifier: ' Alias'
    EnumMember
      Identifier: '

    ModuleMember'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    Identifier: ' Variable'
                    BarToken
                    Identifier: ' Function'
                  BarToken
                  Identifier: ' Class'
                BarToken
                Identifier: ' Interface'
              BarToken
              Identifier: ' Enum'
            BarToken
            Identifier: ' Module'
          BarToken
          Identifier: ' TypeAlias'
        BarToken
        Identifier: ' Alias'
    EnumMember
      Identifier: '

    ExportHasLocal'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' Function'
            BarToken
            Identifier: ' Class'
          BarToken
          Identifier: ' Enum'
        BarToken
        Identifier: ' ValueModule'
    EnumMember
      Identifier: '

    BlockScoped'
      BinaryExpression
        BinaryExpression
          Identifier: ' BlockScopedVariable'
          BarToken
          Identifier: ' Class'
        BarToken
        Identifier: ' Enum'
    EnumMember
      Identifier: '

    PropertyOrAccessor'
      BinaryExpression
        Identifier: ' Property'
        BarToken
        Identifier: ' Accessor'
    EnumMember
      Identifier: '

    ClassMember'
      BinaryExpression
        BinaryExpression
          Identifier: ' Method'
          BarToken
          Identifier: ' Accessor'
        BarToken
        Identifier: ' Property'
    EnumMember
      Identifier: '

    /** @internal */
    ExportSupportsDefaultModifier'
      BinaryExpression
        BinaryExpression
          Identifier: ' Class'
          BarToken
          Identifier: ' Function'
        BarToken
        Identifier: ' Interface'
    EnumMember
      Identifier: '

    /** @internal */
    ExportDoesNotSupportDefaultModifier'
      PrefixUnaryExpression
        Identifier: 'ExportSupportsDefaultModifier'
    EnumMember
      Identifier: '

    /** @internal */
    // The set of things we consider semantically classifiable.  Used to speed up the LS during
    // classification.
    Classifiable'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' Class'
                  BarToken
                  Identifier: ' Enum'
                BarToken
                Identifier: ' TypeAlias'
              BarToken
              Identifier: ' Interface'
            BarToken
            Identifier: ' TypeParameter'
          BarToken
          Identifier: ' Module'
        BarToken
        Identifier: ' Alias'
    EnumMember
      Identifier: '

    /** @internal */
    LateBindingContainer'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' Class'
              BarToken
              Identifier: ' Interface'
            BarToken
            Identifier: ' TypeLiteral'
          BarToken
          Identifier: ' ObjectLiteral'
        BarToken
        Identifier: ' Function'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SymbolId'
    NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Symbol'
    PropertySignature
      Identifier: '
    flags'
      TypeReference
        Identifier: ' SymbolFlags'
    PropertySignature
      Identifier: '                     // Symbol flags
    escapedName'
      TypeReference
        Identifier: ' __String'
    PropertySignature
      Identifier: '                  // Name of symbol
    declarations'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Declaration'
    PropertySignature
      Identifier: '           // Declarations associated with this symbol
    valueDeclaration'
      QuestionToken
      TypeReference
        Identifier: ' Declaration'
    PropertySignature
      Identifier: '         // First value declaration of the symbol
    members'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: '                  // Class, interface or object literal instance members
    exports'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: '                  // Module exports
    globalExports'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: '            // Conditional global UMD exports
    /** @internal */ id'
      TypeReference
        Identifier: ' SymbolId'
    PropertySignature
      Identifier: '          // Unique id (used to look up SymbolLinks)
    /** @internal */ mergeId'
      NumberKeyword
    PropertySignature
      Identifier: '       // Merge id (used to look up merged symbol)
    /** @internal */ parent'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '       // Parent symbol
    /** @internal */ exportSymbol'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: ' // Exported symbol associated with this symbol
    /** @internal */ constEnumOnlyModule'
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: ' // True if module contains only const enums or other modules with only const enums
    /** @internal */ isReferenced'
      QuestionToken
      TypeReference
        Identifier: ' SymbolFlags'
    PropertySignature
      Identifier: ' // True if the symbol is referenced elsewhere. Keeps track of the meaning of a reference in case a symbol is both a type parameter and parameter.
    /** @internal */ lastAssignmentPos'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: ' // Source position of last node that assigns value to symbol. Negative if it is assigned anywhere definitely
    /** @internal */ isReplaceableByMethod'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Can this Javascript class property be replaced by a method symbol?
    /** @internal */ assignmentDeclarationMembers'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        NumberKeyword
        TypeReference
          Identifier: ' Declaration'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SymbolLinks'
    PropertySignature
      Identifier: '
    _symbolLinksBrand'
      AnyKeyword
    PropertySignature
      Identifier: '
    immediateTarget'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                   // Immediate target of an alias. May be another alias. Do not access directly, use `checker.getImmediateAliasedSymbol` instead.
    aliasTarget'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                       // Resolved (non-alias) target of an alias
    target'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                            // Original version of an instantiated symbol
    type'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '                                // Type of value symbol
    writeType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '                           // Type of value symbol in write contexts
    nameType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '                            // Type associated with a late-bound symbol
    uniqueESSymbolType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '                  // UniqueESSymbol type for a symbol
    declaredType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '                        // Type of class, interface, enum, type alias, or type parameter
    typeParameters'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' TypeParameter'
    PropertySignature
      Identifier: '           // Type parameters of type alias (undefined if non-generic)
    instantiations'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' Type'
    PropertySignature
      Identifier: '         // Instantiations of generic type alias (undefined if non-generic)
    inferredClassSymbol'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'SymbolId'
        TypeReference
          Identifier: ' TransientSymbol'
    PropertySignature
      Identifier: ' // Symbol of an inferred ES5 constructor function
    mapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '                        // Type mapper for instantiation alias
    referenced'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '                       // True if alias symbol has been referenced as a value that can be emitted
    containingType'
      QuestionToken
      TypeReference
        Identifier: ' UnionOrIntersectionType'
    PropertySignature
      Identifier: '   // Containing union or intersection type for synthetic property
    leftSpread'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                        // Left source for synthetic spread property
    rightSpread'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                       // Right source for synthetic spread property
    syntheticOrigin'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                   // For a property on a mapped or spread type, points back to the original property
    isDiscriminantProperty'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '           // True if discriminant synthetic property
    resolvedExports'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: '              // Resolved exports of module or combined early- and late-bound static members of a class.
    resolvedMembers'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: '              // Combined early- and late-bound members of a symbol
    exportsChecked'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '                   // True if exports of external module have been checked
    typeParametersChecked'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '            // True if type parameters of merged class and interface declarations have been checked.
    isDeclarationWithCollidingName'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '   // True if symbol is block scoped redeclaration
    bindingElement'
      QuestionToken
      TypeReference
        Identifier: ' BindingElement'
    PropertySignature
      Identifier: '            // Binding element associated with property symbol
    originatingImport'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ImportDeclaration'
        TypeReference
          Identifier: ' ImportCall'
    PropertySignature
      Identifier: ' // Import declaration which produced the symbol, present if the symbol is marked as uncallable but had call signatures in `resolveESModuleSymbol`
    lateSymbol'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                        // Late-bound symbol for a computed property
    specifierCache'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'ModeAwareCacheKey'
        StringKeyword
    PropertySignature
      Identifier: ' // For symbols corresponding to external modules, a cache of incoming path -> module specifier name mappings
    extendedContainers'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    PropertySignature
      Identifier: '              // Containers (other than the parent) which this symbol is aliased in
    extendedContainersByFile'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'NodeId'
        ArrayType
          TypeReference
            Identifier: ' Symbol'
    PropertySignature
      Identifier: ' // Containers (other than the parent) which this symbol is aliased in
    variances'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' VarianceFlags'
    PropertySignature
      Identifier: '                // Alias symbol type argument variance cache
    deferralConstituents'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Type'
    PropertySignature
      Identifier: '              // Calculated list of constituents for a deferred type
    deferralWriteConstituents'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Type'
    PropertySignature
      Identifier: '         // Constituents of a deferred `writeType`
    deferralParent'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '                      // Source union/intersection of a deferred type
    cjsExportMerged'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                   // Version of the symbol with all non export= exports merged with the export= target
    typeOnlyDeclaration'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' TypeOnlyAliasDeclaration'
        LiteralType
          FalseKeyword
    PropertySignature
      Identifier: ' // First resolved alias declaration that makes the symbol only usable in type constructs
    typeOnlyExportStarMap'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: '__String'
        IntersectionType
          TypeReference
            Identifier: ' ExportDeclaration'
          TypeLiteral
            PropertySignature
              ReadonlyKeyword
              Identifier: ' isTypeOnly'
              LiteralType
                TrueKeyword
            PropertySignature
              ReadonlyKeyword
              Identifier: ' moduleSpecifier'
              TypeReference
                Identifier: ' Expression'
    PropertySignature
      Identifier: ' // Set on a module symbol when some of its exports were resolved through a 'export type * from "mod"' declaration
    typeOnlyExportStarName'
      QuestionToken
      TypeReference
        Identifier: ' __String'
    PropertySignature
      Identifier: '          // Set to the name of the symbol re-exported by an 'export type *' declaration, when different from the symbol name
    isConstructorDeclaredProperty'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '    // Property declared through 'this.x = ...' assignment in constructor
    tupleLabelDeclaration'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' NamedTupleMember'
        TypeReference
          Identifier: ' ParameterDeclaration'
    PropertySignature
      Identifier: ' // Declaration associated with the tuple's label
    accessibleChainCache'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        UnionType
          ArrayType
            TypeReference
              Identifier: ' Symbol'
          UndefinedKeyword
    PropertySignature
      Identifier: '
    filteredIndexSymbolCache'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' Symbol'
    PropertySignature
      Identifier: ' //Symbol with applicable declarations
    requestedExternalEmitHelpers'
      QuestionToken
      TypeReference
        Identifier: ' ExternalEmitHelpers'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' CheckFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Instantiated'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Instantiated symbol
    SyntheticProperty'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Property in union or intersection type
    SyntheticMethod'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Method in union or intersection type
    Readonly'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Readonly transient symbol
    ReadPartial'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Synthetic property present in some but not all constituents
    WritePartial'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Synthetic property present in some but only satisfied by an index signature in others
    HasNonUniformType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Synthetic property with non-uniform type in constituents
    HasLiteralType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Synthetic property with at least one literal type in constituents
    ContainsPublic'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Synthetic property with public constituent(s)
    ContainsProtected'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Synthetic property with protected constituent(s)
    ContainsPrivate'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Synthetic property with private constituent(s)
    ContainsStatic'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Synthetic property with static constituent(s)
    Late'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Late-bound symbol for a computed property with a dynamic name
    ReverseMapped'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Property of reverse-inferred homomorphic mapped type
    OptionalParameter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Optional parameter
    RestParameter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Rest parameter
    DeferredType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Calculation of the type of this symbol is deferred due to processing costs, should be fetched with `getTypeOfSymbolWithDeferredType`
    HasNeverType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Synthetic property with at least one never type in constituents
    Mapped'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Property of mapped type
    StripOptional'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Strip optionality in mapped property
    Unresolved'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Unresolved type alias symbol
    Synthetic'
      BinaryExpression
        Identifier: ' SyntheticProperty'
        BarToken
        Identifier: ' SyntheticMethod'
    EnumMember
      Identifier: '
    Discriminant'
      BinaryExpression
        Identifier: ' HasNonUniformType'
        BarToken
        Identifier: ' HasLiteralType'
    EnumMember
      Identifier: '
    Partial'
      BinaryExpression
        Identifier: ' ReadPartial'
        BarToken
        Identifier: ' WritePartial'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TransientSymbolLinks'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SymbolLinks'
    PropertySignature
      Identifier: '
    checkFlags'
      TypeReference
        Identifier: ' CheckFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TransientSymbol'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '
    links'
      TypeReference
        Identifier: ' TransientSymbolLinks'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MappedSymbolLinks'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TransientSymbolLinks'
    PropertySignature
      Identifier: '
    mappedType'
      TypeReference
        Identifier: ' MappedType'
    PropertySignature
      Identifier: '
    keyType'
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MappedSymbol'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TransientSymbol'
    PropertySignature
      Identifier: '
    links'
      TypeReference
        Identifier: ' MappedSymbolLinks'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReverseMappedSymbolLinks'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TransientSymbolLinks'
    PropertySignature
      Identifier: '
    propertyType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    mappedType'
      TypeReference
        Identifier: ' MappedType'
    PropertySignature
      Identifier: '
    constraintType'
      TypeReference
        Identifier: ' IndexType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReverseMappedSymbol'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TransientSymbol'
    PropertySignature
      Identifier: '
    links'
      TypeReference
        Identifier: ' ReverseMappedSymbolLinks'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' InternalSymbolName'
    EnumMember
      Identifier: '
    Call'
      StringLiteral
    EnumMember
      Identifier: ' // Call signatures
    Constructor'
      StringLiteral
    EnumMember
      Identifier: ' // Constructor implementations
    New'
      StringLiteral
    EnumMember
      Identifier: ' // Constructor signatures
    Index'
      StringLiteral
    EnumMember
      Identifier: ' // Index signatures
    ExportStar'
      StringLiteral
    EnumMember
      Identifier: ' // Module export * declarations
    Global'
      StringLiteral
    EnumMember
      Identifier: ' // Global self-reference
    Missing'
      StringLiteral
    EnumMember
      Identifier: ' // Indicates missing symbol
    Type'
      StringLiteral
    EnumMember
      Identifier: ' // Anonymous type literal symbol
    Object'
      StringLiteral
    EnumMember
      Identifier: ' // Anonymous object literal declaration
    JSXAttributes'
      StringLiteral
    EnumMember
      Identifier: ' // Anonymous JSX attributes object literal declaration
    Class'
      StringLiteral
    EnumMember
      Identifier: ' // Unnamed class expression
    Function'
      StringLiteral
    EnumMember
      Identifier: ' // Unnamed function expression
    Computed'
      StringLiteral
    EnumMember
      Identifier: ' // Computed property name declaration with dynamic name
    Resolving'
      StringLiteral
    EnumMember
      Identifier: ' // Indicator symbol used to mark partially resolved type aliases
    ExportEquals'
      StringLiteral
    EnumMember
      Identifier: ' // Export assignment symbol
    Default'
      StringLiteral
    EnumMember
      Identifier: ' // Default export symbol (technically not wholly internal, but included here for usability)
    This'
      StringLiteral
    EnumMember
      Identifier: '
    InstantiationExpression'
      StringLiteral
    EnumMember
      Identifier: ' // Instantiation expressions
    ImportAttributes'
      StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' __String'
    UnionType
      ParenthesizedType
        IntersectionType
          StringKeyword
          TypeLiteral
            PropertySignature
              Identifier: ' __escapedIdentifier'
              VoidKeyword
      ParenthesizedType
        IntersectionType
          VoidKeyword
          TypeLiteral
            PropertySignature
              Identifier: ' __escapedIdentifier'
              VoidKeyword
      TypeReference
        Identifier: ' InternalSymbolName'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ReadonlyUnderscoreEscapedMap'
    TypeParameter
      Identifier: 'T'
    TypeReference
      Identifier: ' ReadonlyMap'
      TypeReference
        Identifier: '__String'
      TypeReference
        Identifier: ' T'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' UnderscoreEscapedMap'
    TypeParameter
      Identifier: 'T'
    TypeReference
      Identifier: ' Map'
      TypeReference
        Identifier: '__String'
      TypeReference
        Identifier: ' T'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SymbolTable'
    TypeReference
      Identifier: ' Map'
      TypeReference
        Identifier: '__String'
      TypeReference
        Identifier: ' Symbol'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PatternAmbientModule'
    PropertySignature
      Identifier: '
    pattern'
      TypeReference
        Identifier: ' Pattern'
    PropertySignature
      Identifier: '
    symbol'
      TypeReference
        Identifier: ' Symbol'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' NodeCheckFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    TypeChecked'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Node has been type checked
    LexicalThis'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Lexical 'this' reference
    CaptureThis'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Lexical 'this' used in body
    CaptureNewTarget'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Lexical 'new.target' used in body
    SuperInstance'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Instance 'super' reference
    SuperStatic'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Static 'super' reference
    ContextChecked'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Contextual types have been assigned
    MethodWithSuperPropertyAccessInAsync'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // A method that contains a SuperProperty access in an async context.
    MethodWithSuperPropertyAssignmentInAsync'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // A method that contains a SuperProperty assignment in an async context.
    CaptureArguments'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Lexical 'arguments' used in body
    EnumValuesComputed'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Values for enum members have been computed, and any errors have been reported for them.
    LexicalModuleMergesWithClass'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Instantiated lexical module declaration is merged with a previous class declaration.
    LoopWithCapturedBlockScopedBinding'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Loop that contains block scoped variable captured in closure
    ContainsCapturedBlockScopeBinding'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Part of a loop that contains block scoped variable captured in closure
    CapturedBlockScopedBinding'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Block-scoped binding that is captured in some function
    BlockScopedBindingInLoop'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Block-scoped binding with declaration nested inside iteration statement
    NeedsLoopOutParameter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Block scoped binding whose value should be explicitly copied outside of the converted loop
    AssignmentsMarked'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Parameter assignments have been marked
    ContainsConstructorReference'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Class or class element that contains a binding that references the class constructor.
    ConstructorReference'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Binding to a class constructor inside of the class's body.
    ContainsClassWithPrivateIdentifiers'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Marked on all block-scoped containers containing a class with private identifiers.
    ContainsSuperPropertyInStaticInitializer'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Marked on all block-scoped containers containing a static initializer with 'super.x' or 'super[x]'.
    InCheckIdentifier'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    PartiallyTypeChecked'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Node has been partially type checked

    /** These flags are LazyNodeCheckFlags and can be calculated lazily by `hasNodeCheckFlag` */
    LazyFlags'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        BinaryExpression
                          BinaryExpression
                            BinaryExpression
                              Identifier: ' SuperInstance'
                              BarToken
                              Identifier: ' SuperStatic'
                            BarToken
                            Identifier: ' MethodWithSuperPropertyAccessInAsync'
                          BarToken
                          Identifier: ' MethodWithSuperPropertyAssignmentInAsync'
                        BarToken
                        Identifier: ' ContainsSuperPropertyInStaticInitializer'
                      BarToken
                      Identifier: ' CaptureArguments'
                    BarToken
                    Identifier: ' ContainsCapturedBlockScopeBinding'
                  BarToken
                  Identifier: ' NeedsLoopOutParameter'
                BarToken
                Identifier: ' ContainsConstructorReference'
              BarToken
              Identifier: ' ConstructorReference'
            BarToken
            Identifier: ' CapturedBlockScopedBinding'
          BarToken
          Identifier: ' BlockScopedBindingInLoop'
        BarToken
        Identifier: ' LoopWithCapturedBlockScopedBinding'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EvaluatorResult'
    TypeParameter
      Identifier: 'T'
      UnionType
        StringKeyword
        NumberKeyword
        UndefinedKeyword
      UnionType
        StringKeyword
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    value'
      TypeReference
        Identifier: ' T'
    PropertySignature
      Identifier: '
    isSyntacticallyString'
      BooleanKeyword
    PropertySignature
      Identifier: '
    resolvedOtherFiles'
      BooleanKeyword
    PropertySignature
      Identifier: '
    hasExternalReferences'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NodeLinks'
    PropertySignature
      Identifier: '
    flags'
      TypeReference
        Identifier: ' NodeCheckFlags'
    PropertySignature
      Identifier: '              // Set of flags specific to Node
    calculatedFlags'
      TypeReference
        Identifier: ' NodeCheckFlags'
    PropertySignature
      Identifier: '    // Set of flags which have definitely been calculated already
    resolvedType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '                // Cached type of type node
    resolvedSignature'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
    PropertySignature
      Identifier: '      // Cached signature of signature node or call expression
    resolvedSymbol'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '            // Cached name resolution result
    resolvedIndexInfo'
      QuestionToken
      TypeReference
        Identifier: ' IndexInfo'
    PropertySignature
      Identifier: '      // Cached indexing info resolution result
    effectsSignature'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
    PropertySignature
      Identifier: '       // Signature with possible control flow effects
    enumMemberValue'
      QuestionToken
      TypeReference
        Identifier: ' EvaluatorResult'
    PropertySignature
      Identifier: '  // Constant value of enum member
    isVisible'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '                // Is this node visible
    containsArgumentsReference'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Whether a function-like declaration contains an 'arguments' reference
    hasReportedStatementInAmbientContext'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Cache boolean if we report statements in ambient context
    jsxFlags'
      TypeReference
        Identifier: ' JsxFlags'
    PropertySignature
      Identifier: '                 // flags for knowing what kind of element/attributes we're dealing with
    resolvedJsxElementAttributesType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: ' // resolved element attributes type of a JSX openinglike element
    resolvedJsxElementAllAttributesType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: ' // resolved all element attributes type of a JSX openinglike element
    resolvedJSDocType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '           // Resolved type of a JSDoc type reference
    switchTypes'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Type'
    PropertySignature
      Identifier: '               // Cached array of switch case expression types
    jsxNamespace'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Symbol'
        LiteralType
          FalseKeyword
    PropertySignature
      Identifier: '      // Resolved jsx namespace symbol for this node
    jsxImplicitImportContainer'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Symbol'
        LiteralType
          FalseKeyword
    PropertySignature
      Identifier: ' // Resolved module symbol the implicit jsx import of this file should refer to
    contextFreeType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '             // Cached context-free type used by the first pass of inference; used when a function's return is partially contextually sensitive
    deferredNodes'
      QuestionToken
      TypeReference
        Identifier: ' Set'
        TypeReference
          Identifier: 'Node'
    PropertySignature
      Identifier: '          // Set of nodes whose checking has been deferred
    capturedBlockScopeBindings'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    PropertySignature
      Identifier: ' // Block-scoped bindings captured beneath this part of an IterationStatement
    outerTypeParameters'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' TypeParameter'
    PropertySignature
      Identifier: ' // Outer type parameters of anonymous object type
    isExhaustive'
      QuestionToken
      UnionType
        BooleanKeyword
        LiteralType
          NumericLiteral
    PropertySignature
      Identifier: '         // Is node an exhaustive switch statement (0 indicates in-process resolution)
    skipDirectInference'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '         // Flag set by the API `getContextualType` call on a node when `Completions` is passed to force the checker to skip making inferences to a node's type
    declarationRequiresScopeChange'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Set by `useOuterVariableScopeInParameter` in checker when downlevel emit would change the name resolution scope inside of a parameter.
    serializedTypes'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' SerializedTypeEntry'
    PropertySignature
      Identifier: ' // Collection of types serialized at this location
    decoratorSignature'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
    PropertySignature
      Identifier: '     // Signature for decorator as if invoked by the runtime.
    spreadIndices'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: ' first'
          UnionType
            NumberKeyword
            UndefinedKeyword
        PropertySignature
          Identifier: ' last'
          UnionType
            NumberKeyword
            UndefinedKeyword
    PropertySignature
      Identifier: ' // Indices of first and last spread elements in array literal
    parameterInitializerContainsUndefined'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // True if this is a parameter declaration whose type annotation contains "undefined".
    fakeScopeForSignatureDeclaration'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: ' // If present, this is a fake scope injected into an enclosing declaration chain.
    assertionExpressionType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '     // Cached type of the expression of a type assertion
    potentialThisCollisions'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Node'
    PropertySignature
      Identifier: '
    potentialNewTargetCollisions'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Node'
    PropertySignature
      Identifier: '
    potentialWeakMapSetCollisions'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Node'
    PropertySignature
      Identifier: '
    potentialReflectCollisions'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Node'
    PropertySignature
      Identifier: '
    potentialUnusedRenamedBindingElementsInTypes'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' BindingElement'
    PropertySignature
      Identifier: '
    externalHelpersModule'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '     // Resolved symbol for the external helpers module
    instantiationExpressionTypes'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        NumberKeyword
        TypeReference
          Identifier: ' Type'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TrackedSymbol'
    TupleType
      NamedTupleMember
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      NamedTupleMember
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      NamedTupleMember
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SerializedTypeEntry'
    PropertySignature
      Identifier: '
    node'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    truncating'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    addedLength'
      NumberKeyword
    PropertySignature
      Identifier: '
    trackedSymbols'
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TrackedSymbol'
        UndefinedKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' TypeFlags'
    EnumMember
      Identifier: '
    Any'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Unknown'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    String'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Number'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Boolean'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Enum'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Numeric computed enum member value
    BigInt'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    StringLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    NumberLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    BooleanLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    EnumLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Always combined with StringLiteral, NumberLiteral, or Union
    BigIntLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ESSymbol'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Type of symbol primitive introduced in ES6
    UniqueESSymbol'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // unique symbol
    Void'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Undefined'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Null'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Never'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Never type
    TypeParameter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Type parameter
    Object'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Object type
    Union'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Union (T | U)
    Intersection'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Intersection (T & U)
    Index'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // keyof T
    IndexedAccess'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // T[K]
    Conditional'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // T extends U ? X : Y
    Substitution'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Type parameter substitution
    NonPrimitive'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // intrinsic object type
    TemplateLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Template literal type
    StringMapping'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Uppercase/Lowercase type
    /** @internal */
    Reserved1'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Used by union/intersection type construction
    /** @internal */
    Reserved2'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Used by union/intersection type construction

    /** @internal */
    AnyOrUnknown'
      BinaryExpression
        Identifier: ' Any'
        BarToken
        Identifier: ' Unknown'
    EnumMember
      Identifier: '
    /** @internal */
    Nullable'
      BinaryExpression
        Identifier: ' Undefined'
        BarToken
        Identifier: ' Null'
    EnumMember
      Identifier: '
    Literal'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' StringLiteral'
            BarToken
            Identifier: ' NumberLiteral'
          BarToken
          Identifier: ' BigIntLiteral'
        BarToken
        Identifier: ' BooleanLiteral'
    EnumMember
      Identifier: '
    Unit'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' Enum'
            BarToken
            Identifier: ' Literal'
          BarToken
          Identifier: ' UniqueESSymbol'
        BarToken
        Identifier: ' Nullable'
    EnumMember
      Identifier: '
    Freshable'
      BinaryExpression
        Identifier: ' Enum'
        BarToken
        Identifier: ' Literal'
    EnumMember
      Identifier: '
    StringOrNumberLiteral'
      BinaryExpression
        Identifier: ' StringLiteral'
        BarToken
        Identifier: ' NumberLiteral'
    EnumMember
      Identifier: '
    /** @internal */
    StringOrNumberLiteralOrUnique'
      BinaryExpression
        BinaryExpression
          Identifier: ' StringLiteral'
          BarToken
          Identifier: ' NumberLiteral'
        BarToken
        Identifier: ' UniqueESSymbol'
    EnumMember
      Identifier: '
    /** @internal */
    DefinitelyFalsy'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' StringLiteral'
                  BarToken
                  Identifier: ' NumberLiteral'
                BarToken
                Identifier: ' BigIntLiteral'
              BarToken
              Identifier: ' BooleanLiteral'
            BarToken
            Identifier: ' Void'
          BarToken
          Identifier: ' Undefined'
        BarToken
        Identifier: ' Null'
    EnumMember
      Identifier: '
    PossiblyFalsy'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' DefinitelyFalsy'
              BarToken
              Identifier: ' String'
            BarToken
            Identifier: ' Number'
          BarToken
          Identifier: ' BigInt'
        BarToken
        Identifier: ' Boolean'
    EnumMember
      Identifier: '
    /** @internal */
    Intrinsic'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        BinaryExpression
                          BinaryExpression
                            BinaryExpression
                              Identifier: ' Any'
                              BarToken
                              Identifier: ' Unknown'
                            BarToken
                            Identifier: ' String'
                          BarToken
                          Identifier: ' Number'
                        BarToken
                        Identifier: ' BigInt'
                      BarToken
                      Identifier: ' Boolean'
                    BarToken
                    Identifier: ' BooleanLiteral'
                  BarToken
                  Identifier: ' ESSymbol'
                BarToken
                Identifier: ' Void'
              BarToken
              Identifier: ' Undefined'
            BarToken
            Identifier: ' Null'
          BarToken
          Identifier: ' Never'
        BarToken
        Identifier: ' NonPrimitive'
    EnumMember
      Identifier: '
    StringLike'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' String'
            BarToken
            Identifier: ' StringLiteral'
          BarToken
          Identifier: ' TemplateLiteral'
        BarToken
        Identifier: ' StringMapping'
    EnumMember
      Identifier: '
    NumberLike'
      BinaryExpression
        BinaryExpression
          Identifier: ' Number'
          BarToken
          Identifier: ' NumberLiteral'
        BarToken
        Identifier: ' Enum'
    EnumMember
      Identifier: '
    BigIntLike'
      BinaryExpression
        Identifier: ' BigInt'
        BarToken
        Identifier: ' BigIntLiteral'
    EnumMember
      Identifier: '
    BooleanLike'
      BinaryExpression
        Identifier: ' Boolean'
        BarToken
        Identifier: ' BooleanLiteral'
    EnumMember
      Identifier: '
    EnumLike'
      BinaryExpression
        Identifier: ' Enum'
        BarToken
        Identifier: ' EnumLiteral'
    EnumMember
      Identifier: '
    ESSymbolLike'
      BinaryExpression
        Identifier: ' ESSymbol'
        BarToken
        Identifier: ' UniqueESSymbol'
    EnumMember
      Identifier: '
    VoidLike'
      BinaryExpression
        Identifier: ' Void'
        BarToken
        Identifier: ' Undefined'
    EnumMember
      Identifier: '
    /** @internal */
    Primitive'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    Identifier: ' StringLike'
                    BarToken
                    Identifier: ' NumberLike'
                  BarToken
                  Identifier: ' BigIntLike'
                BarToken
                Identifier: ' BooleanLike'
              BarToken
              Identifier: ' EnumLike'
            BarToken
            Identifier: ' ESSymbolLike'
          BarToken
          Identifier: ' VoidLike'
        BarToken
        Identifier: ' Null'
    EnumMember
      Identifier: '
    /** @internal */
    DefinitelyNonNullable'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    Identifier: ' StringLike'
                    BarToken
                    Identifier: ' NumberLike'
                  BarToken
                  Identifier: ' BigIntLike'
                BarToken
                Identifier: ' BooleanLike'
              BarToken
              Identifier: ' EnumLike'
            BarToken
            Identifier: ' ESSymbolLike'
          BarToken
          Identifier: ' Object'
        BarToken
        Identifier: ' NonPrimitive'
    EnumMember
      Identifier: '
    /** @internal */
    DisjointDomains'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    Identifier: ' NonPrimitive'
                    BarToken
                    Identifier: ' StringLike'
                  BarToken
                  Identifier: ' NumberLike'
                BarToken
                Identifier: ' BigIntLike'
              BarToken
              Identifier: ' BooleanLike'
            BarToken
            Identifier: ' ESSymbolLike'
          BarToken
          Identifier: ' VoidLike'
        BarToken
        Identifier: ' Null'
    EnumMember
      Identifier: '
    UnionOrIntersection'
      BinaryExpression
        Identifier: ' Union'
        BarToken
        Identifier: ' Intersection'
    EnumMember
      Identifier: '
    StructuredType'
      BinaryExpression
        BinaryExpression
          Identifier: ' Object'
          BarToken
          Identifier: ' Union'
        BarToken
        Identifier: ' Intersection'
    EnumMember
      Identifier: '
    TypeVariable'
      BinaryExpression
        Identifier: ' TypeParameter'
        BarToken
        Identifier: ' IndexedAccess'
    EnumMember
      Identifier: '
    InstantiableNonPrimitive'
      BinaryExpression
        BinaryExpression
          Identifier: ' TypeVariable'
          BarToken
          Identifier: ' Conditional'
        BarToken
        Identifier: ' Substitution'
    EnumMember
      Identifier: '
    InstantiablePrimitive'
      BinaryExpression
        BinaryExpression
          Identifier: ' Index'
          BarToken
          Identifier: ' TemplateLiteral'
        BarToken
        Identifier: ' StringMapping'
    EnumMember
      Identifier: '
    Instantiable'
      BinaryExpression
        Identifier: ' InstantiableNonPrimitive'
        BarToken
        Identifier: ' InstantiablePrimitive'
    EnumMember
      Identifier: '
    StructuredOrInstantiable'
      BinaryExpression
        Identifier: ' StructuredType'
        BarToken
        Identifier: ' Instantiable'
    EnumMember
      Identifier: '
    /** @internal */
    ObjectFlagsType'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                Identifier: ' Any'
                BarToken
                Identifier: ' Nullable'
              BarToken
              Identifier: ' Never'
            BarToken
            Identifier: ' Object'
          BarToken
          Identifier: ' Union'
        BarToken
        Identifier: ' Intersection'
    EnumMember
      Identifier: '
    /** @internal */
    Simplifiable'
      BinaryExpression
        Identifier: ' IndexedAccess'
        BarToken
        Identifier: ' Conditional'
    EnumMember
      Identifier: '
    /** @internal */
    Singleton'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        BinaryExpression
                          BinaryExpression
                            Identifier: ' Any'
                            BarToken
                            Identifier: ' Unknown'
                          BarToken
                          Identifier: ' String'
                        BarToken
                        Identifier: ' Number'
                      BarToken
                      Identifier: ' Boolean'
                    BarToken
                    Identifier: ' BigInt'
                  BarToken
                  Identifier: ' ESSymbol'
                BarToken
                Identifier: ' Void'
              BarToken
              Identifier: ' Undefined'
            BarToken
            Identifier: ' Null'
          BarToken
          Identifier: ' Never'
        BarToken
        Identifier: ' NonPrimitive'
    EnumMember
      Identifier: '
    // 'Narrowable' types are types where narrowing actually narrows.
    // This *should* be every type other than null, undefined, void, and never
    Narrowable'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        Identifier: ' Any'
                        BarToken
                        Identifier: ' Unknown'
                      BarToken
                      Identifier: ' StructuredOrInstantiable'
                    BarToken
                    Identifier: ' StringLike'
                  BarToken
                  Identifier: ' NumberLike'
                BarToken
                Identifier: ' BigIntLike'
              BarToken
              Identifier: ' BooleanLike'
            BarToken
            Identifier: ' ESSymbol'
          BarToken
          Identifier: ' UniqueESSymbol'
        BarToken
        Identifier: ' NonPrimitive'
    EnumMember
      Identifier: '
    // The following flags are aggregated during union and intersection type construction
    /** @internal */
    IncludesMask'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        Identifier: ' Any'
                        BarToken
                        Identifier: ' Unknown'
                      BarToken
                      Identifier: ' Primitive'
                    BarToken
                    Identifier: ' Never'
                  BarToken
                  Identifier: ' Object'
                BarToken
                Identifier: ' Union'
              BarToken
              Identifier: ' Intersection'
            BarToken
            Identifier: ' NonPrimitive'
          BarToken
          Identifier: ' TemplateLiteral'
        BarToken
        Identifier: ' StringMapping'
    EnumMember
      Identifier: '
    // The following flags are used for different purposes during union and intersection type construction
    /** @internal */
    IncludesMissingType'
      Identifier: ' TypeParameter'
    EnumMember
      Identifier: '
    /** @internal */
    IncludesNonWideningType'
      Identifier: ' Index'
    EnumMember
      Identifier: '
    /** @internal */
    IncludesWildcard'
      Identifier: ' IndexedAccess'
    EnumMember
      Identifier: '
    /** @internal */
    IncludesEmptyObject'
      Identifier: ' Conditional'
    EnumMember
      Identifier: '
    /** @internal */
    IncludesInstantiable'
      Identifier: ' Substitution'
    EnumMember
      Identifier: '
    /** @internal */
    IncludesConstrainedTypeVariable'
      Identifier: ' Reserved1'
    EnumMember
      Identifier: '
    /** @internal */
    IncludesError'
      Identifier: ' Reserved2'
    EnumMember
      Identifier: '
    /** @internal */
    NotPrimitiveUnion'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' Any'
                  BarToken
                  Identifier: ' Unknown'
                BarToken
                Identifier: ' Void'
              BarToken
              Identifier: ' Never'
            BarToken
            Identifier: ' Object'
          BarToken
          Identifier: ' Intersection'
        BarToken
        Identifier: ' IncludesInstantiable'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DestructuringPattern'
    UnionType
      TypeReference
        Identifier: ' BindingPattern'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeId'
    NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Type'
    PropertySignature
      Identifier: '
    flags'
      TypeReference
        Identifier: ' TypeFlags'
    PropertySignature
      Identifier: '                // Flags
    /** @internal */ id'
      TypeReference
        Identifier: ' TypeId'
    PropertySignature
      Identifier: '      // Unique ID
    /** @internal */ checker'
      TypeReference
        Identifier: ' TypeChecker'
    PropertySignature
      Identifier: '
    symbol'
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '                  // Symbol associated with type (if any)
    pattern'
      QuestionToken
      TypeReference
        Identifier: ' DestructuringPattern'
    PropertySignature
      Identifier: '  // Destructuring pattern represented by type (if any)
    aliasSymbol'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '            // Alias associated with type
    aliasTypeArguments'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Type'
    PropertySignature
      Identifier: ' // Alias type arguments (if any)
    /** @internal */
    permissiveInstantiation'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '  // Instantiation with type parameters mapped to wildcard type
    /** @internal */
    restrictiveInstantiation'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: ' // Instantiation with type parameters mapped to unconstrained form
    /** @internal */
    immediateBaseConstraint'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '  // Immediate base constraint cache
    /** @internal */
    widened'
      QuestionToken
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IntrinsicType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    intrinsicName'
      StringKeyword
    PropertySignature
      Identifier: ' // Name of intrinsic type
    debugIntrinsicName'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    objectFlags'
      TypeReference
        Identifier: ' ObjectFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NullableType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' IntrinsicType'
    PropertySignature
      Identifier: '
    objectFlags'
      TypeReference
        Identifier: ' ObjectFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FreshableType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    freshType'
      TypeReference
        Identifier: ' FreshableType'
    PropertySignature
      Identifier: ' // Fresh version of type
    regularType'
      TypeReference
        Identifier: ' FreshableType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FreshableIntrinsicType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FreshableType'
      ExpressionWithTypeArguments
        Identifier: ' IntrinsicType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LiteralType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FreshableType'
    PropertySignature
      Identifier: '
    value'
      UnionType
        StringKeyword
        NumberKeyword
        TypeReference
          Identifier: ' PseudoBigInt'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UniqueESSymbolType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    symbol'
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '
    escapedName'
      TypeReference
        Identifier: ' __String'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' StringLiteralType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralType'
    PropertySignature
      Identifier: '
    value'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NumberLiteralType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralType'
    PropertySignature
      Identifier: '
    value'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BigIntLiteralType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralType'
    PropertySignature
      Identifier: '
    value'
      TypeReference
        Identifier: ' PseudoBigInt'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EnumType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FreshableType'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ObjectFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Class'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Class
    Interface'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Interface
    Reference'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Generic type reference
    Tuple'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Synthesized generic tuple type
    Anonymous'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Anonymous
    Mapped'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Mapped
    Instantiated'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Instantiated anonymous or mapped type
    ObjectLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Originates in an object literal
    EvolvingArray'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Evolving array type
    ObjectLiteralPatternWithComputedProperties'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Object literal pattern with computed properties
    ReverseMapped'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Object contains a property from a reverse-mapped type
    JsxAttributes'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Jsx attributes type
    JSLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Object type declared in JS - disables errors on read/write of nonexisting members
    FreshLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Fresh object literal
    ArrayLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Originates in an array literal
    /** @internal */
    PrimitiveUnion'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Union of only primitive types
    /** @internal */
    ContainsWideningType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Type is or contains undefined or null widening type
    /** @internal */
    ContainsObjectOrArrayLiteral'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Type is or contains object literal type
    /** @internal */
    NonInferrableType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Type is or contains anyFunctionType or silentNeverType
    /** @internal */
    CouldContainTypeVariablesComputed'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // CouldContainTypeVariables flag has been computed
    /** @internal */
    CouldContainTypeVariables'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Type could contain a type variable

    ClassOrInterface'
      BinaryExpression
        Identifier: ' Class'
        BarToken
        Identifier: ' Interface'
    EnumMember
      Identifier: '
    /** @internal */
    RequiresWidening'
      BinaryExpression
        Identifier: ' ContainsWideningType'
        BarToken
        Identifier: ' ContainsObjectOrArrayLiteral'
    EnumMember
      Identifier: '
    /** @internal */
    PropagatingFlags'
      BinaryExpression
        BinaryExpression
          Identifier: ' ContainsWideningType'
          BarToken
          Identifier: ' ContainsObjectOrArrayLiteral'
        BarToken
        Identifier: ' NonInferrableType'
    EnumMember
      Identifier: '
    /** @internal */
    InstantiatedMapped'
      BinaryExpression
        Identifier: ' Mapped'
        BarToken
        Identifier: ' Instantiated'
    EnumMember
      Identifier: '
    // Object flags that uniquely identify the kind of ObjectType
    /** @internal */
    ObjectTypeKindMask'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' ClassOrInterface'
                  BarToken
                  Identifier: ' Reference'
                BarToken
                Identifier: ' Tuple'
              BarToken
              Identifier: ' Anonymous'
            BarToken
            Identifier: ' Mapped'
          BarToken
          Identifier: ' ReverseMapped'
        BarToken
        Identifier: ' EvolvingArray'
    EnumMember
      Identifier: '

    // Flags that require TypeFlags.Object
    ContainsSpread'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Object literal contains spread operation
    ObjectRestType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Originates in object rest declaration
    InstantiationExpressionType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Originates in instantiation expression
    SingleSignatureType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // A single signature type extracted from a potentially broader type
    /** @internal */
    IsClassInstanceClone'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Type is a clone of a class instance type
    // Flags that require TypeFlags.Object and ObjectFlags.Reference
    /** @internal */
    IdenticalBaseTypeCalculated'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // has had `getSingleBaseForNonAugmentingSubtype` invoked on it already
    /** @internal */
    IdenticalBaseTypeExists'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // has a defined cachedEquivalentBaseType member

    // Flags that require TypeFlags.UnionOrIntersection or TypeFlags.Substitution
    /** @internal */
    IsGenericTypeComputed'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // IsGenericObjectType flag has been computed
    /** @internal */
    IsGenericObjectType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Union or intersection contains generic object type
    /** @internal */
    IsGenericIndexType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Union or intersection contains generic index type
    /** @internal */
    IsGenericType'
      BinaryExpression
        Identifier: ' IsGenericObjectType'
        BarToken
        Identifier: ' IsGenericIndexType'
    EnumMember
      Identifier: '

    // Flags that require TypeFlags.Union
    /** @internal */
    ContainsIntersections'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Union contains intersections
    /** @internal */
    IsUnknownLikeUnionComputed'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // IsUnknownLikeUnion flag has been computed
    /** @internal */
    IsUnknownLikeUnion'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Union of null, undefined, and empty object type
    /** @internal */

    // Flags that require TypeFlags.Intersection
    /** @internal */
    IsNeverIntersectionComputed'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // IsNeverLike flag has been computed
    /** @internal */
    IsNeverIntersection'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Intersection reduces to never
    /** @internal */
    IsConstrainedTypeVariable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ObjectFlagsType'
    UnionType
      TypeReference
        Identifier: ' NullableType'
      TypeReference
        Identifier: ' ObjectType'
      TypeReference
        Identifier: ' UnionType'
      TypeReference
        Identifier: ' IntersectionType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ObjectType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    objectFlags'
      TypeReference
        Identifier: ' ObjectFlags'
    PropertySignature
      Identifier: '
    /** @internal */ members'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: '             // Properties by name
    /** @internal */ properties'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    PropertySignature
      Identifier: '             // Properties
    /** @internal */ callSignatures'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Signature'
    PropertySignature
      Identifier: '      // Call signatures of type
    /** @internal */ constructSignatures'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Signature'
    PropertySignature
      Identifier: ' // Construct signatures of type
    /** @internal */ indexInfos'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' IndexInfo'
    PropertySignature
      Identifier: '  // Index signatures
    /** @internal */ objectTypeWithoutAbstractConstructSignatures'
      QuestionToken
      TypeReference
        Identifier: ' ObjectType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InterfaceType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectType'
    PropertySignature
      Identifier: '
    typeParameters'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' TypeParameter'
        UndefinedKeyword
    PropertySignature
      Identifier: '      // Type parameters (undefined if non-generic)
    outerTypeParameters'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' TypeParameter'
        UndefinedKeyword
    PropertySignature
      Identifier: ' // Outer type parameters (undefined if none)
    localTypeParameters'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' TypeParameter'
        UndefinedKeyword
    PropertySignature
      Identifier: ' // Local type parameters (undefined if none)
    thisType'
      UnionType
        TypeReference
          Identifier: ' TypeParameter'
        UndefinedKeyword
    PropertySignature
      Identifier: '              // The "this" type (undefined if none)
    /** @internal */
    resolvedBaseConstructorType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '               // Resolved base constructor type of class
    /** @internal */
    resolvedBaseTypes'
      ArrayType
        TypeReference
          Identifier: ' BaseType'
    PropertySignature
      Identifier: '                    // Resolved base types
    /** @internal */
    baseTypesResolved'
      QuestionToken
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BaseType'
    UnionType
      TypeReference
        Identifier: ' ObjectType'
      TypeReference
        Identifier: ' IntersectionType'
      TypeReference
        Identifier: ' TypeVariable'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InterfaceTypeWithDeclaredMembers'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InterfaceType'
    PropertySignature
      Identifier: '
    declaredProperties'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    PropertySignature
      Identifier: '                   // Declared members
    declaredCallSignatures'
      ArrayType
        TypeReference
          Identifier: ' Signature'
    PropertySignature
      Identifier: '            // Declared call signatures
    declaredConstructSignatures'
      ArrayType
        TypeReference
          Identifier: ' Signature'
    PropertySignature
      Identifier: '       // Declared construct signatures
    declaredIndexInfos'
      ArrayType
        TypeReference
          Identifier: ' IndexInfo'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeReference'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectType'
    PropertySignature
      Identifier: '
    target'
      TypeReference
        Identifier: ' GenericType'
    PropertySignature
      Identifier: ' // Type reference target
    node'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' TypeReferenceNode'
        TypeReference
          Identifier: ' ArrayTypeNode'
        TypeReference
          Identifier: ' TupleTypeNode'
    PropertySignature
      Identifier: '
    /** @internal */
    mapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedTypeArguments'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Type'
    PropertySignature
      Identifier: ' // Resolved type reference type arguments
    /** @internal */
    literalType'
      QuestionToken
      TypeReference
        Identifier: ' TypeReference'
    PropertySignature
      Identifier: ' // Clone of type with ObjectFlags.ArrayLiteral set
    /** @internal */
    cachedEquivalentBaseType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DeferredTypeReference'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeReference'
    PropertySignature
      Identifier: '
    /** @internal */
    node'
      UnionType
        TypeReference
          Identifier: ' TypeReferenceNode'
        TypeReference
          Identifier: ' ArrayTypeNode'
        TypeReference
          Identifier: ' TupleTypeNode'
    PropertySignature
      Identifier: '
    /** @internal */
    mapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '
    /** @internal */
    instantiations'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' Type'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' VarianceFlags'
    EnumMember
      Identifier: '
    Invariant'
      NumericLiteral
    EnumMember
      Identifier: '  // Neither covariant nor contravariant
    Covariant'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Covariant
    Contravariant'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Contravariant
    Bivariant'
      BinaryExpression
        Identifier: ' Covariant'
        BarToken
        Identifier: ' Contravariant'
    EnumMember
      Identifier: '  // Both covariant and contravariant
    Independent'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Unwitnessed type parameter
    VarianceMask'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' Invariant'
            BarToken
            Identifier: ' Covariant'
          BarToken
          Identifier: ' Contravariant'
        BarToken
        Identifier: ' Independent'
    EnumMember
      Identifier: ' // Mask containing all measured variances without the unmeasurable flag
    Unmeasurable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Variance result is unusable - relationship relies on structural comparisons which are not reflected in generic relationships
    Unreliable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Variance result is unreliable - checking may produce false negatives, but not false positives
    AllowsStructuralFallback'
      BinaryExpression
        Identifier: ' Unmeasurable'
        BarToken
        Identifier: ' Unreliable'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' GenericType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InterfaceType'
      ExpressionWithTypeArguments
        Identifier: ' TypeReference'
    PropertySignature
      Identifier: '
    /** @internal */
    instantiations'
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' TypeReference'
    PropertySignature
      Identifier: ' // Generic instantiation cache
    /** @internal */
    variances'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' VarianceFlags'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ElementFlags'
    EnumMember
      Identifier: '
    Required'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // T
    Optional'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // T?
    Rest'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // ...T[]
    Variadic'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // ...T
    Fixed'
      BinaryExpression
        Identifier: ' Required'
        BarToken
        Identifier: ' Optional'
    EnumMember
      Identifier: '
    Variable'
      BinaryExpression
        Identifier: ' Rest'
        BarToken
        Identifier: ' Variadic'
    EnumMember
      Identifier: '
    NonRequired'
      BinaryExpression
        BinaryExpression
          Identifier: ' Optional'
          BarToken
          Identifier: ' Rest'
        BarToken
        Identifier: ' Variadic'
    EnumMember
      Identifier: '
    NonRest'
      BinaryExpression
        BinaryExpression
          Identifier: ' Required'
          BarToken
          Identifier: ' Optional'
        BarToken
        Identifier: ' Variadic'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TupleType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' GenericType'
    PropertySignature
      Identifier: '
    elementFlags'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ElementFlags'
    PropertySignature
      Identifier: '
    /** Number of required or variadic elements */
    minLength'
      NumberKeyword
    PropertySignature
      Identifier: '
    /** Number of initial required or optional elements */
    fixedLength'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * True if tuple has any rest or variadic elements
     *
     * @deprecated Use `.combinedFlags & ElementFlags.Variable` instead
     */
    hasRestElement'
      BooleanKeyword
    PropertySignature
      Identifier: '
    combinedFlags'
      TypeReference
        Identifier: ' ElementFlags'
    PropertySignature
      Identifier: '
    readonly'
      BooleanKeyword
    PropertySignature
      Identifier: '
    labeledElementDeclarations'
      QuestionToken
      TypeOperator
        ArrayType
          ParenthesizedType
            UnionType
              TypeReference
                Identifier: 'NamedTupleMember'
              TypeReference
                Identifier: ' ParameterDeclaration'
              UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TupleTypeReference'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TypeReference'
    PropertySignature
      Identifier: '
    target'
      TypeReference
        Identifier: ' TupleType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UnionOrIntersectionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    types'
      ArrayType
        TypeReference
          Identifier: ' Type'
    PropertySignature
      Identifier: ' // Constituent types
    /** @internal */
    objectFlags'
      TypeReference
        Identifier: ' ObjectFlags'
    PropertySignature
      Identifier: '
    /** @internal */
    propertyCache'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: ' // Cache of resolved properties
    /** @internal */
    propertyCacheWithoutObjectFunctionPropertyAugment'
      QuestionToken
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: ' // Cache of resolved properties that does not augment function or object type properties
    /** @internal */
    resolvedProperties'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedIndexType'
      TypeReference
        Identifier: ' IndexType'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedStringIndexType'
      TypeReference
        Identifier: ' IndexType'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedBaseConstraint'
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UnionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnionOrIntersectionType'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedReducedType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    /** @internal */
    regularType'
      QuestionToken
      TypeReference
        Identifier: ' UnionType'
    PropertySignature
      Identifier: '
    /** @internal */
    origin'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: ' // Denormalized union, intersection, or index type in which union originates
    /** @internal */
    keyPropertyName'
      QuestionToken
      TypeReference
        Identifier: ' __String'
    PropertySignature
      Identifier: ' // Property with unique unit type that exists in every object/intersection in union type
    /** @internal */
    constituentMap'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'TypeId'
        TypeReference
          Identifier: ' Type'
    PropertySignature
      Identifier: ' // Constituents keyed by unit type discriminants
    /** @internal */
    arrayFallbackSignatures'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Signature'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IntersectionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnionOrIntersectionType'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedApparentType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    /** @internal */
    uniqueLiteralFilledInstantiation'
      QuestionToken
      TypeReference
        Identifier: ' Type'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' StructuredType'
    UnionType
      TypeReference
        Identifier: ' ObjectType'
      TypeReference
        Identifier: ' UnionType'
      TypeReference
        Identifier: ' IntersectionType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AnonymousType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectType'
    PropertySignature
      Identifier: '
    target'
      QuestionToken
      TypeReference
        Identifier: ' AnonymousType'
    PropertySignature
      Identifier: ' // Instantiation target
    mapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: ' // Instantiation mapper
    instantiations'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SingleSignatureType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' AnonymousType'
    PropertySignature
      Identifier: '
    outerTypeParameters'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' TypeParameter'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InstantiationExpressionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' AnonymousType'
    PropertySignature
      Identifier: '
    node'
      TypeReference
        Identifier: ' NodeWithTypeArguments'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MappedType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' AnonymousType'
    PropertySignature
      Identifier: '
    declaration'
      TypeReference
        Identifier: ' MappedTypeNode'
    PropertySignature
      Identifier: '
    typeParameter'
      QuestionToken
      TypeReference
        Identifier: ' TypeParameter'
    PropertySignature
      Identifier: '
    constraintType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    nameType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    templateType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    modifiersType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    resolvedApparentType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    containsError'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EvolvingArrayType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectType'
    PropertySignature
      Identifier: '
    elementType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: ' // Element expressions of evolving array type
    finalArrayType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReverseMappedType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectType'
    PropertySignature
      Identifier: '
    source'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    mappedType'
      TypeReference
        Identifier: ' MappedType'
    PropertySignature
      Identifier: '
    constraintType'
      TypeReference
        Identifier: ' IndexType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolvedType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectType'
      ExpressionWithTypeArguments
        Identifier: ' UnionOrIntersectionType'
    PropertySignature
      Identifier: '
    members'
      TypeReference
        Identifier: ' SymbolTable'
    PropertySignature
      Identifier: '             // Properties by name
    properties'
      ArrayType
        TypeReference
          Identifier: ' Symbol'
    PropertySignature
      Identifier: '             // Properties
    callSignatures'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Signature'
    PropertySignature
      Identifier: '      // Call signatures of type
    constructSignatures'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Signature'
    PropertySignature
      Identifier: ' // Construct signatures of type
    indexInfos'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' IndexInfo'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FreshObjectLiteralType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ResolvedType'
    PropertySignature
      Identifier: '
    regularType'
      TypeReference
        Identifier: ' ResolvedType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IterationTypes'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' yieldType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' returnType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' nextType'
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IterableOrIteratorType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectType'
      ExpressionWithTypeArguments
        Identifier: ' UnionType'
    PropertySignature
      Identifier: '
    iterationTypesOfGeneratorReturnType'
      QuestionToken
      TypeReference
        Identifier: ' IterationTypes'
    PropertySignature
      Identifier: '
    iterationTypesOfAsyncGeneratorReturnType'
      QuestionToken
      TypeReference
        Identifier: ' IterationTypes'
    PropertySignature
      Identifier: '
    iterationTypesOfIterable'
      QuestionToken
      TypeReference
        Identifier: ' IterationTypes'
    PropertySignature
      Identifier: '
    iterationTypesOfIterator'
      QuestionToken
      TypeReference
        Identifier: ' IterationTypes'
    PropertySignature
      Identifier: '
    iterationTypesOfAsyncIterable'
      QuestionToken
      TypeReference
        Identifier: ' IterationTypes'
    PropertySignature
      Identifier: '
    iterationTypesOfAsyncIterator'
      QuestionToken
      TypeReference
        Identifier: ' IterationTypes'
    PropertySignature
      Identifier: '
    iterationTypesOfIteratorResult'
      QuestionToken
      TypeReference
        Identifier: ' IterationTypes'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PromiseOrAwaitableType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ObjectType'
      ExpressionWithTypeArguments
        Identifier: ' UnionType'
    PropertySignature
      Identifier: '
    promiseTypeOfPromiseConstructor'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    promisedTypeOfPromise'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    awaitedTypeOfType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SyntheticDefaultModuleType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    syntheticType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    defaultOnlyType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InstantiableType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedBaseConstraint'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedIndexType'
      QuestionToken
      TypeReference
        Identifier: ' IndexType'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedStringIndexType'
      QuestionToken
      TypeReference
        Identifier: ' IndexType'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeParameter'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InstantiableType'
    PropertySignature
      Identifier: '
    /**
     * Retrieve using getConstraintFromTypeParameter
     *
     * @internal
     */
    constraint'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '        // Constraint
    /** @internal */
    default'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    /** @internal */
    target'
      QuestionToken
      TypeReference
        Identifier: ' TypeParameter'
    PropertySignature
      Identifier: '  // Instantiation target
    /** @internal */
    mapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '     // Instantiation mapper
    /** @internal */
    isThisType'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedDefaultType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' AccessFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    IncludeUndefined'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    NoIndexSignatures'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Writing'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    CacheSymbol'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    AllowMissing'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ExpressionPosition'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ReportDeprecated'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    SuppressNoImplicitAnyError'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Contextual'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    Persistent'
      Identifier: ' IncludeUndefined'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IndexedAccessType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InstantiableType'
    PropertySignature
      Identifier: '
    objectType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    indexType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    /** @internal */
    accessFlags'
      TypeReference
        Identifier: ' AccessFlags'
    PropertySignature
      Identifier: ' // Only includes AccessFlags.Persistent
    constraint'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    simplifiedForReading'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    simplifiedForWriting'
      QuestionToken
      TypeReference
        Identifier: ' Type'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeVariable'
    UnionType
      TypeReference
        Identifier: ' TypeParameter'
      TypeReference
        Identifier: ' IndexedAccessType'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' IndexFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    StringsOnly'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    NoIndexSignatures'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    NoReducibleCheck'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IndexType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InstantiableType'
    PropertySignature
      Identifier: '
    type'
      UnionType
        TypeReference
          Identifier: ' InstantiableType'
        TypeReference
          Identifier: ' UnionOrIntersectionType'
    PropertySignature
      Identifier: '
    /** @internal */
    indexFlags'
      TypeReference
        Identifier: ' IndexFlags'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConditionalRoot'
    PropertySignature
      Identifier: '
    node'
      TypeReference
        Identifier: ' ConditionalTypeNode'
    PropertySignature
      Identifier: '
    checkType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    extendsType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    isDistributive'
      BooleanKeyword
    PropertySignature
      Identifier: '
    inferTypeParameters'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' TypeParameter'
    PropertySignature
      Identifier: '
    outerTypeParameters'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' TypeParameter'
    PropertySignature
      Identifier: '
    instantiations'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' Type'
    PropertySignature
      Identifier: '
    aliasSymbol'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '
    aliasTypeArguments'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConditionalType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InstantiableType'
    PropertySignature
      Identifier: '
    root'
      TypeReference
        Identifier: ' ConditionalRoot'
    PropertySignature
      Identifier: '
    checkType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    extendsType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    resolvedTrueType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    resolvedFalseType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedInferredTrueType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: ' // The `trueType` instantiated with the `combinedMapper`, if present
    /** @internal */
    resolvedDefaultConstraint'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    /** @internal */
    resolvedConstraintOfDistributive'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' Type'
        LiteralType
          FalseKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    mapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '
    /** @internal */
    combinedMapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TemplateLiteralType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InstantiableType'
    PropertySignature
      Identifier: '
    texts'
      TypeOperator
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: ' // Always one element longer than types
    types'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' StringMappingType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InstantiableType'
    PropertySignature
      Identifier: '
    symbol'
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SubstitutionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' InstantiableType'
    PropertySignature
      Identifier: '
    objectFlags'
      TypeReference
        Identifier: ' ObjectFlags'
    PropertySignature
      Identifier: '
    baseType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: ' // Target type
    constraint'
      TypeReference
        Identifier: ' Type'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' JsxReferenceKind'
    EnumMember
      Identifier: '
    Component'
    EnumMember
      Identifier: '
    Function'
    EnumMember
      Identifier: '
    Mixed'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' SignatureKind'
    EnumMember
      Identifier: '
    Call'
    EnumMember
      Identifier: '
    Construct'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' SignatureFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '

    // Propagating flags
    HasRestParameter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '          // Indicates last parameter is rest parameter
    HasLiteralTypes'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '           // Indicates signature is specialized
    Abstract'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                  // Indicates signature comes from an abstract class, abstract construct signature, or abstract constructor type

    // Non-propagating flags
    IsInnerCallChain'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '          // Indicates signature comes from a CallChain nested in an outer OptionalChain
    IsOuterCallChain'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '          // Indicates signature comes from a CallChain that is the outermost chain of an optional expression
    IsUntypedSignatureInJSFile'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Indicates signature is from a js file and has no types
    IsNonInferrable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '           // Indicates signature comes from a non-inferrable type
    IsSignatureCandidateForOverloadFailure'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // We do not propagate `IsInnerCallChain` or `IsOuterCallChain` to instantiated signatures, as that would result in us
    // attempting to add `| undefined` on each recursive call to `getReturnTypeOfSignature` when
    // instantiating the return type.
    PropagatingFlags'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' HasRestParameter'
              BarToken
              Identifier: ' HasLiteralTypes'
            BarToken
            Identifier: ' Abstract'
          BarToken
          Identifier: ' IsUntypedSignatureInJSFile'
        BarToken
        Identifier: ' IsSignatureCandidateForOverloadFailure'
    EnumMember
      Identifier: '

    CallChainFlags'
      BinaryExpression
        Identifier: ' IsInnerCallChain'
        BarToken
        Identifier: ' IsOuterCallChain'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Signature'
    PropertySignature
      Identifier: '
    /** @internal */ flags'
      TypeReference
        Identifier: ' SignatureFlags'
    PropertySignature
      Identifier: '
    /** @internal */ checker'
      QuestionToken
      TypeReference
        Identifier: ' TypeChecker'
    PropertySignature
      Identifier: '
    declaration'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' SignatureDeclaration'
        TypeReference
          Identifier: ' JSDocSignature'
    PropertySignature
      Identifier: ' // Originating declaration
    typeParameters'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' TypeParameter'
    PropertySignature
      Identifier: '   // Type parameters (undefined if non-generic)
    parameters'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Symbol'
    PropertySignature
      Identifier: '               // Parameters
    thisParameter'
      QuestionToken
      TypeReference
        Identifier: ' Symbol'
    PropertySignature
      Identifier: '             // symbol of this-type parameter
    /** @internal */
    // See comment in `instantiateSignature` for why these are set lazily.
    resolvedReturnType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '          // Lazily set by `getReturnTypeOfSignature`.
    /** @internal */
    // Lazily set by `getTypePredicateOfSignature`.
    // `undefined` indicates a type predicate that has not yet been computed.
    // Uses a special `noTypePredicate` sentinel value to indicate that there is no type predicate. This looks like a TypePredicate at runtime to avoid polymorphism.
    resolvedTypePredicate'
      QuestionToken
      TypeReference
        Identifier: ' TypePredicate'
    PropertySignature
      Identifier: '
    /** @internal */
    minArgumentCount'
      NumberKeyword
    PropertySignature
      Identifier: '           // Number of non-optional parameters
    /** @internal */
    resolvedMinArgumentCount'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '  // Number of non-optional parameters (excluding trailing `void`)
    /** @internal */
    target'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
    PropertySignature
      Identifier: '                 // Instantiation target
    /** @internal */
    mapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '                // Instantiation mapper
    /** @internal */
    compositeSignatures'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Signature'
    PropertySignature
      Identifier: '  // Underlying signatures of a union/intersection signature
    /** @internal */
    compositeKind'
      QuestionToken
      TypeReference
        Identifier: ' TypeFlags'
    PropertySignature
      Identifier: '          // TypeFlags.Union if the underlying signatures are from union members, otherwise TypeFlags.Intersection
    /** @internal */
    erasedSignatureCache'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
    PropertySignature
      Identifier: '   // Erased version of signature (deferred)
    /** @internal */
    canonicalSignatureCache'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
    PropertySignature
      Identifier: ' // Canonical version of signature (deferred)
    /** @internal */
    baseSignatureCache'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
    PropertySignature
      Identifier: '      // Base version of signature (deferred)
    /** @internal */
    optionalCallSignatureCache'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: ' inner'
          QuestionToken
          TypeReference
            Identifier: ' Signature'
        PropertySignature
          Identifier: ' outer'
          QuestionToken
          TypeReference
            Identifier: ' Signature'
    PropertySignature
      Identifier: ' // Optional chained call version of signature (deferred)
    /** @internal */
    isolatedSignatureType'
      QuestionToken
      TypeReference
        Identifier: ' ObjectType'
    PropertySignature
      Identifier: ' // A manufactured type that just contains the signature for purposes of signature comparison
    /** @internal */
    instantiations'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' Signature'
    PropertySignature
      Identifier: '    // Generic signature instantiation cache
    /** @internal */
    implementationSignatureCache'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' IndexKind'
    EnumMember
      Identifier: '
    String'
    EnumMember
      Identifier: '
    Number'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IndexInfo'
    PropertySignature
      Identifier: '
    keyType'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '
    isReadonly'
      BooleanKeyword
    PropertySignature
      Identifier: '
    declaration'
      QuestionToken
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' TypeMapKind'
    EnumMember
      Identifier: '
    Simple'
    EnumMember
      Identifier: '
    Array'
    EnumMember
      Identifier: '
    Deferred'
    EnumMember
      Identifier: '
    Function'
    EnumMember
      Identifier: '
    Composite'
    EnumMember
      Identifier: '
    Merged'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeMapper'
    UnionType
      TypeLiteral
        PropertySignature
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' TypeMapKind'
              Identifier: 'Simple'
        PropertySignature
          Identifier: ' source'
          TypeReference
            Identifier: ' Type'
        PropertySignature
          Identifier: ' target'
          TypeReference
            Identifier: ' Type'
      TypeLiteral
        PropertySignature
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' TypeMapKind'
              Identifier: 'Array'
        PropertySignature
          Identifier: ' sources'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Type'
        PropertySignature
          Identifier: ' targets'
          UnionType
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' Type'
            UndefinedKeyword
      TypeLiteral
        PropertySignature
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' TypeMapKind'
              Identifier: 'Deferred'
        PropertySignature
          Identifier: ' sources'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Type'
        PropertySignature
          Identifier: ' targets'
          ArrayType
            ParenthesizedType
              FunctionType
                TypeReference
                  Identifier: ' Type'
      TypeLiteral
        PropertySignature
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' TypeMapKind'
              Identifier: 'Function'
        PropertySignature
          Identifier: ' func'
          FunctionType
            Parameter
              Identifier: 't'
              TypeReference
                Identifier: ' Type'
            TypeReference
              Identifier: ' Type'
        PropertySignature
          Identifier: ' debugInfo'
          QuestionToken
          FunctionType
            StringKeyword
      TypeLiteral
        PropertySignature
          Identifier: ' kind'
          UnionType
            TypeReference
              QualifiedName
                Identifier: ' TypeMapKind'
                Identifier: 'Composite'
            TypeReference
              QualifiedName
                Identifier: ' TypeMapKind'
                Identifier: 'Merged'
        PropertySignature
          Identifier: ' mapper1'
          TypeReference
            Identifier: ' TypeMapper'
        PropertySignature
          Identifier: ' mapper2'
          TypeReference
            Identifier: ' TypeMapper'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' InferencePriority'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    NakedTypeVariable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Naked type variable in union or intersection type
    SpeculativeTuple'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Speculative tuple inference
    SubstituteSource'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Source of inference originated within a substitution type's substitute
    HomomorphicMappedType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Reverse inference for homomorphic mapped type
    PartialHomomorphicMappedType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Partial reverse inference for homomorphic mapped type
    MappedTypeConstraint'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Reverse inference for mapped type
    ContravariantConditional'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Conditional type in contravariant position
    ReturnType'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Inference made from return type of generic function
    LiteralKeyof'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Inference made from a string literal to a keyof T
    NoConstraints'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Don't infer from constraints of instantiable types
    AlwaysStrict'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Always use strict rules for contravariant inferences
    MaxValue'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Seed for inference priority tracking

    PriorityImpliesCombination'
      BinaryExpression
        BinaryExpression
          Identifier: ' ReturnType'
          BarToken
          Identifier: ' MappedTypeConstraint'
        BarToken
        Identifier: ' LiteralKeyof'
    EnumMember
      Identifier: ' // These priorities imply that the resulting type should be a combination of all candidates
    Circularity'
      PrefixUnaryExpression
        NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InferenceInfo'
    PropertySignature
      Identifier: '
    typeParameter'
      TypeReference
        Identifier: ' TypeParameter'
    PropertySignature
      Identifier: '            // Type parameter for which inferences are being made
    candidates'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Type'
        UndefinedKeyword
    PropertySignature
      Identifier: '          // Candidates in covariant positions (or undefined)
    contraCandidates'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Type'
        UndefinedKeyword
    PropertySignature
      Identifier: '    // Candidates in contravariant positions (or undefined)
    inferredType'
      QuestionToken
      TypeReference
        Identifier: ' Type'
    PropertySignature
      Identifier: '                     // Cache for resolved inferred type
    priority'
      QuestionToken
      TypeReference
        Identifier: ' InferencePriority'
    PropertySignature
      Identifier: '            // Priority of current inference set
    topLevel'
      BooleanKeyword
    PropertySignature
      Identifier: '                       // True if all inferences are to top level occurrences
    isFixed'
      BooleanKeyword
    PropertySignature
      Identifier: '                        // True if inferences are fixed
    impliedArity'
      QuestionToken
      NumberKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' InferenceFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '  // No special inference behaviors
    NoDefault'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Infer silentNeverType for no inferences (otherwise anyType or unknownType)
    AnyDefault'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Infer anyType (in JS files) for no inferences (otherwise unknownType)
    SkippedGenericFunction'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' Ternary'
    EnumMember
      Identifier: '
    False'
      NumericLiteral
    EnumMember
      Identifier: '
    Unknown'
      NumericLiteral
    EnumMember
      Identifier: '
    Maybe'
      NumericLiteral
    EnumMember
      Identifier: '
    True'
      PrefixUnaryExpression
        NumericLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeComparer'
    FunctionType
      Parameter
        Identifier: 's'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' t'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' reportErrors'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Ternary'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' InferenceContext'
    PropertySignature
      Identifier: '
    inferences'
      ArrayType
        TypeReference
          Identifier: ' InferenceInfo'
    PropertySignature
      Identifier: '                  // Inferences made for each type parameter
    signature'
      QuestionToken
      TypeReference
        Identifier: ' Signature'
    PropertySignature
      Identifier: '                        // Generic signature for which inferences are made (if any)
    flags'
      TypeReference
        Identifier: ' InferenceFlags'
    PropertySignature
      Identifier: '                        // Inference flags
    compareTypes'
      TypeReference
        Identifier: ' TypeComparer'
    PropertySignature
      Identifier: '                   // Type comparer function
    mapper'
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '                           // Mapper that fixes inferences
    nonFixingMapper'
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '                  // Mapper that doesn't fix inferences
    returnMapper'
      QuestionToken
      TypeReference
        Identifier: ' TypeMapper'
    PropertySignature
      Identifier: '                    // Type mapper for inferences from return types (if any)
    inferredTypeParameters'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' TypeParameter'
    PropertySignature
      Identifier: ' // Inferred type parameters for function result
    intraExpressionInferenceSites'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' IntraExpressionInferenceSite'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' IntraExpressionInferenceSite'
    PropertySignature
      Identifier: '
    node'
      UnionType
        TypeReference
          Identifier: ' Expression'
        TypeReference
          Identifier: ' MethodDeclaration'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' Type'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WideningContext'
    PropertySignature
      Identifier: '
    parent'
      QuestionToken
      TypeReference
        Identifier: ' WideningContext'
    PropertySignature
      Identifier: '       // Parent context
    propertyName'
      QuestionToken
      TypeReference
        Identifier: ' __String'
    PropertySignature
      Identifier: '        // Name of property in parent
    siblings'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Type'
    PropertySignature
      Identifier: '              // Types of siblings
    resolvedProperties'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Symbol'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' AssignmentDeclarationKind'
    EnumMember
      Identifier: '
    None'
    EnumMember
      Identifier: '
    /// exports.name = expr
    /// module.exports.name = expr
    ExportsProperty'
    EnumMember
      Identifier: '
    /// module.exports = expr
    ModuleExports'
    EnumMember
      Identifier: '
    /// className.prototype.name = expr
    PrototypeProperty'
    EnumMember
      Identifier: '
    /// this.name = expr
    ThisProperty'
    EnumMember
      Identifier: '
    // F.name = expr
    Property'
    EnumMember
      Identifier: '
    // F.prototype = { ... }
    Prototype'
    EnumMember
      Identifier: '
    // Object.defineProperty(x, 'name', { value: any, writable?: boolean (false by default) });
    // Object.defineProperty(x, 'name', { get: Function, set: Function });
    // Object.defineProperty(x, 'name', { get: Function });
    // Object.defineProperty(x, 'name', { set: Function });
    ObjectDefinePropertyValue'
    EnumMember
      Identifier: '
    // Object.defineProperty(exports || module.exports, 'name', ...);
    ObjectDefinePropertyExports'
    EnumMember
      Identifier: '
    // Object.defineProperty(Foo.prototype, 'name', ...);
    ObjectDefinePrototypeProperty'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FileExtensionInfo'
    PropertySignature
      Identifier: '
    extension'
      StringKeyword
    PropertySignature
      Identifier: '
    isMixedContent'
      BooleanKeyword
    PropertySignature
      Identifier: '
    scriptKind'
      QuestionToken
      TypeReference
        Identifier: ' ScriptKind'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DiagnosticMessage'
    PropertySignature
      Identifier: '
    key'
      StringKeyword
    PropertySignature
      Identifier: '
    category'
      TypeReference
        Identifier: ' DiagnosticCategory'
    PropertySignature
      Identifier: '
    code'
      NumberKeyword
    PropertySignature
      Identifier: '
    message'
      StringKeyword
    PropertySignature
      Identifier: '
    reportsUnnecessary'
      QuestionToken
      TypeLiteral
    PropertySignature
      Identifier: '
    reportsDeprecated'
      QuestionToken
      TypeLiteral
    PropertySignature
      Identifier: '
    /** @internal */
    elidedInCompatabilityPyramid'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' RepopulateModuleNotFoundDiagnosticChain'
    PropertySignature
      Identifier: '
    moduleReference'
      StringKeyword
    PropertySignature
      Identifier: '
    mode'
      TypeReference
        Identifier: ' ResolutionMode'
    PropertySignature
      Identifier: '
    packageName'
      UnionType
        StringKeyword
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' RepopulateModeMismatchDiagnosticChain'
    LiteralType
      TrueKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' RepopulateDiagnosticChainInfo'
    UnionType
      TypeReference
        Identifier: ' RepopulateModuleNotFoundDiagnosticChain'
      TypeReference
        Identifier: ' RepopulateModeMismatchDiagnosticChain'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DiagnosticMessageChain'
    PropertySignature
      Identifier: '
    messageText'
      StringKeyword
    PropertySignature
      Identifier: '
    category'
      TypeReference
        Identifier: ' DiagnosticCategory'
    PropertySignature
      Identifier: '
    code'
      NumberKeyword
    PropertySignature
      Identifier: '
    next'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' DiagnosticMessageChain'
    PropertySignature
      Identifier: '
    /** @internal */
    repopulateInfo'
      QuestionToken
      FunctionType
        TypeReference
          Identifier: ' RepopulateDiagnosticChainInfo'
    PropertySignature
      Identifier: '
    /** @internal */
    canonicalHead'
      QuestionToken
      TypeReference
        Identifier: ' CanonicalDiagnostic'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Diagnostic'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' DiagnosticRelatedInformation'
    PropertySignature
      Identifier: '
    /** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. */
    reportsUnnecessary'
      QuestionToken
      TypeLiteral
    PropertySignature
      Identifier: '

    reportsDeprecated'
      QuestionToken
      TypeLiteral
    PropertySignature
      Identifier: '
    source'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    relatedInformation'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' DiagnosticRelatedInformation'
    PropertySignature
      Identifier: '
    /** @internal */ skippedOn'
      QuestionToken
      TypeOperator
        TypeReference
          Identifier: ' CompilerOptions'
    PropertySignature
      Identifier: '
    /**
     * @internal
     * Used for deduplication and comparison.
     * Whenever it is possible for two diagnostics that report the same problem to be produced with
     * different messages (e.g. "Cannot find name 'foo'" vs "Cannot find name 'foo'. Did you mean 'bar'?"),
     * this property can be set to a canonical message,
     * so that those two diagnostics are appropriately considered to be the same.
     */
    canonicalHead'
      QuestionToken
      TypeReference
        Identifier: ' CanonicalDiagnostic'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CanonicalDiagnostic'
    PropertySignature
      Identifier: '
    code'
      NumberKeyword
    PropertySignature
      Identifier: '
    messageText'
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DiagnosticArguments'
    ArrayType
      ParenthesizedType
        UnionType
          StringKeyword
          NumberKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' DiagnosticAndArguments'
    TupleType
      NamedTupleMember
        Identifier: 'message'
        TypeReference
          Identifier: ' DiagnosticMessage'
      NamedTupleMember
        DotDotDotToken
        Identifier: 'args'
        TypeReference
          Identifier: ' DiagnosticArguments'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DiagnosticRelatedInformation'
    PropertySignature
      Identifier: '
    category'
      TypeReference
        Identifier: ' DiagnosticCategory'
    PropertySignature
      Identifier: '
    code'
      NumberKeyword
    PropertySignature
      Identifier: '
    file'
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    start'
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    length'
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    messageText'
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' DiagnosticMessageChain'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DiagnosticWithLocation'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Diagnostic'
    PropertySignature
      Identifier: '
    file'
      TypeReference
        Identifier: ' SourceFile'
    PropertySignature
      Identifier: '
    start'
      NumberKeyword
    PropertySignature
      Identifier: '
    length'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DiagnosticWithDetachedLocation'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Diagnostic'
    PropertySignature
      Identifier: '
    file'
      UndefinedKeyword
    PropertySignature
      Identifier: '
    fileName'
      StringKeyword
    PropertySignature
      Identifier: '
    start'
      NumberKeyword
    PropertySignature
      Identifier: '
    length'
      NumberKeyword
  EnumDeclaration
    ExportKeyword
    Identifier: ' DiagnosticCategory'
    EnumMember
      Identifier: '
    Warning'
    EnumMember
      Identifier: '
    Error'
    EnumMember
      Identifier: '
    Suggestion'
    EnumMember
      Identifier: '
    Message'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' diagnosticCategoryName'
    Parameter
      Identifier: 'd'
      TypeLiteral
        PropertySignature
          Identifier: ' category'
          TypeReference
            Identifier: ' DiagnosticCategory'
    Parameter
      Identifier: ' lowerCase'
      TrueKeyword
    StringKeyword
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' name'
            ElementAccessExpression
              Identifier: ' DiagnosticCategory'
              PropertyAccessExpression
                Identifier: 'd'
                Identifier: 'category'
      ReturnStatement
        ConditionalExpression
          Identifier: ' lowerCase'
          QuestionToken
          CallExpression
            PropertyAccessExpression
              Identifier: ' name'
              Identifier: 'toLowerCase'
          ColonToken
          Identifier: ' name'
  EnumDeclaration
    ExportKeyword
    Identifier: ' ModuleResolutionKind'
    EnumMember
      Identifier: '
    Classic'
      NumericLiteral
    EnumMember
      Identifier: '
    /**
     * @deprecated
     * `NodeJs` was renamed to `Node10` to better reflect the version of Node that it targets.
     * Use the new name or consider switching to a modern module resolution target.
     */
    NodeJs'
      NumericLiteral
    EnumMember
      Identifier: '
    Node10'
      NumericLiteral
    EnumMember
      Identifier: '
    // Starting with node12, node's module resolver has significant departures from traditional cjs resolution
    // to better support ECMAScript modules and their use within node - however more features are still being added.
    // TypeScript's Node ESM support was introduced after Node 12 went end-of-life, and Node 14 is the earliest stable
    // version that supports both pattern trailers - *but*, Node 16 is the first version that also supports ECMAScript 2022.
    // In turn, we offer both a `NodeNext` moving resolution target, and a `Node16` version-anchored resolution target
    Node16'
      NumericLiteral
    EnumMember
      Identifier: '
    NodeNext'
      NumericLiteral
    EnumMember
      Identifier: ' // Not simply `Node16` so that compiled code linked against TS can use the `Next` value reliably (same as with `ModuleKind`)
    Bundler'
      NumericLiteral
  EnumDeclaration
    ExportKeyword
    Identifier: ' ModuleDetectionKind'
    EnumMember
      Identifier: '
    /**
     * Files with imports, exports and/or import.meta are considered modules
     */
    Legacy'
      NumericLiteral
    EnumMember
      Identifier: '
    /**
     * Legacy, but also files with jsx under react-jsx or react-jsxdev and esm mode files under moduleResolution: node16+
     */
    Auto'
      NumericLiteral
    EnumMember
      Identifier: '
    /**
     * Consider all non-declaration files modules, regardless of present syntax
     */
    Force'
      NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PluginImport'
    PropertySignature
      Identifier: '
    name'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ProjectReference'
    PropertySignature
      Identifier: '
    /** A normalized path on disk */
    path'
      StringKeyword
    PropertySignature
      Identifier: '
    /** The path as the user originally wrote it */
    originalPath'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /** @deprecated */
    prepend'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** True if it is intended that this reference form a circularity */
    circular'
      QuestionToken
      BooleanKeyword
  EnumDeclaration
    ExportKeyword
    Identifier: ' WatchFileKind'
    EnumMember
      Identifier: '
    FixedPollingInterval'
    EnumMember
      Identifier: '
    PriorityPollingInterval'
    EnumMember
      Identifier: '
    DynamicPriorityPolling'
    EnumMember
      Identifier: '
    FixedChunkSizePolling'
    EnumMember
      Identifier: '
    UseFsEvents'
    EnumMember
      Identifier: '
    UseFsEventsOnParentDirectory'
  EnumDeclaration
    ExportKeyword
    Identifier: ' WatchDirectoryKind'
    EnumMember
      Identifier: '
    UseFsEvents'
    EnumMember
      Identifier: '
    FixedPollingInterval'
    EnumMember
      Identifier: '
    DynamicPriorityPolling'
    EnumMember
      Identifier: '
    FixedChunkSizePolling'
  EnumDeclaration
    ExportKeyword
    Identifier: ' PollingWatchKind'
    EnumMember
      Identifier: '
    FixedInterval'
    EnumMember
      Identifier: '
    PriorityInterval'
    EnumMember
      Identifier: '
    DynamicPriority'
    EnumMember
      Identifier: '
    FixedChunkSize'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CompilerOptionsValue'
    UnionType
      StringKeyword
      NumberKeyword
      BooleanKeyword
      ArrayType
        ParenthesizedType
          UnionType
            StringKeyword
            NumberKeyword
      ArrayType
        StringKeyword
      TypeReference
        Identifier: ' MapLike'
        ArrayType
          StringKeyword
      ArrayType
        TypeReference
          Identifier: ' PluginImport'
      ArrayType
        TypeReference
          Identifier: ' ProjectReference'
      LiteralType
        NullKeyword
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CompilerOptions'
    PropertySignature
      Identifier: '
    /** @internal */ all'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    allowImportingTsExtensions'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    allowJs'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ allowNonTsExtensions'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    allowArbitraryExtensions'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    allowSyntheticDefaultImports'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    allowUmdGlobalAccess'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    allowUnreachableCode'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    allowUnusedLabels'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    alwaysStrict'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Always combine with strict property
    baseUrl'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * An error if set - this should only go through the -b pipeline and not actually be observed
     *
     * @internal
     */
    build'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @deprecated */
    charset'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    checkJs'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ configFilePath'
      QuestionToken
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' configFile'
      QuestionToken
      TypeReference
        Identifier: ' TsConfigSourceFile'
    PropertySignature
      Identifier: '
    customConditions'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    declaration'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    declarationMap'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    emitDeclarationOnly'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    declarationDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ diagnostics'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ extendedDiagnostics'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    disableSizeLimit'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    disableSourceOfProjectReferenceRedirect'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    disableSolutionSearching'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    disableReferencedProjectLoad'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    downlevelIteration'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    emitBOM'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    emitDecoratorMetadata'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    exactOptionalPropertyTypes'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    experimentalDecorators'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    forceConsistentCasingInFileNames'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ generateCpuProfile'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ generateTrace'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ help'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    ignoreDeprecations'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    importHelpers'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @deprecated */
    importsNotUsedAsValues'
      QuestionToken
      TypeReference
        Identifier: ' ImportsNotUsedAsValues'
    PropertySignature
      Identifier: '
    /** @internal */ init'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    inlineSourceMap'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    inlineSources'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    isolatedModules'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    isolatedDeclarations'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    jsx'
      QuestionToken
      TypeReference
        Identifier: ' JsxEmit'
    PropertySignature
      Identifier: '
    /** @deprecated */
    keyofStringsOnly'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    lib'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ listEmittedFiles'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ listFiles'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ explainFiles'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ listFilesOnly'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    locale'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    mapRoot'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    maxNodeModuleJsDepth'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '
    module'
      QuestionToken
      TypeReference
        Identifier: ' ModuleKind'
    PropertySignature
      Identifier: '
    moduleResolution'
      QuestionToken
      TypeReference
        Identifier: ' ModuleResolutionKind'
    PropertySignature
      Identifier: '
    moduleSuffixes'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    moduleDetection'
      QuestionToken
      TypeReference
        Identifier: ' ModuleDetectionKind'
    PropertySignature
      Identifier: '
    newLine'
      QuestionToken
      TypeReference
        Identifier: ' NewLineKind'
    PropertySignature
      Identifier: '
    noEmit'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noCheck'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ noEmitForJsFiles'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noEmitHelpers'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noEmitOnError'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noErrorTruncation'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noFallthroughCasesInSwitch'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noImplicitAny'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Always combine with strict property
    noImplicitReturns'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noImplicitThis'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Always combine with strict property
    /** @deprecated */
    noStrictGenericChecks'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noUnusedLocals'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noUnusedParameters'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @deprecated */
    noImplicitUseStrict'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noPropertyAccessFromIndexSignature'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    assumeChangesOnlyAffectDirectDependencies'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noLib'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noResolve'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    noDtsResolution'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noUncheckedIndexedAccess'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @deprecated */
    out'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    outDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    outFile'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    paths'
      QuestionToken
      TypeReference
        Identifier: ' MapLike'
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: '
    /**
     * The directory of the config file that specified 'paths'. Used to resolve relative paths when 'baseUrl' is absent.
     *
     * @internal
     */
    pathsBasePath'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ plugins'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' PluginImport'
    PropertySignature
      Identifier: '
    preserveConstEnums'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noImplicitOverride'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    preserveSymlinks'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @deprecated */
    preserveValueImports'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ preserveWatchOutput'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    project'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ pretty'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    reactNamespace'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    jsxFactory'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    jsxFragmentFactory'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    jsxImportSource'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    composite'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    incremental'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    tsBuildInfoFile'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    removeComments'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    resolvePackageJsonExports'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    resolvePackageJsonImports'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    rootDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    rootDirs'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    skipLibCheck'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    skipDefaultLibCheck'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    sourceMap'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    sourceRoot'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    strict'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    strictFunctionTypes'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Always combine with strict property
    strictBindCallApply'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Always combine with strict property
    strictNullChecks'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Always combine with strict property
    strictPropertyInitialization'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Always combine with strict property
    strictBuiltinIteratorReturn'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: ' // Always combine with strict property
    stripInternal'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @deprecated */
    suppressExcessPropertyErrors'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @deprecated */
    suppressImplicitAnyIndexErrors'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ suppressOutputPathCheck'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    target'
      QuestionToken
      TypeReference
        Identifier: ' ScriptTarget'
    PropertySignature
      Identifier: '
    traceResolution'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    useUnknownInCatchVariables'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noUncheckedSideEffectImports'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    resolveJsonModule'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    types'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    /** Paths used to compute primary types search locations */
    typeRoots'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    verbatimModuleSyntax'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ version'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ watch'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    esModuleInterop'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ showConfig'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    useDefineForClassFields'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ tscBuild'
      QuestionToken
      BooleanKeyword
    IndexSignature
      Parameter
        Identifier: 'option'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' CompilerOptionsValue'
        TypeReference
          Identifier: ' TsConfigSourceFile'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchOptions'
    PropertySignature
      Identifier: '
    watchFile'
      QuestionToken
      TypeReference
        Identifier: ' WatchFileKind'
    PropertySignature
      Identifier: '
    watchDirectory'
      QuestionToken
      TypeReference
        Identifier: ' WatchDirectoryKind'
    PropertySignature
      Identifier: '
    fallbackPolling'
      QuestionToken
      TypeReference
        Identifier: ' PollingWatchKind'
    PropertySignature
      Identifier: '
    synchronousWatchDirectory'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    excludeDirectories'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    excludeFiles'
      QuestionToken
      ArrayType
        StringKeyword
    IndexSignature
      Parameter
        Identifier: 'option'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' CompilerOptionsValue'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TypeAcquisition'
    PropertySignature
      Identifier: '
    enable'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    include'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    exclude'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    disableFilenameBasedTypeAcquisition'
      QuestionToken
      BooleanKeyword
    IndexSignature
      Parameter
        Identifier: 'option'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' CompilerOptionsValue'
        UndefinedKeyword
  EnumDeclaration
    ExportKeyword
    Identifier: ' ModuleKind'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    CommonJS'
      NumericLiteral
    EnumMember
      Identifier: '
    AMD'
      NumericLiteral
    EnumMember
      Identifier: '
    UMD'
      NumericLiteral
    EnumMember
      Identifier: '
    System'
      NumericLiteral
    EnumMember
      Identifier: '

    // NOTE: ES module kinds should be contiguous to more easily check whether a module kind is *any* ES module kind.
    //       Non-ES module kinds should not come between ES2015 (the earliest ES module kind) and ESNext (the last ES
    //       module kind).
    ES2015'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2020'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2022'
      NumericLiteral
    EnumMember
      Identifier: '
    ESNext'
      NumericLiteral
    EnumMember
      Identifier: '

    // Node16+ is an amalgam of commonjs (albeit updated) and es2022+, and represents a distinct module system from es2020/esnext
    Node16'
      NumericLiteral
    EnumMember
      Identifier: '
    NodeNext'
      NumericLiteral
    EnumMember
      Identifier: '

    // Emit as written
    Preserve'
      NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' JsxEmit'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Preserve'
      NumericLiteral
    EnumMember
      Identifier: '
    React'
      NumericLiteral
    EnumMember
      Identifier: '
    ReactNative'
      NumericLiteral
    EnumMember
      Identifier: '
    ReactJSX'
      NumericLiteral
    EnumMember
      Identifier: '
    ReactJSXDev'
      NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ImportsNotUsedAsValues'
    EnumMember
      Identifier: '
    Remove'
    EnumMember
      Identifier: '
    Preserve'
    EnumMember
      Identifier: '
    Error'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' NewLineKind'
    EnumMember
      Identifier: '
    CarriageReturnLineFeed'
      NumericLiteral
    EnumMember
      Identifier: '
    LineFeed'
      NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' LineAndCharacter'
    PropertySignature
      Identifier: '
    /** 0-based. */
    line'
      NumberKeyword
    PropertySignature
      Identifier: '
    /*
     * 0-based. This value denotes the character position in line and is different from the 'column' because of tab characters.
     */
    character'
      NumberKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ScriptKind'
    EnumMember
      Identifier: '
    Unknown'
      NumericLiteral
    EnumMember
      Identifier: '
    JS'
      NumericLiteral
    EnumMember
      Identifier: '
    JSX'
      NumericLiteral
    EnumMember
      Identifier: '
    TS'
      NumericLiteral
    EnumMember
      Identifier: '
    TSX'
      NumericLiteral
    EnumMember
      Identifier: '
    External'
      NumericLiteral
    EnumMember
      Identifier: '
    JSON'
      NumericLiteral
    EnumMember
      Identifier: '
    /**
     * Used on extensions that doesn't define the ScriptKind but the content defines it.
     * Deferred extensions are going to be included in all project contexts.
     */
    Deferred'
      NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ScriptTarget'
    EnumMember
      Identifier: '
    /** @deprecated */
    ES3'
      NumericLiteral
    EnumMember
      Identifier: '
    ES5'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2015'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2016'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2017'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2018'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2019'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2020'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2021'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2022'
      NumericLiteral
    EnumMember
      Identifier: '
    ES2023'
      NumericLiteral
    EnumMember
      Identifier: '
    ESNext'
      NumericLiteral
    EnumMember
      Identifier: '
    JSON'
      NumericLiteral
    EnumMember
      Identifier: '
    Latest'
      Identifier: ' ESNext'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' LanguageVariant'
    EnumMember
      Identifier: '
    Standard'
    EnumMember
      Identifier: '
    JSX'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParsedCommandLine'
    PropertySignature
      Identifier: '
    options'
      TypeReference
        Identifier: ' CompilerOptions'
    PropertySignature
      Identifier: '
    typeAcquisition'
      QuestionToken
      TypeReference
        Identifier: ' TypeAcquisition'
    PropertySignature
      Identifier: '
    fileNames'
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    projectReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectReference'
    PropertySignature
      Identifier: '
    watchOptions'
      QuestionToken
      TypeReference
        Identifier: ' WatchOptions'
    PropertySignature
      Identifier: '
    raw'
      QuestionToken
      AnyKeyword
    PropertySignature
      Identifier: '
    errors'
      ArrayType
        TypeReference
          Identifier: ' Diagnostic'
    PropertySignature
      Identifier: '
    wildcardDirectories'
      QuestionToken
      TypeReference
        Identifier: ' MapLike'
        TypeReference
          Identifier: 'WatchDirectoryFlags'
    PropertySignature
      Identifier: '
    compileOnSave'
      QuestionToken
      BooleanKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' WatchDirectoryFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    Recursive'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConfigFileSpecs'
    PropertySignature
      Identifier: '
    filesSpecs'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Present to report errors (user specified specs), validatedIncludeSpecs are used for file name matching
     */
    includeSpecs'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Present to report errors (user specified specs), validatedExcludeSpecs are used for file name matching
     */
    excludeSpecs'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    validatedFilesSpec'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    validatedIncludeSpecs'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    validatedExcludeSpecs'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    validatedFilesSpecBeforeSubstitution'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    validatedIncludeSpecsBeforeSubstitution'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    validatedExcludeSpecsBeforeSubstitution'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    isDefaultIncludeSpec'
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ModuleImportResult'
    TypeParameter
      Identifier: 'T'
      TypeLiteral
    UnionType
      TypeLiteral
        PropertySignature
          Identifier: ' module'
          TypeReference
            Identifier: ' T'
        PropertySignature
          Identifier: ' modulePath'
          QuestionToken
          StringKeyword
        PropertySignature
          Identifier: ' error'
          UndefinedKeyword
      TypeLiteral
        PropertySignature
          Identifier: ' module'
          UndefinedKeyword
        PropertySignature
          Identifier: ' modulePath'
          QuestionToken
          UndefinedKeyword
        PropertySignature
          Identifier: ' error'
          TypeLiteral
            PropertySignature
              Identifier: ' stack'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: ' message'
              QuestionToken
              StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CreateProgramOptions'
    PropertySignature
      Identifier: '
    rootNames'
      TypeOperator
        ArrayType
          StringKeyword
    PropertySignature
      Identifier: '
    options'
      TypeReference
        Identifier: ' CompilerOptions'
    PropertySignature
      Identifier: '
    projectReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectReference'
    PropertySignature
      Identifier: '
    host'
      QuestionToken
      TypeReference
        Identifier: ' CompilerHost'
    PropertySignature
      Identifier: '
    oldProgram'
      QuestionToken
      TypeReference
        Identifier: ' Program'
    PropertySignature
      Identifier: '
    configFileParsingDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    PropertySignature
      Identifier: '
    /** @internal */
    typeScriptVersion'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommandLineOptionBase'
    PropertySignature
      Identifier: '
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    type'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        TypeReference
          Identifier: ' Map'
          StringKeyword
          UnionType
            NumberKeyword
            StringKeyword
    PropertySignature
      Identifier: '    // a value of a primitive type, or an object literal mapping named values to actual values
    isFilePath'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '                                   // True if option value is a path or fileName
    shortName'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '                                     // A short mnemonic for convenience - for instance, 'h' can be used in place of 'help'
    description'
      QuestionToken
      TypeReference
        Identifier: ' DiagnosticMessage'
    PropertySignature
      Identifier: '                        // The message describing what the command line switch does.
    defaultValueDescription'
      QuestionToken
      UnionType
        StringKeyword
        NumberKeyword
        BooleanKeyword
        TypeReference
          Identifier: ' DiagnosticMessage'
        UndefinedKeyword
    PropertySignature
      Identifier: '   // The message describing what the dafault value is. string type is prepared for fixed chosen like "false" which do not need I18n.
    paramType'
      QuestionToken
      TypeReference
        Identifier: ' DiagnosticMessage'
    PropertySignature
      Identifier: '                          // The name to be used for a non-boolean option's parameter
    isTSConfigOnly'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '                               // True if option can only be specified via tsconfig.json file
    isCommandLineOnly'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    showInSimplifiedHelpView'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    category'
      QuestionToken
      TypeReference
        Identifier: ' DiagnosticMessage'
    PropertySignature
      Identifier: '
    strictFlag'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                                      // true if the option is one of the flag under strict
    allowJsFlag'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    affectsSourceFile'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                               // true if we should recreate SourceFiles after this option changes
    affectsModuleResolution'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                         // currently same effect as `affectsSourceFile`
    affectsBindDiagnostics'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                          // true if this affects binding (currently same effect as `affectsSourceFile`)
    affectsSemanticDiagnostics'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                      // true if option affects semantic diagnostics
    affectsEmit'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                                     // true if the options affects emit
    affectsProgramStructure'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                         // true if program should be reconstructed from root files if option changes and does not affect module resolution as affectsModuleResolution indirectly means program needs to reconstructed
    affectsDeclarationPath'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                          // true if the options affects declaration file path computed
    affectsBuildInfo'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                                // true if this options should be emitted in buildInfo
    transpileOptionValue'
      QuestionToken
      UnionType
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '             // If set this means that the option should be set to this value when transpiling
    extraValidation'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'value'
          TypeReference
            Identifier: ' CompilerOptionsValue'
        UnionType
          TupleType
            TypeReference
              Identifier: 'DiagnosticMessage'
            RestType
              ArrayType
                StringKeyword
          UndefinedKeyword
    PropertySignature
      Identifier: ' // Additional validation to be performed for the value to be valid
    disallowNullOrUndefined'
      QuestionToken
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '                         // If set option does not allow setting null
    allowConfigDirTemplateSubstitution'
      QuestionToken
      LiteralType
        TrueKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommandLineOptionOfStringType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommandLineOptionBase'
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
    PropertySignature
      Identifier: '
    defaultValueDescription'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
        TypeReference
          Identifier: ' DiagnosticMessage'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommandLineOptionOfNumberType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommandLineOptionBase'
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
    PropertySignature
      Identifier: '
    defaultValueDescription'
      UnionType
        NumberKeyword
        UndefinedKeyword
        TypeReference
          Identifier: ' DiagnosticMessage'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommandLineOptionOfBooleanType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommandLineOptionBase'
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
    PropertySignature
      Identifier: '
    defaultValueDescription'
      UnionType
        BooleanKeyword
        UndefinedKeyword
        TypeReference
          Identifier: ' DiagnosticMessage'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommandLineOptionOfCustomType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommandLineOptionBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' Map'
        StringKeyword
        UnionType
          NumberKeyword
          StringKeyword
    PropertySignature
      Identifier: ' // an object literal mapping named values to actual values
    defaultValueDescription'
      UnionType
        NumberKeyword
        StringKeyword
        UndefinedKeyword
        TypeReference
          Identifier: ' DiagnosticMessage'
    PropertySignature
      Identifier: '
    deprecatedKeys'
      QuestionToken
      TypeReference
        Identifier: ' Set'
        StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AlternateModeDiagnostics'
    PropertySignature
      Identifier: '
    diagnostic'
      TypeReference
        Identifier: ' DiagnosticMessage'
    PropertySignature
      Identifier: '
    getOptionsNameMap'
      FunctionType
        TypeReference
          Identifier: ' OptionsNameMap'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DidYouMeanOptionsDiagnostics'
    PropertySignature
      Identifier: '
    alternateMode'
      QuestionToken
      TypeReference
        Identifier: ' AlternateModeDiagnostics'
    PropertySignature
      Identifier: '
    optionDeclarations'
      ArrayType
        TypeReference
          Identifier: ' CommandLineOption'
    PropertySignature
      Identifier: '
    unknownOptionDiagnostic'
      TypeReference
        Identifier: ' DiagnosticMessage'
    PropertySignature
      Identifier: '
    unknownDidYouMeanDiagnostic'
      TypeReference
        Identifier: ' DiagnosticMessage'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TsConfigOnlyOption'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommandLineOptionBase'
    PropertySignature
      Identifier: '
    type'
      LiteralType
        StringLiteral
    PropertySignature
      Identifier: '
    elementOptions'
      QuestionToken
      TypeReference
        Identifier: ' Map'
        StringKeyword
        TypeReference
          Identifier: ' CommandLineOption'
    PropertySignature
      Identifier: '
    extraKeyDiagnostics'
      QuestionToken
      TypeReference
        Identifier: ' DidYouMeanOptionsDiagnostics'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommandLineOptionOfListType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CommandLineOptionBase'
    PropertySignature
      Identifier: '
    type'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    element'
      UnionType
        TypeReference
          Identifier: ' CommandLineOptionOfCustomType'
        TypeReference
          Identifier: ' CommandLineOptionOfStringType'
        TypeReference
          Identifier: ' CommandLineOptionOfNumberType'
        TypeReference
          Identifier: ' CommandLineOptionOfBooleanType'
        TypeReference
          Identifier: ' TsConfigOnlyOption'
    PropertySignature
      Identifier: '
    listPreserveFalsyValues'
      QuestionToken
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CommandLineOption'
    UnionType
      TypeReference
        Identifier: ' CommandLineOptionOfCustomType'
      TypeReference
        Identifier: ' CommandLineOptionOfStringType'
      TypeReference
        Identifier: ' CommandLineOptionOfNumberType'
      TypeReference
        Identifier: ' CommandLineOptionOfBooleanType'
      TypeReference
        Identifier: ' TsConfigOnlyOption'
      TypeReference
        Identifier: ' CommandLineOptionOfListType'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' CharacterCodes'
    EnumMember
      Identifier: '
    EOF'
      PrefixUnaryExpression
        NumericLiteral
    EnumMember
      Identifier: '
    nullCharacter'
      NumericLiteral
    EnumMember
      Identifier: '
    maxAsciiCharacter'
      NumericLiteral
    EnumMember
      Identifier: '

    lineFeed'
      NumericLiteral
    EnumMember
      Identifier: '              // \n
    carriageReturn'
      NumericLiteral
    EnumMember
      Identifier: '        // \r
    lineSeparator'
      NumericLiteral
    EnumMember
      Identifier: '
    paragraphSeparator'
      NumericLiteral
    EnumMember
      Identifier: '
    nextLine'
      NumericLiteral
    EnumMember
      Identifier: '

    // Unicode 3.0 space characters
    space'
      NumericLiteral
    EnumMember
      Identifier: '   // " "
    nonBreakingSpace'
      NumericLiteral
    EnumMember
      Identifier: '   //
    enQuad'
      NumericLiteral
    EnumMember
      Identifier: '
    emQuad'
      NumericLiteral
    EnumMember
      Identifier: '
    enSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    emSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    threePerEmSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    fourPerEmSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    sixPerEmSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    figureSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    punctuationSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    thinSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    hairSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    zeroWidthSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    narrowNoBreakSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    ideographicSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    mathematicalSpace'
      NumericLiteral
    EnumMember
      Identifier: '
    ogham'
      NumericLiteral
    EnumMember
      Identifier: '

    // Unicode replacement character produced when a byte sequence is invalid
    replacementCharacter'
      NumericLiteral
    EnumMember
      Identifier: '

    _'
      NumericLiteral
    EnumMember
      Identifier: '
    $'
      NumericLiteral
    EnumMember
      Identifier: '

    _0'
      NumericLiteral
    EnumMember
      Identifier: '
    _1'
      NumericLiteral
    EnumMember
      Identifier: '
    _2'
      NumericLiteral
    EnumMember
      Identifier: '
    _3'
      NumericLiteral
    EnumMember
      Identifier: '
    _4'
      NumericLiteral
    EnumMember
      Identifier: '
    _5'
      NumericLiteral
    EnumMember
      Identifier: '
    _6'
      NumericLiteral
    EnumMember
      Identifier: '
    _7'
      NumericLiteral
    EnumMember
      Identifier: '
    _8'
      NumericLiteral
    EnumMember
      Identifier: '
    _9'
      NumericLiteral
    EnumMember
      Identifier: '

    a'
      NumericLiteral
    EnumMember
      Identifier: '
    b'
      NumericLiteral
    EnumMember
      Identifier: '
    c'
      NumericLiteral
    EnumMember
      Identifier: '
    d'
      NumericLiteral
    EnumMember
      Identifier: '
    e'
      NumericLiteral
    EnumMember
      Identifier: '
    f'
      NumericLiteral
    EnumMember
      Identifier: '
    g'
      NumericLiteral
    EnumMember
      Identifier: '
    h'
      NumericLiteral
    EnumMember
      Identifier: '
    i'
      NumericLiteral
    EnumMember
      Identifier: '
    j'
      NumericLiteral
    EnumMember
      Identifier: '
    k'
      NumericLiteral
    EnumMember
      Identifier: '
    l'
      NumericLiteral
    EnumMember
      Identifier: '
    m'
      NumericLiteral
    EnumMember
      Identifier: '
    n'
      NumericLiteral
    EnumMember
      Identifier: '
    o'
      NumericLiteral
    EnumMember
      Identifier: '
    p'
      NumericLiteral
    EnumMember
      Identifier: '
    q'
      NumericLiteral
    EnumMember
      Identifier: '
    r'
      NumericLiteral
    EnumMember
      Identifier: '
    s'
      NumericLiteral
    EnumMember
      Identifier: '
    t'
      NumericLiteral
    EnumMember
      Identifier: '
    u'
      NumericLiteral
    EnumMember
      Identifier: '
    v'
      NumericLiteral
    EnumMember
      Identifier: '
    w'
      NumericLiteral
    EnumMember
      Identifier: '
    x'
      NumericLiteral
    EnumMember
      Identifier: '
    y'
      NumericLiteral
    EnumMember
      Identifier: '
    z'
      NumericLiteral
    EnumMember
      Identifier: '

    A'
      NumericLiteral
    EnumMember
      Identifier: '
    B'
      NumericLiteral
    EnumMember
      Identifier: '
    C'
      NumericLiteral
    EnumMember
      Identifier: '
    D'
      NumericLiteral
    EnumMember
      Identifier: '
    E'
      NumericLiteral
    EnumMember
      Identifier: '
    F'
      NumericLiteral
    EnumMember
      Identifier: '
    G'
      NumericLiteral
    EnumMember
      Identifier: '
    H'
      NumericLiteral
    EnumMember
      Identifier: '
    I'
      NumericLiteral
    EnumMember
      Identifier: '
    J'
      NumericLiteral
    EnumMember
      Identifier: '
    K'
      NumericLiteral
    EnumMember
      Identifier: '
    L'
      NumericLiteral
    EnumMember
      Identifier: '
    M'
      NumericLiteral
    EnumMember
      Identifier: '
    N'
      NumericLiteral
    EnumMember
      Identifier: '
    O'
      NumericLiteral
    EnumMember
      Identifier: '
    P'
      NumericLiteral
    EnumMember
      Identifier: '
    Q'
      NumericLiteral
    EnumMember
      Identifier: '
    R'
      NumericLiteral
    EnumMember
      Identifier: '
    S'
      NumericLiteral
    EnumMember
      Identifier: '
    T'
      NumericLiteral
    EnumMember
      Identifier: '
    U'
      NumericLiteral
    EnumMember
      Identifier: '
    V'
      NumericLiteral
    EnumMember
      Identifier: '
    W'
      NumericLiteral
    EnumMember
      Identifier: '
    X'
      NumericLiteral
    EnumMember
      Identifier: '
    Y'
      NumericLiteral
    EnumMember
      Identifier: '
    Z'
      NumericLiteral
    EnumMember
      Identifier: '

    ampersand'
      NumericLiteral
    EnumMember
      Identifier: '             // &
    asterisk'
      NumericLiteral
    EnumMember
      Identifier: '              // *
    at'
      NumericLiteral
    EnumMember
      Identifier: '                    // @
    backslash'
      NumericLiteral
    EnumMember
      Identifier: '             // \
    backtick'
      NumericLiteral
    EnumMember
      Identifier: '              // `
    bar'
      NumericLiteral
    EnumMember
      Identifier: '                   // |
    caret'
      NumericLiteral
    EnumMember
      Identifier: '                 // ^
    closeBrace'
      NumericLiteral
    EnumMember
      Identifier: '            // }
    closeBracket'
      NumericLiteral
    EnumMember
      Identifier: '          // ]
    closeParen'
      NumericLiteral
    EnumMember
      Identifier: '            // )
    colon'
      NumericLiteral
    EnumMember
      Identifier: '                 // :
    comma'
      NumericLiteral
    EnumMember
      Identifier: '                 // ,
    dot'
      NumericLiteral
    EnumMember
      Identifier: '                   // .
    doubleQuote'
      NumericLiteral
    EnumMember
      Identifier: '           // "
    equals'
      NumericLiteral
    EnumMember
      Identifier: '                // =
    exclamation'
      NumericLiteral
    EnumMember
      Identifier: '           // !
    greaterThan'
      NumericLiteral
    EnumMember
      Identifier: '           // >
    hash'
      NumericLiteral
    EnumMember
      Identifier: '                  // #
    lessThan'
      NumericLiteral
    EnumMember
      Identifier: '              // <
    minus'
      NumericLiteral
    EnumMember
      Identifier: '                 // -
    openBrace'
      NumericLiteral
    EnumMember
      Identifier: '             // {
    openBracket'
      NumericLiteral
    EnumMember
      Identifier: '           // [
    openParen'
      NumericLiteral
    EnumMember
      Identifier: '             // (
    percent'
      NumericLiteral
    EnumMember
      Identifier: '               // %
    plus'
      NumericLiteral
    EnumMember
      Identifier: '                  // +
    question'
      NumericLiteral
    EnumMember
      Identifier: '              // ?
    semicolon'
      NumericLiteral
    EnumMember
      Identifier: '             // ;
    singleQuote'
      NumericLiteral
    EnumMember
      Identifier: '           // '
    slash'
      NumericLiteral
    EnumMember
      Identifier: '                 // /
    tilde'
      NumericLiteral
    EnumMember
      Identifier: '                 // ~

    backspace'
      NumericLiteral
    EnumMember
      Identifier: '             // \b
    formFeed'
      NumericLiteral
    EnumMember
      Identifier: '              // \f
    byteOrderMark'
      NumericLiteral
    EnumMember
      Identifier: '
    tab'
      NumericLiteral
    EnumMember
      Identifier: '                   // \t
    verticalTab'
      NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ModuleResolutionHost'
    MethodSignature
      Identifier: '
    // TODO: GH#18217 Optional methods frequently used as non-optional

    fileExists'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    // readFile function is used to read arbitrary text files on disk, i.e. when resolution procedure needs the content of 'package.json'
    // to determine location of bundled typings for node module
    readFile'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    trace'
      QuestionToken
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    directoryExists'
      QuestionToken
      Parameter
        Identifier: 'directoryName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Resolve a symbolic link.
     * @see https://nodejs.org/api/fs.html#fs_fs_realpathsync_path_options
     */
    realpath'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      QuestionToken
      StringKeyword
    MethodSignature
      Identifier: '
    getDirectories'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    useCaseSensitiveFileNames'
      QuestionToken
      UnionType
        BooleanKeyword
        ParenthesizedType
          FunctionType
            BooleanKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getGlobalTypingsCacheLocation'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' MinimalResolutionCacheHost'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ModuleResolutionHost'
    MethodSignature
      Identifier: '
    getCompilationSettings'
      TypeReference
        Identifier: ' CompilerOptions'
    MethodSignature
      Identifier: '
    getCompilerHost'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' CompilerHost'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolvedModule'
    PropertySignature
      Identifier: '
    /** Path of the file the module was resolved to. */
    resolvedFileName'
      StringKeyword
    PropertySignature
      Identifier: '
    /** True if `resolvedFileName` comes from `node_modules`. */
    isExternalLibraryImport'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * True if the original module reference used a .ts extension to refer directly to a .ts file,
     * which should produce an error during checking if emit is enabled.
     */
    resolvedUsingTsExtension'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolvedModuleFull'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ResolvedModule'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' originalPath'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * Extension of resolvedFileName. This must match what's at the end of resolvedFileName.
     * This is optional for backwards-compatibility, but will be added if not provided.
     */
    extension'
      StringKeyword
    PropertySignature
      Identifier: '
    packageId'
      QuestionToken
      TypeReference
        Identifier: ' PackageId'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PackageId'
    PropertySignature
      Identifier: '
    /**
     * Name of the package.
     * Should not include `@types`.
     * If accessing a non-index file, this should include its name e.g. "foo/bar".
     */
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    /**
     * Name of a submodule within this package.
     * May be "".
     */
    subModuleName'
      StringKeyword
    PropertySignature
      Identifier: '
    /** Version of the package, e.g. "1.2.3" */
    version'
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal*/ peerDependencies'
      QuestionToken
      StringKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' Extension'
    EnumMember
      Identifier: '
    Ts'
      StringLiteral
    EnumMember
      Identifier: '
    Tsx'
      StringLiteral
    EnumMember
      Identifier: '
    Dts'
      StringLiteral
    EnumMember
      Identifier: '
    Js'
      StringLiteral
    EnumMember
      Identifier: '
    Jsx'
      StringLiteral
    EnumMember
      Identifier: '
    Json'
      StringLiteral
    EnumMember
      Identifier: '
    TsBuildInfo'
      StringLiteral
    EnumMember
      Identifier: '
    Mjs'
      StringLiteral
    EnumMember
      Identifier: '
    Mts'
      StringLiteral
    EnumMember
      Identifier: '
    Dmts'
      StringLiteral
    EnumMember
      Identifier: '
    Cjs'
      StringLiteral
    EnumMember
      Identifier: '
    Cts'
      StringLiteral
    EnumMember
      Identifier: '
    Dcts'
      StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolvedModuleWithFailedLookupLocations'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' resolvedModule'
      UnionType
        TypeReference
          Identifier: ' ResolvedModuleFull'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    failedLookupLocations'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    affectingLocations'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */
    resolutionDiagnostics'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Diagnostic'
    PropertySignature
      Identifier: '
    /**
     * @internal
     * Used to issue a better diagnostic when an unresolvable module may
     * have been resolvable under different module resolution settings.
     */
    alternateResult'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolvedTypeReferenceDirective'
    PropertySignature
      Identifier: '
    // True if the type declaration file was found in a primary lookup location
    primary'
      BooleanKeyword
    PropertySignature
      Identifier: '
    // The location of the .d.ts file we located, or undefined if resolution failed
    resolvedFileName'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * @internal
     * The location of the symlink to the .d.ts file we found, if `resolvedFileName` was the realpath.
     * This is a file name with preserved original casing, not a normalized `Path`.
     */
    originalPath'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    packageId'
      QuestionToken
      TypeReference
        Identifier: ' PackageId'
    PropertySignature
      Identifier: '
    /** True if `resolvedFileName` comes from `node_modules`. */
    isExternalLibraryImport'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' resolvedTypeReferenceDirective'
      UnionType
        TypeReference
          Identifier: ' ResolvedTypeReferenceDirective'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /** @internal */ failedLookupLocations'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ affectingLocations'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ resolutionDiagnostics'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Diagnostic'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasInvalidatedResolutions'
    FunctionType
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' Path'
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasInvalidatedLibResolutions'
    FunctionType
      Parameter
        Identifier: 'libFileName'
        StringKeyword
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasChangedAutomaticTypeDirectiveNames'
    FunctionType
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CompilerHost'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ModuleResolutionHost'
    MethodSignature
      Identifier: '
    getSourceFile'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' languageVersionOrOptions'
        UnionType
          TypeReference
            Identifier: ' ScriptTarget'
          TypeReference
            Identifier: ' CreateSourceFileOptions'
      Parameter
        Identifier: ' onError'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'message'
            StringKeyword
          VoidKeyword
      Parameter
        Identifier: ' shouldCreateNewSourceFile'
        QuestionToken
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getSourceFileByPath'
      QuestionToken
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' path'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' languageVersionOrOptions'
        UnionType
          TypeReference
            Identifier: ' ScriptTarget'
          TypeReference
            Identifier: ' CreateSourceFileOptions'
      Parameter
        Identifier: ' onError'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'message'
            StringKeyword
          VoidKeyword
      Parameter
        Identifier: ' shouldCreateNewSourceFile'
        QuestionToken
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getCancellationToken'
      QuestionToken
      TypeReference
        Identifier: ' CancellationToken'
    MethodSignature
      Identifier: '
    getDefaultLibFileName'
      Parameter
        Identifier: 'options'
        TypeReference
          Identifier: ' CompilerOptions'
      StringKeyword
    MethodSignature
      Identifier: '
    getDefaultLibLocation'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    writeFile'
      TypeReference
        Identifier: ' WriteFileCallback'
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
    MethodSignature
      Identifier: '
    getCanonicalFileName'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    useCaseSensitiveFileNames'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getNewLine'
      StringKeyword
    MethodSignature
      Identifier: '
    readDirectory'
      QuestionToken
      Parameter
        Identifier: 'rootDir'
        StringKeyword
      Parameter
        Identifier: ' extensions'
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' excludes'
        UnionType
          TypeOperator
            ArrayType
              StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' includes'
        TypeOperator
          ArrayType
            StringKeyword
      Parameter
        Identifier: ' depth'
        QuestionToken
        NumberKeyword
      ArrayType
        StringKeyword
    MethodSignature
      Identifier: '

    /*
     * CompilerHost must either implement resolveModuleNames (in case if it wants to be completely in charge of
     * module name resolution) or provide implementation for methods from ModuleResolutionHost (in this case compiler
     * will apply built-in module resolution logic and use members of ModuleResolutionHost to ask host specific questions).
     * If resolveModuleNames is implemented then implementation for members from ModuleResolutionHost can be just
     * 'throw new Error("NotImplemented")'
     */
    /** @deprecated supply resolveModuleNameLiterals instead for resolution that can handle newer resolution modes like nodenext */
    resolveModuleNames'
      QuestionToken
      Parameter
        Identifier: 'moduleNames'
        ArrayType
          StringKeyword
      Parameter
        Identifier: ' containingFile'
        StringKeyword
      Parameter
        Identifier: ' reusedNames'
        UnionType
          ArrayType
            StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' redirectedReference'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' containingSourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'ResolvedModule'
            UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns the module resolution cache used by a provided `resolveModuleNames` implementation so that any non-name module resolution operations (eg, package.json lookup) can reuse it
     */
    getModuleResolutionCache'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ModuleResolutionCache'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * @deprecated supply resolveTypeReferenceDirectiveReferences instead for resolution that can handle newer resolution modes like nodenext
     *
     * This method is a companion for 'resolveModuleNames' and is used to resolve 'types' references to actual type declaration files
     */
    resolveTypeReferenceDirectives'
      QuestionToken
      Parameter
        Identifier: 'typeReferenceDirectiveNames'
        UnionType
          ArrayType
            StringKeyword
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' FileReference'
      Parameter
        Identifier: ' containingFile'
        StringKeyword
      Parameter
        Identifier: ' redirectedReference'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' containingFileMode'
        QuestionToken
        TypeReference
          Identifier: ' ResolutionMode'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'ResolvedTypeReferenceDirective'
            UndefinedKeyword
    MethodSignature
      Identifier: '
    resolveModuleNameLiterals'
      QuestionToken
      Parameter
        Identifier: '
        moduleLiterals'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' StringLiteralLike'
      Parameter
        Identifier: '
        containingFile'
        StringKeyword
      Parameter
        Identifier: '
        redirectedReference'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: '
        options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: '
        containingSourceFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: '
        reusedNames'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' StringLiteralLike'
          UndefinedKeyword
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ResolvedModuleWithFailedLookupLocations'
    MethodSignature
      Identifier: '
    resolveTypeReferenceDirectiveReferences'
      QuestionToken
      TypeParameter
        Identifier: 'T'
        UnionType
          TypeReference
            Identifier: ' FileReference'
          StringKeyword
      Parameter
        Identifier: '
        typeDirectiveReferences'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' T'
      Parameter
        Identifier: '
        containingFile'
        StringKeyword
      Parameter
        Identifier: '
        redirectedReference'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: '
        options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: '
        containingSourceFile'
        UnionType
          TypeReference
            Identifier: ' SourceFile'
          UndefinedKeyword
      Parameter
        Identifier: '
        reusedNames'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' T'
          UndefinedKeyword
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ResolvedTypeReferenceDirectiveWithFailedLookupLocations'
    MethodSignature
      Identifier: '
    /** @internal */
    resolveLibrary'
      QuestionToken
      Parameter
        Identifier: '
        libraryName'
        StringKeyword
      Parameter
        Identifier: '
        resolveFrom'
        StringKeyword
      Parameter
        Identifier: '
        options'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: '
        libFileName'
        StringKeyword
      TypeReference
        Identifier: ' ResolvedModuleWithFailedLookupLocations'
    MethodSignature
      Identifier: '
    /**
     * If provided along with custom resolveLibrary, used to determine if we should redo library resolutions
     * @internal
     */
    hasInvalidatedLibResolutions'
      QuestionToken
      Parameter
        Identifier: 'libFileName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    getEnvironmentVariable'
      QuestionToken
      Parameter
        Identifier: 'name'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ onReleaseOldSourceFile'
      QuestionToken
      Parameter
        Identifier: 'oldSourceFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' oldOptions'
        TypeReference
          Identifier: ' CompilerOptions'
      Parameter
        Identifier: ' hasSourceFileByPath'
        BooleanKeyword
      Parameter
        Identifier: ' newSourceFileByResolvedPath'
        UnionType
          TypeReference
            Identifier: ' SourceFile'
          UndefinedKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */ onReleaseParsedCommandLine'
      QuestionToken
      Parameter
        Identifier: 'configFileName'
        StringKeyword
      Parameter
        Identifier: ' oldResolvedRef'
        UnionType
          TypeReference
            Identifier: ' ResolvedProjectReference'
          UndefinedKeyword
      Parameter
        Identifier: ' optionOptions'
        TypeReference
          Identifier: ' CompilerOptions'
      VoidKeyword
    MethodSignature
      Identifier: '
    /** If provided along with custom resolveModuleNames or resolveTypeReferenceDirectives, used to determine if unchanged file path needs to re-resolve modules/type reference directives */
    hasInvalidatedResolutions'
      QuestionToken
      Parameter
        Identifier: 'filePath'
        TypeReference
          Identifier: ' Path'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ hasChangedAutomaticTypeDirectiveNames'
      QuestionToken
      TypeReference
        Identifier: ' HasChangedAutomaticTypeDirectiveNames'
    MethodSignature
      Identifier: '
    createHash'
      QuestionToken
      Parameter
        Identifier: 'data'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    getParsedCommandLine'
      QuestionToken
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' ParsedCommandLine'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ useSourceOfProjectReferenceRedirect'
      QuestionToken
      BooleanKeyword
    MethodSignature
      Identifier: '

    // TODO: later handle this in better way in builder host instead once the api for tsbuild finalizes and doesn't use compilerHost as base
    /** @internal */ createDirectory'
      QuestionToken
      Parameter
        Identifier: 'directory'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getSymlinkCache'
      QuestionToken
      TypeReference
        Identifier: ' SymlinkCache'
    PropertySignature
      Identifier: '

    // For testing:
    /** @internal */ storeSignatureInfo'
      QuestionToken
      BooleanKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getBuildInfo'
      QuestionToken
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' configFilePath'
        UnionType
          StringKeyword
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' BuildInfo'
        UndefinedKeyword
    PropertySignature
      Identifier: '

    jsDocParsingMode'
      QuestionToken
      TypeReference
        Identifier: ' JSDocParsingMode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SourceOfProjectReferenceRedirect'
    UnionType
      StringKeyword
      LiteralType
        TrueKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' TransformFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '

    // Facts
    // - Flags used to indicate that a node or subtree contains syntax that requires transformation.
    ContainsTypeScript'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsJsx'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsESNext'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsES2022'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsES2021'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsES2020'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsES2019'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsES2018'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsES2017'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsES2016'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsES2015'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsGenerator'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsDestructuringAssignment'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    // Markers
    // - Flags used to indicate that a subtree contains a specific transformation.
    ContainsTypeScriptClassSyntax'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Property Initializers, Parameter Property Initializers
    ContainsLexicalThis'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsRestOrSpread'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsObjectRestOrSpread'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsComputedPropertyName'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsBlockScopedBinding'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsBindingPattern'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsYield'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsAwait'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsHoistedDeclarationOrCompletion'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsDynamicImport'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsClassFields'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsDecorators'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsPossibleTopLevelAwait'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsLexicalSuper'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsUpdateExpressionForIdentifier'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ContainsPrivateIdentifierInExpression'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    HasComputedFlags'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Transform flags have been computed.

    // Assertions
    // - Bitmasks that are used to assert facts about the syntax of a node and its subtree.
    AssertTypeScript'
      Identifier: ' ContainsTypeScript'
    EnumMember
      Identifier: '
    AssertJsx'
      Identifier: ' ContainsJsx'
    EnumMember
      Identifier: '
    AssertESNext'
      Identifier: ' ContainsESNext'
    EnumMember
      Identifier: '
    AssertES2022'
      Identifier: ' ContainsES2022'
    EnumMember
      Identifier: '
    AssertES2021'
      Identifier: ' ContainsES2021'
    EnumMember
      Identifier: '
    AssertES2020'
      Identifier: ' ContainsES2020'
    EnumMember
      Identifier: '
    AssertES2019'
      Identifier: ' ContainsES2019'
    EnumMember
      Identifier: '
    AssertES2018'
      Identifier: ' ContainsES2018'
    EnumMember
      Identifier: '
    AssertES2017'
      Identifier: ' ContainsES2017'
    EnumMember
      Identifier: '
    AssertES2016'
      Identifier: ' ContainsES2016'
    EnumMember
      Identifier: '
    AssertES2015'
      Identifier: ' ContainsES2015'
    EnumMember
      Identifier: '
    AssertGenerator'
      Identifier: ' ContainsGenerator'
    EnumMember
      Identifier: '
    AssertDestructuringAssignment'
      Identifier: ' ContainsDestructuringAssignment'
    EnumMember
      Identifier: '

    // Scope Exclusions
    // - Bitmasks that exclude flags from propagating out of a specific context
    //   into the subtree flags of their container.
    OuterExpressionExcludes'
      Identifier: ' HasComputedFlags'
    EnumMember
      Identifier: '
    PropertyAccessExcludes'
      Identifier: ' OuterExpressionExcludes'
    EnumMember
      Identifier: '
    NodeExcludes'
      Identifier: ' PropertyAccessExcludes'
    EnumMember
      Identifier: '
    ArrowFunctionExcludes'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      Identifier: ' NodeExcludes'
                      BarToken
                      Identifier: ' ContainsTypeScriptClassSyntax'
                    BarToken
                    Identifier: ' ContainsBlockScopedBinding'
                  BarToken
                  Identifier: ' ContainsYield'
                BarToken
                Identifier: ' ContainsAwait'
              BarToken
              Identifier: ' ContainsHoistedDeclarationOrCompletion'
            BarToken
            Identifier: ' ContainsBindingPattern'
          BarToken
          Identifier: ' ContainsObjectRestOrSpread'
        BarToken
        Identifier: ' ContainsPossibleTopLevelAwait'
    EnumMember
      Identifier: '
    FunctionExcludes'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        BinaryExpression
                          Identifier: ' NodeExcludes'
                          BarToken
                          Identifier: ' ContainsTypeScriptClassSyntax'
                        BarToken
                        Identifier: ' ContainsLexicalThis'
                      BarToken
                      Identifier: ' ContainsLexicalSuper'
                    BarToken
                    Identifier: ' ContainsBlockScopedBinding'
                  BarToken
                  Identifier: ' ContainsYield'
                BarToken
                Identifier: ' ContainsAwait'
              BarToken
              Identifier: ' ContainsHoistedDeclarationOrCompletion'
            BarToken
            Identifier: ' ContainsBindingPattern'
          BarToken
          Identifier: ' ContainsObjectRestOrSpread'
        BarToken
        Identifier: ' ContainsPossibleTopLevelAwait'
    EnumMember
      Identifier: '
    ConstructorExcludes'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      BinaryExpression
                        Identifier: ' NodeExcludes'
                        BarToken
                        Identifier: ' ContainsLexicalThis'
                      BarToken
                      Identifier: ' ContainsLexicalSuper'
                    BarToken
                    Identifier: ' ContainsBlockScopedBinding'
                  BarToken
                  Identifier: ' ContainsYield'
                BarToken
                Identifier: ' ContainsAwait'
              BarToken
              Identifier: ' ContainsHoistedDeclarationOrCompletion'
            BarToken
            Identifier: ' ContainsBindingPattern'
          BarToken
          Identifier: ' ContainsObjectRestOrSpread'
        BarToken
        Identifier: ' ContainsPossibleTopLevelAwait'
    EnumMember
      Identifier: '
    MethodOrAccessorExcludes'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      Identifier: ' NodeExcludes'
                      BarToken
                      Identifier: ' ContainsLexicalThis'
                    BarToken
                    Identifier: ' ContainsLexicalSuper'
                  BarToken
                  Identifier: ' ContainsBlockScopedBinding'
                BarToken
                Identifier: ' ContainsYield'
              BarToken
              Identifier: ' ContainsAwait'
            BarToken
            Identifier: ' ContainsHoistedDeclarationOrCompletion'
          BarToken
          Identifier: ' ContainsBindingPattern'
        BarToken
        Identifier: ' ContainsObjectRestOrSpread'
    EnumMember
      Identifier: '
    PropertyExcludes'
      BinaryExpression
        BinaryExpression
          Identifier: ' NodeExcludes'
          BarToken
          Identifier: ' ContainsLexicalThis'
        BarToken
        Identifier: ' ContainsLexicalSuper'
    EnumMember
      Identifier: '
    ClassExcludes'
      BinaryExpression
        BinaryExpression
          Identifier: ' NodeExcludes'
          BarToken
          Identifier: ' ContainsTypeScriptClassSyntax'
        BarToken
        Identifier: ' ContainsComputedPropertyName'
    EnumMember
      Identifier: '
    ModuleExcludes'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' NodeExcludes'
                  BarToken
                  Identifier: ' ContainsTypeScriptClassSyntax'
                BarToken
                Identifier: ' ContainsLexicalThis'
              BarToken
              Identifier: ' ContainsLexicalSuper'
            BarToken
            Identifier: ' ContainsBlockScopedBinding'
          BarToken
          Identifier: ' ContainsHoistedDeclarationOrCompletion'
        BarToken
        Identifier: ' ContainsPossibleTopLevelAwait'
    EnumMember
      Identifier: '
    TypeExcludes'
      PrefixUnaryExpression
        Identifier: 'ContainsTypeScript'
    EnumMember
      Identifier: '
    ObjectLiteralExcludes'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' NodeExcludes'
            BarToken
            Identifier: ' ContainsTypeScriptClassSyntax'
          BarToken
          Identifier: ' ContainsComputedPropertyName'
        BarToken
        Identifier: ' ContainsObjectRestOrSpread'
    EnumMember
      Identifier: '
    ArrayLiteralOrCallOrNewExcludes'
      BinaryExpression
        Identifier: ' NodeExcludes'
        BarToken
        Identifier: ' ContainsRestOrSpread'
    EnumMember
      Identifier: '
    VariableDeclarationListExcludes'
      BinaryExpression
        BinaryExpression
          Identifier: ' NodeExcludes'
          BarToken
          Identifier: ' ContainsBindingPattern'
        BarToken
        Identifier: ' ContainsObjectRestOrSpread'
    EnumMember
      Identifier: '
    ParameterExcludes'
      Identifier: ' NodeExcludes'
    EnumMember
      Identifier: '
    CatchClauseExcludes'
      BinaryExpression
        Identifier: ' NodeExcludes'
        BarToken
        Identifier: ' ContainsObjectRestOrSpread'
    EnumMember
      Identifier: '
    BindingPatternExcludes'
      BinaryExpression
        Identifier: ' NodeExcludes'
        BarToken
        Identifier: ' ContainsRestOrSpread'
    EnumMember
      Identifier: '
    ContainsLexicalThisOrSuper'
      BinaryExpression
        Identifier: ' ContainsLexicalThis'
        BarToken
        Identifier: ' ContainsLexicalSuper'
    EnumMember
      Identifier: '

    // Propagating flags
    // - Bitmasks for flags that should propagate from a child
    PropertyNamePropagatingFlags'
      BinaryExpression
        Identifier: ' ContainsLexicalThis'
        BarToken
        Identifier: ' ContainsLexicalSuper'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceMapRange'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TextRange'
    PropertySignature
      Identifier: '
    source'
      QuestionToken
      TypeReference
        Identifier: ' SourceMapSource'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceMapSource'
    PropertySignature
      Identifier: '
    fileName'
      StringKeyword
    PropertySignature
      Identifier: '
    text'
      StringKeyword
    PropertySignature
      Identifier: '
    /** @internal */ lineMap'
      TypeOperator
        ArrayType
          NumberKeyword
    PropertySignature
      Identifier: '
    skipTrivia'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'pos'
          NumberKeyword
        NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmitNode'
    PropertySignature
      Identifier: '
    flags'
      TypeReference
        Identifier: ' EmitFlags'
    PropertySignature
      Identifier: '                        // Flags that customize emit
    internalFlags'
      TypeReference
        Identifier: ' InternalEmitFlags'
    PropertySignature
      Identifier: '        // Internal flags that customize emit
    annotatedNodes'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Node'
    PropertySignature
      Identifier: '                 // Tracks Parse-tree nodes with EmitNodes for eventual cleanup.
    leadingComments'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' SynthesizedComment'
    PropertySignature
      Identifier: '  // Synthesized leading comments
    trailingComments'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' SynthesizedComment'
    PropertySignature
      Identifier: ' // Synthesized trailing comments
    commentRange'
      QuestionToken
      TypeReference
        Identifier: ' TextRange'
    PropertySignature
      Identifier: '                // The text range to use when emitting leading or trailing comments
    sourceMapRange'
      QuestionToken
      TypeReference
        Identifier: ' SourceMapRange'
    PropertySignature
      Identifier: '         // The text range to use when emitting leading or trailing source mappings
    tokenSourceMapRanges'
      QuestionToken
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'SourceMapRange'
            UndefinedKeyword
    PropertySignature
      Identifier: ' // The text range to use when emitting source mappings for tokens
    constantValue'
      QuestionToken
      UnionType
        StringKeyword
        NumberKeyword
    PropertySignature
      Identifier: '         // The constant value of an expression
    externalHelpersModuleName'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '  // The local name for an imported helpers module
    externalHelpers'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    helpers'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' EmitHelper'
    PropertySignature
      Identifier: '                  // Emit helpers for the node
    startsOnNewLine'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '               // If the node should begin on a new line
    snippetElement'
      QuestionToken
      TypeReference
        Identifier: ' SnippetElement'
    PropertySignature
      Identifier: '         // Snippet element of the node
    typeNode'
      QuestionToken
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '                     // VariableDeclaration type
    classThis'
      QuestionToken
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '                  // Identifier that points to a captured static `this` for a class which may be updated after decorators are applied
    assignedName'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '               // Expression used as the assigned name of a class or function
    identifierTypeArguments'
      QuestionToken
      TypeReference
        Identifier: ' NodeArray'
        UnionType
          TypeReference
            Identifier: 'TypeNode'
          TypeReference
            Identifier: ' TypeParameterDeclaration'
    PropertySignature
      Identifier: ' // Only defined on synthesized identifiers. Though not syntactically valid, used in emitting diagnostics, quickinfo, and signature help.
    autoGenerate'
      UnionType
        TypeReference
          Identifier: ' AutoGenerateInfo'
        UndefinedKeyword
    PropertySignature
      Identifier: ' // Used for auto-generated identifiers and private identifiers.
    generatedImportReference'
      QuestionToken
      TypeReference
        Identifier: ' ImportSpecifier'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SnippetElement'
    UnionType
      TypeReference
        Identifier: ' TabStop'
      TypeReference
        Identifier: ' Placeholder'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TabStop'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' SnippetKind'
          Identifier: 'TabStop'
    PropertySignature
      Identifier: '
    order'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Placeholder'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' SnippetKind'
          Identifier: 'Placeholder'
    PropertySignature
      Identifier: '
    order'
      NumberKeyword
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' SnippetKind'
    EnumMember
      Identifier: '
    TabStop'
    EnumMember
      Identifier: '                                // `$1`, `$2`
    Placeholder'
    EnumMember
      Identifier: '                            // `${1:foo}`
    Choice'
    EnumMember
      Identifier: '                                 // `${1|one,two,three|}`
    Variable'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' EmitFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    SingleLine'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                    // The contents of this node should be emitted on a single line.
    MultiLine'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    AdviseOnEmitNode'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '              // The printer should invoke the onEmitNode callback when printing this node.
    NoSubstitution'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // Disables further substitution of an expression.
    CapturesThis'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                  // The function captures a lexical `this`
    NoLeadingSourceMap'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '            // Do not emit a leading source map location for this node.
    NoTrailingSourceMap'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '           // Do not emit a trailing source map location for this node.
    NoSourceMap'
      BinaryExpression
        Identifier: ' NoLeadingSourceMap'
        BarToken
        Identifier: ' NoTrailingSourceMap'
    EnumMember
      Identifier: ' // Do not emit a source map location for this node.
    NoNestedSourceMaps'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '            // Do not emit source map locations for children of this node.
    NoTokenLeadingSourceMaps'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '      // Do not emit leading source map location for token nodes.
    NoTokenTrailingSourceMaps'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '     // Do not emit trailing source map location for token nodes.
    NoTokenSourceMaps'
      BinaryExpression
        Identifier: ' NoTokenLeadingSourceMaps'
        BarToken
        Identifier: ' NoTokenTrailingSourceMaps'
    EnumMember
      Identifier: ' // Do not emit source map locations for tokens of this node.
    NoLeadingComments'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '            // Do not emit leading comments for this node.
    NoTrailingComments'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '           // Do not emit trailing comments for this node.
    NoComments'
      BinaryExpression
        Identifier: ' NoLeadingComments'
        BarToken
        Identifier: ' NoTrailingComments'
    EnumMember
      Identifier: ' // Do not emit comments for this node.
    NoNestedComments'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    HelperName'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                   // The Identifier refers to an *unscoped* emit helper (one that is emitted at the top of the file)
    ExportName'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                   // Ensure an export prefix is added for an identifier that points to an exported declaration with a local name (see SymbolFlags.ExportHasLocal).
    LocalName'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                    // Ensure an export prefix is not added for an identifier that points to an exported declaration.
    InternalName'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                 // The name is internal to an ES5 class body function.
    Indented'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                     // Adds an explicit extra indentation level for class and function bodies when printing (used to match old emitter).
    NoIndentation'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // Do not indent the node.
    AsyncFunctionBody'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ReuseTempVariableScope'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '       // Reuse the existing temp variable scope during emit.
    CustomPrologue'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '               // Treat the statement as if it were a prologue directive (NOTE: Prologue directives are *not* transformed).
    NoHoisting'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                   // Do not hoist this declaration in --module system
    Iterator'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                     // The expression to a `yield*` should be treated as an Iterator when down-leveling, not an Iterable.
    NoAsciiEscaping'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' InternalEmitFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    TypeScriptClassWrapper'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // The node is an IIFE class wrapper created by the ts transform.
    NeverApplyImportHelper'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Indicates the node should never be wrapped with an import star helper (because, for example, it imports tslib itself)
    IgnoreSourceNewlines'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // Overrides `printerOptions.preserveSourceNewlines` to print this node (and all descendants) with default whitespace.
    Immutable'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '              // Indicates a node is a singleton intended to be reused in multiple locations. Any attempt to make further changes to the node will result in an error.
    IndirectCall'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '           // Emit CallExpression as an indirect call: `(0, f)()`
    TransformPrivateStaticElements'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmitHelperBase'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' name'
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' scoped'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' text'
      UnionType
        StringKeyword
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'node'
              TypeReference
                Identifier: ' EmitHelperUniqueNameCallback'
            StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' priority'
      QuestionToken
      NumberKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' dependencies'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' EmitHelper'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ScopedEmitHelper'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' EmitHelperBase'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' scoped'
      LiteralType
        TrueKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UnscopedEmitHelper'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' EmitHelperBase'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' scoped'
      LiteralType
        FalseKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' importName'
      QuestionToken
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' text'
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EmitHelper'
    UnionType
      TypeReference
        Identifier: ' ScopedEmitHelper'
      TypeReference
        Identifier: ' UnscopedEmitHelper'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' EmitHelperUniqueNameCallback'
    FunctionType
      Parameter
        Identifier: 'name'
        StringKeyword
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' LanugageFeatures'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' LanguageFeatureMinimumTarget'
        TypeReference
          Identifier: ' Record'
          TypeReference
            Identifier: 'LanugageFeatures'
          TypeReference
            Identifier: ' ScriptTarget'
        ObjectLiteralExpression
          PropertyAssignment
            Identifier: '
    Classes'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    ForOf'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    Generators'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    Iteration'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    SpreadElements'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    RestElements'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    TaggedTemplates'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    DestructuringAssignment'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    BindingPatterns'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    ArrowFunctions'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    BlockScopedVariables'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    ObjectAssign'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    RegularExpressionFlagsUnicode'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    RegularExpressionFlagsSticky'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2015'
          PropertyAssignment
            Identifier: '
    Exponentiation'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2016'
          PropertyAssignment
            Identifier: '
    AsyncFunctions'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2017'
          PropertyAssignment
            Identifier: '
    ForAwaitOf'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2018'
          PropertyAssignment
            Identifier: '
    AsyncGenerators'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2018'
          PropertyAssignment
            Identifier: '
    AsyncIteration'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2018'
          PropertyAssignment
            Identifier: '
    ObjectSpreadRest'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2018'
          PropertyAssignment
            Identifier: '
    RegularExpressionFlagsDotAll'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2018'
          PropertyAssignment
            Identifier: '
    BindinglessCatch'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2019'
          PropertyAssignment
            Identifier: '
    BigInt'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2020'
          PropertyAssignment
            Identifier: '
    NullishCoalesce'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2020'
          PropertyAssignment
            Identifier: '
    OptionalChaining'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2020'
          PropertyAssignment
            Identifier: '
    LogicalAssignment'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2021'
          PropertyAssignment
            Identifier: '
    TopLevelAwait'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2022'
          PropertyAssignment
            Identifier: '
    ClassFields'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2022'
          PropertyAssignment
            Identifier: '
    PrivateNamesAndClassStaticBlocks'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2022'
          PropertyAssignment
            Identifier: '
    RegularExpressionFlagsHasIndices'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ES2022'
          PropertyAssignment
            Identifier: '
    ShebangComments'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ESNext'
          PropertyAssignment
            Identifier: '
    UsingAndAwaitUsing'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ESNext'
          PropertyAssignment
            Identifier: '
    ClassAndClassElementDecorators'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ESNext'
          PropertyAssignment
            Identifier: '
    RegularExpressionFlagsUnicodeSets'
            PropertyAccessExpression
              Identifier: ' ScriptTarget'
              Identifier: 'ESNext'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ExternalEmitHelpers'
    EnumMember
      Identifier: '
    Extends'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '               // __extends (used by the ES2015 class transformation)
    Assign'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // __assign (used by Jsx and ESNext object spread transformations)
    Rest'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                  // __rest (used by ESNext object rest transformation)
    Decorate'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '              // __decorate (used by TypeScript decorators transformation)
    ESDecorateAndRunInitializers'
      Identifier: ' Decorate'
    EnumMember
      Identifier: ' // __esDecorate and __runInitializers (used by ECMAScript decorators transformation)
    Metadata'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '              // __metadata (used by TypeScript decorators transformation)
    Param'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                 // __param (used by TypeScript decorators transformation)
    Awaiter'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '               // __awaiter (used by ES2017 async functions transformation)
    Generator'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '             // __generator (used by ES2015 generator transformation)
    Values'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // __values (used by ES2015 for..of and yield* transformations)
    Read'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                  // __read (used by ES2015 iterator destructuring transformation)
    SpreadArray'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '          // __spreadArray (used by ES2015 array spread and argument list spread transformations)
    Await'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // __await (used by ES2017 async generator transformation)
    AsyncGenerator'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '       // __asyncGenerator (used by ES2017 async generator transformation)
    AsyncDelegator'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '       // __asyncDelegator (used by ES2017 async generator yield* transformation)
    AsyncValues'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '          // __asyncValues (used by ES2017 for..await..of transformation)
    ExportStar'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '           // __exportStar (used by CommonJS/AMD/UMD module transformation)
    ImportStar'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '           // __importStar (used by CommonJS/AMD/UMD module transformation)
    ImportDefault'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // __importStar (used by CommonJS/AMD/UMD module transformation)
    MakeTemplateObject'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '   // __makeTemplateObject (used for constructing template string array objects)
    ClassPrivateFieldGet'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // __classPrivateFieldGet (used by the class private field transformation)
    ClassPrivateFieldSet'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // __classPrivateFieldSet (used by the class private field transformation)
    ClassPrivateFieldIn'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // __classPrivateFieldIn (used by the class private field transformation)
    SetFunctionName'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '      // __setFunctionName (used by class fields and ECMAScript decorators)
    PropKey'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '              // __propKey (used by class fields and ECMAScript decorators)
    AddDisposableResourceAndDisposeResources'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // __addDisposableResource and __disposeResources (used by ESNext transformations)

    FirstEmitHelper'
      Identifier: ' Extends'
    EnumMember
      Identifier: '
    LastEmitHelper'
      Identifier: ' AddDisposableResourceAndDisposeResources'
    EnumMember
      Identifier: '

    // Helpers included by ES2015 for..of
    ForOfIncludes'
      Identifier: ' Values'
    EnumMember
      Identifier: '

    // Helpers included by ES2017 for..await..of
    ForAwaitOfIncludes'
      Identifier: ' AsyncValues'
    EnumMember
      Identifier: '

    // Helpers included by ES2017 async generators
    AsyncGeneratorIncludes'
      BinaryExpression
        Identifier: ' Await'
        BarToken
        Identifier: ' AsyncGenerator'
    EnumMember
      Identifier: '

    // Helpers included by yield* in ES2017 async generators
    AsyncDelegatorIncludes'
      BinaryExpression
        BinaryExpression
          Identifier: ' Await'
          BarToken
          Identifier: ' AsyncDelegator'
        BarToken
        Identifier: ' AsyncValues'
    EnumMember
      Identifier: '

    // Helpers included by ES2015 spread
    SpreadIncludes'
      BinaryExpression
        Identifier: ' Read'
        BarToken
        Identifier: ' SpreadArray'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' EmitHint'
    EnumMember
      Identifier: '
    SourceFile'
    EnumMember
      Identifier: '              // Emitting a SourceFile
    Expression'
    EnumMember
      Identifier: '              // Emitting an Expression
    IdentifierName'
    EnumMember
      Identifier: '          // Emitting an IdentifierName
    MappedTypeParameter'
    EnumMember
      Identifier: '     // Emitting a TypeParameterDeclaration inside of a MappedTypeNode
    Unspecified'
    EnumMember
      Identifier: '             // Emitting an otherwise unspecified node
    EmbeddedStatement'
    EnumMember
      Identifier: '       // Emitting an embedded statement
    JsxAttributeValue'
    EnumMember
      Identifier: '       // Emitting a JSX attribute value
    ImportTypeNodeAttributes'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceFileMayBeEmittedHost'
    MethodSignature
      Identifier: '
    getCompilerOptions'
      TypeReference
        Identifier: ' CompilerOptions'
    MethodSignature
      Identifier: '
    isSourceFileFromExternalLibrary'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getResolvedProjectReferenceToRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' ResolvedProjectReference'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isSourceOfProjectReferenceRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
    PropertySignature
      Identifier: '
    getCanonicalFileName'
      TypeReference
        Identifier: ' GetCanonicalFileName'
    MethodSignature
      Identifier: '
    useCaseSensitiveFileNames'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmitHost'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ScriptReferenceHost'
      ExpressionWithTypeArguments
        Identifier: ' ModuleSpecifierResolutionHost'
      ExpressionWithTypeArguments
        Identifier: ' SourceFileMayBeEmittedHost'
    MethodSignature
      Identifier: '
    getSourceFiles'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' SourceFile'
    MethodSignature
      Identifier: '
    useCaseSensitiveFileNames'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
    MethodSignature
      Identifier: '

    getCommonSourceDirectory'
      StringKeyword
    MethodSignature
      Identifier: '
    getCanonicalFileName'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

    isEmitBlocked'
      Parameter
        Identifier: 'emitFileName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    shouldTransformImportCall'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getEmitModuleFormatOfFile'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' ModuleKind'
    PropertySignature
      Identifier: '

    writeFile'
      TypeReference
        Identifier: ' WriteFileCallback'
    MethodSignature
      Identifier: '
    getBuildInfo'
      UnionType
        TypeReference
          Identifier: ' BuildInfo'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    getSourceFileFromReference'
      IndexedAccessType
        TypeReference
          Identifier: ' Program'
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' redirectTargetsMap'
      TypeReference
        Identifier: ' RedirectTargetsMap'
    MethodSignature
      Identifier: '
    createHash'
      QuestionToken
      Parameter
        Identifier: 'data'
        StringKeyword
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PropertyDescriptorAttributes'
    PropertySignature
      Identifier: '
    enumerable'
      QuestionToken
      UnionType
        BooleanKeyword
        TypeReference
          Identifier: ' Expression'
    PropertySignature
      Identifier: '
    configurable'
      QuestionToken
      UnionType
        BooleanKeyword
        TypeReference
          Identifier: ' Expression'
    PropertySignature
      Identifier: '
    writable'
      QuestionToken
      UnionType
        BooleanKeyword
        TypeReference
          Identifier: ' Expression'
    PropertySignature
      Identifier: '
    value'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    get'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    set'
      QuestionToken
      TypeReference
        Identifier: ' Expression'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' OuterExpressionKinds'
    EnumMember
      Identifier: '
    Parentheses'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    TypeAssertions'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    NonNullAssertions'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    PartiallyEmittedExpressions'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    ExpressionsWithTypeArguments'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '

    Assertions'
      BinaryExpression
        Identifier: ' TypeAssertions'
        BarToken
        Identifier: ' NonNullAssertions'
    EnumMember
      Identifier: '
    All'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' Parentheses'
            BarToken
            Identifier: ' Assertions'
          BarToken
          Identifier: ' PartiallyEmittedExpressions'
        BarToken
        Identifier: ' ExpressionsWithTypeArguments'
    EnumMember
      Identifier: '

    ExcludeJSDocTypeAssertion'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OuterExpression'
    UnionType
      TypeReference
        Identifier: ' ParenthesizedExpression'
      TypeReference
        Identifier: ' TypeAssertion'
      TypeReference
        Identifier: ' SatisfiesExpression'
      TypeReference
        Identifier: ' AsExpression'
      TypeReference
        Identifier: ' NonNullExpression'
      TypeReference
        Identifier: ' ExpressionWithTypeArguments'
      TypeReference
        Identifier: ' PartiallyEmittedExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' WrappedExpression'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Expression'
    UnionType
      IntersectionType
        TypeReference
          Identifier: ' OuterExpression'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' expression'
            TypeReference
              Identifier: ' WrappedExpression'
              TypeReference
                Identifier: 'T'
      TypeReference
        Identifier: ' T'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TypeOfTag'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CallBinding'
    PropertySignature
      Identifier: '
    target'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      Identifier: '
    thisArg'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ParenthesizerRules'
    MethodSignature
      Identifier: '
    getParenthesizeLeftSideOfBinaryForOperator'
      Parameter
        Identifier: 'binaryOperator'
        TypeReference
          Identifier: ' SyntaxKind'
      FunctionType
        Parameter
          Identifier: 'leftSide'
          TypeReference
            Identifier: ' Expression'
        TypeReference
          Identifier: ' Expression'
    MethodSignature
      Identifier: '
    getParenthesizeRightSideOfBinaryForOperator'
      Parameter
        Identifier: 'binaryOperator'
        TypeReference
          Identifier: ' SyntaxKind'
      FunctionType
        Parameter
          Identifier: 'rightSide'
          TypeReference
            Identifier: ' Expression'
        TypeReference
          Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeLeftSideOfBinary'
      Parameter
        Identifier: 'binaryOperator'
        TypeReference
          Identifier: ' SyntaxKind'
      Parameter
        Identifier: ' leftSide'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeRightSideOfBinary'
      Parameter
        Identifier: 'binaryOperator'
        TypeReference
          Identifier: ' SyntaxKind'
      Parameter
        Identifier: ' leftSide'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      Parameter
        Identifier: ' rightSide'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeExpressionOfComputedPropertyName'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeConditionOfConditionalExpression'
      Parameter
        Identifier: 'condition'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeBranchOfConditionalExpression'
      Parameter
        Identifier: 'branch'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeExpressionOfExportDefault'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeExpressionOfNew'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    MethodSignature
      Identifier: '
    parenthesizeLeftSideOfAccess'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' optionalChain'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' LeftHandSideExpression'
    MethodSignature
      Identifier: '
    parenthesizeOperandOfPostfixUnary'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    MethodSignature
      Identifier: '
    parenthesizeOperandOfPrefixUnary'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' UnaryExpression'
    MethodSignature
      Identifier: '
    parenthesizeExpressionsOfCommaDelimitedList'
      Parameter
        Identifier: 'elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Expression'
    MethodSignature
      Identifier: '
    parenthesizeExpressionForDisallowedComma'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeExpressionOfExpressionStatement'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeConciseBodyOfArrowFunction'
      Parameter
        Identifier: 'body'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    parenthesizeConciseBodyOfArrowFunction'
      Parameter
        Identifier: 'body'
        TypeReference
          Identifier: ' ConciseBody'
      TypeReference
        Identifier: ' ConciseBody'
    MethodSignature
      Identifier: '
    parenthesizeCheckTypeOfConditionalType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeExtendsTypeOfConditionalType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeOperandOfTypeOperator'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeOperandOfReadonlyTypeOperator'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeNonArrayTypeOfPostfixType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeElementTypesOfTupleType'
      Parameter
        Identifier: 'types'
        TypeOperator
          ArrayType
            ParenthesizedType
              UnionType
                TypeReference
                  Identifier: 'TypeNode'
                TypeReference
                  Identifier: ' NamedTupleMember'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeElementTypeOfTupleType'
      Parameter
        Identifier: 'type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          TypeReference
            Identifier: ' NamedTupleMember'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        TypeReference
          Identifier: ' NamedTupleMember'
    MethodSignature
      Identifier: '
    parenthesizeTypeOfOptionalType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeConstituentTypeOfUnionType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeConstituentTypesOfUnionType'
      Parameter
        Identifier: 'constituents'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeNode'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeConstituentTypeOfIntersectionType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeConstituentTypesOfIntersectionType'
      Parameter
        Identifier: 'constituents'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeNode'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeLeadingTypeArgument'
      Parameter
        Identifier: 'typeNode'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeNode'
    MethodSignature
      Identifier: '
    parenthesizeTypeArguments'
      Parameter
        Identifier: 'typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TypeNode'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NodeConverters'
    MethodSignature
      Identifier: '
    convertToFunctionBlock'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ConciseBody'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Block'
    MethodSignature
      Identifier: '
    convertToFunctionExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
    MethodSignature
      Identifier: '
    convertToClassExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ClassDeclaration'
      TypeReference
        Identifier: ' ClassExpression'
    MethodSignature
      Identifier: '
    convertToArrayAssignmentElement'
      Parameter
        Identifier: 'element'
        TypeReference
          Identifier: ' ArrayBindingOrAssignmentElement'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    convertToObjectAssignmentElement'
      Parameter
        Identifier: 'element'
        TypeReference
          Identifier: ' ObjectBindingOrAssignmentElement'
      TypeReference
        Identifier: ' ObjectLiteralElementLike'
    MethodSignature
      Identifier: '
    convertToAssignmentPattern'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' BindingOrAssignmentPattern'
      TypeReference
        Identifier: ' AssignmentPattern'
    MethodSignature
      Identifier: '
    convertToObjectAssignmentPattern'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ObjectBindingOrAssignmentPattern'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
    MethodSignature
      Identifier: '
    convertToArrayAssignmentPattern'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ArrayBindingOrAssignmentPattern'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
    MethodSignature
      Identifier: '
    convertToAssignmentElementTarget'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' BindingOrAssignmentElementTarget'
      TypeReference
        Identifier: ' Expression'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' GeneratedNamePart'
    PropertySignature
      Identifier: '
    /** an additional prefix to insert before the text sourced from `node` */
    prefix'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '
    node'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' PrivateIdentifier'
    PropertySignature
      Identifier: '
    /** an additional suffix to insert after the text sourced from `node` */
    suffix'
      QuestionToken
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ImmediatelyInvokedFunctionExpression'
    IntersectionType
      TypeReference
        Identifier: ' CallExpression'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' expression'
          TypeReference
            Identifier: ' FunctionExpression'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ImmediatelyInvokedArrowFunction'
    IntersectionType
      TypeReference
        Identifier: ' CallExpression'
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' expression'
          IntersectionType
            TypeReference
              Identifier: ' ParenthesizedExpression'
            TypeLiteral
              PropertySignature
                ReadonlyKeyword
                Identifier: ' expression'
                TypeReference
                  Identifier: ' ArrowFunction'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NodeFactory'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' parenthesizer'
      TypeReference
        Identifier: ' ParenthesizerRules'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' converters'
      TypeReference
        Identifier: ' NodeConverters'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' baseFactory'
      TypeReference
        Identifier: ' BaseNodeFactory'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' flags'
      TypeReference
        Identifier: ' NodeFactoryFlags'
    MethodSignature
      Identifier: '

    createNodeArray'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: 'elements'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' T'
      Parameter
        Identifier: ' hasTrailingComma'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '

    //
    // Literals
    //

    createNumericLiteral'
      Parameter
        Identifier: 'value'
        UnionType
          StringKeyword
          NumberKeyword
      Parameter
        Identifier: ' numericLiteralFlags'
        QuestionToken
        TypeReference
          Identifier: ' TokenFlags'
      TypeReference
        Identifier: ' NumericLiteral'
    MethodSignature
      Identifier: '
    createBigIntLiteral'
      Parameter
        Identifier: 'value'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PseudoBigInt'
      TypeReference
        Identifier: ' BigIntLiteral'
    MethodSignature
      Identifier: '
    createStringLiteral'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' isSingleQuote'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' StringLiteral'
    MethodSignature
      Identifier: '
    /** @internal */ createStringLiteral'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' isSingleQuote'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' hasExtendedUnicodeEscape'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' StringLiteral'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    createStringLiteralFromNode'
      Parameter
        Identifier: 'sourceNode'
        UnionType
          TypeReference
            Identifier: ' PropertyNameLiteral'
          TypeReference
            Identifier: ' PrivateIdentifier'
      Parameter
        Identifier: ' isSingleQuote'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' StringLiteral'
    MethodSignature
      Identifier: '
    createRegularExpressionLiteral'
      Parameter
        Identifier: 'text'
        StringKeyword
      TypeReference
        Identifier: ' RegularExpressionLiteral'
    MethodSignature
      Identifier: '

    //
    // Identifiers
    //

    createIdentifier'
      Parameter
        Identifier: 'text'
        StringKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '
    /** @internal */ createIdentifier'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' originalKeywordKind'
        QuestionToken
        TypeReference
          Identifier: ' SyntaxKind'
      Parameter
        Identifier: ' hasExtendedUnicodeEscape'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures

    /**
     * Create a unique temporary variable.
     * @param recordTempVariable An optional callback used to record the temporary variable name. This
     * should usually be a reference to `hoistVariableDeclaration` from a `TransformationContext`, but
     * can be `undefined` if you plan to record the temporary variable manually.
     * @param reservedInNestedScopes When `true`, reserves the temporary variable name in all nested scopes
     * during emit so that the variable can be referenced in a nested function body. This is an alternative to
     * setting `EmitFlags.ReuseTempVariableScope` on the nested function itself.
     */
    createTempVariable'
      Parameter
        Identifier: 'recordTempVariable'
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'node'
                TypeReference
                  Identifier: ' Identifier'
              VoidKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' reservedInNestedScopes'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '
    /** @internal */ createTempVariable'
      Parameter
        Identifier: 'recordTempVariable'
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'node'
                TypeReference
                  Identifier: ' Identifier'
              VoidKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' reservedInNestedScopes'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' prefix'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' GeneratedNamePart'
      Parameter
        Identifier: ' suffix'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures

    /**
     * Create a unique temporary variable for use in a loop.
     * @param reservedInNestedScopes When `true`, reserves the temporary variable name in all nested scopes
     * during emit so that the variable can be referenced in a nested function body. This is an alternative to
     * setting `EmitFlags.ReuseTempVariableScope` on the nested function itself.
     */
    createLoopVariable'
      Parameter
        Identifier: 'reservedInNestedScopes'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '

    /** Create a unique name based on the supplied text. */
    createUniqueName'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' GeneratedIdentifierFlags'
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '
    /** @internal */ createUniqueName'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' GeneratedIdentifierFlags'
      Parameter
        Identifier: ' prefix'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' GeneratedNamePart'
      Parameter
        Identifier: ' suffix'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures

    /** Create a unique name generated for a node. */
    getGeneratedNameForNode'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' GeneratedIdentifierFlags'
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '
    /** @internal */ getGeneratedNameForNode'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' GeneratedIdentifierFlags'
      Parameter
        Identifier: ' prefix'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' GeneratedNamePart'
      Parameter
        Identifier: ' suffix'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures

    createPrivateIdentifier'
      Parameter
        Identifier: 'text'
        StringKeyword
      TypeReference
        Identifier: ' PrivateIdentifier'
    MethodSignature
      Identifier: '
    createUniquePrivateName'
      Parameter
        Identifier: 'text'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' PrivateIdentifier'
    MethodSignature
      Identifier: '
    /** @internal */ createUniquePrivateName'
      Parameter
        Identifier: 'text'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' prefix'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' GeneratedNamePart'
      Parameter
        Identifier: ' suffix'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' PrivateIdentifier'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    getGeneratedPrivateNameForNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' PrivateIdentifier'
    MethodSignature
      Identifier: '
    /** @internal */ getGeneratedPrivateNameForNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' prefix'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' GeneratedNamePart'
      Parameter
        Identifier: ' suffix'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' PrivateIdentifier'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures

    //
    // Punctuation
    //

    createToken'
      Parameter
        Identifier: 'token'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'SuperKeyword'
      TypeReference
        Identifier: ' SuperExpression'
    MethodSignature
      Identifier: '
    createToken'
      Parameter
        Identifier: 'token'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'ThisKeyword'
      TypeReference
        Identifier: ' ThisExpression'
    MethodSignature
      Identifier: '
    createToken'
      Parameter
        Identifier: 'token'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'NullKeyword'
      TypeReference
        Identifier: ' NullLiteral'
    MethodSignature
      Identifier: '
    createToken'
      Parameter
        Identifier: 'token'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'TrueKeyword'
      TypeReference
        Identifier: ' TrueLiteral'
    MethodSignature
      Identifier: '
    createToken'
      Parameter
        Identifier: 'token'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'FalseKeyword'
      TypeReference
        Identifier: ' FalseLiteral'
    MethodSignature
      Identifier: '
    createToken'
      Parameter
        Identifier: 'token'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'EndOfFileToken'
      TypeReference
        Identifier: ' EndOfFileToken'
    MethodSignature
      Identifier: '
    createToken'
      Parameter
        Identifier: 'token'
        TypeReference
          QualifiedName
            Identifier: ' SyntaxKind'
            Identifier: 'Unknown'
      TypeReference
        Identifier: ' Token'
        TypeReference
          QualifiedName
            Identifier: 'SyntaxKind'
            Identifier: 'Unknown'
    MethodSignature
      Identifier: '
    createToken'
      TypeParameter
        Identifier: 'TKind'
        TypeReference
          Identifier: ' PunctuationSyntaxKind'
      Parameter
        Identifier: 'token'
        TypeReference
          Identifier: ' TKind'
      TypeReference
        Identifier: ' PunctuationToken'
        TypeReference
          Identifier: 'TKind'
    MethodSignature
      Identifier: '
    createToken'
      TypeParameter
        Identifier: 'TKind'
        TypeReference
          Identifier: ' KeywordTypeSyntaxKind'
      Parameter
        Identifier: 'token'
        TypeReference
          Identifier: ' TKind'
      TypeReference
        Identifier: ' KeywordTypeNode'
        TypeReference
          Identifier: 'TKind'
    MethodSignature
      Identifier: '
    createToken'
      TypeParameter
        Identifier: 'TKind'
        TypeReference
          Identifier: ' ModifierSyntaxKind'
      Parameter
        Identifier: 'token'
        TypeReference
          Identifier: ' TKind'
      TypeReference
        Identifier: ' ModifierToken'
        TypeReference
          Identifier: 'TKind'
    MethodSignature
      Identifier: '
    createToken'
      TypeParameter
        Identifier: 'TKind'
        TypeReference
          Identifier: ' KeywordSyntaxKind'
      Parameter
        Identifier: 'token'
        TypeReference
          Identifier: ' TKind'
      TypeReference
        Identifier: ' KeywordToken'
        TypeReference
          Identifier: 'TKind'
    MethodSignature
      Identifier: '
    /** @internal */ createToken'
      TypeParameter
        Identifier: 'TKind'
        TypeReference
          Identifier: ' SyntaxKind'
      Parameter
        Identifier: 'token'
        TypeReference
          Identifier: ' TKind'
      TypeReference
        Identifier: ' Token'
        TypeReference
          Identifier: 'TKind'
    MethodSignature
      Identifier: '

    //
    // Reserved words
    //

    createSuper'
      TypeReference
        Identifier: ' SuperExpression'
    MethodSignature
      Identifier: '
    createThis'
      TypeReference
        Identifier: ' ThisExpression'
    MethodSignature
      Identifier: '
    createNull'
      TypeReference
        Identifier: ' NullLiteral'
    MethodSignature
      Identifier: '
    createTrue'
      TypeReference
        Identifier: ' TrueLiteral'
    MethodSignature
      Identifier: '
    createFalse'
      TypeReference
        Identifier: ' FalseLiteral'
    MethodSignature
      Identifier: '

    //
    // Modifiers
    //

    createModifier'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' ModifierSyntaxKind'
      Parameter
        Identifier: 'kind'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' ModifierToken'
        TypeReference
          Identifier: 'T'
    MethodSignature
      Identifier: '
    createModifiersFromModifierFlags'
      Parameter
        Identifier: 'flags'
        TypeReference
          Identifier: ' ModifierFlags'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Modifier'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    //
    // Names
    //

    createQualifiedName'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' right'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      TypeReference
        Identifier: ' QualifiedName'
    MethodSignature
      Identifier: '
    updateQualifiedName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' QualifiedName'
      Parameter
        Identifier: ' left'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' QualifiedName'
    MethodSignature
      Identifier: '
    createComputedPropertyName'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ComputedPropertyName'
    MethodSignature
      Identifier: '
    updateComputedPropertyName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ComputedPropertyName'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ComputedPropertyName'
    MethodSignature
      Identifier: '

    //
    // Signature elements
    //

    createTypeParameterDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      Parameter
        Identifier: ' constraint'
        QuestionToken
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' defaultType'
        QuestionToken
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeParameterDeclaration'
    MethodSignature
      Identifier: '
    updateTypeParameterDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeParameterDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' constraint'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' defaultType'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' TypeParameterDeclaration'
    MethodSignature
      Identifier: '
    createParameterDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' dotDotDotToken'
        UnionType
          TypeReference
            Identifier: ' DotDotDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' BindingName'
      Parameter
        Identifier: ' questionToken'
        QuestionToken
        TypeReference
          Identifier: ' QuestionToken'
      Parameter
        Identifier: ' type'
        QuestionToken
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' initializer'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ParameterDeclaration'
    MethodSignature
      Identifier: '
    updateParameterDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' dotDotDotToken'
        UnionType
          TypeReference
            Identifier: ' DotDotDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' BindingName'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' ParameterDeclaration'
    MethodSignature
      Identifier: '
    createDecorator'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Decorator'
    MethodSignature
      Identifier: '
    updateDecorator'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Decorator'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' Decorator'
    MethodSignature
      Identifier: '

    //
    // Type Elements
    //

    createPropertySignature'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' PropertyName'
          StringKeyword
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' PropertySignature'
    MethodSignature
      Identifier: '
    updatePropertySignature'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' PropertySignature'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' PropertyName'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' PropertySignature'
    MethodSignature
      Identifier: '
    createPropertyDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
      Parameter
        Identifier: ' questionOrExclamationToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          TypeReference
            Identifier: ' ExclamationToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' PropertyDeclaration'
    MethodSignature
      Identifier: '
    updatePropertyDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' PropertyDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
      Parameter
        Identifier: ' questionOrExclamationToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          TypeReference
            Identifier: ' ExclamationToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' PropertyDeclaration'
    MethodSignature
      Identifier: '
    createMethodSignature'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' MethodSignature'
    MethodSignature
      Identifier: '
    updateMethodSignature'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' MethodSignature'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' PropertyName'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' MethodSignature'
    MethodSignature
      Identifier: '
    createMethodDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' asteriskToken'
        UnionType
          TypeReference
            Identifier: ' AsteriskToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' MethodDeclaration'
    MethodSignature
      Identifier: '
    updateMethodDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' MethodDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' asteriskToken'
        UnionType
          TypeReference
            Identifier: ' AsteriskToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' PropertyName'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' MethodDeclaration'
    MethodSignature
      Identifier: '
    createConstructorDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' ConstructorDeclaration'
    MethodSignature
      Identifier: '
    updateConstructorDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ConstructorDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' ConstructorDeclaration'
    MethodSignature
      Identifier: '
    createGetAccessorDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' GetAccessorDeclaration'
    MethodSignature
      Identifier: '
    updateGetAccessorDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' GetAccessorDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' PropertyName'
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' GetAccessorDeclaration'
    MethodSignature
      Identifier: '
    createSetAccessorDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' SetAccessorDeclaration'
    MethodSignature
      Identifier: '
    updateSetAccessorDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SetAccessorDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' PropertyName'
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' SetAccessorDeclaration'
    MethodSignature
      Identifier: '
    createCallSignature'
      Parameter
        Identifier: 'typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' CallSignatureDeclaration'
    MethodSignature
      Identifier: '
    updateCallSignature'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CallSignatureDeclaration'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' CallSignatureDeclaration'
    MethodSignature
      Identifier: '
    createConstructSignature'
      Parameter
        Identifier: 'typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
    MethodSignature
      Identifier: '
    updateConstructSignature'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ConstructSignatureDeclaration'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' ConstructSignatureDeclaration'
    MethodSignature
      Identifier: '
    createIndexSignature'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
    MethodSignature
      Identifier: '
    /** @internal */ createIndexSignature'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    updateIndexSignature'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' IndexSignatureDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' IndexSignatureDeclaration'
    MethodSignature
      Identifier: '
    createTemplateLiteralTypeSpan'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' literal'
        UnionType
          TypeReference
            Identifier: ' TemplateMiddle'
          TypeReference
            Identifier: ' TemplateTail'
      TypeReference
        Identifier: ' TemplateLiteralTypeSpan'
    MethodSignature
      Identifier: '
    updateTemplateLiteralTypeSpan'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TemplateLiteralTypeSpan'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' literal'
        UnionType
          TypeReference
            Identifier: ' TemplateMiddle'
          TypeReference
            Identifier: ' TemplateTail'
      TypeReference
        Identifier: ' TemplateLiteralTypeSpan'
    MethodSignature
      Identifier: '
    createClassStaticBlockDeclaration'
      Parameter
        Identifier: 'body'
        TypeReference
          Identifier: ' Block'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
    MethodSignature
      Identifier: '
    updateClassStaticBlockDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ClassStaticBlockDeclaration'
      Parameter
        Identifier: ' body'
        TypeReference
          Identifier: ' Block'
      TypeReference
        Identifier: ' ClassStaticBlockDeclaration'
    MethodSignature
      Identifier: '

    //
    // Types
    //

    createKeywordTypeNode'
      TypeParameter
        Identifier: 'TKind'
        TypeReference
          Identifier: ' KeywordTypeSyntaxKind'
      Parameter
        Identifier: 'kind'
        TypeReference
          Identifier: ' TKind'
      TypeReference
        Identifier: ' KeywordTypeNode'
        TypeReference
          Identifier: 'TKind'
    MethodSignature
      Identifier: '
    createTypePredicateNode'
      Parameter
        Identifier: 'assertsModifier'
        UnionType
          TypeReference
            Identifier: ' AssertsKeyword'
          UndefinedKeyword
      Parameter
        Identifier: ' parameterName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          TypeReference
            Identifier: ' ThisTypeNode'
          StringKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' TypePredicateNode'
    MethodSignature
      Identifier: '
    updateTypePredicateNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypePredicateNode'
      Parameter
        Identifier: ' assertsModifier'
        UnionType
          TypeReference
            Identifier: ' AssertsKeyword'
          UndefinedKeyword
      Parameter
        Identifier: ' parameterName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          TypeReference
            Identifier: ' ThisTypeNode'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' TypePredicateNode'
    MethodSignature
      Identifier: '
    createTypeReferenceNode'
      Parameter
        Identifier: 'typeName'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' EntityName'
      Parameter
        Identifier: ' typeArguments'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeReferenceNode'
    MethodSignature
      Identifier: '
    updateTypeReferenceNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeReferenceNode'
      Parameter
        Identifier: ' typeName'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' TypeReferenceNode'
    MethodSignature
      Identifier: '
    createFunctionTypeNode'
      Parameter
        Identifier: 'typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' FunctionTypeNode'
    MethodSignature
      Identifier: '
    updateFunctionTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' FunctionTypeNode'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ParameterDeclaration'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' FunctionTypeNode'
    MethodSignature
      Identifier: '
    createConstructorTypeNode'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' ConstructorTypeNode'
    MethodSignature
      Identifier: '
    updateConstructorTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ConstructorTypeNode'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ParameterDeclaration'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' ConstructorTypeNode'
    MethodSignature
      Identifier: '
    createTypeQueryNode'
      Parameter
        Identifier: 'exprName'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' typeArguments'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeQueryNode'
    MethodSignature
      Identifier: '
    updateTypeQueryNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeQueryNode'
      Parameter
        Identifier: ' exprName'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' typeArguments'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeQueryNode'
    MethodSignature
      Identifier: '
    createTypeLiteralNode'
      Parameter
        Identifier: 'members'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeElement'
          UndefinedKeyword
      TypeReference
        Identifier: ' TypeLiteralNode'
    MethodSignature
      Identifier: '
    updateTypeLiteralNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeLiteralNode'
      Parameter
        Identifier: ' members'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TypeElement'
      TypeReference
        Identifier: ' TypeLiteralNode'
    MethodSignature
      Identifier: '
    createArrayTypeNode'
      Parameter
        Identifier: 'elementType'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' ArrayTypeNode'
    MethodSignature
      Identifier: '
    updateArrayTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ArrayTypeNode'
      Parameter
        Identifier: ' elementType'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' ArrayTypeNode'
    MethodSignature
      Identifier: '
    createTupleTypeNode'
      Parameter
        Identifier: 'elements'
        TypeOperator
          ArrayType
            ParenthesizedType
              UnionType
                TypeReference
                  Identifier: 'TypeNode'
                TypeReference
                  Identifier: ' NamedTupleMember'
      TypeReference
        Identifier: ' TupleTypeNode'
    MethodSignature
      Identifier: '
    updateTupleTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TupleTypeNode'
      Parameter
        Identifier: ' elements'
        TypeOperator
          ArrayType
            ParenthesizedType
              UnionType
                TypeReference
                  Identifier: 'TypeNode'
                TypeReference
                  Identifier: ' NamedTupleMember'
      TypeReference
        Identifier: ' TupleTypeNode'
    MethodSignature
      Identifier: '
    createNamedTupleMember'
      Parameter
        Identifier: 'dotDotDotToken'
        UnionType
          TypeReference
            Identifier: ' DotDotDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' NamedTupleMember'
    MethodSignature
      Identifier: '
    updateNamedTupleMember'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NamedTupleMember'
      Parameter
        Identifier: ' dotDotDotToken'
        UnionType
          TypeReference
            Identifier: ' DotDotDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' NamedTupleMember'
    MethodSignature
      Identifier: '
    createOptionalTypeNode'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' OptionalTypeNode'
    MethodSignature
      Identifier: '
    updateOptionalTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' OptionalTypeNode'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' OptionalTypeNode'
    MethodSignature
      Identifier: '
    createRestTypeNode'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' RestTypeNode'
    MethodSignature
      Identifier: '
    updateRestTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' RestTypeNode'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' RestTypeNode'
    MethodSignature
      Identifier: '
    createUnionTypeNode'
      Parameter
        Identifier: 'types'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeNode'
      TypeReference
        Identifier: ' UnionTypeNode'
    MethodSignature
      Identifier: '
    updateUnionTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' UnionTypeNode'
      Parameter
        Identifier: ' types'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TypeNode'
      TypeReference
        Identifier: ' UnionTypeNode'
    MethodSignature
      Identifier: '
    createIntersectionTypeNode'
      Parameter
        Identifier: 'types'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeNode'
      TypeReference
        Identifier: ' IntersectionTypeNode'
    MethodSignature
      Identifier: '
    updateIntersectionTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' IntersectionTypeNode'
      Parameter
        Identifier: ' types'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TypeNode'
      TypeReference
        Identifier: ' IntersectionTypeNode'
    MethodSignature
      Identifier: '
    createConditionalTypeNode'
      Parameter
        Identifier: 'checkType'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' extendsType'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' trueType'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' falseType'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' ConditionalTypeNode'
    MethodSignature
      Identifier: '
    updateConditionalTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ConditionalTypeNode'
      Parameter
        Identifier: ' checkType'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' extendsType'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' trueType'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' falseType'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' ConditionalTypeNode'
    MethodSignature
      Identifier: '
    createInferTypeNode'
      Parameter
        Identifier: 'typeParameter'
        TypeReference
          Identifier: ' TypeParameterDeclaration'
      TypeReference
        Identifier: ' InferTypeNode'
    MethodSignature
      Identifier: '
    updateInferTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' InferTypeNode'
      Parameter
        Identifier: ' typeParameter'
        TypeReference
          Identifier: ' TypeParameterDeclaration'
      TypeReference
        Identifier: ' InferTypeNode'
    MethodSignature
      Identifier: '
    createImportTypeNode'
      Parameter
        Identifier: 'argument'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' attributes'
        QuestionToken
        TypeReference
          Identifier: ' ImportAttributes'
      Parameter
        Identifier: ' qualifier'
        QuestionToken
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' typeArguments'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeNode'
      Parameter
        Identifier: ' isTypeOf'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ImportTypeNode'
    MethodSignature
      Identifier: '
    updateImportTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportTypeNode'
      Parameter
        Identifier: ' argument'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' attributes'
        UnionType
          TypeReference
            Identifier: ' ImportAttributes'
          UndefinedKeyword
      Parameter
        Identifier: ' qualifier'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          UndefinedKeyword
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' isTypeOf'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ImportTypeNode'
    MethodSignature
      Identifier: '
    createParenthesizedType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' ParenthesizedTypeNode'
    MethodSignature
      Identifier: '
    updateParenthesizedType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ParenthesizedTypeNode'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' ParenthesizedTypeNode'
    MethodSignature
      Identifier: '
    createThisTypeNode'
      TypeReference
        Identifier: ' ThisTypeNode'
    MethodSignature
      Identifier: '
    createTypeOperatorNode'
      Parameter
        Identifier: 'operator'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' SyntaxKind'
              Identifier: 'KeyOfKeyword'
          TypeReference
            QualifiedName
              Identifier: ' SyntaxKind'
              Identifier: 'UniqueKeyword'
          TypeReference
            QualifiedName
              Identifier: ' SyntaxKind'
              Identifier: 'ReadonlyKeyword'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeOperatorNode'
    MethodSignature
      Identifier: '
    updateTypeOperatorNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeOperatorNode'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeOperatorNode'
    MethodSignature
      Identifier: '
    createIndexedAccessTypeNode'
      Parameter
        Identifier: 'objectType'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' indexType'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' IndexedAccessTypeNode'
    MethodSignature
      Identifier: '
    updateIndexedAccessTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' IndexedAccessTypeNode'
      Parameter
        Identifier: ' objectType'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' indexType'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' IndexedAccessTypeNode'
    MethodSignature
      Identifier: '
    createMappedTypeNode'
      Parameter
        Identifier: 'readonlyToken'
        UnionType
          TypeReference
            Identifier: ' ReadonlyKeyword'
          TypeReference
            Identifier: ' PlusToken'
          TypeReference
            Identifier: ' MinusToken'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameter'
        TypeReference
          Identifier: ' TypeParameterDeclaration'
      Parameter
        Identifier: ' nameType'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          TypeReference
            Identifier: ' PlusToken'
          TypeReference
            Identifier: ' MinusToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TypeElement'
          UndefinedKeyword
      TypeReference
        Identifier: ' MappedTypeNode'
    MethodSignature
      Identifier: '
    updateMappedTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' MappedTypeNode'
      Parameter
        Identifier: ' readonlyToken'
        UnionType
          TypeReference
            Identifier: ' ReadonlyKeyword'
          TypeReference
            Identifier: ' PlusToken'
          TypeReference
            Identifier: ' MinusToken'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameter'
        TypeReference
          Identifier: ' TypeParameterDeclaration'
      Parameter
        Identifier: ' nameType'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          TypeReference
            Identifier: ' PlusToken'
          TypeReference
            Identifier: ' MinusToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TypeElement'
          UndefinedKeyword
      TypeReference
        Identifier: ' MappedTypeNode'
    MethodSignature
      Identifier: '
    createLiteralTypeNode'
      Parameter
        Identifier: 'literal'
        IndexedAccessType
          TypeReference
            Identifier: ' LiteralTypeNode'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' LiteralTypeNode'
    MethodSignature
      Identifier: '
    updateLiteralTypeNode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' LiteralTypeNode'
      Parameter
        Identifier: ' literal'
        IndexedAccessType
          TypeReference
            Identifier: ' LiteralTypeNode'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' LiteralTypeNode'
    MethodSignature
      Identifier: '
    createTemplateLiteralType'
      Parameter
        Identifier: 'head'
        TypeReference
          Identifier: ' TemplateHead'
      Parameter
        Identifier: ' templateSpans'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TemplateLiteralTypeSpan'
      TypeReference
        Identifier: ' TemplateLiteralTypeNode'
    MethodSignature
      Identifier: '
    updateTemplateLiteralType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TemplateLiteralTypeNode'
      Parameter
        Identifier: ' head'
        TypeReference
          Identifier: ' TemplateHead'
      Parameter
        Identifier: ' templateSpans'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TemplateLiteralTypeSpan'
      TypeReference
        Identifier: ' TemplateLiteralTypeNode'
    MethodSignature
      Identifier: '

    //
    // Binding Patterns
    //

    createObjectBindingPattern'
      Parameter
        Identifier: 'elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' BindingElement'
      TypeReference
        Identifier: ' ObjectBindingPattern'
    MethodSignature
      Identifier: '
    updateObjectBindingPattern'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ObjectBindingPattern'
      Parameter
        Identifier: ' elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' BindingElement'
      TypeReference
        Identifier: ' ObjectBindingPattern'
    MethodSignature
      Identifier: '
    createArrayBindingPattern'
      Parameter
        Identifier: 'elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ArrayBindingElement'
      TypeReference
        Identifier: ' ArrayBindingPattern'
    MethodSignature
      Identifier: '
    updateArrayBindingPattern'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ArrayBindingPattern'
      Parameter
        Identifier: ' elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ArrayBindingElement'
      TypeReference
        Identifier: ' ArrayBindingPattern'
    MethodSignature
      Identifier: '
    createBindingElement'
      Parameter
        Identifier: 'dotDotDotToken'
        UnionType
          TypeReference
            Identifier: ' DotDotDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' propertyName'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' BindingName'
      Parameter
        Identifier: ' initializer'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BindingElement'
    MethodSignature
      Identifier: '
    updateBindingElement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' BindingElement'
      Parameter
        Identifier: ' dotDotDotToken'
        UnionType
          TypeReference
            Identifier: ' DotDotDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' propertyName'
        UnionType
          TypeReference
            Identifier: ' PropertyName'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' BindingName'
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' BindingElement'
    MethodSignature
      Identifier: '

    //
    // Expression
    //

    createArrayLiteralExpression'
      Parameter
        Identifier: 'elements'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ArrayLiteralExpression'
    MethodSignature
      Identifier: '
    updateArrayLiteralExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ArrayLiteralExpression'
      Parameter
        Identifier: ' elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' ArrayLiteralExpression'
    MethodSignature
      Identifier: '
    createObjectLiteralExpression'
      Parameter
        Identifier: 'properties'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ObjectLiteralElementLike'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ObjectLiteralExpression'
    MethodSignature
      Identifier: '
    updateObjectLiteralExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ObjectLiteralExpression'
      Parameter
        Identifier: ' properties'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ObjectLiteralElementLike'
      TypeReference
        Identifier: ' ObjectLiteralExpression'
    MethodSignature
      Identifier: '
    createPropertyAccessExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' MemberName'
      TypeReference
        Identifier: ' PropertyAccessExpression'
    MethodSignature
      Identifier: '
    updatePropertyAccessExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' PropertyAccessExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' MemberName'
      TypeReference
        Identifier: ' PropertyAccessExpression'
    MethodSignature
      Identifier: '
    createPropertyAccessChain'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' questionDotToken'
        UnionType
          TypeReference
            Identifier: ' QuestionDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' MemberName'
      TypeReference
        Identifier: ' PropertyAccessChain'
    MethodSignature
      Identifier: '
    updatePropertyAccessChain'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' PropertyAccessChain'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' questionDotToken'
        UnionType
          TypeReference
            Identifier: ' QuestionDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' MemberName'
      TypeReference
        Identifier: ' PropertyAccessChain'
    MethodSignature
      Identifier: '
    createElementAccessExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' index'
        UnionType
          NumberKeyword
          TypeReference
            Identifier: ' Expression'
      TypeReference
        Identifier: ' ElementAccessExpression'
    MethodSignature
      Identifier: '
    updateElementAccessExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ElementAccessExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' argumentExpression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ElementAccessExpression'
    MethodSignature
      Identifier: '
    createElementAccessChain'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' questionDotToken'
        UnionType
          TypeReference
            Identifier: ' QuestionDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' index'
        UnionType
          NumberKeyword
          TypeReference
            Identifier: ' Expression'
      TypeReference
        Identifier: ' ElementAccessChain'
    MethodSignature
      Identifier: '
    updateElementAccessChain'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ElementAccessChain'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' questionDotToken'
        UnionType
          TypeReference
            Identifier: ' QuestionDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' argumentExpression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ElementAccessChain'
    MethodSignature
      Identifier: '
    createCallExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' argumentsArray'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    updateCallExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CallExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' argumentsArray'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    createCallChain'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' questionDotToken'
        UnionType
          TypeReference
            Identifier: ' QuestionDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' argumentsArray'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' CallChain'
    MethodSignature
      Identifier: '
    updateCallChain'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CallChain'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' questionDotToken'
        UnionType
          TypeReference
            Identifier: ' QuestionDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' argumentsArray'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CallChain'
    MethodSignature
      Identifier: '
    createNewExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' argumentsArray'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' NewExpression'
    MethodSignature
      Identifier: '
    updateNewExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NewExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' argumentsArray'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' NewExpression'
    MethodSignature
      Identifier: '
    createTaggedTemplateExpression'
      Parameter
        Identifier: 'tag'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' template'
        TypeReference
          Identifier: ' TemplateLiteral'
      TypeReference
        Identifier: ' TaggedTemplateExpression'
    MethodSignature
      Identifier: '
    updateTaggedTemplateExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TaggedTemplateExpression'
      Parameter
        Identifier: ' tag'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' template'
        TypeReference
          Identifier: ' TemplateLiteral'
      TypeReference
        Identifier: ' TaggedTemplateExpression'
    MethodSignature
      Identifier: '
    createTypeAssertion'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' TypeAssertion'
    MethodSignature
      Identifier: '
    updateTypeAssertion'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeAssertion'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' TypeAssertion'
    MethodSignature
      Identifier: '
    createParenthesizedExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ParenthesizedExpression'
    MethodSignature
      Identifier: '
    updateParenthesizedExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ParenthesizedExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ParenthesizedExpression'
    MethodSignature
      Identifier: '
    createFunctionExpression'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' asteriskToken'
        UnionType
          TypeReference
            Identifier: ' AsteriskToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        TypeReference
          Identifier: ' Block'
      TypeReference
        Identifier: ' FunctionExpression'
    MethodSignature
      Identifier: '
    updateFunctionExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' FunctionExpression'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' asteriskToken'
        UnionType
          TypeReference
            Identifier: ' AsteriskToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        TypeReference
          Identifier: ' Block'
      TypeReference
        Identifier: ' FunctionExpression'
    MethodSignature
      Identifier: '
    createArrowFunction'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' equalsGreaterThanToken'
        UnionType
          TypeReference
            Identifier: ' EqualsGreaterThanToken'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        TypeReference
          Identifier: ' ConciseBody'
      TypeReference
        Identifier: ' ArrowFunction'
    MethodSignature
      Identifier: '
    updateArrowFunction'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ArrowFunction'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' equalsGreaterThanToken'
        TypeReference
          Identifier: ' EqualsGreaterThanToken'
      Parameter
        Identifier: ' body'
        TypeReference
          Identifier: ' ConciseBody'
      TypeReference
        Identifier: ' ArrowFunction'
    MethodSignature
      Identifier: '
    createDeleteExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' DeleteExpression'
    MethodSignature
      Identifier: '
    updateDeleteExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' DeleteExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' DeleteExpression'
    MethodSignature
      Identifier: '
    createTypeOfExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' TypeOfExpression'
    MethodSignature
      Identifier: '
    updateTypeOfExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeOfExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' TypeOfExpression'
    MethodSignature
      Identifier: '
    createVoidExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' VoidExpression'
    MethodSignature
      Identifier: '
    updateVoidExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' VoidExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' VoidExpression'
    MethodSignature
      Identifier: '
    createAwaitExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' AwaitExpression'
    MethodSignature
      Identifier: '
    updateAwaitExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' AwaitExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' AwaitExpression'
    MethodSignature
      Identifier: '
    createPrefixUnaryExpression'
      Parameter
        Identifier: 'operator'
        TypeReference
          Identifier: ' PrefixUnaryOperator'
      Parameter
        Identifier: ' operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
    MethodSignature
      Identifier: '
    updatePrefixUnaryExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' PrefixUnaryExpression'
      Parameter
        Identifier: ' operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
    MethodSignature
      Identifier: '
    createPostfixUnaryExpression'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' operator'
        TypeReference
          Identifier: ' PostfixUnaryOperator'
      TypeReference
        Identifier: ' PostfixUnaryExpression'
    MethodSignature
      Identifier: '
    updatePostfixUnaryExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' PostfixUnaryExpression'
      Parameter
        Identifier: ' operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PostfixUnaryExpression'
    MethodSignature
      Identifier: '
    createBinaryExpression'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' operator'
        UnionType
          TypeReference
            Identifier: ' BinaryOperator'
          TypeReference
            Identifier: ' BinaryOperatorToken'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    updateBinaryExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' BinaryExpression'
      Parameter
        Identifier: ' left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' operator'
        UnionType
          TypeReference
            Identifier: ' BinaryOperator'
          TypeReference
            Identifier: ' BinaryOperatorToken'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createConditionalExpression'
      Parameter
        Identifier: 'condition'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' questionToken'
        UnionType
          TypeReference
            Identifier: ' QuestionToken'
          UndefinedKeyword
      Parameter
        Identifier: ' whenTrue'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' colonToken'
        UnionType
          TypeReference
            Identifier: ' ColonToken'
          UndefinedKeyword
      Parameter
        Identifier: ' whenFalse'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ConditionalExpression'
    MethodSignature
      Identifier: '
    updateConditionalExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ConditionalExpression'
      Parameter
        Identifier: ' condition'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' questionToken'
        TypeReference
          Identifier: ' QuestionToken'
      Parameter
        Identifier: ' whenTrue'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' colonToken'
        TypeReference
          Identifier: ' ColonToken'
      Parameter
        Identifier: ' whenFalse'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ConditionalExpression'
    MethodSignature
      Identifier: '
    createTemplateExpression'
      Parameter
        Identifier: 'head'
        TypeReference
          Identifier: ' TemplateHead'
      Parameter
        Identifier: ' templateSpans'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TemplateSpan'
      TypeReference
        Identifier: ' TemplateExpression'
    MethodSignature
      Identifier: '
    updateTemplateExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TemplateExpression'
      Parameter
        Identifier: ' head'
        TypeReference
          Identifier: ' TemplateHead'
      Parameter
        Identifier: ' templateSpans'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TemplateSpan'
      TypeReference
        Identifier: ' TemplateExpression'
    MethodSignature
      Identifier: '
    createTemplateHead'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' rawText'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' templateFlags'
        QuestionToken
        TypeReference
          Identifier: ' TokenFlags'
      TypeReference
        Identifier: ' TemplateHead'
    MethodSignature
      Identifier: '
    createTemplateHead'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' rawText'
        StringKeyword
      Parameter
        Identifier: ' templateFlags'
        QuestionToken
        TypeReference
          Identifier: ' TokenFlags'
      TypeReference
        Identifier: ' TemplateHead'
    MethodSignature
      Identifier: '
    createTemplateMiddle'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' rawText'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' templateFlags'
        QuestionToken
        TypeReference
          Identifier: ' TokenFlags'
      TypeReference
        Identifier: ' TemplateMiddle'
    MethodSignature
      Identifier: '
    createTemplateMiddle'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' rawText'
        StringKeyword
      Parameter
        Identifier: ' templateFlags'
        QuestionToken
        TypeReference
          Identifier: ' TokenFlags'
      TypeReference
        Identifier: ' TemplateMiddle'
    MethodSignature
      Identifier: '
    createTemplateTail'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' rawText'
        QuestionToken
        StringKeyword
      Parameter
        Identifier: ' templateFlags'
        QuestionToken
        TypeReference
          Identifier: ' TokenFlags'
      TypeReference
        Identifier: ' TemplateTail'
    MethodSignature
      Identifier: '
    createTemplateTail'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' rawText'
        StringKeyword
      Parameter
        Identifier: ' templateFlags'
        QuestionToken
        TypeReference
          Identifier: ' TokenFlags'
      TypeReference
        Identifier: ' TemplateTail'
    MethodSignature
      Identifier: '
    createNoSubstitutionTemplateLiteral'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' rawText'
        QuestionToken
        StringKeyword
      TypeReference
        Identifier: ' NoSubstitutionTemplateLiteral'
    MethodSignature
      Identifier: '
    createNoSubstitutionTemplateLiteral'
      Parameter
        Identifier: 'text'
        UnionType
          StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' rawText'
        StringKeyword
      TypeReference
        Identifier: ' NoSubstitutionTemplateLiteral'
    MethodSignature
      Identifier: '
    /** @internal */ createLiteralLikeNode'
      Parameter
        Identifier: 'kind'
        UnionType
          IndexedAccessType
            TypeReference
              Identifier: ' LiteralToken'
            LiteralType
              StringLiteral
          TypeReference
            QualifiedName
              Identifier: ' SyntaxKind'
              Identifier: 'JsxTextAllWhiteSpaces'
      Parameter
        Identifier: ' text'
        StringKeyword
      TypeReference
        Identifier: ' LiteralToken'
    MethodSignature
      Identifier: '
    /** @internal */ createTemplateLiteralLikeNode'
      Parameter
        Identifier: 'kind'
        IndexedAccessType
          TypeReference
            Identifier: ' TemplateLiteralToken'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' text'
        StringKeyword
      Parameter
        Identifier: ' rawText'
        StringKeyword
      Parameter
        Identifier: ' templateFlags'
        UnionType
          TypeReference
            Identifier: ' TokenFlags'
          UndefinedKeyword
      TypeReference
        Identifier: ' TemplateLiteralLikeNode'
    MethodSignature
      Identifier: '
    createYieldExpression'
      Parameter
        Identifier: 'asteriskToken'
        TypeReference
          Identifier: ' AsteriskToken'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' YieldExpression'
    MethodSignature
      Identifier: '
    createYieldExpression'
      Parameter
        Identifier: 'asteriskToken'
        UndefinedKeyword
      Parameter
        Identifier: ' expression'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' YieldExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createYieldExpression'
      Parameter
        Identifier: 'asteriskToken'
        UnionType
          TypeReference
            Identifier: ' AsteriskToken'
          UndefinedKeyword
      Parameter
        Identifier: ' expression'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' YieldExpression'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    updateYieldExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' YieldExpression'
      Parameter
        Identifier: ' asteriskToken'
        UnionType
          TypeReference
            Identifier: ' AsteriskToken'
          UndefinedKeyword
      Parameter
        Identifier: ' expression'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' YieldExpression'
    MethodSignature
      Identifier: '
    createSpreadElement'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' SpreadElement'
    MethodSignature
      Identifier: '
    updateSpreadElement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SpreadElement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' SpreadElement'
    MethodSignature
      Identifier: '
    createClassExpression'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' heritageClauses'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' HeritageClause'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ClassElement'
      TypeReference
        Identifier: ' ClassExpression'
    MethodSignature
      Identifier: '
    updateClassExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ClassExpression'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' heritageClauses'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' HeritageClause'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ClassElement'
      TypeReference
        Identifier: ' ClassExpression'
    MethodSignature
      Identifier: '
    createOmittedExpression'
      TypeReference
        Identifier: ' OmittedExpression'
    MethodSignature
      Identifier: '
    createExpressionWithTypeArguments'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' ExpressionWithTypeArguments'
    MethodSignature
      Identifier: '
    updateExpressionWithTypeArguments'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ExpressionWithTypeArguments'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' ExpressionWithTypeArguments'
    MethodSignature
      Identifier: '
    createAsExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' AsExpression'
    MethodSignature
      Identifier: '
    updateAsExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' AsExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' AsExpression'
    MethodSignature
      Identifier: '
    createNonNullExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' NonNullExpression'
    MethodSignature
      Identifier: '
    updateNonNullExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NonNullExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' NonNullExpression'
    MethodSignature
      Identifier: '
    createNonNullChain'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' NonNullChain'
    MethodSignature
      Identifier: '
    updateNonNullChain'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NonNullChain'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' NonNullChain'
    MethodSignature
      Identifier: '
    createMetaProperty'
      Parameter
        Identifier: 'keywordToken'
        IndexedAccessType
          TypeReference
            Identifier: ' MetaProperty'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' MetaProperty'
    MethodSignature
      Identifier: '
    updateMetaProperty'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' MetaProperty'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' MetaProperty'
    MethodSignature
      Identifier: '
    createSatisfiesExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' SatisfiesExpression'
    MethodSignature
      Identifier: '
    updateSatisfiesExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SatisfiesExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' SatisfiesExpression'
    MethodSignature
      Identifier: '

    //
    // Misc
    //

    createTemplateSpan'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' literal'
        UnionType
          TypeReference
            Identifier: ' TemplateMiddle'
          TypeReference
            Identifier: ' TemplateTail'
      TypeReference
        Identifier: ' TemplateSpan'
    MethodSignature
      Identifier: '
    updateTemplateSpan'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TemplateSpan'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' literal'
        UnionType
          TypeReference
            Identifier: ' TemplateMiddle'
          TypeReference
            Identifier: ' TemplateTail'
      TypeReference
        Identifier: ' TemplateSpan'
    MethodSignature
      Identifier: '
    createSemicolonClassElement'
      TypeReference
        Identifier: ' SemicolonClassElement'
    MethodSignature
      Identifier: '

    //
    // Element
    //

    createBlock'
      Parameter
        Identifier: 'statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Block'
    MethodSignature
      Identifier: '
    updateBlock'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Block'
      Parameter
        Identifier: ' statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' Block'
    MethodSignature
      Identifier: '
    createVariableStatement'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' declarationList'
        UnionType
          TypeReference
            Identifier: ' VariableDeclarationList'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' VariableStatement'
    MethodSignature
      Identifier: '
    updateVariableStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' VariableStatement'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' declarationList'
        TypeReference
          Identifier: ' VariableDeclarationList'
      TypeReference
        Identifier: ' VariableStatement'
    MethodSignature
      Identifier: '
    createEmptyStatement'
      TypeReference
        Identifier: ' EmptyStatement'
    MethodSignature
      Identifier: '
    createExpressionStatement'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ExpressionStatement'
    MethodSignature
      Identifier: '
    updateExpressionStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ExpressionStatement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ExpressionStatement'
    MethodSignature
      Identifier: '
    createIfStatement'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' thenStatement'
        TypeReference
          Identifier: ' Statement'
      Parameter
        Identifier: ' elseStatement'
        QuestionToken
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' IfStatement'
    MethodSignature
      Identifier: '
    updateIfStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' IfStatement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' thenStatement'
        TypeReference
          Identifier: ' Statement'
      Parameter
        Identifier: ' elseStatement'
        UnionType
          TypeReference
            Identifier: ' Statement'
          UndefinedKeyword
      TypeReference
        Identifier: ' IfStatement'
    MethodSignature
      Identifier: '
    createDoStatement'
      Parameter
        Identifier: 'statement'
        TypeReference
          Identifier: ' Statement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' DoStatement'
    MethodSignature
      Identifier: '
    updateDoStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' DoStatement'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' DoStatement'
    MethodSignature
      Identifier: '
    createWhileStatement'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' WhileStatement'
    MethodSignature
      Identifier: '
    updateWhileStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' WhileStatement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' WhileStatement'
    MethodSignature
      Identifier: '
    createForStatement'
      Parameter
        Identifier: 'initializer'
        UnionType
          TypeReference
            Identifier: ' ForInitializer'
          UndefinedKeyword
      Parameter
        Identifier: ' condition'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      Parameter
        Identifier: ' incrementor'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' ForStatement'
    MethodSignature
      Identifier: '
    updateForStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ForStatement'
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' ForInitializer'
          UndefinedKeyword
      Parameter
        Identifier: ' condition'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      Parameter
        Identifier: ' incrementor'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' ForStatement'
    MethodSignature
      Identifier: '
    createForInStatement'
      Parameter
        Identifier: 'initializer'
        TypeReference
          Identifier: ' ForInitializer'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' ForInStatement'
    MethodSignature
      Identifier: '
    updateForInStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ForInStatement'
      Parameter
        Identifier: ' initializer'
        TypeReference
          Identifier: ' ForInitializer'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' ForInStatement'
    MethodSignature
      Identifier: '
    createForOfStatement'
      Parameter
        Identifier: 'awaitModifier'
        UnionType
          TypeReference
            Identifier: ' AwaitKeyword'
          UndefinedKeyword
      Parameter
        Identifier: ' initializer'
        TypeReference
          Identifier: ' ForInitializer'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' ForOfStatement'
    MethodSignature
      Identifier: '
    updateForOfStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ForOfStatement'
      Parameter
        Identifier: ' awaitModifier'
        UnionType
          TypeReference
            Identifier: ' AwaitKeyword'
          UndefinedKeyword
      Parameter
        Identifier: ' initializer'
        TypeReference
          Identifier: ' ForInitializer'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' ForOfStatement'
    MethodSignature
      Identifier: '
    createContinueStatement'
      Parameter
        Identifier: 'label'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      TypeReference
        Identifier: ' ContinueStatement'
    MethodSignature
      Identifier: '
    updateContinueStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ContinueStatement'
      Parameter
        Identifier: ' label'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      TypeReference
        Identifier: ' ContinueStatement'
    MethodSignature
      Identifier: '
    createBreakStatement'
      Parameter
        Identifier: 'label'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      TypeReference
        Identifier: ' BreakStatement'
    MethodSignature
      Identifier: '
    updateBreakStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' BreakStatement'
      Parameter
        Identifier: ' label'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      TypeReference
        Identifier: ' BreakStatement'
    MethodSignature
      Identifier: '
    createReturnStatement'
      Parameter
        Identifier: 'expression'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ReturnStatement'
    MethodSignature
      Identifier: '
    updateReturnStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ReturnStatement'
      Parameter
        Identifier: ' expression'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' ReturnStatement'
    MethodSignature
      Identifier: '
    createWithStatement'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' WithStatement'
    MethodSignature
      Identifier: '
    updateWithStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' WithStatement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' WithStatement'
    MethodSignature
      Identifier: '
    createSwitchStatement'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' caseBlock'
        TypeReference
          Identifier: ' CaseBlock'
      TypeReference
        Identifier: ' SwitchStatement'
    MethodSignature
      Identifier: '
    updateSwitchStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SwitchStatement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' caseBlock'
        TypeReference
          Identifier: ' CaseBlock'
      TypeReference
        Identifier: ' SwitchStatement'
    MethodSignature
      Identifier: '
    createLabeledStatement'
      Parameter
        Identifier: 'label'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' LabeledStatement'
    MethodSignature
      Identifier: '
    updateLabeledStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' LabeledStatement'
      Parameter
        Identifier: ' label'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' statement'
        TypeReference
          Identifier: ' Statement'
      TypeReference
        Identifier: ' LabeledStatement'
    MethodSignature
      Identifier: '
    createThrowStatement'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ThrowStatement'
    MethodSignature
      Identifier: '
    updateThrowStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ThrowStatement'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ThrowStatement'
    MethodSignature
      Identifier: '
    createTryStatement'
      Parameter
        Identifier: 'tryBlock'
        TypeReference
          Identifier: ' Block'
      Parameter
        Identifier: ' catchClause'
        UnionType
          TypeReference
            Identifier: ' CatchClause'
          UndefinedKeyword
      Parameter
        Identifier: ' finallyBlock'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' TryStatement'
    MethodSignature
      Identifier: '
    updateTryStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TryStatement'
      Parameter
        Identifier: ' tryBlock'
        TypeReference
          Identifier: ' Block'
      Parameter
        Identifier: ' catchClause'
        UnionType
          TypeReference
            Identifier: ' CatchClause'
          UndefinedKeyword
      Parameter
        Identifier: ' finallyBlock'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' TryStatement'
    MethodSignature
      Identifier: '
    createDebuggerStatement'
      TypeReference
        Identifier: ' DebuggerStatement'
    MethodSignature
      Identifier: '
    createVariableDeclaration'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' BindingName'
      Parameter
        Identifier: ' exclamationToken'
        QuestionToken
        TypeReference
          Identifier: ' ExclamationToken'
      Parameter
        Identifier: ' type'
        QuestionToken
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' initializer'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' VariableDeclaration'
    MethodSignature
      Identifier: '
    updateVariableDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' VariableDeclaration'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' BindingName'
      Parameter
        Identifier: ' exclamationToken'
        UnionType
          TypeReference
            Identifier: ' ExclamationToken'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' VariableDeclaration'
    MethodSignature
      Identifier: '
    createVariableDeclarationList'
      Parameter
        Identifier: 'declarations'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' VariableDeclaration'
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' NodeFlags'
      TypeReference
        Identifier: ' VariableDeclarationList'
    MethodSignature
      Identifier: '
    updateVariableDeclarationList'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' VariableDeclarationList'
      Parameter
        Identifier: ' declarations'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' VariableDeclarationList'
    MethodSignature
      Identifier: '
    createFunctionDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' asteriskToken'
        UnionType
          TypeReference
            Identifier: ' AsteriskToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' FunctionDeclaration'
    MethodSignature
      Identifier: '
    updateFunctionDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' FunctionDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' asteriskToken'
        UnionType
          TypeReference
            Identifier: ' AsteriskToken'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' Block'
          UndefinedKeyword
      TypeReference
        Identifier: ' FunctionDeclaration'
    MethodSignature
      Identifier: '
    createClassDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' heritageClauses'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' HeritageClause'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ClassElement'
      TypeReference
        Identifier: ' ClassDeclaration'
    MethodSignature
      Identifier: '
    updateClassDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ClassDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' heritageClauses'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' HeritageClause'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ClassElement'
      TypeReference
        Identifier: ' ClassDeclaration'
    MethodSignature
      Identifier: '
    createInterfaceDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' heritageClauses'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' HeritageClause'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeElement'
      TypeReference
        Identifier: ' InterfaceDeclaration'
    MethodSignature
      Identifier: '
    updateInterfaceDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' InterfaceDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' heritageClauses'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' HeritageClause'
          UndefinedKeyword
      Parameter
        Identifier: ' members'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeElement'
      TypeReference
        Identifier: ' InterfaceDeclaration'
    MethodSignature
      Identifier: '
    createTypeAliasDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
    MethodSignature
      Identifier: '
    updateTypeAliasDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TypeAliasDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeParameterDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' TypeAliasDeclaration'
    MethodSignature
      Identifier: '
    createEnumDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      Parameter
        Identifier: ' members'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' EnumMember'
      TypeReference
        Identifier: ' EnumDeclaration'
    MethodSignature
      Identifier: '
    updateEnumDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' EnumDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' members'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' EnumMember'
      TypeReference
        Identifier: ' EnumDeclaration'
    MethodSignature
      Identifier: '
    createModuleDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' ModuleName'
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' ModuleBody'
          UndefinedKeyword
      Parameter
        Identifier: ' flags'
        QuestionToken
        TypeReference
          Identifier: ' NodeFlags'
      TypeReference
        Identifier: ' ModuleDeclaration'
    MethodSignature
      Identifier: '
    updateModuleDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ModuleDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' ModuleName'
      Parameter
        Identifier: ' body'
        UnionType
          TypeReference
            Identifier: ' ModuleBody'
          UndefinedKeyword
      TypeReference
        Identifier: ' ModuleDeclaration'
    MethodSignature
      Identifier: '
    createModuleBlock'
      Parameter
        Identifier: 'statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' ModuleBlock'
    MethodSignature
      Identifier: '
    updateModuleBlock'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ModuleBlock'
      Parameter
        Identifier: ' statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' ModuleBlock'
    MethodSignature
      Identifier: '
    createCaseBlock'
      Parameter
        Identifier: 'clauses'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' CaseOrDefaultClause'
      TypeReference
        Identifier: ' CaseBlock'
    MethodSignature
      Identifier: '
    updateCaseBlock'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CaseBlock'
      Parameter
        Identifier: ' clauses'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' CaseOrDefaultClause'
      TypeReference
        Identifier: ' CaseBlock'
    MethodSignature
      Identifier: '
    createNamespaceExportDeclaration'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      TypeReference
        Identifier: ' NamespaceExportDeclaration'
    MethodSignature
      Identifier: '
    updateNamespaceExportDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NamespaceExportDeclaration'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' NamespaceExportDeclaration'
    MethodSignature
      Identifier: '
    createImportEqualsDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      Parameter
        Identifier: ' moduleReference'
        TypeReference
          Identifier: ' ModuleReference'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
    MethodSignature
      Identifier: '
    updateImportEqualsDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportEqualsDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' moduleReference'
        TypeReference
          Identifier: ' ModuleReference'
      TypeReference
        Identifier: ' ImportEqualsDeclaration'
    MethodSignature
      Identifier: '
    createImportDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' importClause'
        UnionType
          TypeReference
            Identifier: ' ImportClause'
          UndefinedKeyword
      Parameter
        Identifier: ' moduleSpecifier'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' attributes'
        QuestionToken
        TypeReference
          Identifier: ' ImportAttributes'
      TypeReference
        Identifier: ' ImportDeclaration'
    MethodSignature
      Identifier: '
    updateImportDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' importClause'
        UnionType
          TypeReference
            Identifier: ' ImportClause'
          UndefinedKeyword
      Parameter
        Identifier: ' moduleSpecifier'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' attributes'
        UnionType
          TypeReference
            Identifier: ' ImportAttributes'
          UndefinedKeyword
      TypeReference
        Identifier: ' ImportDeclaration'
    MethodSignature
      Identifier: '
    createImportClause'
      Parameter
        Identifier: 'isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' namedBindings'
        UnionType
          TypeReference
            Identifier: ' NamedImportBindings'
          UndefinedKeyword
      TypeReference
        Identifier: ' ImportClause'
    MethodSignature
      Identifier: '
    updateImportClause'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportClause'
      Parameter
        Identifier: ' isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' namedBindings'
        UnionType
          TypeReference
            Identifier: ' NamedImportBindings'
          UndefinedKeyword
      TypeReference
        Identifier: ' ImportClause'
    MethodSignature
      Identifier: '
    /** @deprecated */ createAssertClause'
      Parameter
        Identifier: 'elements'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'AssertEntry'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' AssertClause'
    MethodSignature
      Identifier: '
    /** @deprecated */ updateAssertClause'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' AssertClause'
      Parameter
        Identifier: ' elements'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'AssertEntry'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' AssertClause'
    MethodSignature
      Identifier: '
    /** @deprecated */ createAssertEntry'
      Parameter
        Identifier: 'name'
        TypeReference
          Identifier: ' AssertionKey'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' AssertEntry'
    MethodSignature
      Identifier: '
    /** @deprecated */ updateAssertEntry'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' AssertEntry'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' AssertionKey'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' AssertEntry'
    MethodSignature
      Identifier: '
    /** @deprecated */ createImportTypeAssertionContainer'
      Parameter
        Identifier: 'clause'
        TypeReference
          Identifier: ' AssertClause'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ImportTypeAssertionContainer'
    MethodSignature
      Identifier: '
    /** @deprecated */ updateImportTypeAssertionContainer'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportTypeAssertionContainer'
      Parameter
        Identifier: ' clause'
        TypeReference
          Identifier: ' AssertClause'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ImportTypeAssertionContainer'
    MethodSignature
      Identifier: '
    createImportAttributes'
      Parameter
        Identifier: 'elements'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ImportAttribute'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ImportAttributes'
    MethodSignature
      Identifier: '
    /** @internal */ createImportAttributes'
      Parameter
        Identifier: 'elements'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ImportAttribute'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' token'
        QuestionToken
        IndexedAccessType
          TypeReference
            Identifier: ' ImportAttributes'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' ImportAttributes'
    MethodSignature
      Identifier: ' // eslint-disable-line @typescript-eslint/unified-signatures
    updateImportAttributes'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportAttributes'
      Parameter
        Identifier: ' elements'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'ImportAttribute'
      Parameter
        Identifier: ' multiLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ImportAttributes'
    MethodSignature
      Identifier: '
    createImportAttribute'
      Parameter
        Identifier: 'name'
        TypeReference
          Identifier: ' ImportAttributeName'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ImportAttribute'
    MethodSignature
      Identifier: '
    updateImportAttribute'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportAttribute'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' ImportAttributeName'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ImportAttribute'
    MethodSignature
      Identifier: '
    createNamespaceImport'
      Parameter
        Identifier: 'name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' NamespaceImport'
    MethodSignature
      Identifier: '
    updateNamespaceImport'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NamespaceImport'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' NamespaceImport'
    MethodSignature
      Identifier: '
    createNamespaceExport'
      Parameter
        Identifier: 'name'
        TypeReference
          Identifier: ' ModuleExportName'
      TypeReference
        Identifier: ' NamespaceExport'
    MethodSignature
      Identifier: '
    updateNamespaceExport'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NamespaceExport'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' ModuleExportName'
      TypeReference
        Identifier: ' NamespaceExport'
    MethodSignature
      Identifier: '
    createNamedImports'
      Parameter
        Identifier: 'elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ImportSpecifier'
      TypeReference
        Identifier: ' NamedImports'
    MethodSignature
      Identifier: '
    updateNamedImports'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NamedImports'
      Parameter
        Identifier: ' elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ImportSpecifier'
      TypeReference
        Identifier: ' NamedImports'
    MethodSignature
      Identifier: '
    createImportSpecifier'
      Parameter
        Identifier: 'isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' propertyName'
        UnionType
          TypeReference
            Identifier: ' ModuleExportName'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' ImportSpecifier'
    MethodSignature
      Identifier: '
    updateImportSpecifier'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ImportSpecifier'
      Parameter
        Identifier: ' isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' propertyName'
        UnionType
          TypeReference
            Identifier: ' ModuleExportName'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' ImportSpecifier'
    MethodSignature
      Identifier: '
    createExportAssignment'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' isExportEquals'
        UnionType
          BooleanKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ExportAssignment'
    MethodSignature
      Identifier: '
    updateExportAssignment'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ExportAssignment'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ExportAssignment'
    MethodSignature
      Identifier: '
    createExportDeclaration'
      Parameter
        Identifier: 'modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' exportClause'
        UnionType
          TypeReference
            Identifier: ' NamedExportBindings'
          UndefinedKeyword
      Parameter
        Identifier: ' moduleSpecifier'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' attributes'
        QuestionToken
        TypeReference
          Identifier: ' ImportAttributes'
      TypeReference
        Identifier: ' ExportDeclaration'
    MethodSignature
      Identifier: '
    updateExportDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ExportDeclaration'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      Parameter
        Identifier: ' isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' exportClause'
        UnionType
          TypeReference
            Identifier: ' NamedExportBindings'
          UndefinedKeyword
      Parameter
        Identifier: ' moduleSpecifier'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      Parameter
        Identifier: ' attributes'
        UnionType
          TypeReference
            Identifier: ' ImportAttributes'
          UndefinedKeyword
      TypeReference
        Identifier: ' ExportDeclaration'
    MethodSignature
      Identifier: '
    createNamedExports'
      Parameter
        Identifier: 'elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ExportSpecifier'
      TypeReference
        Identifier: ' NamedExports'
    MethodSignature
      Identifier: '
    updateNamedExports'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' NamedExports'
      Parameter
        Identifier: ' elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ExportSpecifier'
      TypeReference
        Identifier: ' NamedExports'
    MethodSignature
      Identifier: '
    createExportSpecifier'
      Parameter
        Identifier: 'isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' propertyName'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' ModuleExportName'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' ModuleExportName'
      TypeReference
        Identifier: ' ExportSpecifier'
    MethodSignature
      Identifier: '
    updateExportSpecifier'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ExportSpecifier'
      Parameter
        Identifier: ' isTypeOnly'
        BooleanKeyword
      Parameter
        Identifier: ' propertyName'
        UnionType
          TypeReference
            Identifier: ' ModuleExportName'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' ModuleExportName'
      TypeReference
        Identifier: ' ExportSpecifier'
    MethodSignature
      Identifier: '
    /** @internal */ createMissingDeclaration'
      TypeReference
        Identifier: ' MissingDeclaration'
    MethodSignature
      Identifier: '

    //
    // Module references
    //

    createExternalModuleReference'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ExternalModuleReference'
    MethodSignature
      Identifier: '
    updateExternalModuleReference'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ExternalModuleReference'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ExternalModuleReference'
    MethodSignature
      Identifier: '

    //
    // JSDoc
    //

    createJSDocAllType'
      TypeReference
        Identifier: ' JSDocAllType'
    MethodSignature
      Identifier: '
    createJSDocUnknownType'
      TypeReference
        Identifier: ' JSDocUnknownType'
    MethodSignature
      Identifier: '
    createJSDocNonNullableType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' postfix'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' JSDocNonNullableType'
    MethodSignature
      Identifier: '
    updateJSDocNonNullableType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocNonNullableType'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocNonNullableType'
    MethodSignature
      Identifier: '
    createJSDocNullableType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      Parameter
        Identifier: ' postfix'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' JSDocNullableType'
    MethodSignature
      Identifier: '
    updateJSDocNullableType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocNullableType'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocNullableType'
    MethodSignature
      Identifier: '
    createJSDocOptionalType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocOptionalType'
    MethodSignature
      Identifier: '
    updateJSDocOptionalType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocOptionalType'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocOptionalType'
    MethodSignature
      Identifier: '
    createJSDocFunctionType'
      Parameter
        Identifier: 'parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocFunctionType'
    MethodSignature
      Identifier: '
    updateJSDocFunctionType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocFunctionType'
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' TypeNode'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocFunctionType'
    MethodSignature
      Identifier: '
    createJSDocVariadicType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocVariadicType'
    MethodSignature
      Identifier: '
    updateJSDocVariadicType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocVariadicType'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocVariadicType'
    MethodSignature
      Identifier: '
    createJSDocNamepathType'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocNamepathType'
    MethodSignature
      Identifier: '
    updateJSDocNamepathType'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocNamepathType'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocNamepathType'
    MethodSignature
      Identifier: '
    createJSDocTypeExpression'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocTypeExpression'
    MethodSignature
      Identifier: '
    updateJSDocTypeExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' type'
        TypeReference
          Identifier: ' TypeNode'
      TypeReference
        Identifier: ' JSDocTypeExpression'
    MethodSignature
      Identifier: '
    createJSDocNameReference'
      Parameter
        Identifier: 'name'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
      TypeReference
        Identifier: ' JSDocNameReference'
    MethodSignature
      Identifier: '
    updateJSDocNameReference'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocNameReference'
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
      TypeReference
        Identifier: ' JSDocNameReference'
    MethodSignature
      Identifier: '
    createJSDocMemberName'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' JSDocMemberName'
    MethodSignature
      Identifier: '
    updateJSDocMemberName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocMemberName'
      Parameter
        Identifier: ' left'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' JSDocMemberName'
    MethodSignature
      Identifier: '
    createJSDocLink'
      Parameter
        Identifier: 'name'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
          UndefinedKeyword
      Parameter
        Identifier: ' text'
        StringKeyword
      TypeReference
        Identifier: ' JSDocLink'
    MethodSignature
      Identifier: '
    updateJSDocLink'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocLink'
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
          UndefinedKeyword
      Parameter
        Identifier: ' text'
        StringKeyword
      TypeReference
        Identifier: ' JSDocLink'
    MethodSignature
      Identifier: '
    createJSDocLinkCode'
      Parameter
        Identifier: 'name'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
          UndefinedKeyword
      Parameter
        Identifier: ' text'
        StringKeyword
      TypeReference
        Identifier: ' JSDocLinkCode'
    MethodSignature
      Identifier: '
    updateJSDocLinkCode'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocLinkCode'
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
          UndefinedKeyword
      Parameter
        Identifier: ' text'
        StringKeyword
      TypeReference
        Identifier: ' JSDocLinkCode'
    MethodSignature
      Identifier: '
    createJSDocLinkPlain'
      Parameter
        Identifier: 'name'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
          UndefinedKeyword
      Parameter
        Identifier: ' text'
        StringKeyword
      TypeReference
        Identifier: ' JSDocLinkPlain'
    MethodSignature
      Identifier: '
    updateJSDocLinkPlain'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocLinkPlain'
      Parameter
        Identifier: ' name'
        UnionType
          TypeReference
            Identifier: ' EntityName'
          TypeReference
            Identifier: ' JSDocMemberName'
          UndefinedKeyword
      Parameter
        Identifier: ' text'
        StringKeyword
      TypeReference
        Identifier: ' JSDocLinkPlain'
    MethodSignature
      Identifier: '
    createJSDocTypeLiteral'
      Parameter
        Identifier: 'jsDocPropertyTags'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JSDocPropertyLikeTag'
      Parameter
        Identifier: ' isArrayType'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' JSDocTypeLiteral'
    MethodSignature
      Identifier: '
    updateJSDocTypeLiteral'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocTypeLiteral'
      Parameter
        Identifier: ' jsDocPropertyTags'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' JSDocPropertyLikeTag'
          UndefinedKeyword
      Parameter
        Identifier: ' isArrayType'
        UnionType
          BooleanKeyword
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocTypeLiteral'
    MethodSignature
      Identifier: '
    createJSDocSignature'
      Parameter
        Identifier: 'typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' JSDocTemplateTag'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JSDocParameterTag'
      Parameter
        Identifier: ' type'
        QuestionToken
        TypeReference
          Identifier: ' JSDocReturnTag'
      TypeReference
        Identifier: ' JSDocSignature'
    MethodSignature
      Identifier: '
    updateJSDocSignature'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocSignature'
      Parameter
        Identifier: ' typeParameters'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' JSDocTemplateTag'
          UndefinedKeyword
      Parameter
        Identifier: ' parameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JSDocParameterTag'
      Parameter
        Identifier: ' type'
        UnionType
          TypeReference
            Identifier: ' JSDocReturnTag'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocSignature'
    MethodSignature
      Identifier: '
    createJSDocTemplateTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' constraint'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeParameterDeclaration'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocTemplateTag'
    MethodSignature
      Identifier: '
    updateJSDocTemplateTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocTemplateTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' constraint'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          UndefinedKeyword
      Parameter
        Identifier: ' typeParameters'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' TypeParameterDeclaration'
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocTemplateTag'
    MethodSignature
      Identifier: '
    createJSDocTypedefTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          TypeReference
            Identifier: ' JSDocTypeLiteral'
      Parameter
        Identifier: ' fullName'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' Identifier'
          TypeReference
            Identifier: ' JSDocNamespaceDeclaration'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocTypedefTag'
    MethodSignature
      Identifier: '
    updateJSDocTypedefTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocTypedefTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          TypeReference
            Identifier: ' JSDocTypeLiteral'
          UndefinedKeyword
      Parameter
        Identifier: ' fullName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          TypeReference
            Identifier: ' JSDocNamespaceDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocTypedefTag'
    MethodSignature
      Identifier: '
    createJSDocParameterTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' isBracketed'
        BooleanKeyword
      Parameter
        Identifier: ' typeExpression'
        QuestionToken
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' isNameFirst'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocParameterTag'
    MethodSignature
      Identifier: '
    updateJSDocParameterTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocParameterTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' isBracketed'
        BooleanKeyword
      Parameter
        Identifier: ' typeExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          UndefinedKeyword
      Parameter
        Identifier: ' isNameFirst'
        BooleanKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocParameterTag'
    MethodSignature
      Identifier: '
    createJSDocPropertyTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' isBracketed'
        BooleanKeyword
      Parameter
        Identifier: ' typeExpression'
        QuestionToken
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' isNameFirst'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocPropertyTag'
    MethodSignature
      Identifier: '
    updateJSDocPropertyTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocPropertyTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' EntityName'
      Parameter
        Identifier: ' isBracketed'
        BooleanKeyword
      Parameter
        Identifier: ' typeExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          UndefinedKeyword
      Parameter
        Identifier: ' isNameFirst'
        BooleanKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocPropertyTag'
    MethodSignature
      Identifier: '
    createJSDocTypeTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocTypeTag'
    MethodSignature
      Identifier: '
    updateJSDocTypeTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocTypeTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocTypeTag'
    MethodSignature
      Identifier: '
    createJSDocSeeTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' nameExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocNameReference'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocSeeTag'
    MethodSignature
      Identifier: '
    updateJSDocSeeTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocSeeTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' nameExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocNameReference'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocSeeTag'
    MethodSignature
      Identifier: '
    createJSDocReturnTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        QuestionToken
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocReturnTag'
    MethodSignature
      Identifier: '
    updateJSDocReturnTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocReturnTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocReturnTag'
    MethodSignature
      Identifier: '
    createJSDocThisTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocThisTag'
    MethodSignature
      Identifier: '
    updateJSDocThisTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocThisTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocThisTag'
    MethodSignature
      Identifier: '
    createJSDocEnumTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocEnumTag'
    MethodSignature
      Identifier: '
    updateJSDocEnumTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocEnumTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocEnumTag'
    MethodSignature
      Identifier: '
    createJSDocCallbackTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocSignature'
      Parameter
        Identifier: ' fullName'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' Identifier'
          TypeReference
            Identifier: ' JSDocNamespaceDeclaration'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocCallbackTag'
    MethodSignature
      Identifier: '
    updateJSDocCallbackTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocCallbackTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocSignature'
      Parameter
        Identifier: ' fullName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          TypeReference
            Identifier: ' JSDocNamespaceDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocCallbackTag'
    MethodSignature
      Identifier: '
    createJSDocOverloadTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocSignature'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocOverloadTag'
    MethodSignature
      Identifier: '
    updateJSDocOverloadTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocOverloadTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocSignature'
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocOverloadTag'
    MethodSignature
      Identifier: '
    createJSDocAugmentsTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' className'
        IndexedAccessType
          TypeReference
            Identifier: ' JSDocAugmentsTag'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocAugmentsTag'
    MethodSignature
      Identifier: '
    updateJSDocAugmentsTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocAugmentsTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' className'
        IndexedAccessType
          TypeReference
            Identifier: ' JSDocAugmentsTag'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocAugmentsTag'
    MethodSignature
      Identifier: '
    createJSDocImplementsTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' className'
        IndexedAccessType
          TypeReference
            Identifier: ' JSDocImplementsTag'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocImplementsTag'
    MethodSignature
      Identifier: '
    updateJSDocImplementsTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocImplementsTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' className'
        IndexedAccessType
          TypeReference
            Identifier: ' JSDocImplementsTag'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocImplementsTag'
    MethodSignature
      Identifier: '
    createJSDocAuthorTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocAuthorTag'
    MethodSignature
      Identifier: '
    updateJSDocAuthorTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocAuthorTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocAuthorTag'
    MethodSignature
      Identifier: '
    createJSDocClassTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocClassTag'
    MethodSignature
      Identifier: '
    updateJSDocClassTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocClassTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocClassTag'
    MethodSignature
      Identifier: '
    createJSDocPublicTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocPublicTag'
    MethodSignature
      Identifier: '
    updateJSDocPublicTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocPublicTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocPublicTag'
    MethodSignature
      Identifier: '
    createJSDocPrivateTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocPrivateTag'
    MethodSignature
      Identifier: '
    updateJSDocPrivateTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocPrivateTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocPrivateTag'
    MethodSignature
      Identifier: '
    createJSDocProtectedTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocProtectedTag'
    MethodSignature
      Identifier: '
    updateJSDocProtectedTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocProtectedTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocProtectedTag'
    MethodSignature
      Identifier: '
    createJSDocReadonlyTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocReadonlyTag'
    MethodSignature
      Identifier: '
    updateJSDocReadonlyTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocReadonlyTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocReadonlyTag'
    MethodSignature
      Identifier: '
    createJSDocUnknownTag'
      Parameter
        Identifier: 'tagName'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocUnknownTag'
    MethodSignature
      Identifier: '
    updateJSDocUnknownTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocUnknownTag'
      Parameter
        Identifier: ' tagName'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocUnknownTag'
    MethodSignature
      Identifier: '
    createJSDocDeprecatedTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocDeprecatedTag'
    MethodSignature
      Identifier: '
    updateJSDocDeprecatedTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocDeprecatedTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocDeprecatedTag'
    MethodSignature
      Identifier: '
    createJSDocOverrideTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocOverrideTag'
    MethodSignature
      Identifier: '
    updateJSDocOverrideTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocOverrideTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocOverrideTag'
    MethodSignature
      Identifier: '
    createJSDocThrowsTag'
      Parameter
        Identifier: 'tagName'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' typeExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocThrowsTag'
    MethodSignature
      Identifier: '
    updateJSDocThrowsTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocThrowsTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        UnionType
          TypeReference
            Identifier: ' JSDocTypeExpression'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocThrowsTag'
    MethodSignature
      Identifier: '
    createJSDocSatisfiesTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocSatisfiesTag'
    MethodSignature
      Identifier: '
    updateJSDocSatisfiesTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocSatisfiesTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' typeExpression'
        TypeReference
          Identifier: ' JSDocTypeExpression'
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocSatisfiesTag'
    MethodSignature
      Identifier: '
    createJSDocImportTag'
      Parameter
        Identifier: 'tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' importClause'
        UnionType
          TypeReference
            Identifier: ' ImportClause'
          UndefinedKeyword
      Parameter
        Identifier: ' moduleSpecifier'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' attributes'
        QuestionToken
        TypeReference
          Identifier: ' ImportAttributes'
      Parameter
        Identifier: ' comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
      TypeReference
        Identifier: ' JSDocImportTag'
    MethodSignature
      Identifier: '
    updateJSDocImportTag'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocImportTag'
      Parameter
        Identifier: ' tagName'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' importClause'
        UnionType
          TypeReference
            Identifier: ' ImportClause'
          UndefinedKeyword
      Parameter
        Identifier: ' moduleSpecifier'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' attributes'
        UnionType
          TypeReference
            Identifier: ' ImportAttributes'
          UndefinedKeyword
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDocImportTag'
    MethodSignature
      Identifier: '
    createJSDocText'
      Parameter
        Identifier: 'text'
        StringKeyword
      TypeReference
        Identifier: ' JSDocText'
    MethodSignature
      Identifier: '
    updateJSDocText'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDocText'
      Parameter
        Identifier: ' text'
        StringKeyword
      TypeReference
        Identifier: ' JSDocText'
    MethodSignature
      Identifier: '
    createJSDocComment'
      Parameter
        Identifier: 'comment'
        QuestionToken
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      Parameter
        Identifier: ' tags'
        QuestionToken
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' JSDocTag'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDoc'
    MethodSignature
      Identifier: '
    updateJSDocComment'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JSDoc'
      Parameter
        Identifier: ' comment'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'JSDocComment'
          UndefinedKeyword
      Parameter
        Identifier: ' tags'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' JSDocTag'
          UndefinedKeyword
      TypeReference
        Identifier: ' JSDoc'
    MethodSignature
      Identifier: '

    //
    // JSX
    //

    createJsxElement'
      Parameter
        Identifier: 'openingElement'
        TypeReference
          Identifier: ' JsxOpeningElement'
      Parameter
        Identifier: ' children'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JsxChild'
      Parameter
        Identifier: ' closingElement'
        TypeReference
          Identifier: ' JsxClosingElement'
      TypeReference
        Identifier: ' JsxElement'
    MethodSignature
      Identifier: '
    updateJsxElement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxElement'
      Parameter
        Identifier: ' openingElement'
        TypeReference
          Identifier: ' JsxOpeningElement'
      Parameter
        Identifier: ' children'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JsxChild'
      Parameter
        Identifier: ' closingElement'
        TypeReference
          Identifier: ' JsxClosingElement'
      TypeReference
        Identifier: ' JsxElement'
    MethodSignature
      Identifier: '
    createJsxSelfClosingElement'
      Parameter
        Identifier: 'tagName'
        TypeReference
          Identifier: ' JsxTagNameExpression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' attributes'
        TypeReference
          Identifier: ' JsxAttributes'
      TypeReference
        Identifier: ' JsxSelfClosingElement'
    MethodSignature
      Identifier: '
    updateJsxSelfClosingElement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxSelfClosingElement'
      Parameter
        Identifier: ' tagName'
        TypeReference
          Identifier: ' JsxTagNameExpression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' attributes'
        TypeReference
          Identifier: ' JsxAttributes'
      TypeReference
        Identifier: ' JsxSelfClosingElement'
    MethodSignature
      Identifier: '
    createJsxOpeningElement'
      Parameter
        Identifier: 'tagName'
        TypeReference
          Identifier: ' JsxTagNameExpression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' attributes'
        TypeReference
          Identifier: ' JsxAttributes'
      TypeReference
        Identifier: ' JsxOpeningElement'
    MethodSignature
      Identifier: '
    updateJsxOpeningElement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxOpeningElement'
      Parameter
        Identifier: ' tagName'
        TypeReference
          Identifier: ' JsxTagNameExpression'
      Parameter
        Identifier: ' typeArguments'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' TypeNode'
          UndefinedKeyword
      Parameter
        Identifier: ' attributes'
        TypeReference
          Identifier: ' JsxAttributes'
      TypeReference
        Identifier: ' JsxOpeningElement'
    MethodSignature
      Identifier: '
    createJsxClosingElement'
      Parameter
        Identifier: 'tagName'
        TypeReference
          Identifier: ' JsxTagNameExpression'
      TypeReference
        Identifier: ' JsxClosingElement'
    MethodSignature
      Identifier: '
    updateJsxClosingElement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxClosingElement'
      Parameter
        Identifier: ' tagName'
        TypeReference
          Identifier: ' JsxTagNameExpression'
      TypeReference
        Identifier: ' JsxClosingElement'
    MethodSignature
      Identifier: '
    createJsxFragment'
      Parameter
        Identifier: 'openingFragment'
        TypeReference
          Identifier: ' JsxOpeningFragment'
      Parameter
        Identifier: ' children'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JsxChild'
      Parameter
        Identifier: ' closingFragment'
        TypeReference
          Identifier: ' JsxClosingFragment'
      TypeReference
        Identifier: ' JsxFragment'
    MethodSignature
      Identifier: '
    createJsxText'
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' containsOnlyTriviaWhiteSpaces'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' JsxText'
    MethodSignature
      Identifier: '
    updateJsxText'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxText'
      Parameter
        Identifier: ' text'
        StringKeyword
      Parameter
        Identifier: ' containsOnlyTriviaWhiteSpaces'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' JsxText'
    MethodSignature
      Identifier: '
    createJsxOpeningFragment'
      TypeReference
        Identifier: ' JsxOpeningFragment'
    MethodSignature
      Identifier: '
    createJsxJsxClosingFragment'
      TypeReference
        Identifier: ' JsxClosingFragment'
    MethodSignature
      Identifier: '
    updateJsxFragment'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxFragment'
      Parameter
        Identifier: ' openingFragment'
        TypeReference
          Identifier: ' JsxOpeningFragment'
      Parameter
        Identifier: ' children'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JsxChild'
      Parameter
        Identifier: ' closingFragment'
        TypeReference
          Identifier: ' JsxClosingFragment'
      TypeReference
        Identifier: ' JsxFragment'
    MethodSignature
      Identifier: '
    createJsxAttribute'
      Parameter
        Identifier: 'name'
        TypeReference
          Identifier: ' JsxAttributeName'
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' JsxAttributeValue'
          UndefinedKeyword
      TypeReference
        Identifier: ' JsxAttribute'
    MethodSignature
      Identifier: '
    updateJsxAttribute'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxAttribute'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' JsxAttributeName'
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' JsxAttributeValue'
          UndefinedKeyword
      TypeReference
        Identifier: ' JsxAttribute'
    MethodSignature
      Identifier: '
    createJsxAttributes'
      Parameter
        Identifier: 'properties'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JsxAttributeLike'
      TypeReference
        Identifier: ' JsxAttributes'
    MethodSignature
      Identifier: '
    updateJsxAttributes'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxAttributes'
      Parameter
        Identifier: ' properties'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' JsxAttributeLike'
      TypeReference
        Identifier: ' JsxAttributes'
    MethodSignature
      Identifier: '
    createJsxSpreadAttribute'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' JsxSpreadAttribute'
    MethodSignature
      Identifier: '
    updateJsxSpreadAttribute'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxSpreadAttribute'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' JsxSpreadAttribute'
    MethodSignature
      Identifier: '
    createJsxExpression'
      Parameter
        Identifier: 'dotDotDotToken'
        UnionType
          TypeReference
            Identifier: ' DotDotDotToken'
          UndefinedKeyword
      Parameter
        Identifier: ' expression'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' JsxExpression'
    MethodSignature
      Identifier: '
    updateJsxExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxExpression'
      Parameter
        Identifier: ' expression'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' JsxExpression'
    MethodSignature
      Identifier: '
    createJsxNamespacedName'
      Parameter
        Identifier: 'namespace'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' JsxNamespacedName'
    MethodSignature
      Identifier: '
    updateJsxNamespacedName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' JsxNamespacedName'
      Parameter
        Identifier: ' namespace'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' JsxNamespacedName'
    MethodSignature
      Identifier: '

    //
    // Clauses
    //

    createCaseClause'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' CaseClause'
    MethodSignature
      Identifier: '
    updateCaseClause'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CaseClause'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' CaseClause'
    MethodSignature
      Identifier: '
    createDefaultClause'
      Parameter
        Identifier: 'statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' DefaultClause'
    MethodSignature
      Identifier: '
    updateDefaultClause'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' DefaultClause'
      Parameter
        Identifier: ' statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' DefaultClause'
    MethodSignature
      Identifier: '
    createHeritageClause'
      Parameter
        Identifier: 'token'
        IndexedAccessType
          TypeReference
            Identifier: ' HeritageClause'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' types'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ExpressionWithTypeArguments'
      TypeReference
        Identifier: ' HeritageClause'
    MethodSignature
      Identifier: '
    updateHeritageClause'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' HeritageClause'
      Parameter
        Identifier: ' types'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ExpressionWithTypeArguments'
      TypeReference
        Identifier: ' HeritageClause'
    MethodSignature
      Identifier: '
    createCatchClause'
      Parameter
        Identifier: 'variableDeclaration'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' BindingName'
          TypeReference
            Identifier: ' VariableDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' block'
        TypeReference
          Identifier: ' Block'
      TypeReference
        Identifier: ' CatchClause'
    MethodSignature
      Identifier: '
    updateCatchClause'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CatchClause'
      Parameter
        Identifier: ' variableDeclaration'
        UnionType
          TypeReference
            Identifier: ' VariableDeclaration'
          UndefinedKeyword
      Parameter
        Identifier: ' block'
        TypeReference
          Identifier: ' Block'
      TypeReference
        Identifier: ' CatchClause'
    MethodSignature
      Identifier: '

    //
    // Property assignments
    //

    createPropertyAssignment'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
      Parameter
        Identifier: ' initializer'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PropertyAssignment'
    MethodSignature
      Identifier: '
    updatePropertyAssignment'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' PropertyAssignment'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' PropertyName'
      Parameter
        Identifier: ' initializer'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PropertyAssignment'
    MethodSignature
      Identifier: '
    createShorthandPropertyAssignment'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      Parameter
        Identifier: ' objectAssignmentInitializer'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
    MethodSignature
      Identifier: '
    updateShorthandPropertyAssignment'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' ShorthandPropertyAssignment'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' objectAssignmentInitializer'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' ShorthandPropertyAssignment'
    MethodSignature
      Identifier: '
    createSpreadAssignment'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' SpreadAssignment'
    MethodSignature
      Identifier: '
    updateSpreadAssignment'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SpreadAssignment'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' SpreadAssignment'
    MethodSignature
      Identifier: '

    //
    // Enum
    //

    createEnumMember'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' PropertyName'
      Parameter
        Identifier: ' initializer'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' EnumMember'
    MethodSignature
      Identifier: '
    updateEnumMember'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' EnumMember'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' PropertyName'
      Parameter
        Identifier: ' initializer'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      TypeReference
        Identifier: ' EnumMember'
    MethodSignature
      Identifier: '

    //
    // Top-level nodes
    //

    createSourceFile'
      Parameter
        Identifier: 'statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' endOfFileToken'
        TypeReference
          Identifier: ' EndOfFileToken'
      Parameter
        Identifier: ' flags'
        TypeReference
          Identifier: ' NodeFlags'
      TypeReference
        Identifier: ' SourceFile'
    MethodSignature
      Identifier: '
    updateSourceFile'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' isDeclarationFile'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' referencedFiles'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' FileReference'
      Parameter
        Identifier: ' typeReferences'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' FileReference'
      Parameter
        Identifier: ' hasNoDefaultLib'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' libReferences'
        QuestionToken
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' FileReference'
      TypeReference
        Identifier: ' SourceFile'
    MethodSignature
      Identifier: '

    /** @internal */ createRedirectedSourceFile'
      Parameter
        Identifier: 'redirectInfo'
        TypeReference
          Identifier: ' RedirectInfo'
      TypeReference
        Identifier: ' SourceFile'
    MethodSignature
      Identifier: '

    //
    // Synthetic Nodes
    //
    /** @internal */ createSyntheticExpression'
      Parameter
        Identifier: 'type'
        TypeReference
          Identifier: ' Type'
      Parameter
        Identifier: ' isSpread'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' tupleNameSource'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' ParameterDeclaration'
          TypeReference
            Identifier: ' NamedTupleMember'
      TypeReference
        Identifier: ' SyntheticExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createSyntaxList'
      Parameter
        Identifier: 'children'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Node'
      TypeReference
        Identifier: ' SyntaxList'
    MethodSignature
      Identifier: '

    //
    // Transformation nodes
    //

    createNotEmittedStatement'
      Parameter
        Identifier: 'original'
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' NotEmittedStatement'
    MethodSignature
      Identifier: '
    createNotEmittedTypeElement'
      TypeReference
        Identifier: ' NotEmittedTypeElement'
    MethodSignature
      Identifier: '
    createPartiallyEmittedExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' original'
        QuestionToken
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' PartiallyEmittedExpression'
    MethodSignature
      Identifier: '
    updatePartiallyEmittedExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' PartiallyEmittedExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PartiallyEmittedExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createSyntheticReferenceExpression'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' SyntheticReferenceExpression'
    MethodSignature
      Identifier: '
    /** @internal */ updateSyntheticReferenceExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' SyntheticReferenceExpression'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' SyntheticReferenceExpression'
    MethodSignature
      Identifier: '
    createCommaListExpression'
      Parameter
        Identifier: 'elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CommaListExpression'
    MethodSignature
      Identifier: '
    updateCommaListExpression'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' CommaListExpression'
      Parameter
        Identifier: ' elements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CommaListExpression'
    MethodSignature
      Identifier: '
    createBundle'
      Parameter
        Identifier: 'sourceFiles'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' SourceFile'
      TypeReference
        Identifier: ' Bundle'
    MethodSignature
      Identifier: '
    updateBundle'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Bundle'
      Parameter
        Identifier: ' sourceFiles'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' SourceFile'
      TypeReference
        Identifier: ' Bundle'
    MethodSignature
      Identifier: '

    //
    // Common operators
    //

    createComma'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createAssignment'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            Identifier: ' ObjectLiteralExpression'
          TypeReference
            Identifier: ' ArrayLiteralExpression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' DestructuringAssignment'
    MethodSignature
      Identifier: '
    createAssignment'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' AssignmentExpression'
        TypeReference
          Identifier: 'EqualsToken'
    MethodSignature
      Identifier: '
    createLogicalOr'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createLogicalAnd'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createBitwiseOr'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createBitwiseXor'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createBitwiseAnd'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createStrictEquality'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createStrictInequality'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createEquality'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createInequality'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createLessThan'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createLessThanEquals'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createGreaterThan'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createGreaterThanEquals'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createLeftShift'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createRightShift'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createUnsignedRightShift'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createAdd'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createSubtract'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createMultiply'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createDivide'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createModulo'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createExponent'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' right'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' BinaryExpression'
    MethodSignature
      Identifier: '
    createPrefixPlus'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
    MethodSignature
      Identifier: '
    createPrefixMinus'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
    MethodSignature
      Identifier: '
    createPrefixIncrement'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
    MethodSignature
      Identifier: '
    createPrefixDecrement'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
    MethodSignature
      Identifier: '
    createBitwiseNot'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
    MethodSignature
      Identifier: '
    createLogicalNot'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PrefixUnaryExpression'
    MethodSignature
      Identifier: '
    createPostfixIncrement'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PostfixUnaryExpression'
    MethodSignature
      Identifier: '
    createPostfixDecrement'
      Parameter
        Identifier: 'operand'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PostfixUnaryExpression'
    MethodSignature
      Identifier: '

    //
    // Compound Nodes
    //

    createImmediatelyInvokedFunctionExpression'
      Parameter
        Identifier: 'statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    createImmediatelyInvokedFunctionExpression'
      Parameter
        Identifier: 'statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' param'
        TypeReference
          Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' paramValue'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    createImmediatelyInvokedArrowFunction'
      Parameter
        Identifier: 'statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      TypeReference
        Identifier: ' ImmediatelyInvokedArrowFunction'
    MethodSignature
      Identifier: '
    createImmediatelyInvokedArrowFunction'
      Parameter
        Identifier: 'statements'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' param'
        TypeReference
          Identifier: ' ParameterDeclaration'
      Parameter
        Identifier: ' paramValue'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ImmediatelyInvokedArrowFunction'
    MethodSignature
      Identifier: '

    createVoidZero'
      TypeReference
        Identifier: ' VoidExpression'
    MethodSignature
      Identifier: '
    createExportDefault'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' ExportAssignment'
    MethodSignature
      Identifier: '
    createExternalModuleExport'
      Parameter
        Identifier: 'exportName'
        TypeReference
          Identifier: ' Identifier'
      TypeReference
        Identifier: ' ExportDeclaration'
    MethodSignature
      Identifier: '

    /** @internal */ createTypeCheck'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' tag'
        TypeReference
          Identifier: ' TypeOfTag'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    /** @internal */ createIsNotTypeCheck'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' tag'
        TypeReference
          Identifier: ' TypeOfTag'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    /** @internal */ createMethodCall'
      Parameter
        Identifier: 'object'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' methodName'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Identifier'
      Parameter
        Identifier: ' argumentsList'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createGlobalMethodCall'
      Parameter
        Identifier: 'globalObjectName'
        StringKeyword
      Parameter
        Identifier: ' globalMethodName'
        StringKeyword
      Parameter
        Identifier: ' argumentsList'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createFunctionBindCall'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' argumentsList'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createFunctionCallCall'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' argumentsList'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createFunctionApplyCall'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' thisArg'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' argumentsExpression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createObjectDefinePropertyCall'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' propertyName'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Expression'
      Parameter
        Identifier: ' attributes'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createObjectGetOwnPropertyDescriptorCall'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' propertyName'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createReflectGetCall'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' propertyKey'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' receiver'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createReflectSetCall'
      Parameter
        Identifier: 'target'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' propertyKey'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' receiver'
        QuestionToken
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createPropertyDescriptor'
      Parameter
        Identifier: 'attributes'
        TypeReference
          Identifier: ' PropertyDescriptorAttributes'
      Parameter
        Identifier: ' singleLine'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' ObjectLiteralExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createArraySliceCall'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' start'
        QuestionToken
        UnionType
          NumberKeyword
          TypeReference
            Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createArrayConcatCall'
      Parameter
        Identifier: 'array'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' values'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' CallExpression'
    MethodSignature
      Identifier: '
    /** @internal */ createCallBinding'
      Parameter
        Identifier: 'expression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' recordTempVariable'
        FunctionType
          Parameter
            Identifier: 'temp'
            TypeReference
              Identifier: ' Identifier'
          VoidKeyword
      Parameter
        Identifier: ' languageVersion'
        QuestionToken
        TypeReference
          Identifier: ' ScriptTarget'
      Parameter
        Identifier: ' cacheIdentifiers'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' CallBinding'
    MethodSignature
      Identifier: '
    /**
     * Wraps an expression that cannot be an assignment target in an expression that can be.
     *
     * Given a `paramName` of `_a`:
     * ```
     * Reflect.set(obj, "x", _a)
     * ```
     * Becomes
     * ```ts
     * ({ set value(_a) { Reflect.set(obj, "x", _a); } }).value
     * ```
     *
     * @param paramName
     * @param expression
     *
     * @internal
     */
    createAssignmentTargetWrapper'
      Parameter
        Identifier: 'paramName'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' expression'
        TypeReference
          Identifier: ' Expression'
      TypeReference
        Identifier: ' PropertyAccessExpression'
    MethodSignature
      Identifier: '
    /** @internal */ inlineExpressions'
      Parameter
        Identifier: 'expressions'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Expression'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    /**
     * Gets the internal name of a declaration. This is primarily used for declarations that can be
     * referred to by name in the body of an ES5 class function body. An internal name will *never*
     * be prefixed with an module or namespace export modifier like "exports." when emitted as an
     * expression. An internal name will also *never* be renamed due to a collision with a block
     * scoped variable.
     *
     * @param node The declaration.
     * @param allowComments A value indicating whether comments may be emitted for the name.
     * @param allowSourceMaps A value indicating whether source maps may be emitted for the name.
     *
     * @internal
     */
    getInternalName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Declaration'
      Parameter
        Identifier: ' allowComments'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' allowSourceMaps'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '
    /**
     * Gets the local name of a declaration. This is primarily used for declarations that can be
     * referred to by name in the declaration's immediate scope (classes, enums, namespaces). A
     * local name will *never* be prefixed with an module or namespace export modifier like
     * "exports." when emitted as an expression.
     *
     * @param node The declaration.
     * @param allowComments A value indicating whether comments may be emitted for the name.
     * @param allowSourceMaps A value indicating whether source maps may be emitted for the name.
     * @param ignoreAssignedName Indicates that the assigned name of a declaration shouldn't be considered.
     *
     * @internal
     */
    getLocalName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Declaration'
      Parameter
        Identifier: ' allowComments'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' allowSourceMaps'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' ignoreAssignedName'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '
    /**
     * Gets the export name of a declaration. This is primarily used for declarations that can be
     * referred to by name in the declaration's immediate scope (classes, enums, namespaces). An
     * export name will *always* be prefixed with a module or namespace export modifier like
     * `"exports."` when emitted as an expression if the name points to an exported symbol.
     *
     * @param node The declaration.
     * @param allowComments A value indicating whether comments may be emitted for the name.
     * @param allowSourceMaps A value indicating whether source maps may be emitted for the name.
     *
     * @internal
     */
    getExportName'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Declaration'
      Parameter
        Identifier: ' allowComments'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' allowSourceMaps'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '
    /**
     * Gets the name of a declaration for use in declarations.
     *
     * @param node The declaration.
     * @param allowComments A value indicating whether comments may be emitted for the name.
     * @param allowSourceMaps A value indicating whether source maps may be emitted for the name.
     *
     * @internal
     */
    getDeclarationName'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' Declaration'
          UndefinedKeyword
      Parameter
        Identifier: ' allowComments'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' allowSourceMaps'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' Identifier'
    MethodSignature
      Identifier: '
    /**
     * Gets a namespace-qualified name for use in expressions.
     *
     * @param ns The namespace identifier.
     * @param name The name.
     * @param allowComments A value indicating whether comments may be emitted for the name.
     * @param allowSourceMaps A value indicating whether source maps may be emitted for the name.
     *
     * @internal
     */
    getNamespaceMemberName'
      Parameter
        Identifier: 'ns'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' name'
        TypeReference
          Identifier: ' Identifier'
      Parameter
        Identifier: ' allowComments'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' allowSourceMaps'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' PropertyAccessExpression'
    MethodSignature
      Identifier: '
    /**
     * Gets the exported name of a declaration for use in expressions.
     *
     * An exported name will *always* be prefixed with an module or namespace export modifier like
     * "exports." if the name points to an exported symbol.
     *
     * @param ns The namespace identifier.
     * @param node The declaration.
     * @param allowComments A value indicating whether comments may be emitted for the name.
     * @param allowSourceMaps A value indicating whether source maps may be emitted for the name.
     *
     * @internal
     */
    getExternalModuleOrNamespaceExportName'
      Parameter
        Identifier: 'ns'
        UnionType
          TypeReference
            Identifier: ' Identifier'
          UndefinedKeyword
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Declaration'
      Parameter
        Identifier: ' allowComments'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' allowSourceMaps'
        QuestionToken
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' PropertyAccessExpression'
    MethodSignature
      Identifier: '

    //
    // Utilities
    //

    restoreOuterExpressions'
      Parameter
        Identifier: 'outerExpression'
        UnionType
          TypeReference
            Identifier: ' Expression'
          UndefinedKeyword
      Parameter
        Identifier: ' innerExpression'
        TypeReference
          Identifier: ' Expression'
      Parameter
        Identifier: ' kinds'
        QuestionToken
        TypeReference
          Identifier: ' OuterExpressionKinds'
      TypeReference
        Identifier: ' Expression'
    MethodSignature
      Identifier: '
    /** @internal */ restoreEnclosingLabel'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Statement'
      Parameter
        Identifier: ' outermostLabeledStatement'
        UnionType
          TypeReference
            Identifier: ' LabeledStatement'
          UndefinedKeyword
      Parameter
        Identifier: ' afterRestoreLabelCallback'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' LabeledStatement'
          VoidKeyword
      TypeReference
        Identifier: ' Statement'
    MethodSignature
      Identifier: '
    /** @internal */ createUseStrictPrologue'
      TypeReference
        Identifier: ' PrologueDirective'
    MethodSignature
      Identifier: '
    /**
     * Copies any necessary standard and custom prologue-directives into target array.
     * @param source origin statements array
     * @param target result statements array
     * @param ensureUseStrict boolean determining whether the function need to add prologue-directives
     * @param visitor Optional callback used to visit any custom prologue directives.
     *
     * @internal
     */
    copyPrologue'
      Parameter
        Identifier: 'source'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' target'
        ArrayType
          TypeReference
            Identifier: ' Statement'
      Parameter
        Identifier: ' ensureUseStrict'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' visitor'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Node'
          TypeReference
            Identifier: ' VisitResult'
            UnionType
              TypeReference
                Identifier: 'Node'
              UndefinedKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Copies only the standard (string-expression) prologue-directives into the target statement-array.
     * @param source origin statements array
     * @param target result statements array
     * @param statementOffset The offset at which to begin the copy.
     * @param ensureUseStrict boolean determining whether the function need to add prologue-directives
     *
     * @internal
     */
    copyStandardPrologue'
      Parameter
        Identifier: 'source'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' target'
        ArrayType
          TypeReference
            Identifier: ' Statement'
      Parameter
        Identifier: ' statementOffset'
        UnionType
          NumberKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' ensureUseStrict'
        QuestionToken
        BooleanKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Copies only the custom prologue-directives into target statement-array.
     * @param source origin statements array
     * @param target result statements array
     * @param statementOffset The offset at which to begin the copy.
     * @param visitor Optional callback used to visit any custom prologue directives.
     *
     * @internal
     */
    copyCustomPrologue'
      Parameter
        Identifier: 'source'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' target'
        ArrayType
          TypeReference
            Identifier: ' Statement'
      Parameter
        Identifier: ' statementOffset'
        NumberKeyword
      Parameter
        Identifier: ' visitor'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Node'
          TypeReference
            Identifier: ' VisitResult'
            UnionType
              TypeReference
                Identifier: 'Node'
              UndefinedKeyword
      Parameter
        Identifier: ' filter'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Statement'
          BooleanKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /** @internal */ copyCustomPrologue'
      Parameter
        Identifier: 'source'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Statement'
      Parameter
        Identifier: ' target'
        ArrayType
          TypeReference
            Identifier: ' Statement'
      Parameter
        Identifier: ' statementOffset'
        UnionType
          NumberKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' visitor'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Node'
          TypeReference
            Identifier: ' VisitResult'
            UnionType
              TypeReference
                Identifier: 'Node'
              UndefinedKeyword
      Parameter
        Identifier: ' filter'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Statement'
          BooleanKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /** @internal */ ensureUseStrict'
      Parameter
        Identifier: 'statements'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'Statement'
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Statement'
    MethodSignature
      Identifier: '
    /** @internal */ liftToBlock'
      Parameter
        Identifier: 'nodes'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Node'
      TypeReference
        Identifier: ' Statement'
    MethodSignature
      Identifier: '
    /**
     * Merges generated lexical declarations into a new statement list.
     *
     * @internal
     */
    mergeLexicalEnvironment'
      Parameter
        Identifier: 'statements'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'Statement'
      Parameter
        Identifier: ' declarations'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Statement'
          UndefinedKeyword
      TypeReference
        Identifier: ' NodeArray'
        TypeReference
          Identifier: 'Statement'
    MethodSignature
      Identifier: '
    /**
     * Appends generated lexical declarations to an array of statements.
     *
     * @internal
     */
    mergeLexicalEnvironment'
      Parameter
        Identifier: 'statements'
        ArrayType
          TypeReference
            Identifier: ' Statement'
      Parameter
        Identifier: ' declarations'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Statement'
          UndefinedKeyword
      ArrayType
        TypeReference
          Identifier: ' Statement'
    MethodSignature
      Identifier: '
    /**
     * Creates a shallow, memberwise clone of a node.
     * - The result will have its `original` pointer set to `node`.
     * - The result will have its `pos` and `end` set to `-1`.
     * - *DO NOT USE THIS* if a more appropriate function is available.
     *
     * @internal
     */
    cloneNode'
      TypeParameter
        Identifier: 'T'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Updates a node that may contain modifiers, replacing only the modifiers of the node.
     */
    replaceModifiers'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' HasModifiers'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' Modifier'
          TypeReference
            Identifier: ' ModifierFlags'
          UndefinedKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Updates a node that may contain decorators or modifiers, replacing only the decorators and modifiers of the node.
     */
    replaceDecoratorsAndModifiers'
      TypeParameter
        Identifier: 'T'
        IntersectionType
          TypeReference
            Identifier: ' HasModifiers'
          TypeReference
            Identifier: ' HasDecorators'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' modifiers'
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' ModifierLike'
          UndefinedKeyword
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    /**
     * Updates a node that contains a property name, replacing only the name of the node.
     */
    replacePropertyName'
      TypeParameter
        Identifier: 'T'
        UnionType
          TypeReference
            Identifier: ' AccessorDeclaration'
          TypeReference
            Identifier: ' MethodDeclaration'
          TypeReference
            Identifier: ' MethodSignature'
          TypeReference
            Identifier: ' PropertyDeclaration'
          TypeReference
            Identifier: ' PropertySignature'
          TypeReference
            Identifier: ' PropertyAssignment'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' name'
        IndexedAccessType
          TypeReference
            Identifier: ' T'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' T'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' LexicalEnvironmentFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    InParameters'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // currently visiting a parameter list
    VariablesHoistedInParameters'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CoreTransformationContext'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' factory'
      TypeReference
        Identifier: ' NodeFactory'
    MethodSignature
      Identifier: '

    /** Gets the compiler options supplied to the transformer. */
    getCompilerOptions'
      TypeReference
        Identifier: ' CompilerOptions'
    MethodSignature
      Identifier: '

    /** Starts a new lexical environment. */
    startLexicalEnvironment'
      VoidKeyword
    MethodSignature
      Identifier: '

    /** @internal */ setLexicalEnvironmentFlags'
      Parameter
        Identifier: 'flags'
        TypeReference
          Identifier: ' LexicalEnvironmentFlags'
      Parameter
        Identifier: ' value'
        BooleanKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */ getLexicalEnvironmentFlags'
      TypeReference
        Identifier: ' LexicalEnvironmentFlags'
    MethodSignature
      Identifier: '

    /** Suspends the current lexical environment, usually after visiting a parameter list. */
    suspendLexicalEnvironment'
      VoidKeyword
    MethodSignature
      Identifier: '

    /** Resumes a suspended lexical environment, usually before visiting a function body. */
    resumeLexicalEnvironment'
      VoidKeyword
    MethodSignature
      Identifier: '

    /** Ends a lexical environment, returning any declarations. */
    endLexicalEnvironment'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Statement'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /** Hoists a function declaration to the containing scope. */
    hoistFunctionDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' FunctionDeclaration'
      VoidKeyword
    MethodSignature
      Identifier: '

    /** Hoists a variable declaration to the containing scope. */
    hoistVariableDeclaration'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Identifier'
      VoidKeyword
    MethodSignature
      Identifier: '

    /** @internal */ startBlockScope'
      VoidKeyword
    MethodSignature
      Identifier: '

    /** @internal */ endBlockScope'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Statement'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /** @internal */ addBlockScopedVariable'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Identifier'
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Adds an initialization statement to the top of the lexical environment.
     *
     * @internal
     */
    addInitializationStatement'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Statement'
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TransformationContext'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CoreTransformationContext'
    MethodSignature
      Identifier: '
    /** @internal */ getEmitResolver'
      TypeReference
        Identifier: ' EmitResolver'
    MethodSignature
      Identifier: '
    /** @internal */ getEmitHost'
      TypeReference
        Identifier: ' EmitHost'
    MethodSignature
      Identifier: '
    /** @internal */ getEmitHelperFactory'
      TypeReference
        Identifier: ' EmitHelperFactory'
    MethodSignature
      Identifier: '

    /** Records a request for a non-scoped emit helper in the current context. */
    requestEmitHelper'
      Parameter
        Identifier: 'helper'
        TypeReference
          Identifier: ' EmitHelper'
      VoidKeyword
    MethodSignature
      Identifier: '

    /** Gets and resets the requested non-scoped emit helpers. */
    readEmitHelpers'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' EmitHelper'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /** Enables expression substitutions in the pretty printer for the provided SyntaxKind. */
    enableSubstitution'
      Parameter
        Identifier: 'kind'
        TypeReference
          Identifier: ' SyntaxKind'
      VoidKeyword
    MethodSignature
      Identifier: '

    /** Determines whether expression substitutions are enabled for the provided node. */
    isSubstitutionEnabled'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      BooleanKeyword
    PropertySignature
      Identifier: '

    /**
     * Hook used by transformers to substitute expressions just before they
     * are emitted by the pretty printer.
     *
     * NOTE: Transformation hooks should only be modified during `Transformer` initialization,
     * before returning the `NodeTransformer` callback.
     */
    onSubstituteNode'
      FunctionType
        Parameter
          Identifier: 'hint'
          TypeReference
            Identifier: ' EmitHint'
        Parameter
          Identifier: ' node'
          TypeReference
            Identifier: ' Node'
        TypeReference
          Identifier: ' Node'
    MethodSignature
      Identifier: '

    /**
     * Enables before/after emit notifications in the pretty printer for the provided
     * SyntaxKind.
     */
    enableEmitNotification'
      Parameter
        Identifier: 'kind'
        TypeReference
          Identifier: ' SyntaxKind'
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Determines whether before/after emit notifications should be raised in the pretty
     * printer when it emits a node.
     */
    isEmitNotificationEnabled'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      BooleanKeyword
    PropertySignature
      Identifier: '

    /**
     * Hook used to allow transformers to capture state before or after
     * the printer emits a node.
     *
     * NOTE: Transformation hooks should only be modified during `Transformer` initialization,
     * before returning the `NodeTransformer` callback.
     */
    onEmitNode'
      FunctionType
        Parameter
          Identifier: 'hint'
          TypeReference
            Identifier: ' EmitHint'
        Parameter
          Identifier: ' node'
          TypeReference
            Identifier: ' Node'
        Parameter
          Identifier: ' emitCallback'
          FunctionType
            Parameter
              Identifier: 'hint'
              TypeReference
                Identifier: ' EmitHint'
            Parameter
              Identifier: ' node'
              TypeReference
                Identifier: ' Node'
            VoidKeyword
        VoidKeyword
    MethodSignature
      Identifier: '

    /** @internal */ addDiagnostic'
      Parameter
        Identifier: 'diag'
        TypeReference
          Identifier: ' DiagnosticWithLocation'
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TransformationResult'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    /** Gets the transformed source files. */
    transformed'
      ArrayType
        TypeReference
          Identifier: ' T'
    PropertySignature
      Identifier: '

    /** Gets diagnostics for the transformation. */
    diagnostics'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' DiagnosticWithLocation'
    MethodSignature
      Identifier: '

    /**
     * Gets a substitute for a node, if one is available; otherwise, returns the original node.
     *
     * @param hint A hint as to the intended usage of the node.
     * @param node The node to substitute.
     */
    substituteNode'
      Parameter
        Identifier: 'hint'
        TypeReference
          Identifier: ' EmitHint'
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' Node'
    MethodSignature
      Identifier: '

    /**
     * Emits a node with possible notification.
     *
     * @param hint A hint as to the intended usage of the node.
     * @param node The node to emit.
     * @param emitCallback A callback used to emit the node.
     */
    emitNodeWithNotification'
      Parameter
        Identifier: 'hint'
        TypeReference
          Identifier: ' EmitHint'
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' emitCallback'
        FunctionType
          Parameter
            Identifier: 'hint'
            TypeReference
              Identifier: ' EmitHint'
          Parameter
            Identifier: ' node'
            TypeReference
              Identifier: ' Node'
          VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * Indicates if a given node needs an emit notification
     *
     * @param node The node to emit.
     */
    isEmitNotificationEnabled'
      QuestionToken
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      BooleanKeyword
    MethodSignature
      Identifier: '

    /**
     * Clean up EmitNode entries on any parse-tree nodes.
     */
    dispose'
      VoidKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TransformerFactory'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    FunctionType
      Parameter
        Identifier: 'context'
        TypeReference
          Identifier: ' TransformationContext'
      TypeReference
        Identifier: ' Transformer'
        TypeReference
          Identifier: 'T'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Transformer'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' Node'
    FunctionType
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Visitor'
    TypeParameter
      Identifier: 'TIn'
      TypeReference
        Identifier: ' Node'
      TypeReference
        Identifier: ' Node'
    TypeParameter
      Identifier: ' TOut'
      UnionType
        TypeReference
          Identifier: ' Node'
        UndefinedKeyword
      UnionType
        TypeReference
          Identifier: ' TIn'
        UndefinedKeyword
    FunctionType
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' TIn'
      TypeReference
        Identifier: ' VisitResult'
        TypeReference
          Identifier: 'TOut'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NodeVisitor'
    CallSignature
      TypeParameter
        Identifier: 'TIn'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      TypeParameter
        Identifier: ' TVisited'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      TypeParameter
        Identifier: ' TOut'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: '
        node'
        TypeReference
          Identifier: ' TIn'
      Parameter
        Identifier: '
        visitor'
        TypeReference
          Identifier: ' Visitor'
          TypeReference
            Identifier: 'NonNullable'
            TypeReference
              Identifier: 'TIn'
          TypeReference
            Identifier: ' TVisited'
      Parameter
        Identifier: '
        test'
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Node'
          TypePredicate
            Identifier: ' node'
            TypeReference
              Identifier: ' TOut'
      Parameter
        Identifier: '
        lift'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' Node'
          TypeReference
            Identifier: ' Node'
      UnionType
        TypeReference
          Identifier: ' TOut'
        ParenthesizedType
          IntersectionType
            TypeReference
              Identifier: 'TIn'
            UndefinedKeyword
        ParenthesizedType
          IntersectionType
            TypeReference
              Identifier: 'TVisited'
            UndefinedKeyword
    CallSignature
      TypeParameter
        Identifier: 'TIn'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      TypeParameter
        Identifier: ' TVisited'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: '
        node'
        TypeReference
          Identifier: ' TIn'
      Parameter
        Identifier: '
        visitor'
        TypeReference
          Identifier: ' Visitor'
          TypeReference
            Identifier: 'NonNullable'
            TypeReference
              Identifier: 'TIn'
          TypeReference
            Identifier: ' TVisited'
      Parameter
        Identifier: '
        test'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Node'
          BooleanKeyword
      Parameter
        Identifier: '
        lift'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' Node'
          TypeReference
            Identifier: ' Node'
      UnionType
        TypeReference
          Identifier: ' Node'
        ParenthesizedType
          IntersectionType
            TypeReference
              Identifier: 'TIn'
            UndefinedKeyword
        ParenthesizedType
          IntersectionType
            TypeReference
              Identifier: 'TVisited'
            UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' NodesVisitor'
    CallSignature
      TypeParameter
        Identifier: 'TIn'
        TypeReference
          Identifier: ' Node'
      TypeParameter
        Identifier: ' TInArray'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TIn'
          UndefinedKeyword
      TypeParameter
        Identifier: ' TOut'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: '
        nodes'
        TypeReference
          Identifier: ' TInArray'
      Parameter
        Identifier: '
        visitor'
        TypeReference
          Identifier: ' Visitor'
          TypeReference
            Identifier: 'TIn'
          UnionType
            TypeReference
              Identifier: ' Node'
            UndefinedKeyword
      Parameter
        Identifier: '
        test'
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Node'
          TypePredicate
            Identifier: ' node'
            TypeReference
              Identifier: ' TOut'
      Parameter
        Identifier: '
        start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: '
        count'
        QuestionToken
        NumberKeyword
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'TOut'
        ParenthesizedType
          IntersectionType
            TypeReference
              Identifier: 'TInArray'
            UndefinedKeyword
    CallSignature
      TypeParameter
        Identifier: 'TIn'
        TypeReference
          Identifier: ' Node'
      TypeParameter
        Identifier: ' TInArray'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'TIn'
          UndefinedKeyword
      Parameter
        Identifier: '
        nodes'
        TypeReference
          Identifier: ' TInArray'
      Parameter
        Identifier: '
        visitor'
        TypeReference
          Identifier: ' Visitor'
          TypeReference
            Identifier: 'TIn'
          UnionType
            TypeReference
              Identifier: ' Node'
            UndefinedKeyword
      Parameter
        Identifier: '
        test'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Node'
          BooleanKeyword
      Parameter
        Identifier: '
        start'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: '
        count'
        QuestionToken
        NumberKeyword
      UnionType
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'Node'
        ParenthesizedType
          IntersectionType
            TypeReference
              Identifier: 'TInArray'
            UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' VisitResult'
    TypeParameter
      Identifier: 'T'
      UnionType
        TypeReference
          Identifier: ' Node'
        UndefinedKeyword
    UnionType
      TypeReference
        Identifier: ' T'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Node'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Printer'
    MethodSignature
      Identifier: '
    /**
     * Print a node and its subtree as-is, without any emit transformations.
     * @param hint A value indicating the purpose of a node. This is primarily used to
     * distinguish between an `Identifier` used in an expression position, versus an
     * `Identifier` used as an `IdentifierName` as part of a declaration. For most nodes you
     * should just pass `Unspecified`.
     * @param node The node to print. The node and its subtree are printed as-is, without any
     * emit transformations.
     * @param sourceFile A source file that provides context for the node. The source text of
     * the file is used to emit the original source content for literals and identifiers, while
     * the identifiers of the source file are used when generating unique names to avoid
     * collisions.
     */
    printNode'
      Parameter
        Identifier: 'hint'
        TypeReference
          Identifier: ' EmitHint'
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Prints a list of nodes using the given format flags
     */
    printList'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: 'format'
        TypeReference
          Identifier: ' ListFormat'
      Parameter
        Identifier: ' list'
        TypeReference
          Identifier: ' NodeArray'
          TypeReference
            Identifier: 'T'
      Parameter
        Identifier: ' sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Prints a source file as-is, without any emit transformations.
     */
    printFile'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Prints a bundle of source files as-is, without any emit transformations.
     */
    printBundle'
      Parameter
        Identifier: 'bundle'
        TypeReference
          Identifier: ' Bundle'
      StringKeyword
    MethodSignature
      Identifier: '
    /** @internal */ writeNode'
      Parameter
        Identifier: 'hint'
        TypeReference
          Identifier: ' EmitHint'
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' sourceFile'
        UnionType
          TypeReference
            Identifier: ' SourceFile'
          UndefinedKeyword
      Parameter
        Identifier: ' writer'
        TypeReference
          Identifier: ' EmitTextWriter'
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */ writeList'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: 'format'
        TypeReference
          Identifier: ' ListFormat'
      Parameter
        Identifier: ' list'
        UnionType
          TypeReference
            Identifier: ' NodeArray'
            TypeReference
              Identifier: 'T'
          UndefinedKeyword
      Parameter
        Identifier: ' sourceFile'
        UnionType
          TypeReference
            Identifier: ' SourceFile'
          UndefinedKeyword
      Parameter
        Identifier: ' writer'
        TypeReference
          Identifier: ' EmitTextWriter'
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */ writeFile'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' writer'
        TypeReference
          Identifier: ' EmitTextWriter'
      Parameter
        Identifier: ' sourceMapGenerator'
        UnionType
          TypeReference
            Identifier: ' SourceMapGenerator'
          UndefinedKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /** @internal */ writeBundle'
      Parameter
        Identifier: 'bundle'
        TypeReference
          Identifier: ' Bundle'
      Parameter
        Identifier: ' writer'
        TypeReference
          Identifier: ' EmitTextWriter'
      Parameter
        Identifier: ' sourceMapGenerator'
        UnionType
          TypeReference
            Identifier: ' SourceMapGenerator'
          UndefinedKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BuildInfo'
    PropertySignature
      Identifier: '
    version'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BuildInfoFileVersionMap'
    PropertySignature
      Identifier: '
    fileInfos'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'Path'
        StringKeyword
    PropertySignature
      Identifier: '
    roots'
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'Path'
        UnionType
          TypeReference
            Identifier: ' Path'
          UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrintHandlers'
    MethodSignature
      Identifier: '
    /**
     * A hook used by the Printer when generating unique names to avoid collisions with
     * globally defined names that exist outside of the current source file.
     */
    hasGlobalName'
      QuestionToken
      Parameter
        Identifier: 'name'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * A hook used by the Printer to provide notifications prior to emitting a node. A
     * compatible implementation **must** invoke `emitCallback` with the provided `hint` and
     * `node` values.
     * @param hint A hint indicating the intended purpose of the node.
     * @param node The node to emit.
     * @param emitCallback A callback that, when invoked, will emit the node.
     * @example
     * ```ts
     * var printer = createPrinter(printerOptions, {
     *   onEmitNode(hint, node, emitCallback) {
     *     // set up or track state prior to emitting the node...
     *     emitCallback(hint, node);
     *     // restore state after emitting the node...
     *   }
     * });
     * ```
     */
    onEmitNode'
      QuestionToken
      Parameter
        Identifier: 'hint'
        TypeReference
          Identifier: ' EmitHint'
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' emitCallback'
        FunctionType
          Parameter
            Identifier: 'hint'
            TypeReference
              Identifier: ' EmitHint'
          Parameter
            Identifier: ' node'
            TypeReference
              Identifier: ' Node'
          VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

    /**
     * A hook used to check if an emit notification is required for a node.
     * @param node The node to emit.
     */
    isEmitNotificationEnabled'
      QuestionToken
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * A hook used by the Printer to perform just-in-time substitution of a node. This is
     * primarily used by node transformations that need to substitute one node for another,
     * such as replacing `myExportedVar` with `exports.myExportedVar`.
     * @param hint A hint indicating the intended purpose of the node.
     * @param node The node to emit.
     * @example
     * ```ts
     * var printer = createPrinter(printerOptions, {
     *   substituteNode(hint, node) {
     *     // perform substitution if necessary...
     *     return node;
     *   }
     * });
     * ```
     */
    substituteNode'
      QuestionToken
      Parameter
        Identifier: 'hint'
        TypeReference
          Identifier: ' EmitHint'
      Parameter
        Identifier: ' node'
        TypeReference
          Identifier: ' Node'
      TypeReference
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    /** @internal */ onEmitSourceMapOfNode'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'hint'
          TypeReference
            Identifier: ' EmitHint'
        Parameter
          Identifier: ' node'
          TypeReference
            Identifier: ' Node'
        Parameter
          Identifier: ' emitCallback'
          FunctionType
            Parameter
              Identifier: 'hint'
              TypeReference
                Identifier: ' EmitHint'
            Parameter
              Identifier: ' node'
              TypeReference
                Identifier: ' Node'
            VoidKeyword
        VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onEmitSourceMapOfToken'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'node'
          UnionType
            TypeReference
              Identifier: ' Node'
            UndefinedKeyword
        Parameter
          Identifier: ' token'
          TypeReference
            Identifier: ' SyntaxKind'
        Parameter
          Identifier: ' writer'
          FunctionType
            Parameter
              Identifier: 's'
              StringKeyword
            VoidKeyword
        Parameter
          Identifier: ' pos'
          NumberKeyword
        Parameter
          Identifier: ' emitCallback'
          FunctionType
            Parameter
              Identifier: 'token'
              TypeReference
                Identifier: ' SyntaxKind'
            Parameter
              Identifier: ' writer'
              FunctionType
                Parameter
                  Identifier: 's'
                  StringKeyword
                VoidKeyword
            Parameter
              Identifier: ' pos'
              NumberKeyword
            NumberKeyword
        NumberKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onEmitSourceMapOfPosition'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'pos'
          NumberKeyword
        VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onSetSourceFile'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'node'
          TypeReference
            Identifier: ' SourceFile'
        VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onBeforeEmitNode'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'node'
          UnionType
            TypeReference
              Identifier: ' Node'
            UndefinedKeyword
        VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onAfterEmitNode'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'node'
          UnionType
            TypeReference
              Identifier: ' Node'
            UndefinedKeyword
        VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onBeforeEmitNodeArray'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'nodes'
          UnionType
            TypeReference
              Identifier: ' NodeArray'
              AnyKeyword
            UndefinedKeyword
        VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onAfterEmitNodeArray'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'nodes'
          UnionType
            TypeReference
              Identifier: ' NodeArray'
              AnyKeyword
            UndefinedKeyword
        VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onBeforeEmitToken'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'node'
          TypeReference
            Identifier: ' Node'
        VoidKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onAfterEmitToken'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'node'
          TypeReference
            Identifier: ' Node'
        VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PrinterOptions'
    PropertySignature
      Identifier: '
    removeComments'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    newLine'
      QuestionToken
      TypeReference
        Identifier: ' NewLineKind'
    PropertySignature
      Identifier: '
    omitTrailingSemicolon'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    noEmitHelpers'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ module'
      QuestionToken
      IndexedAccessType
        TypeReference
          Identifier: ' CompilerOptions'
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    /** @internal */ moduleResolution'
      QuestionToken
      IndexedAccessType
        TypeReference
          Identifier: ' CompilerOptions'
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    /** @internal */ target'
      QuestionToken
      IndexedAccessType
        TypeReference
          Identifier: ' CompilerOptions'
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    /** @internal */ sourceMap'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ inlineSourceMap'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ inlineSources'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal*/ omitBraceSourceMapPositions'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ extendedDiagnostics'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ onlyPrintJsDocStyle'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ neverAsciiEscape'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ stripInternal'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ preserveSourceNewlines'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    /** @internal */ terminateUnterminatedLiterals'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' RawSourceMap'
    PropertySignature
      Identifier: '
    version'
      LiteralType
        NumericLiteral
    PropertySignature
      Identifier: '
    file'
      StringKeyword
    PropertySignature
      Identifier: '
    sourceRoot'
      QuestionToken
      UnionType
        StringKeyword
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: ' // eslint-disable-line no-restricted-syntax
    sources'
      ArrayType
        StringKeyword
    PropertySignature
      Identifier: '
    sourcesContent'
      QuestionToken
      UnionType
        ArrayType
          ParenthesizedType
            UnionType
              StringKeyword
              LiteralType
                NullKeyword
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: ' // eslint-disable-line no-restricted-syntax
    mappings'
      StringKeyword
    PropertySignature
      Identifier: '
    names'
      QuestionToken
      UnionType
        ArrayType
          StringKeyword
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SourceMapGenerator'
    MethodSignature
      Identifier: '
    getSources'
      TypeOperator
        ArrayType
          StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Adds a source to the source map.
     */
    addSource'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Set the content for a source.
     */
    setSourceContent'
      Parameter
        Identifier: 'sourceIndex'
        NumberKeyword
      Parameter
        Identifier: ' content'
        UnionType
          StringKeyword
          LiteralType
            NullKeyword
      VoidKeyword
    MethodSignature
      Identifier: ' // eslint-disable-line no-restricted-syntax
    /**
     * Adds a name.
     */
    addName'
      Parameter
        Identifier: 'name'
        StringKeyword
      NumberKeyword
    MethodSignature
      Identifier: '
    /**
     * Adds a mapping without source information.
     */
    addMapping'
      Parameter
        Identifier: 'generatedLine'
        NumberKeyword
      Parameter
        Identifier: ' generatedCharacter'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Adds a mapping with source information.
     */
    addMapping'
      Parameter
        Identifier: 'generatedLine'
        NumberKeyword
      Parameter
        Identifier: ' generatedCharacter'
        NumberKeyword
      Parameter
        Identifier: ' sourceIndex'
        NumberKeyword
      Parameter
        Identifier: ' sourceLine'
        NumberKeyword
      Parameter
        Identifier: ' sourceCharacter'
        NumberKeyword
      Parameter
        Identifier: ' nameIndex'
        QuestionToken
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Appends a source map.
     */
    appendSourceMap'
      Parameter
        Identifier: 'generatedLine'
        NumberKeyword
      Parameter
        Identifier: ' generatedCharacter'
        NumberKeyword
      Parameter
        Identifier: ' sourceMap'
        TypeReference
          Identifier: ' RawSourceMap'
      Parameter
        Identifier: ' sourceMapPath'
        StringKeyword
      Parameter
        Identifier: ' start'
        QuestionToken
        TypeReference
          Identifier: ' LineAndCharacter'
      Parameter
        Identifier: ' end'
        QuestionToken
        TypeReference
          Identifier: ' LineAndCharacter'
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Gets the source map as a `RawSourceMap` object.
     */
    toJSON'
      TypeReference
        Identifier: ' RawSourceMap'
    MethodSignature
      Identifier: '
    /**
     * Gets the string representation of the source map.
     */
    toString'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DocumentPositionMapperHost'
    MethodSignature
      Identifier: '
    getSourceFileLike'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' SourceFileLike'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getCanonicalFileName'
      Parameter
        Identifier: 'path'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    log'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DocumentPositionMapper'
    MethodSignature
      Identifier: '
    getSourcePosition'
      Parameter
        Identifier: 'input'
        TypeReference
          Identifier: ' DocumentPosition'
      TypeReference
        Identifier: ' DocumentPosition'
    MethodSignature
      Identifier: '
    getGeneratedPosition'
      Parameter
        Identifier: 'input'
        TypeReference
          Identifier: ' DocumentPosition'
      TypeReference
        Identifier: ' DocumentPosition'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DocumentPosition'
    PropertySignature
      Identifier: '
    fileName'
      StringKeyword
    PropertySignature
      Identifier: '
    pos'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmitTextWriter'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SymbolWriter'
    MethodSignature
      Identifier: '
    write'
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeTrailingSemicolon'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeComment'
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    getText'
      StringKeyword
    MethodSignature
      Identifier: '
    rawWrite'
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    writeLiteral'
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    getTextPos'
      NumberKeyword
    MethodSignature
      Identifier: '
    getLine'
      NumberKeyword
    MethodSignature
      Identifier: '
    getColumn'
      NumberKeyword
    MethodSignature
      Identifier: '
    getIndent'
      NumberKeyword
    MethodSignature
      Identifier: '
    isAtStartOfLine'
      BooleanKeyword
    MethodSignature
      Identifier: '
    hasTrailingComment'
      BooleanKeyword
    MethodSignature
      Identifier: '
    hasTrailingWhitespace'
      BooleanKeyword
    MethodSignature
      Identifier: '
    nonEscapingWrite'
      QuestionToken
      Parameter
        Identifier: 'text'
        StringKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' GetEffectiveTypeRootsHost'
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' HasCurrentDirectory'
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ModuleSpecifierResolutionHost'
    MethodSignature
      Identifier: '
    useCaseSensitiveFileNames'
      QuestionToken
      BooleanKeyword
    MethodSignature
      Identifier: '
    fileExists'
      Parameter
        Identifier: 'path'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    getCurrentDirectory'
      StringKeyword
    MethodSignature
      Identifier: '
    directoryExists'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    readFile'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    realpath'
      QuestionToken
      Parameter
        Identifier: 'path'
        StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
    getSymlinkCache'
      QuestionToken
      TypeReference
        Identifier: ' SymlinkCache'
    MethodSignature
      Identifier: '
    getModuleSpecifierCache'
      QuestionToken
      TypeReference
        Identifier: ' ModuleSpecifierCache'
    MethodSignature
      Identifier: '
    getPackageJsonInfoCache'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' PackageJsonInfoCache'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getGlobalTypingsCacheLocation'
      QuestionToken
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    getNearestAncestorDirectoryWithPackageJson'
      QuestionToken
      Parameter
        Identifier: 'fileName'
        StringKeyword
      Parameter
        Identifier: ' rootDir'
        QuestionToken
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' redirectTargetsMap'
      TypeReference
        Identifier: ' RedirectTargetsMap'
    MethodSignature
      Identifier: '
    getProjectReferenceRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        StringKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '
    isSourceOfProjectReferenceRedirect'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    getFileIncludeReasons'
      TypeReference
        Identifier: ' MultiMap'
        TypeReference
          Identifier: 'Path'
        TypeReference
          Identifier: ' FileIncludeReason'
    MethodSignature
      Identifier: '
    getCommonSourceDirectory'
      StringKeyword
    MethodSignature
      Identifier: '
    getDefaultResolutionModeForFile'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '
    getModeForResolutionAtIndex'
      Parameter
        Identifier: 'file'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' index'
        NumberKeyword
      TypeReference
        Identifier: ' ResolutionMode'
    MethodSignature
      Identifier: '

    getModuleResolutionCache'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' ModuleResolutionCache'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    trace'
      QuestionToken
      Parameter
        Identifier: 's'
        StringKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ModulePath'
    PropertySignature
      Identifier: '
    path'
      StringKeyword
    PropertySignature
      Identifier: '
    isInNodeModules'
      BooleanKeyword
    PropertySignature
      Identifier: '
    isRedirect'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ResolvedModuleSpecifierInfo'
    PropertySignature
      Identifier: '
    kind'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        UndefinedKeyword
    PropertySignature
      Identifier: '
    modulePaths'
      UnionType
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ModulePath'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    packageName'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    moduleSpecifiers'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    isBlockedByPackageJsonDependencies'
      UnionType
        BooleanKeyword
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ModuleSpecifierOptions'
    PropertySignature
      Identifier: '
    overrideImportMode'
      QuestionToken
      TypeReference
        Identifier: ' ResolutionMode'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ModuleSpecifierCache'
    MethodSignature
      Identifier: '
    get'
      Parameter
        Identifier: 'fromFileName'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' toFileName'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' preferences'
        TypeReference
          Identifier: ' UserPreferences'
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' ModuleSpecifierOptions'
      UnionType
        TypeReference
          Identifier: ' Readonly'
          TypeReference
            Identifier: 'ResolvedModuleSpecifierInfo'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    set'
      Parameter
        Identifier: 'fromFileName'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' toFileName'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' preferences'
        TypeReference
          Identifier: ' UserPreferences'
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' ModuleSpecifierOptions'
      Parameter
        Identifier: ' kind'
        IndexedAccessType
          TypeReference
            Identifier: ' ResolvedModuleSpecifierInfo'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' modulePaths'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ModulePath'
      Parameter
        Identifier: ' moduleSpecifiers'
        TypeOperator
          ArrayType
            StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    setBlockedByPackageJsonDependencies'
      Parameter
        Identifier: 'fromFileName'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' toFileName'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' preferences'
        TypeReference
          Identifier: ' UserPreferences'
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' ModuleSpecifierOptions'
      Parameter
        Identifier: ' packageName'
        UnionType
          StringKeyword
          UndefinedKeyword
      Parameter
        Identifier: ' isBlockedByPackageJsonDependencies'
        BooleanKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    setModulePaths'
      Parameter
        Identifier: 'fromFileName'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' toFileName'
        TypeReference
          Identifier: ' Path'
      Parameter
        Identifier: ' preferences'
        TypeReference
          Identifier: ' UserPreferences'
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' ModuleSpecifierOptions'
      Parameter
        Identifier: ' modulePaths'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' ModulePath'
      VoidKeyword
    MethodSignature
      Identifier: '
    clear'
      VoidKeyword
    MethodSignature
      Identifier: '
    count'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SymbolTracker'
    MethodSignature
      Identifier: '
    // Called when the symbol writer encounters a symbol to write.  Currently only used by the
    // declaration emitter to help determine if it should patch up the final declaration file
    // with import statements it previously saw (but chose not to emit).
    trackSymbol'
      QuestionToken
      Parameter
        Identifier: 'symbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      Parameter
        Identifier: ' meaning'
        TypeReference
          Identifier: ' SymbolFlags'
      BooleanKeyword
    MethodSignature
      Identifier: '
    reportInaccessibleThisError'
      QuestionToken
      VoidKeyword
    MethodSignature
      Identifier: '
    reportPrivateInBaseOfClassExpression'
      QuestionToken
      Parameter
        Identifier: 'propertyName'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    reportInaccessibleUniqueSymbolError'
      QuestionToken
      VoidKeyword
    MethodSignature
      Identifier: '
    reportCyclicStructureError'
      QuestionToken
      VoidKeyword
    MethodSignature
      Identifier: '
    reportLikelyUnsafeImportRequiredError'
      QuestionToken
      Parameter
        Identifier: 'specifier'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    reportTruncationError'
      QuestionToken
      VoidKeyword
    PropertySignature
      Identifier: '
    moduleResolverHost'
      QuestionToken
      IntersectionType
        TypeReference
          Identifier: ' ModuleSpecifierResolutionHost'
        TypeLiteral
          MethodSignature
            Identifier: ' getCommonSourceDirectory'
            StringKeyword
    MethodSignature
      Identifier: '
    reportNonlocalAugmentation'
      QuestionToken
      Parameter
        Identifier: 'containingFile'
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' parentSymbol'
        TypeReference
          Identifier: ' Symbol'
      Parameter
        Identifier: ' augmentingSymbol'
        TypeReference
          Identifier: ' Symbol'
      VoidKeyword
    MethodSignature
      Identifier: '
    reportNonSerializableProperty'
      QuestionToken
      Parameter
        Identifier: 'propertyName'
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    reportInferenceFallback'
      QuestionToken
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      VoidKeyword
    MethodSignature
      Identifier: '
    pushErrorFallbackNode'
      QuestionToken
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            Identifier: ' Declaration'
          UndefinedKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    popErrorFallbackNode'
      QuestionToken
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TextSpan'
    PropertySignature
      Identifier: '
    start'
      NumberKeyword
    PropertySignature
      Identifier: '
    length'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TextChangeRange'
    PropertySignature
      Identifier: '
    span'
      TypeReference
        Identifier: ' TextSpan'
    PropertySignature
      Identifier: '
    newLength'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' DiagnosticCollection'
    MethodSignature
      Identifier: '
    // Adds a diagnostic to this diagnostic collection.
    add'
      Parameter
        Identifier: 'diagnostic'
        TypeReference
          Identifier: ' Diagnostic'
      VoidKeyword
    MethodSignature
      Identifier: '

    // Returns the first existing diagnostic that is equivalent to the given one (sans related information)
    lookup'
      Parameter
        Identifier: 'diagnostic'
        TypeReference
          Identifier: ' Diagnostic'
      UnionType
        TypeReference
          Identifier: ' Diagnostic'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    // Gets all the diagnostics that aren't associated with a file.
    getGlobalDiagnostics'
      ArrayType
        TypeReference
          Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '

    // If fileName is provided, gets all the diagnostics associated with that file name.
    // Otherwise, returns all the diagnostics (global and file associated) in this collection.
    getDiagnostics'
      ArrayType
        TypeReference
          Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    getDiagnostics'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      ArrayType
        TypeReference
          Identifier: ' DiagnosticWithLocation'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SyntaxList'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Node'
    PropertySignature
      Identifier: '
    kind'
      TypeReference
        QualifiedName
          Identifier: ' SyntaxKind'
          Identifier: 'SyntaxList'
    PropertySignature
      Identifier: '

    // Unlike other nodes which may or may not have their child nodes calculated,
    // the entire purpose of a SyntaxList is to hold child nodes.
    // Instead of using the WeakMap machinery in `nodeChildren.ts`,
    // we just store the children directly on the SyntaxList.
    /** @internal */ _children'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Node'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' ListFormat'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '

    // Line separators
    SingleLine'
      NumericLiteral
    EnumMember
      Identifier: '                 // Prints the list on a single line (default).
    MultiLine'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '             // Prints the list on multiple lines.
    PreserveLines'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '         // Prints the list using line preservation if possible.
    LinesMask'
      BinaryExpression
        BinaryExpression
          Identifier: ' SingleLine'
          BarToken
          Identifier: ' MultiLine'
        BarToken
        Identifier: ' PreserveLines'
    EnumMember
      Identifier: '

    // Delimiters
    NotDelimited'
      NumericLiteral
    EnumMember
      Identifier: '               // There is no delimiter between list items (default).
    BarDelimited'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '          // Each list item is space-and-bar (" |") delimited.
    AmpersandDelimited'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '    // Each list item is space-and-ampersand (" &") delimited.
    CommaDelimited'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Each list item is comma (",") delimited.
    AsteriskDelimited'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '     // Each list item is asterisk ("\n *") delimited, used with JSDoc.
    DelimitersMask'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' BarDelimited'
            BarToken
            Identifier: ' AmpersandDelimited'
          BarToken
          Identifier: ' CommaDelimited'
        BarToken
        Identifier: ' AsteriskDelimited'
    EnumMember
      Identifier: '

    AllowTrailingComma'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '    // Write a trailing comma (",") if present.

    // Whitespace
    Indented'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '              // The list should be indented.
    SpaceBetweenBraces'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '    // Inserts a space after the opening brace and before the closing brace.
    SpaceBetweenSiblings'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Inserts a space between each sibling node.

    // Brackets/Braces
    Braces'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '                // The list is surrounded by "{" and "}".
    Parenthesis'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '          // The list is surrounded by "(" and ")".
    AngleBrackets'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // The list is surrounded by "<" and ">".
    SquareBrackets'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '       // The list is surrounded by "[" and "]".
    BracketsMask'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' Braces'
            BarToken
            Identifier: ' Parenthesis'
          BarToken
          Identifier: ' AngleBrackets'
        BarToken
        Identifier: ' SquareBrackets'
    EnumMember
      Identifier: '

    OptionalIfUndefined'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '  // Do not emit brackets if the list is undefined.
    OptionalIfEmpty'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '      // Do not emit brackets if the list is empty.
    Optional'
      BinaryExpression
        Identifier: ' OptionalIfUndefined'
        BarToken
        Identifier: ' OptionalIfEmpty'
    EnumMember
      Identifier: '

    // Other
    PreferNewLine'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '        // Prefer adding a LineTerminator between synthesized nodes.
    NoTrailingNewLine'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '    // Do not emit a trailing NewLine for a MultiLine list.
    NoInterveningComments'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: ' // Do not emit comments between each node
    NoSpaceIfEmpty'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '       // If the literal is empty, do not add spaces between braces.
    SingleElement'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    SpaceAfterList'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '       // Add space after list

    // Precomputed Formats
    Modifiers'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' SingleLine'
            BarToken
            Identifier: ' SpaceBetweenSiblings'
          BarToken
          Identifier: ' NoInterveningComments'
        BarToken
        Identifier: ' SpaceAfterList'
    EnumMember
      Identifier: '
    HeritageClauses'
      BinaryExpression
        Identifier: ' SingleLine'
        BarToken
        Identifier: ' SpaceBetweenSiblings'
    EnumMember
      Identifier: '
    SingleLineTypeLiteralMembers'
      BinaryExpression
        BinaryExpression
          Identifier: ' SingleLine'
          BarToken
          Identifier: ' SpaceBetweenBraces'
        BarToken
        Identifier: ' SpaceBetweenSiblings'
    EnumMember
      Identifier: '
    MultiLineTypeLiteralMembers'
      BinaryExpression
        BinaryExpression
          Identifier: ' MultiLine'
          BarToken
          Identifier: ' Indented'
        BarToken
        Identifier: ' OptionalIfEmpty'
    EnumMember
      Identifier: '

    SingleLineTupleTypeElements'
      BinaryExpression
        BinaryExpression
          Identifier: ' CommaDelimited'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' SingleLine'
    EnumMember
      Identifier: '
    MultiLineTupleTypeElements'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' CommaDelimited'
            BarToken
            Identifier: ' Indented'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' MultiLine'
    EnumMember
      Identifier: '
    UnionTypeConstituents'
      BinaryExpression
        BinaryExpression
          Identifier: ' BarDelimited'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' SingleLine'
    EnumMember
      Identifier: '
    IntersectionTypeConstituents'
      BinaryExpression
        BinaryExpression
          Identifier: ' AmpersandDelimited'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' SingleLine'
    EnumMember
      Identifier: '
    ObjectBindingPatternElements'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                Identifier: ' SingleLine'
                BarToken
                Identifier: ' AllowTrailingComma'
              BarToken
              Identifier: ' SpaceBetweenBraces'
            BarToken
            Identifier: ' CommaDelimited'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' NoSpaceIfEmpty'
    EnumMember
      Identifier: '
    ArrayBindingPatternElements'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' SingleLine'
              BarToken
              Identifier: ' AllowTrailingComma'
            BarToken
            Identifier: ' CommaDelimited'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' NoSpaceIfEmpty'
    EnumMember
      Identifier: '
    ObjectLiteralExpressionProperties'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' PreserveLines'
                  BarToken
                  Identifier: ' CommaDelimited'
                BarToken
                Identifier: ' SpaceBetweenSiblings'
              BarToken
              Identifier: ' SpaceBetweenBraces'
            BarToken
            Identifier: ' Indented'
          BarToken
          Identifier: ' Braces'
        BarToken
        Identifier: ' NoSpaceIfEmpty'
    EnumMember
      Identifier: '
    ImportAttributes'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                BinaryExpression
                  Identifier: ' PreserveLines'
                  BarToken
                  Identifier: ' CommaDelimited'
                BarToken
                Identifier: ' SpaceBetweenSiblings'
              BarToken
              Identifier: ' SpaceBetweenBraces'
            BarToken
            Identifier: ' Indented'
          BarToken
          Identifier: ' Braces'
        BarToken
        Identifier: ' NoSpaceIfEmpty'
    EnumMember
      Identifier: '
    /** @deprecated */ ImportClauseEntries'
      Identifier: ' ImportAttributes'
    EnumMember
      Identifier: '
    ArrayLiteralExpressionElements'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                Identifier: ' PreserveLines'
                BarToken
                Identifier: ' CommaDelimited'
              BarToken
              Identifier: ' SpaceBetweenSiblings'
            BarToken
            Identifier: ' AllowTrailingComma'
          BarToken
          Identifier: ' Indented'
        BarToken
        Identifier: ' SquareBrackets'
    EnumMember
      Identifier: '
    CommaListElements'
      BinaryExpression
        BinaryExpression
          Identifier: ' CommaDelimited'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' SingleLine'
    EnumMember
      Identifier: '
    CallExpressionArguments'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' CommaDelimited'
            BarToken
            Identifier: ' SpaceBetweenSiblings'
          BarToken
          Identifier: ' SingleLine'
        BarToken
        Identifier: ' Parenthesis'
    EnumMember
      Identifier: '
    NewExpressionArguments'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' CommaDelimited'
              BarToken
              Identifier: ' SpaceBetweenSiblings'
            BarToken
            Identifier: ' SingleLine'
          BarToken
          Identifier: ' Parenthesis'
        BarToken
        Identifier: ' OptionalIfUndefined'
    EnumMember
      Identifier: '
    TemplateExpressionSpans'
      BinaryExpression
        Identifier: ' SingleLine'
        BarToken
        Identifier: ' NoInterveningComments'
    EnumMember
      Identifier: '
    SingleLineBlockStatements'
      BinaryExpression
        BinaryExpression
          Identifier: ' SpaceBetweenBraces'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' SingleLine'
    EnumMember
      Identifier: '
    MultiLineBlockStatements'
      BinaryExpression
        Identifier: ' Indented'
        BarToken
        Identifier: ' MultiLine'
    EnumMember
      Identifier: '
    VariableDeclarationList'
      BinaryExpression
        BinaryExpression
          Identifier: ' CommaDelimited'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' SingleLine'
    EnumMember
      Identifier: '
    SingleLineFunctionBodyStatements'
      BinaryExpression
        BinaryExpression
          Identifier: ' SingleLine'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' SpaceBetweenBraces'
    EnumMember
      Identifier: '
    MultiLineFunctionBodyStatements'
      Identifier: ' MultiLine'
    EnumMember
      Identifier: '
    ClassHeritageClauses'
      Identifier: ' SingleLine'
    EnumMember
      Identifier: '
    ClassMembers'
      BinaryExpression
        Identifier: ' Indented'
        BarToken
        Identifier: ' MultiLine'
    EnumMember
      Identifier: '
    InterfaceMembers'
      BinaryExpression
        Identifier: ' Indented'
        BarToken
        Identifier: ' MultiLine'
    EnumMember
      Identifier: '
    EnumMembers'
      BinaryExpression
        BinaryExpression
          Identifier: ' CommaDelimited'
          BarToken
          Identifier: ' Indented'
        BarToken
        Identifier: ' MultiLine'
    EnumMember
      Identifier: '
    CaseBlockClauses'
      BinaryExpression
        Identifier: ' Indented'
        BarToken
        Identifier: ' MultiLine'
    EnumMember
      Identifier: '
    NamedImportsOrExportsElements'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              BinaryExpression
                Identifier: ' CommaDelimited'
                BarToken
                Identifier: ' SpaceBetweenSiblings'
              BarToken
              Identifier: ' AllowTrailingComma'
            BarToken
            Identifier: ' SingleLine'
          BarToken
          Identifier: ' SpaceBetweenBraces'
        BarToken
        Identifier: ' NoSpaceIfEmpty'
    EnumMember
      Identifier: '
    JsxElementOrFragmentChildren'
      BinaryExpression
        Identifier: ' SingleLine'
        BarToken
        Identifier: ' NoInterveningComments'
    EnumMember
      Identifier: '
    JsxElementAttributes'
      BinaryExpression
        BinaryExpression
          Identifier: ' SingleLine'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' NoInterveningComments'
    EnumMember
      Identifier: '
    CaseOrDefaultClauseStatements'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' Indented'
            BarToken
            Identifier: ' MultiLine'
          BarToken
          Identifier: ' NoTrailingNewLine'
        BarToken
        Identifier: ' OptionalIfEmpty'
    EnumMember
      Identifier: '
    HeritageClauseTypes'
      BinaryExpression
        BinaryExpression
          Identifier: ' CommaDelimited'
          BarToken
          Identifier: ' SpaceBetweenSiblings'
        BarToken
        Identifier: ' SingleLine'
    EnumMember
      Identifier: '
    SourceFileStatements'
      BinaryExpression
        Identifier: ' MultiLine'
        BarToken
        Identifier: ' NoTrailingNewLine'
    EnumMember
      Identifier: '
    Decorators'
      BinaryExpression
        BinaryExpression
          Identifier: ' MultiLine'
          BarToken
          Identifier: ' Optional'
        BarToken
        Identifier: ' SpaceAfterList'
    EnumMember
      Identifier: '
    TypeArguments'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' CommaDelimited'
              BarToken
              Identifier: ' SpaceBetweenSiblings'
            BarToken
            Identifier: ' SingleLine'
          BarToken
          Identifier: ' AngleBrackets'
        BarToken
        Identifier: ' Optional'
    EnumMember
      Identifier: '
    TypeParameters'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' CommaDelimited'
              BarToken
              Identifier: ' SpaceBetweenSiblings'
            BarToken
            Identifier: ' SingleLine'
          BarToken
          Identifier: ' AngleBrackets'
        BarToken
        Identifier: ' Optional'
    EnumMember
      Identifier: '
    Parameters'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            Identifier: ' CommaDelimited'
            BarToken
            Identifier: ' SpaceBetweenSiblings'
          BarToken
          Identifier: ' SingleLine'
        BarToken
        Identifier: ' Parenthesis'
    EnumMember
      Identifier: '
    IndexSignatureParameters'
      BinaryExpression
        BinaryExpression
          BinaryExpression
            BinaryExpression
              Identifier: ' CommaDelimited'
              BarToken
              Identifier: ' SpaceBetweenSiblings'
            BarToken
            Identifier: ' SingleLine'
          BarToken
          Identifier: ' Indented'
        BarToken
        Identifier: ' SquareBrackets'
    EnumMember
      Identifier: '
    JSDocComment'
      BinaryExpression
        Identifier: ' MultiLine'
        BarToken
        Identifier: ' AsteriskDelimited'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' PragmaKindFlags'
    EnumMember
      Identifier: '
    None'
      NumericLiteral
    EnumMember
      Identifier: '
    /**
     * Triple slash comment of the form
     * /// <pragma-name argname="value" />
     */
    TripleSlashXML'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /**
     * Single line comment of the form
     * // @pragma-name argval1 argval2
     * or
     * /// @pragma-name argval1 argval2
     */
    SingleLine'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    /**
     * Multiline non-jsdoc pragma of the form
     * /* @pragma-name argval1 argval2 * /
     */
    MultiLine'
      BinaryExpression
        NumericLiteral
        LessThanLessThanToken
        NumericLiteral
    EnumMember
      Identifier: '
    All'
      BinaryExpression
        BinaryExpression
          Identifier: ' TripleSlashXML'
          BarToken
          Identifier: ' SingleLine'
        BarToken
        Identifier: ' MultiLine'
    EnumMember
      Identifier: '
    Default'
      Identifier: ' All'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PragmaArgumentSpecification'
    TypeParameter
      Identifier: 'TName'
      StringKeyword
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' TName'
    PropertySignature
      Identifier: ' // Determines the name of the key in the resulting parsed type, type parameter to cause literal type inference
    optional'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    captureSpan'
      QuestionToken
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PragmaDefinition'
    TypeParameter
      Identifier: 'T1'
      StringKeyword
      StringKeyword
    TypeParameter
      Identifier: ' T2'
      StringKeyword
      StringKeyword
    TypeParameter
      Identifier: ' T3'
      StringKeyword
      StringKeyword
    TypeParameter
      Identifier: ' T4'
      StringKeyword
      StringKeyword
    PropertySignature
      Identifier: '
    args'
      QuestionToken
      UnionType
        TypeOperator
          TupleType
            TypeReference
              Identifier: 'PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T1'
        TypeOperator
          TupleType
            TypeReference
              Identifier: 'PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T1'
            TypeReference
              Identifier: ' PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T2'
        TypeOperator
          TupleType
            TypeReference
              Identifier: 'PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T1'
            TypeReference
              Identifier: ' PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T2'
            TypeReference
              Identifier: ' PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T3'
        TypeOperator
          TupleType
            TypeReference
              Identifier: 'PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T1'
            TypeReference
              Identifier: ' PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T2'
            TypeReference
              Identifier: ' PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T3'
            TypeReference
              Identifier: ' PragmaArgumentSpecification'
              TypeReference
                Identifier: 'T4'
    PropertySignature
      Identifier: '
    // If not present, defaults to PragmaKindFlags.Default
    kind'
      QuestionToken
      TypeReference
        Identifier: ' PragmaKindFlags'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' commentPragmas'
        TypeReference
          Identifier: ' ConcretePragmaSpecs'
        AsExpression
          ObjectLiteralExpression
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        args'
                  ArrayLiteralExpression
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                      PropertyAssignment
                        Identifier: ' optional'
                        TrueKeyword
                      PropertyAssignment
                        Identifier: ' captureSpan'
                        TrueKeyword
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                      PropertyAssignment
                        Identifier: ' optional'
                        TrueKeyword
                      PropertyAssignment
                        Identifier: ' captureSpan'
                        TrueKeyword
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                      PropertyAssignment
                        Identifier: ' optional'
                        TrueKeyword
                      PropertyAssignment
                        Identifier: ' captureSpan'
                        TrueKeyword
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                      PropertyAssignment
                        Identifier: ' optional'
                        TrueKeyword
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                      PropertyAssignment
                        Identifier: ' optional'
                        TrueKeyword
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                      PropertyAssignment
                        Identifier: ' optional'
                        TrueKeyword
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'TripleSlashXML'
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        args'
                  ArrayLiteralExpression
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                      PropertyAssignment
                        Identifier: ' optional'
                        TrueKeyword
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'TripleSlashXML'
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        args'
                  ArrayLiteralExpression
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'TripleSlashXML'
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'SingleLine'
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'SingleLine'
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        args'
                  ArrayLiteralExpression
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'MultiLine'
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        args'
                  ArrayLiteralExpression
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'MultiLine'
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        args'
                  ArrayLiteralExpression
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'MultiLine'
            PropertyAssignment
              StringLiteral
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: '
        args'
                  ArrayLiteralExpression
                    ObjectLiteralExpression
                      PropertyAssignment
                        Identifier: ' name'
                        StringLiteral
                PropertyAssignment
                  Identifier: '
        kind'
                  PropertyAccessExpression
                    Identifier: ' PragmaKindFlags'
                    Identifier: 'MultiLine'
          TypeReference
            Identifier: ' const'
  EnumDeclaration
    ExportKeyword
    ConstKeyword
    Identifier: ' JSDocParsingMode'
    EnumMember
      Identifier: '
    /**
     * Always parse JSDoc comments and include them in the AST.
     *
     * This is the default if no mode is provided.
     */
    ParseAll'
    EnumMember
      Identifier: '
    /**
     * Never parse JSDoc comments, mo matter the file type.
     */
    ParseNone'
    EnumMember
      Identifier: '
    /**
     * Parse only JSDoc comments which are needed to provide correct type errors.
     *
     * This will always parse JSDoc in non-TS files, but only parse JSDoc comments
     * containing `@see` and `@link` in TS files.
     */
    ParseForTypeErrors'
    EnumMember
      Identifier: '
    /**
     * Parse only JSDoc comments which are needed to provide correct type info.
     *
     * This will always parse JSDoc in non-TS files, but never in TS files.
     *
     * Note: Do not use this mode if you require accurate type errors; use {@link ParseForTypeErrors} instead.
     */
    ParseForTypeInfo'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PragmaArgTypeMaybeCapture'
    TypeParameter
      Identifier: 'TDesc'
    ConditionalType
      TypeReference
        Identifier: ' TDesc'
      TypeLiteral
        PropertySignature
          Identifier: ' captureSpan'
          LiteralType
            TrueKeyword
      TypeLiteral
        PropertySignature
          Identifier: ' value'
          StringKeyword
        PropertySignature
          Identifier: ' pos'
          NumberKeyword
        PropertySignature
          Identifier: ' end'
          NumberKeyword
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PragmaArgTypeOptional'
    TypeParameter
      Identifier: 'TDesc'
    TypeParameter
      Identifier: ' TName'
      StringKeyword
    ConditionalType
      TypeReference
        Identifier: ' TDesc'
      TypeLiteral
        PropertySignature
          Identifier: ' optional'
          LiteralType
            TrueKeyword
      MappedType
        TypeParameter
          Identifier: 'K'
          TypeReference
            Identifier: ' TName'
        QuestionToken
        TypeReference
          Identifier: ' PragmaArgTypeMaybeCapture'
          TypeReference
            Identifier: 'TDesc'
      MappedType
        TypeParameter
          Identifier: 'K'
          TypeReference
            Identifier: ' TName'
        TypeReference
          Identifier: ' PragmaArgTypeMaybeCapture'
          TypeReference
            Identifier: 'TDesc'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' UnionToIntersection'
    TypeParameter
      Identifier: 'U'
    ConditionalType
      ParenthesizedType
        ConditionalType
          TypeReference
            Identifier: 'U'
          AnyKeyword
          FunctionType
            Parameter
              Identifier: 'k'
              TypeReference
                Identifier: ' U'
            VoidKeyword
          NeverKeyword
      ParenthesizedType
        FunctionType
          Parameter
            Identifier: 'k'
            InferType
              TypeParameter
                Identifier: ' I'
          VoidKeyword
      TypeReference
        Identifier: ' I'
      NeverKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ArgumentDefinitionToFieldUnion'
    TypeParameter
      Identifier: 'T'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' PragmaArgumentSpecification'
            AnyKeyword
    IndexedAccessType
      MappedType
        TypeParameter
          Identifier: 'K'
          TypeOperator
            TypeReference
              Identifier: ' T'
        TypeReference
          Identifier: ' PragmaArgTypeOptional'
          IndexedAccessType
            TypeReference
              Identifier: 'T'
            TypeReference
              Identifier: 'K'
          ConditionalType
            IndexedAccessType
              TypeReference
                Identifier: ' T'
              TypeReference
                Identifier: 'K'
            TypeLiteral
              PropertySignature
                Identifier: ' name'
                InferType
                  TypeParameter
                    Identifier: ' TName'
            ConditionalType
              TypeReference
                Identifier: ' TName'
              StringKeyword
              TypeReference
                Identifier: ' TName'
              NeverKeyword
            NeverKeyword
      TypeReference
        Identifier: 'Extract'
        TypeOperator
          TypeReference
            Identifier: ' T'
        NumberKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PragmaArgumentType'
    TypeParameter
      Identifier: 'KPrag'
      TypeOperator
        TypeReference
          Identifier: ' ConcretePragmaSpecs'
    ConditionalType
      IndexedAccessType
        TypeReference
          Identifier: ' ConcretePragmaSpecs'
        TypeReference
          Identifier: 'KPrag'
      TypeLiteral
        PropertySignature
          Identifier: ' args'
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' PragmaArgumentSpecification'
                AnyKeyword
      TypeReference
        Identifier: ' UnionToIntersection'
        TypeReference
          Identifier: 'ArgumentDefinitionToFieldUnion'
          IndexedAccessType
            IndexedAccessType
              TypeReference
                Identifier: 'ConcretePragmaSpecs'
              TypeReference
                Identifier: 'KPrag'
            LiteralType
              StringLiteral
      NeverKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ConcretePragmaSpecs'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' args'
          TypeOperator
            TupleType
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' optional'
                  LiteralType
                    TrueKeyword
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' captureSpan'
                  LiteralType
                    TrueKeyword
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' optional'
                  LiteralType
                    TrueKeyword
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' captureSpan'
                  LiteralType
                    TrueKeyword
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' optional'
                  LiteralType
                    TrueKeyword
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' captureSpan'
                  LiteralType
                    TrueKeyword
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' optional'
                  LiteralType
                    TrueKeyword
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' optional'
                  LiteralType
                    TrueKeyword
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' optional'
                  LiteralType
                    TrueKeyword
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'TripleSlashXML'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' args'
          TypeOperator
            TupleType
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' optional'
                  LiteralType
                    TrueKeyword
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'TripleSlashXML'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' args'
          TypeOperator
            TupleType
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'TripleSlashXML'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'SingleLine'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'SingleLine'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' args'
          TypeOperator
            TupleType
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'MultiLine'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' args'
          TypeOperator
            TupleType
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'MultiLine'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' args'
          TypeOperator
            TupleType
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'MultiLine'
    PropertySignature
      ReadonlyKeyword
      StringLiteral
      TypeLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' args'
          TypeOperator
            TupleType
              TypeLiteral
                PropertySignature
                  ReadonlyKeyword
                  Identifier: ' name'
                  LiteralType
                    StringLiteral
        PropertySignature
          ReadonlyKeyword
          Identifier: ' kind'
          TypeReference
            QualifiedName
              Identifier: ' PragmaKindFlags'
              Identifier: 'MultiLine'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PragmaPseudoMap'
    MappedType
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' ConcretePragmaSpecs'
      TypeLiteral
        PropertySignature
          Identifier: ' arguments'
          TypeReference
            Identifier: ' PragmaArgumentType'
            TypeReference
              Identifier: 'K'
        PropertySignature
          Identifier: ' range'
          TypeReference
            Identifier: ' CommentRange'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PragmaPseudoMapEntry'
    IndexedAccessType
      MappedType
        TypeParameter
          Identifier: 'K'
          TypeOperator
            TypeReference
              Identifier: ' PragmaPseudoMap'
        TypeLiteral
          PropertySignature
            Identifier: ' name'
            TypeReference
              Identifier: ' K'
          PropertySignature
            Identifier: ' args'
            IndexedAccessType
              TypeReference
                Identifier: ' PragmaPseudoMap'
              TypeReference
                Identifier: 'K'
      TypeOperator
        TypeReference
          Identifier: ' PragmaPseudoMap'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ReadonlyPragmaMap'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ReadonlyMap'
        StringKeyword
        UnionType
          IndexedAccessType
            TypeReference
              Identifier: ' PragmaPseudoMap'
            TypeOperator
              TypeReference
                Identifier: ' PragmaPseudoMap'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: ' PragmaPseudoMap'
              TypeOperator
                TypeReference
                  Identifier: ' PragmaPseudoMap'
    MethodSignature
      Identifier: '
    get'
      TypeParameter
        Identifier: 'TKey'
        TypeOperator
          TypeReference
            Identifier: ' PragmaPseudoMap'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' TKey'
      UnionType
        IndexedAccessType
          TypeReference
            Identifier: ' PragmaPseudoMap'
          TypeReference
            Identifier: 'TKey'
        ArrayType
          IndexedAccessType
            TypeReference
              Identifier: ' PragmaPseudoMap'
            TypeReference
              Identifier: 'TKey'
    MethodSignature
      Identifier: '
    forEach'
      Parameter
        Identifier: 'action'
        FunctionType
          TypeParameter
            Identifier: 'TKey'
            TypeOperator
              TypeReference
                Identifier: ' PragmaPseudoMap'
          Parameter
            Identifier: 'value'
            UnionType
              IndexedAccessType
                TypeReference
                  Identifier: ' PragmaPseudoMap'
                TypeReference
                  Identifier: 'TKey'
              ArrayType
                IndexedAccessType
                  TypeReference
                    Identifier: ' PragmaPseudoMap'
                  TypeReference
                    Identifier: 'TKey'
          Parameter
            Identifier: ' key'
            TypeReference
              Identifier: ' TKey'
          Parameter
            Identifier: ' map'
            TypeReference
              Identifier: ' ReadonlyPragmaMap'
          VoidKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PragmaMap'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Map'
        StringKeyword
        UnionType
          IndexedAccessType
            TypeReference
              Identifier: ' PragmaPseudoMap'
            TypeOperator
              TypeReference
                Identifier: ' PragmaPseudoMap'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: ' PragmaPseudoMap'
              TypeOperator
                TypeReference
                  Identifier: ' PragmaPseudoMap'
      ExpressionWithTypeArguments
        Identifier: ' ReadonlyPragmaMap'
    MethodSignature
      Identifier: '
    set'
      TypeParameter
        Identifier: 'TKey'
        TypeOperator
          TypeReference
            Identifier: ' PragmaPseudoMap'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' TKey'
      Parameter
        Identifier: ' value'
        UnionType
          IndexedAccessType
            TypeReference
              Identifier: ' PragmaPseudoMap'
            TypeReference
              Identifier: 'TKey'
          ArrayType
            IndexedAccessType
              TypeReference
                Identifier: ' PragmaPseudoMap'
              TypeReference
                Identifier: 'TKey'
      ThisType
    MethodSignature
      Identifier: '
    get'
      TypeParameter
        Identifier: 'TKey'
        TypeOperator
          TypeReference
            Identifier: ' PragmaPseudoMap'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' TKey'
      UnionType
        IndexedAccessType
          TypeReference
            Identifier: ' PragmaPseudoMap'
          TypeReference
            Identifier: 'TKey'
        ArrayType
          IndexedAccessType
            TypeReference
              Identifier: ' PragmaPseudoMap'
            TypeReference
              Identifier: 'TKey'
    MethodSignature
      Identifier: '
    forEach'
      Parameter
        Identifier: 'action'
        FunctionType
          TypeParameter
            Identifier: 'TKey'
            TypeOperator
              TypeReference
                Identifier: ' PragmaPseudoMap'
          Parameter
            Identifier: 'value'
            UnionType
              IndexedAccessType
                TypeReference
                  Identifier: ' PragmaPseudoMap'
                TypeReference
                  Identifier: 'TKey'
              ArrayType
                IndexedAccessType
                  TypeReference
                    Identifier: ' PragmaPseudoMap'
                  TypeReference
                    Identifier: 'TKey'
          Parameter
            Identifier: ' key'
            TypeReference
              Identifier: ' TKey'
          Parameter
            Identifier: ' map'
            TypeReference
              Identifier: ' PragmaMap'
          VoidKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' CommentDirectivesMap'
    MethodSignature
      Identifier: '
    getUnusedExpectations'
      ArrayType
        TypeReference
          Identifier: ' CommentDirective'
    MethodSignature
      Identifier: '
    markUsed'
      Parameter
        Identifier: 'matchedLine'
        NumberKeyword
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' UserPreferences'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' disableSuggestions'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' quotePreference'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeCompletionsForModuleExports'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeCompletionsForImportStatements'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeCompletionsWithSnippetText'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeAutomaticOptionalChainCompletions'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeCompletionsWithInsertText'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeCompletionsWithClassMemberSnippets'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeCompletionsWithObjectLiteralMethodSnippets'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' useLabelDetailsInCompletionEntries'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' allowIncompleteCompletions'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' importModuleSpecifierPreference'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' importModuleSpecifierEnding'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' allowTextChangesInNewFiles'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' providePrefixAndSuffixTextForRename'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includePackageJsonAutoImports'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' provideRefactorNotApplicableReason'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' jsxAttributeCompletionStyle'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeInlayParameterNameHints'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeInlayParameterNameHintsWhenArgumentMatchesName'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeInlayFunctionParameterTypeHints'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeInlayVariableTypeHints'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeInlayVariableTypeHintsWhenTypeMatchesName'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeInlayPropertyDeclarationTypeHints'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeInlayFunctionLikeReturnTypeHints'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' includeInlayEnumMemberValueHints'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' interactiveInlayHints'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' allowRenameOfImportPath'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' autoImportFileExcludePatterns'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' autoImportSpecifierExcludeRegexes'
      QuestionToken
      ArrayType
        StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' preferTypeOnlyAutoImports'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' organizeImportsIgnoreCase'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' organizeImportsCollation'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      ReadonlyKeyword
      Identifier: ' organizeImportsLocale'
      QuestionToken
      StringKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' organizeImportsNumericCollation'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' organizeImportsAccentCollation'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' organizeImportsCaseFirst'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          FalseKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' organizeImportsTypeOrder'
      QuestionToken
      TypeReference
        Identifier: ' OrganizeImportsTypeOrder'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' excludeLibrarySymbolsInNavTo'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' lazyConfiguredProjectsFromExternalProject'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' displayPartsForJSDoc'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' generateReturnInDocTemplate'
      QuestionToken
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' disableLineTextInReferences'
      QuestionToken
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' OrganizeImportsTypeOrder'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PseudoBigInt'
    PropertySignature
      Identifier: '
    negative'
      BooleanKeyword
    PropertySignature
      Identifier: '
    base10Value'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Queue'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    enqueue'
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      VoidKeyword
    MethodSignature
      Identifier: '
    dequeue'
      TypeReference
        Identifier: ' T'
    MethodSignature
      Identifier: '
    isEmpty'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EvaluationResolver'
    MethodSignature
      Identifier: '
    evaluateEntityNameExpression'
      Parameter
        Identifier: 'expr'
        TypeReference
          Identifier: ' EntityNameExpression'
      Parameter
        Identifier: ' location'
        UnionType
          TypeReference
            Identifier: ' Declaration'
          UndefinedKeyword
      TypeReference
        Identifier: ' EvaluatorResult'
    MethodSignature
      Identifier: '
    evaluateElementAccessExpression'
      Parameter
        Identifier: 'expr'
        TypeReference
          Identifier: ' ElementAccessExpression'
      Parameter
        Identifier: ' location'
        UnionType
          TypeReference
            Identifier: ' Declaration'
          UndefinedKeyword
      TypeReference
        Identifier: ' EvaluatorResult'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HasInferredType'
    UnionType
      TypeReference
        Identifier: ' PropertyAssignment'
      TypeReference
        Identifier: ' PropertyAccessExpression'
      TypeReference
        Identifier: ' BinaryExpression'
      TypeReference
        Identifier: ' ElementAccessExpression'
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' ParameterDeclaration'
      TypeReference
        Identifier: ' BindingElement'
      TypeReference
        Identifier: ' PropertyDeclaration'
      TypeReference
        Identifier: ' PropertySignature'
      TypeReference
        Identifier: ' ExportAssignment'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SyntacticTypeNodeBuilderContext'
    PropertySignature
      Identifier: '
    tracker'
      TypeReference
        Identifier: ' Required'
        TypeReference
          Identifier: 'Pick'
          TypeReference
            Identifier: 'SymbolTracker'
          LiteralType
            StringLiteral
    PropertySignature
      Identifier: '
    enclosingDeclaration'
      UnionType
        TypeReference
          Identifier: ' Node'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SyntacticTypeNodeBuilderResolver'
    MethodSignature
      Identifier: '
    isUndefinedIdentifierExpression'
      Parameter
        Identifier: 'name'
        TypeReference
          Identifier: ' Identifier'
      BooleanKeyword
    MethodSignature
      Identifier: '
    isExpandoFunctionDeclaration'
      Parameter
        Identifier: 'name'
        UnionType
          TypeReference
            Identifier: ' FunctionDeclaration'
          TypeReference
            Identifier: ' VariableDeclaration'
      BooleanKeyword
    MethodSignature
      Identifier: '
    getAllAccessorDeclarations'
      Parameter
        Identifier: 'declaration'
        TypeReference
          Identifier: ' AccessorDeclaration'
      TypeReference
        Identifier: ' AllAccessorDeclarations'
    MethodSignature
      Identifier: '
    isEntityNameVisible'
      Parameter
        Identifier: 'entityName'
        TypeReference
          Identifier: ' EntityNameOrEntityNameExpression'
      Parameter
        Identifier: ' enclosingDeclaration'
        TypeReference
          Identifier: ' Node'
      Parameter
        Identifier: ' shouldComputeAliasToMakeVisible'
        QuestionToken
        BooleanKeyword
      TypeReference
        Identifier: ' SymbolVisibilityResult'
    MethodSignature
      Identifier: '
    requiresAddingImplicitUndefined'
      Parameter
        Identifier: 'parameter'
        UnionType
          TypeReference
            Identifier: ' ParameterDeclaration'
          TypeReference
            Identifier: ' JSDocParameterTag'
      Parameter
        Identifier: ' enclosingDeclaration'
        UnionType
          TypeReference
            Identifier: ' Node'
          UndefinedKeyword
      BooleanKeyword
    MethodSignature
      Identifier: '
    isDefinitelyReferenceToGlobalSymbolObject'
      Parameter
        Identifier: 'node'
        TypeReference
          Identifier: ' Node'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SyntacticNodeBuilder'
    PropertySignature
      Identifier: '
    typeFromExpression'
      FunctionType
        Parameter
          Identifier: 'node'
          TypeReference
            Identifier: ' Expression'
        Parameter
          Identifier: ' context'
          TypeReference
            Identifier: ' SyntacticTypeNodeBuilderContext'
        Parameter
          Identifier: ' isConstContext'
          QuestionToken
          BooleanKeyword
        Parameter
          Identifier: ' requiresAddingUndefined'
          QuestionToken
          BooleanKeyword
        Parameter
          Identifier: ' preserveLiterals'
          QuestionToken
          BooleanKeyword
        UnionType
          BooleanKeyword
          UndefinedKeyword
    PropertySignature
      Identifier: '
    serializeTypeOfDeclaration'
      FunctionType
        Parameter
          Identifier: 'node'
          TypeReference
            Identifier: ' HasInferredType'
        Parameter
          Identifier: ' context'
          TypeReference
            Identifier: ' SyntacticTypeNodeBuilderContext'
        UnionType
          BooleanKeyword
          UndefinedKeyword
    PropertySignature
      Identifier: '
    serializeReturnTypeForSignature'
      FunctionType
        Parameter
          Identifier: 'node'
          UnionType
            TypeReference
              Identifier: ' SignatureDeclaration'
            TypeReference
              Identifier: ' JSDocSignature'
        Parameter
          Identifier: ' context'
          TypeReference
            Identifier: ' SyntacticTypeNodeBuilderContext'
        UnionType
          BooleanKeyword
          UndefinedKeyword
    PropertySignature
      Identifier: '
    serializeTypeOfExpression'
      FunctionType
        Parameter
          Identifier: 'expr'
          TypeReference
            Identifier: ' Expression'
        Parameter
          Identifier: ' context'
          TypeReference
            Identifier: ' SyntacticTypeNodeBuilderContext'
        Parameter
          Identifier: ' addUndefined'
          QuestionToken
          BooleanKeyword
        Parameter
          Identifier: ' preserveLiterals'
          QuestionToken
          BooleanKeyword
        BooleanKeyword
