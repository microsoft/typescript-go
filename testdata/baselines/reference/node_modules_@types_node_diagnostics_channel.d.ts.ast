SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' AsyncLocalStorage'
        StringLiteral
      FunctionDeclaration
        Identifier: ' hasSubscribers'
        Parameter
          Identifier: 'name'
          UnionType
            StringKeyword
            SymbolKeyword
        BooleanKeyword
      FunctionDeclaration
        Identifier: ' channel'
        Parameter
          Identifier: 'name'
          UnionType
            StringKeyword
            SymbolKeyword
        TypeReference
          Identifier: ' Channel'
      TypeAliasDeclaration
        Identifier: ' ChannelListener'
        FunctionType
          Parameter
            Identifier: 'message'
            UnknownKeyword
          Parameter
            Identifier: ' name'
            UnionType
              StringKeyword
              SymbolKeyword
          VoidKeyword
      FunctionDeclaration
        Identifier: ' subscribe'
        Parameter
          Identifier: 'name'
          UnionType
            StringKeyword
            SymbolKeyword
        Parameter
          Identifier: ' onMessage'
          TypeReference
            Identifier: ' ChannelListener'
        VoidKeyword
      FunctionDeclaration
        Identifier: ' unsubscribe'
        Parameter
          Identifier: 'name'
          UnionType
            StringKeyword
            SymbolKeyword
        Parameter
          Identifier: ' onMessage'
          TypeReference
            Identifier: ' ChannelListener'
        BooleanKeyword
      FunctionDeclaration
        Identifier: ' tracingChannel'
        TypeParameter
          Identifier: '
        StoreType'
          UnknownKeyword
        TypeParameter
          Identifier: '
        ContextType'
          ObjectKeyword
          ConditionalType
            TypeReference
              Identifier: ' StoreType'
            ObjectKeyword
            TypeReference
              Identifier: ' StoreType'
            ObjectKeyword
        Parameter
          Identifier: '
        nameOrChannels'
          UnionType
            StringKeyword
            TypeReference
              Identifier: ' TracingChannelCollection'
              TypeReference
                Identifier: 'StoreType'
              TypeReference
                Identifier: ' ContextType'
        TypeReference
          Identifier: ' TracingChannel'
          TypeReference
            Identifier: 'StoreType'
          TypeReference
            Identifier: ' ContextType'
      ClassDeclaration
        Identifier: ' Channel'
        TypeParameter
          Identifier: 'StoreType'
          UnknownKeyword
        TypeParameter
          Identifier: ' ContextType'
          TypeReference
            Identifier: ' StoreType'
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' name'
          UnionType
            StringKeyword
            SymbolKeyword
        PropertyDeclaration
          ReadonlyKeyword
          Identifier: ' hasSubscribers'
          BooleanKeyword
        Constructor
          PrivateKeyword
          Parameter
            Identifier: 'name'
            UnionType
              StringKeyword
              SymbolKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Publish a message to any subscribers to the channel. This will trigger
         * message handlers synchronously so they will execute within the same context.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         *
         * const channel = diagnostics_channel.channel('my-channel');
         *
         * channel.publish({
         *   some: 'message',
         * });
         * ```
         * @since v15.1.0, v14.17.0
         * @param message The message to send to the channel subscribers
         */
        publish'
          Parameter
            Identifier: 'message'
            UnknownKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Register a message handler to subscribe to this channel. This message handler
         * will be run synchronously whenever a message is published to the channel. Any
         * errors thrown in the message handler will trigger an `'uncaughtException'`.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         *
         * const channel = diagnostics_channel.channel('my-channel');
         *
         * channel.subscribe((message, name) => {
         *   // Received data
         * });
         * ```
         * @since v15.1.0, v14.17.0
         * @deprecated Since v18.7.0,v16.17.0 - Use {@link subscribe(name, onMessage)}
         * @param onMessage The handler to receive channel messages
         */
        subscribe'
          Parameter
            Identifier: 'onMessage'
            TypeReference
              Identifier: ' ChannelListener'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Remove a message handler previously registered to this channel with `channel.subscribe(onMessage)`.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         *
         * const channel = diagnostics_channel.channel('my-channel');
         *
         * function onMessage(message, name) {
         *   // Received data
         * }
         *
         * channel.subscribe(onMessage);
         *
         * channel.unsubscribe(onMessage);
         * ```
         * @since v15.1.0, v14.17.0
         * @deprecated Since v18.7.0,v16.17.0 - Use {@link unsubscribe(name, onMessage)}
         * @param onMessage The previous subscribed handler to remove
         * @return `true` if the handler was found, `false` otherwise.
         */
        unsubscribe'
          Parameter
            Identifier: 'onMessage'
            TypeReference
              Identifier: ' ChannelListener'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * When `channel.runStores(context, ...)` is called, the given context data
         * will be applied to any store bound to the channel. If the store has already been
         * bound the previous `transform` function will be replaced with the new one.
         * The `transform` function may be omitted to set the given context data as the
         * context directly.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         * import { AsyncLocalStorage } from 'node:async_hooks';
         *
         * const store = new AsyncLocalStorage();
         *
         * const channel = diagnostics_channel.channel('my-channel');
         *
         * channel.bindStore(store, (data) => {
         *   return { data };
         * });
         * ```
         * @since v19.9.0
         * @experimental
         * @param store The store to which to bind the context data
         * @param transform Transform context data before setting the store context
         */
        bindStore'
          Parameter
            Identifier: 'store'
            TypeReference
              Identifier: ' AsyncLocalStorage'
              TypeReference
                Identifier: 'StoreType'
          Parameter
            Identifier: ' transform'
            QuestionToken
            FunctionType
              Parameter
                Identifier: 'context'
                TypeReference
                  Identifier: ' ContextType'
              TypeReference
                Identifier: ' StoreType'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Remove a message handler previously registered to this channel with `channel.bindStore(store)`.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         * import { AsyncLocalStorage } from 'node:async_hooks';
         *
         * const store = new AsyncLocalStorage();
         *
         * const channel = diagnostics_channel.channel('my-channel');
         *
         * channel.bindStore(store);
         * channel.unbindStore(store);
         * ```
         * @since v19.9.0
         * @experimental
         * @param store The store to unbind from the channel.
         * @return `true` if the store was found, `false` otherwise.
         */
        unbindStore'
          Parameter
            Identifier: 'store'
            AnyKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Applies the given data to any AsyncLocalStorage instances bound to the channel
         * for the duration of the given function, then publishes to the channel within
         * the scope of that data is applied to the stores.
         *
         * If a transform function was given to `channel.bindStore(store)` it will be
         * applied to transform the message data before it becomes the context value for
         * the store. The prior storage context is accessible from within the transform
         * function in cases where context linking is required.
         *
         * The context applied to the store should be accessible in any async code which
         * continues from execution which began during the given function, however
         * there are some situations in which `context loss` may occur.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         * import { AsyncLocalStorage } from 'node:async_hooks';
         *
         * const store = new AsyncLocalStorage();
         *
         * const channel = diagnostics_channel.channel('my-channel');
         *
         * channel.bindStore(store, (message) => {
         *   const parent = store.getStore();
         *   return new Span(message, parent);
         * });
         * channel.runStores({ some: 'message' }, () => {
         *   store.getStore(); // Span({ some: 'message' })
         * });
         * ```
         * @since v19.9.0
         * @experimental
         * @param context Message to send to subscribers and bind to stores
         * @param fn Handler to run within the entered storage context
         * @param thisArg The receiver to be used for the function call.
         * @param args Optional arguments to pass to the function.
         */
        runStores'
          VoidKeyword
      InterfaceDeclaration
        Identifier: ' TracingChannelSubscribers'
        TypeParameter
          Identifier: 'ContextType'
          ObjectKeyword
        PropertySignature
          Identifier: '
        start'
          FunctionType
            Parameter
              Identifier: 'message'
              TypeReference
                Identifier: ' ContextType'
            VoidKeyword
        PropertySignature
          Identifier: '
        end'
          FunctionType
            Parameter
              Identifier: '
            message'
              IntersectionType
                TypeReference
                  Identifier: ' ContextType'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                error'
                    QuestionToken
                    UnknownKeyword
                  PropertySignature
                    Identifier: '
                result'
                    QuestionToken
                    UnknownKeyword
            VoidKeyword
        PropertySignature
          Identifier: '
        asyncStart'
          FunctionType
            Parameter
              Identifier: '
            message'
              IntersectionType
                TypeReference
                  Identifier: ' ContextType'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                error'
                    QuestionToken
                    UnknownKeyword
                  PropertySignature
                    Identifier: '
                result'
                    QuestionToken
                    UnknownKeyword
            VoidKeyword
        PropertySignature
          Identifier: '
        asyncEnd'
          FunctionType
            Parameter
              Identifier: '
            message'
              IntersectionType
                TypeReference
                  Identifier: ' ContextType'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                error'
                    QuestionToken
                    UnknownKeyword
                  PropertySignature
                    Identifier: '
                result'
                    QuestionToken
                    UnknownKeyword
            VoidKeyword
        PropertySignature
          Identifier: '
        error'
          FunctionType
            Parameter
              Identifier: '
            message'
              IntersectionType
                TypeReference
                  Identifier: ' ContextType'
                TypeLiteral
                  PropertySignature
                    Identifier: '
                error'
                    UnknownKeyword
            VoidKeyword
      InterfaceDeclaration
        Identifier: ' TracingChannelCollection'
        TypeParameter
          Identifier: 'StoreType'
          UnknownKeyword
        TypeParameter
          Identifier: ' ContextType'
          TypeReference
            Identifier: ' StoreType'
        PropertySignature
          Identifier: '
        start'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        PropertySignature
          Identifier: '
        end'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        PropertySignature
          Identifier: '
        asyncStart'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        PropertySignature
          Identifier: '
        asyncEnd'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        PropertySignature
          Identifier: '
        error'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
      ClassDeclaration
        Identifier: ' TracingChannel'
        TypeParameter
          Identifier: 'StoreType'
          UnknownKeyword
        TypeParameter
          Identifier: ' ContextType'
          ObjectKeyword
          TypeLiteral
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' TracingChannelCollection'
        PropertyDeclaration
          Identifier: '
        start'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        PropertyDeclaration
          Identifier: '
        end'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        PropertyDeclaration
          Identifier: '
        asyncStart'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        PropertyDeclaration
          Identifier: '
        asyncEnd'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        PropertyDeclaration
          Identifier: '
        error'
          TypeReference
            Identifier: ' Channel'
            TypeReference
              Identifier: 'StoreType'
            TypeReference
              Identifier: ' ContextType'
        MethodDeclaration
          Identifier: '
        /**
         * Helper to subscribe a collection of functions to the corresponding channels.
         * This is the same as calling `channel.subscribe(onMessage)` on each channel
         * individually.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         *
         * const channels = diagnostics_channel.tracingChannel('my-channel');
         *
         * channels.subscribe({
         *   start(message) {
         *     // Handle start message
         *   },
         *   end(message) {
         *     // Handle end message
         *   },
         *   asyncStart(message) {
         *     // Handle asyncStart message
         *   },
         *   asyncEnd(message) {
         *     // Handle asyncEnd message
         *   },
         *   error(message) {
         *     // Handle error message
         *   },
         * });
         * ```
         * @since v19.9.0
         * @experimental
         * @param subscribers Set of `TracingChannel Channels` subscribers
         */
        subscribe'
          Parameter
            Identifier: 'subscribers'
            TypeReference
              Identifier: ' TracingChannelSubscribers'
              TypeReference
                Identifier: 'ContextType'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Helper to unsubscribe a collection of functions from the corresponding channels.
         * This is the same as calling `channel.unsubscribe(onMessage)` on each channel
         * individually.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         *
         * const channels = diagnostics_channel.tracingChannel('my-channel');
         *
         * channels.unsubscribe({
         *   start(message) {
         *     // Handle start message
         *   },
         *   end(message) {
         *     // Handle end message
         *   },
         *   asyncStart(message) {
         *     // Handle asyncStart message
         *   },
         *   asyncEnd(message) {
         *     // Handle asyncEnd message
         *   },
         *   error(message) {
         *     // Handle error message
         *   },
         * });
         * ```
         * @since v19.9.0
         * @experimental
         * @param subscribers Set of `TracingChannel Channels` subscribers
         * @return `true` if all handlers were successfully unsubscribed, and `false` otherwise.
         */
        unsubscribe'
          Parameter
            Identifier: 'subscribers'
            TypeReference
              Identifier: ' TracingChannelSubscribers'
              TypeReference
                Identifier: 'ContextType'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Trace a synchronous function call. This will always produce a `start event` and `end event` around the execution and may produce an `error event` if the given function throws an error.
         * This will run the given function using `channel.runStores(context, ...)` on the `start` channel which ensures all
         * events should have any bound stores set to match this trace context.
         *
         * To ensure only correct trace graphs are formed, events will only be published if subscribers are present prior to starting the trace. Subscriptions
         * which are added after the trace begins will not receive future events from that trace, only future traces will be seen.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         *
         * const channels = diagnostics_channel.tracingChannel('my-channel');
         *
         * channels.traceSync(() => {
         *   // Do something
         * }, {
         *   some: 'thing',
         * });
         * ```
         * @since v19.9.0
         * @experimental
         * @param fn Function to wrap a trace around
         * @param context Shared object to correlate events through
         * @param thisArg The receiver to be used for the function call
         * @param args Optional arguments to pass to the function
         * @return The return value of the given function
         */
        traceSync'
          TypeParameter
            Identifier: 'ThisArg'
            AnyKeyword
          TypeParameter
            Identifier: ' Args'
            ArrayType
              AnyKeyword
            ArrayType
              AnyKeyword
          Parameter
            Identifier: '
            fn'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' ThisArg'
              Parameter
                DotDotDotToken
                Identifier: 'args'
                TypeReference
                  Identifier: ' Args'
              AnyKeyword
          Parameter
            Identifier: '
            context'
            QuestionToken
            TypeReference
              Identifier: ' ContextType'
          Parameter
            Identifier: '
            thisArg'
            QuestionToken
            TypeReference
              Identifier: ' ThisArg'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' Args'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Trace a promise-returning function call. This will always produce a `start event` and `end event` around the synchronous portion of the
         * function execution, and will produce an `asyncStart event` and `asyncEnd event` when a promise continuation is reached. It may also
         * produce an `error event` if the given function throws an error or the
         * returned promise rejects. This will run the given function using `channel.runStores(context, ...)` on the `start` channel which ensures all
         * events should have any bound stores set to match this trace context.
         *
         * To ensure only correct trace graphs are formed, events will only be published if subscribers are present prior to starting the trace. Subscriptions
         * which are added after the trace begins will not receive future events from that trace, only future traces will be seen.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         *
         * const channels = diagnostics_channel.tracingChannel('my-channel');
         *
         * channels.tracePromise(async () => {
         *   // Do something
         * }, {
         *   some: 'thing',
         * });
         * ```
         * @since v19.9.0
         * @experimental
         * @param fn Promise-returning function to wrap a trace around
         * @param context Shared object to correlate trace events through
         * @param thisArg The receiver to be used for the function call
         * @param args Optional arguments to pass to the function
         * @return Chained from promise returned by the given function
         */
        tracePromise'
          TypeParameter
            Identifier: 'ThisArg'
            AnyKeyword
          TypeParameter
            Identifier: ' Args'
            ArrayType
              AnyKeyword
            ArrayType
              AnyKeyword
          Parameter
            Identifier: '
            fn'
            FunctionType
              Parameter
                Identifier: 'this'
                TypeReference
                  Identifier: ' ThisArg'
              Parameter
                DotDotDotToken
                Identifier: 'args'
                TypeReference
                  Identifier: ' Args'
              TypeReference
                Identifier: ' Promise'
                AnyKeyword
          Parameter
            Identifier: '
            context'
            QuestionToken
            TypeReference
              Identifier: ' ContextType'
          Parameter
            Identifier: '
            thisArg'
            QuestionToken
            TypeReference
              Identifier: ' ThisArg'
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' Args'
          VoidKeyword
        MethodDeclaration
          Identifier: '
        /**
         * Trace a callback-receiving function call. This will always produce a `start event` and `end event` around the synchronous portion of the
         * function execution, and will produce a `asyncStart event` and `asyncEnd event` around the callback execution. It may also produce an `error event` if the given function throws an error or
         * the returned
         * promise rejects. This will run the given function using `channel.runStores(context, ...)` on the `start` channel which ensures all
         * events should have any bound stores set to match this trace context.
         *
         * The `position` will be -1 by default to indicate the final argument should
         * be used as the callback.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         *
         * const channels = diagnostics_channel.tracingChannel('my-channel');
         *
         * channels.traceCallback((arg1, callback) => {
         *   // Do something
         *   callback(null, 'result');
         * }, 1, {
         *   some: 'thing',
         * }, thisArg, arg1, callback);
         * ```
         *
         * The callback will also be run with `channel.runStores(context, ...)` which
         * enables context loss recovery in some cases.
         *
         * To ensure only correct trace graphs are formed, events will only be published if subscribers are present prior to starting the trace. Subscriptions
         * which are added after the trace begins will not receive future events from that trace, only future traces will be seen.
         *
         * ```js
         * import diagnostics_channel from 'node:diagnostics_channel';
         * import { AsyncLocalStorage } from 'node:async_hooks';
         *
         * const channels = diagnostics_channel.tracingChannel('my-channel');
         * const myStore = new AsyncLocalStorage();
         *
         * // The start channel sets the initial store data to something
         * // and stores that store data value on the trace context object
         * channels.start.bindStore(myStore, (data) => {
         *   const span = new Span(data);
         *   data.span = span;
         *   return span;
         * });
         *
         * // Then asyncStart can restore from that data it stored previously
         * channels.asyncStart.bindStore(myStore, (data) => {
         *   return data.span;
         * });
         * ```
         * @since v19.9.0
         * @experimental
         * @param fn callback using function to wrap a trace around
         * @param position Zero-indexed argument position of expected callback
         * @param context Shared object to correlate trace events through
         * @param thisArg The receiver to be used for the function call
         * @param args Optional arguments to pass to the function
         * @return The return value of the given function
         */
        traceCallback'
          TypeParameter
            Identifier: 'Fn'
            FunctionType
              Parameter
                Identifier: 'this'
                AnyKeyword
              Parameter
                DotDotDotToken
                Identifier: 'args'
                AnyKeyword
              AnyKeyword
          Parameter
            Identifier: '
            fn'
            TypeReference
              Identifier: ' Fn'
          Parameter
            Identifier: '
            position'
            UnionType
              NumberKeyword
              UndefinedKeyword
          Parameter
            Identifier: '
            context'
            UnionType
              TypeReference
                Identifier: ' ContextType'
              UndefinedKeyword
          Parameter
            Identifier: '
            thisArg'
            AnyKeyword
          Parameter
            DotDotDotToken
            Identifier: 'args'
            TypeReference
              Identifier: ' Parameters'
              TypeReference
                Identifier: 'Fn'
          VoidKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ExportDeclaration
        StringLiteral
