SourceFile
  InterfaceDeclaration
    Identifier: ' Map'
    TypeParameter
      Identifier: 'K'
    TypeParameter
      Identifier: ' V'
    MethodSignature
      Identifier: '
    clear'
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * @returns true if an element in the Map existed and has been removed, or false if the element does not exist.
     */
    delete'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Executes a provided function once per each key/value pair in the Map, in insertion order.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' V'
          Parameter
            Identifier: ' key'
            TypeReference
              Identifier: ' K'
          Parameter
            Identifier: ' map'
            TypeReference
              Identifier: ' Map'
              TypeReference
                Identifier: 'K'
              TypeReference
                Identifier: ' V'
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.
     * @returns Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.
     */
    get'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      UnionType
        TypeReference
          Identifier: ' V'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * @returns boolean indicating whether an element with the specified key exists or not.
     */
    has'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Adds a new element with a specified key and value to the Map. If an element with the same key already exists, the element will be updated.
     */
    set'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' V'
      ThisType
    PropertySignature
      ReadonlyKeyword
      Identifier: ' size'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' MapConstructor'
    ConstructSignature
      TypeReference
        Identifier: ' Map'
        AnyKeyword
        AnyKeyword
    ConstructSignature
      TypeParameter
        Identifier: 'K'
      TypeParameter
        Identifier: ' V'
      Parameter
        Identifier: 'entries'
        QuestionToken
        UnionType
          TypeOperator
            ArrayType
              ParenthesizedType
                TypeOperator
                  TupleType
                    TypeReference
                      Identifier: 'K'
                    TypeReference
                      Identifier: ' V'
          LiteralType
            NullKeyword
      TypeReference
        Identifier: ' Map'
        TypeReference
          Identifier: 'K'
        TypeReference
          Identifier: ' V'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Map'
        AnyKeyword
        AnyKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Map'
        TypeReference
          Identifier: ' MapConstructor'
  InterfaceDeclaration
    Identifier: ' ReadonlyMap'
    TypeParameter
      Identifier: 'K'
    TypeParameter
      Identifier: ' V'
    MethodSignature
      Identifier: '
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' V'
          Parameter
            Identifier: ' key'
            TypeReference
              Identifier: ' K'
          Parameter
            Identifier: ' map'
            TypeReference
              Identifier: ' ReadonlyMap'
              TypeReference
                Identifier: 'K'
              TypeReference
                Identifier: ' V'
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    get'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      UnionType
        TypeReference
          Identifier: ' V'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    has'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' size'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' WeakMap'
    TypeParameter
      Identifier: 'K'
      TypeReference
        Identifier: ' WeakKey'
    TypeParameter
      Identifier: ' V'
    MethodSignature
      Identifier: '
    /**
     * Removes the specified element from the WeakMap.
     * @returns true if the element was successfully removed, or false if it was not present.
     */
    delete'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * @returns a specified element.
     */
    get'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      UnionType
        TypeReference
          Identifier: ' V'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * @returns a boolean indicating whether an element with the specified key exists or not.
     */
    has'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Adds a new element with a specified key and value.
     * @param key Must be an object or symbol.
     */
    set'
      Parameter
        Identifier: 'key'
        TypeReference
          Identifier: ' K'
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' V'
      ThisType
  InterfaceDeclaration
    Identifier: ' WeakMapConstructor'
    ConstructSignature
      TypeParameter
        Identifier: 'K'
        TypeReference
          Identifier: ' WeakKey'
        TypeReference
          Identifier: ' WeakKey'
      TypeParameter
        Identifier: ' V'
        AnyKeyword
      Parameter
        Identifier: 'entries'
        QuestionToken
        UnionType
          TypeOperator
            ArrayType
              ParenthesizedType
                TypeOperator
                  TupleType
                    TypeReference
                      Identifier: 'K'
                    TypeReference
                      Identifier: ' V'
          LiteralType
            NullKeyword
      TypeReference
        Identifier: ' WeakMap'
        TypeReference
          Identifier: 'K'
        TypeReference
          Identifier: ' V'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' WeakMap'
        TypeReference
          Identifier: 'WeakKey'
        AnyKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' WeakMap'
        TypeReference
          Identifier: ' WeakMapConstructor'
  InterfaceDeclaration
    Identifier: ' Set'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    /**
     * Appends a new element with a specified value to the end of the Set.
     */
    add'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      ThisType
    MethodSignature
      Identifier: '

    clear'
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Removes a specified value from the Set.
     * @returns Returns true if an element in the Set existed and has been removed, or false if the element does not exist.
     */
    delete'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Executes a provided function once per each value in the Set object, in insertion order.
     */
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' value2'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' set'
            TypeReference
              Identifier: ' Set'
              TypeReference
                Identifier: 'T'
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * @returns a boolean indicating whether an element with the specified value exists in the Set or not.
     */
    has'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' size'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' SetConstructor'
    ConstructSignature
      TypeParameter
        Identifier: 'T'
        AnyKeyword
      Parameter
        Identifier: 'values'
        QuestionToken
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' T'
          LiteralType
            NullKeyword
      TypeReference
        Identifier: ' Set'
        TypeReference
          Identifier: 'T'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' Set'
        AnyKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' Set'
        TypeReference
          Identifier: ' SetConstructor'
  InterfaceDeclaration
    Identifier: ' ReadonlySet'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    forEach'
      Parameter
        Identifier: 'callbackfn'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' value2'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' set'
            TypeReference
              Identifier: ' ReadonlySet'
              TypeReference
                Identifier: 'T'
          VoidKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
    has'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      BooleanKeyword
    PropertySignature
      ReadonlyKeyword
      Identifier: ' size'
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' WeakSet'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' WeakKey'
    MethodSignature
      Identifier: '
    /**
     * Appends a new value to the end of the WeakSet.
     */
    add'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      ThisType
    MethodSignature
      Identifier: '
    /**
     * Removes the specified element from the WeakSet.
     * @returns Returns true if the element existed and has been removed, or false if the element does not exist.
     */
    delete'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * @returns a boolean indicating whether a value exists in the WeakSet or not.
     */
    has'
      Parameter
        Identifier: 'value'
        TypeReference
          Identifier: ' T'
      BooleanKeyword
  InterfaceDeclaration
    Identifier: ' WeakSetConstructor'
    ConstructSignature
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' WeakKey'
        TypeReference
          Identifier: ' WeakKey'
      Parameter
        Identifier: 'values'
        QuestionToken
        UnionType
          TypeOperator
            ArrayType
              TypeReference
                Identifier: ' T'
          LiteralType
            NullKeyword
      TypeReference
        Identifier: ' WeakSet'
        TypeReference
          Identifier: 'T'
    PropertySignature
      ReadonlyKeyword
      Identifier: ' prototype'
      TypeReference
        Identifier: ' WeakSet'
        TypeReference
          Identifier: 'WeakKey'
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' WeakSet'
        TypeReference
          Identifier: ' WeakSetConstructor'
