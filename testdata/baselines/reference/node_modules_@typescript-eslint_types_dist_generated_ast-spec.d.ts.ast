SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' SyntaxKind'
    StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Accessibility'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AccessorProperty'
    UnionType
      TypeReference
        Identifier: ' AccessorPropertyComputedName'
      TypeReference
        Identifier: ' AccessorPropertyNonComputedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AccessorPropertyComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'AccessorProperty'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AccessorPropertyNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionNonComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'AccessorProperty'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ArrayExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * an element will be `null` in the case of a sparse array: `[1, ,3]`
     */
    elements'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'Expression'
            TypeReference
              Identifier: ' SpreadElement'
            LiteralType
              NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ArrayExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ArrayPattern'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    elements'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'DestructuringPattern'
            LiteralType
              NullKeyword
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ArrayPattern'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ArrowFunctionExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    async'
      BooleanKeyword
    PropertySignature
      Identifier: '
    body'
      UnionType
        TypeReference
          Identifier: ' BlockStatement'
        TypeReference
          Identifier: ' Expression'
    PropertySignature
      Identifier: '
    expression'
      BooleanKeyword
    PropertySignature
      Identifier: '
    generator'
      BooleanKeyword
    PropertySignature
      Identifier: '
    id'
      LiteralType
        NullKeyword
    PropertySignature
      Identifier: '
    params'
      ArrayType
        TypeReference
          Identifier: ' Parameter'
    PropertySignature
      Identifier: '
    returnType'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ArrowFunctionExpression'
    PropertySignature
      Identifier: '
    typeParameters'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterDeclaration'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AssignmentExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    left'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    operator'
      TypeReference
        Identifier: ' ValueOf'
        TypeReference
          Identifier: 'AssignmentOperatorToText'
    PropertySignature
      Identifier: '
    right'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'AssignmentExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AssignmentOperatorToText'
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AmpersandAmpersandEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AmpersandEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AsteriskAsteriskEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AsteriskEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'BarBarEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'BarEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'CaretEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'EqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanGreaterThanEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanGreaterThanGreaterThanEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'LessThanLessThanEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'MinusEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'PercentEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'PlusEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'QuestionQuestionEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'SlashEqualsToken'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AssignmentPattern'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    left'
      TypeReference
        Identifier: ' BindingName'
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    right'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'AssignmentPattern'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
  EnumDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AST_NODE_TYPES'
    EnumMember
      Identifier: '
    AccessorProperty'
      StringLiteral
    EnumMember
      Identifier: '
    ArrayExpression'
      StringLiteral
    EnumMember
      Identifier: '
    ArrayPattern'
      StringLiteral
    EnumMember
      Identifier: '
    ArrowFunctionExpression'
      StringLiteral
    EnumMember
      Identifier: '
    AssignmentExpression'
      StringLiteral
    EnumMember
      Identifier: '
    AssignmentPattern'
      StringLiteral
    EnumMember
      Identifier: '
    AwaitExpression'
      StringLiteral
    EnumMember
      Identifier: '
    BinaryExpression'
      StringLiteral
    EnumMember
      Identifier: '
    BlockStatement'
      StringLiteral
    EnumMember
      Identifier: '
    BreakStatement'
      StringLiteral
    EnumMember
      Identifier: '
    CallExpression'
      StringLiteral
    EnumMember
      Identifier: '
    CatchClause'
      StringLiteral
    EnumMember
      Identifier: '
    ChainExpression'
      StringLiteral
    EnumMember
      Identifier: '
    ClassBody'
      StringLiteral
    EnumMember
      Identifier: '
    ClassDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    ClassExpression'
      StringLiteral
    EnumMember
      Identifier: '
    ConditionalExpression'
      StringLiteral
    EnumMember
      Identifier: '
    ContinueStatement'
      StringLiteral
    EnumMember
      Identifier: '
    DebuggerStatement'
      StringLiteral
    EnumMember
      Identifier: '
    Decorator'
      StringLiteral
    EnumMember
      Identifier: '
    DoWhileStatement'
      StringLiteral
    EnumMember
      Identifier: '
    EmptyStatement'
      StringLiteral
    EnumMember
      Identifier: '
    ExportAllDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    ExportDefaultDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    ExportNamedDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    ExportSpecifier'
      StringLiteral
    EnumMember
      Identifier: '
    ExpressionStatement'
      StringLiteral
    EnumMember
      Identifier: '
    ForInStatement'
      StringLiteral
    EnumMember
      Identifier: '
    ForOfStatement'
      StringLiteral
    EnumMember
      Identifier: '
    ForStatement'
      StringLiteral
    EnumMember
      Identifier: '
    FunctionDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    FunctionExpression'
      StringLiteral
    EnumMember
      Identifier: '
    Identifier'
      StringLiteral
    EnumMember
      Identifier: '
    IfStatement'
      StringLiteral
    EnumMember
      Identifier: '
    ImportAttribute'
      StringLiteral
    EnumMember
      Identifier: '
    ImportDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    ImportDefaultSpecifier'
      StringLiteral
    EnumMember
      Identifier: '
    ImportExpression'
      StringLiteral
    EnumMember
      Identifier: '
    ImportNamespaceSpecifier'
      StringLiteral
    EnumMember
      Identifier: '
    ImportSpecifier'
      StringLiteral
    EnumMember
      Identifier: '
    JSXAttribute'
      StringLiteral
    EnumMember
      Identifier: '
    JSXClosingElement'
      StringLiteral
    EnumMember
      Identifier: '
    JSXClosingFragment'
      StringLiteral
    EnumMember
      Identifier: '
    JSXElement'
      StringLiteral
    EnumMember
      Identifier: '
    JSXEmptyExpression'
      StringLiteral
    EnumMember
      Identifier: '
    JSXExpressionContainer'
      StringLiteral
    EnumMember
      Identifier: '
    JSXFragment'
      StringLiteral
    EnumMember
      Identifier: '
    JSXIdentifier'
      StringLiteral
    EnumMember
      Identifier: '
    JSXMemberExpression'
      StringLiteral
    EnumMember
      Identifier: '
    JSXNamespacedName'
      StringLiteral
    EnumMember
      Identifier: '
    JSXOpeningElement'
      StringLiteral
    EnumMember
      Identifier: '
    JSXOpeningFragment'
      StringLiteral
    EnumMember
      Identifier: '
    JSXSpreadAttribute'
      StringLiteral
    EnumMember
      Identifier: '
    JSXSpreadChild'
      StringLiteral
    EnumMember
      Identifier: '
    JSXText'
      StringLiteral
    EnumMember
      Identifier: '
    LabeledStatement'
      StringLiteral
    EnumMember
      Identifier: '
    Literal'
      StringLiteral
    EnumMember
      Identifier: '
    LogicalExpression'
      StringLiteral
    EnumMember
      Identifier: '
    MemberExpression'
      StringLiteral
    EnumMember
      Identifier: '
    MetaProperty'
      StringLiteral
    EnumMember
      Identifier: '
    MethodDefinition'
      StringLiteral
    EnumMember
      Identifier: '
    NewExpression'
      StringLiteral
    EnumMember
      Identifier: '
    ObjectExpression'
      StringLiteral
    EnumMember
      Identifier: '
    ObjectPattern'
      StringLiteral
    EnumMember
      Identifier: '
    PrivateIdentifier'
      StringLiteral
    EnumMember
      Identifier: '
    Program'
      StringLiteral
    EnumMember
      Identifier: '
    Property'
      StringLiteral
    EnumMember
      Identifier: '
    PropertyDefinition'
      StringLiteral
    EnumMember
      Identifier: '
    RestElement'
      StringLiteral
    EnumMember
      Identifier: '
    ReturnStatement'
      StringLiteral
    EnumMember
      Identifier: '
    SequenceExpression'
      StringLiteral
    EnumMember
      Identifier: '
    SpreadElement'
      StringLiteral
    EnumMember
      Identifier: '
    StaticBlock'
      StringLiteral
    EnumMember
      Identifier: '
    Super'
      StringLiteral
    EnumMember
      Identifier: '
    SwitchCase'
      StringLiteral
    EnumMember
      Identifier: '
    SwitchStatement'
      StringLiteral
    EnumMember
      Identifier: '
    TaggedTemplateExpression'
      StringLiteral
    EnumMember
      Identifier: '
    TemplateElement'
      StringLiteral
    EnumMember
      Identifier: '
    TemplateLiteral'
      StringLiteral
    EnumMember
      Identifier: '
    ThisExpression'
      StringLiteral
    EnumMember
      Identifier: '
    ThrowStatement'
      StringLiteral
    EnumMember
      Identifier: '
    TryStatement'
      StringLiteral
    EnumMember
      Identifier: '
    UnaryExpression'
      StringLiteral
    EnumMember
      Identifier: '
    UpdateExpression'
      StringLiteral
    EnumMember
      Identifier: '
    VariableDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    VariableDeclarator'
      StringLiteral
    EnumMember
      Identifier: '
    WhileStatement'
      StringLiteral
    EnumMember
      Identifier: '
    WithStatement'
      StringLiteral
    EnumMember
      Identifier: '
    YieldExpression'
      StringLiteral
    EnumMember
      Identifier: '
    TSAbstractAccessorProperty'
      StringLiteral
    EnumMember
      Identifier: '
    TSAbstractKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSAbstractMethodDefinition'
      StringLiteral
    EnumMember
      Identifier: '
    TSAbstractPropertyDefinition'
      StringLiteral
    EnumMember
      Identifier: '
    TSAnyKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSArrayType'
      StringLiteral
    EnumMember
      Identifier: '
    TSAsExpression'
      StringLiteral
    EnumMember
      Identifier: '
    TSAsyncKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSBigIntKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSBooleanKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSCallSignatureDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSClassImplements'
      StringLiteral
    EnumMember
      Identifier: '
    TSConditionalType'
      StringLiteral
    EnumMember
      Identifier: '
    TSConstructorType'
      StringLiteral
    EnumMember
      Identifier: '
    TSConstructSignatureDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSDeclareFunction'
      StringLiteral
    EnumMember
      Identifier: '
    TSDeclareKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSEmptyBodyFunctionExpression'
      StringLiteral
    EnumMember
      Identifier: '
    TSEnumBody'
      StringLiteral
    EnumMember
      Identifier: '
    TSEnumDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSEnumMember'
      StringLiteral
    EnumMember
      Identifier: '
    TSExportAssignment'
      StringLiteral
    EnumMember
      Identifier: '
    TSExportKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSExternalModuleReference'
      StringLiteral
    EnumMember
      Identifier: '
    TSFunctionType'
      StringLiteral
    EnumMember
      Identifier: '
    TSImportEqualsDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSImportType'
      StringLiteral
    EnumMember
      Identifier: '
    TSIndexedAccessType'
      StringLiteral
    EnumMember
      Identifier: '
    TSIndexSignature'
      StringLiteral
    EnumMember
      Identifier: '
    TSInferType'
      StringLiteral
    EnumMember
      Identifier: '
    TSInstantiationExpression'
      StringLiteral
    EnumMember
      Identifier: '
    TSInterfaceBody'
      StringLiteral
    EnumMember
      Identifier: '
    TSInterfaceDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSInterfaceHeritage'
      StringLiteral
    EnumMember
      Identifier: '
    TSIntersectionType'
      StringLiteral
    EnumMember
      Identifier: '
    TSIntrinsicKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSLiteralType'
      StringLiteral
    EnumMember
      Identifier: '
    TSMappedType'
      StringLiteral
    EnumMember
      Identifier: '
    TSMethodSignature'
      StringLiteral
    EnumMember
      Identifier: '
    TSModuleBlock'
      StringLiteral
    EnumMember
      Identifier: '
    TSModuleDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSNamedTupleMember'
      StringLiteral
    EnumMember
      Identifier: '
    TSNamespaceExportDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSNeverKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSNonNullExpression'
      StringLiteral
    EnumMember
      Identifier: '
    TSNullKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSNumberKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSObjectKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSOptionalType'
      StringLiteral
    EnumMember
      Identifier: '
    TSParameterProperty'
      StringLiteral
    EnumMember
      Identifier: '
    TSPrivateKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSPropertySignature'
      StringLiteral
    EnumMember
      Identifier: '
    TSProtectedKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSPublicKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSQualifiedName'
      StringLiteral
    EnumMember
      Identifier: '
    TSReadonlyKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSRestType'
      StringLiteral
    EnumMember
      Identifier: '
    TSSatisfiesExpression'
      StringLiteral
    EnumMember
      Identifier: '
    TSStaticKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSStringKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSSymbolKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSTemplateLiteralType'
      StringLiteral
    EnumMember
      Identifier: '
    TSThisType'
      StringLiteral
    EnumMember
      Identifier: '
    TSTupleType'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeAliasDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeAnnotation'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeAssertion'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeLiteral'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeOperator'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeParameter'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeParameterDeclaration'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeParameterInstantiation'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypePredicate'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeQuery'
      StringLiteral
    EnumMember
      Identifier: '
    TSTypeReference'
      StringLiteral
    EnumMember
      Identifier: '
    TSUndefinedKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSUnionType'
      StringLiteral
    EnumMember
      Identifier: '
    TSUnknownKeyword'
      StringLiteral
    EnumMember
      Identifier: '
    TSVoidKeyword'
      StringLiteral
  EnumDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AST_TOKEN_TYPES'
    EnumMember
      Identifier: '
    Boolean'
      StringLiteral
    EnumMember
      Identifier: '
    Identifier'
      StringLiteral
    EnumMember
      Identifier: '
    JSXIdentifier'
      StringLiteral
    EnumMember
      Identifier: '
    JSXText'
      StringLiteral
    EnumMember
      Identifier: '
    Keyword'
      StringLiteral
    EnumMember
      Identifier: '
    Null'
      StringLiteral
    EnumMember
      Identifier: '
    Numeric'
      StringLiteral
    EnumMember
      Identifier: '
    Punctuator'
      StringLiteral
    EnumMember
      Identifier: '
    RegularExpression'
      StringLiteral
    EnumMember
      Identifier: '
    String'
      StringLiteral
    EnumMember
      Identifier: '
    Template'
      StringLiteral
    EnumMember
      Identifier: '
    Block'
      StringLiteral
    EnumMember
      Identifier: '
    Line'
      StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' AwaitExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'AwaitExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BaseNode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NodeOrTokenData'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' AST_NODE_TYPES'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' BaseToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NodeOrTokenData'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        Identifier: ' AST_TOKEN_TYPES'
    PropertySignature
      Identifier: '
    value'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BigIntLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralBase'
    PropertySignature
      Identifier: '
    bigint'
      StringKeyword
    PropertySignature
      Identifier: '
    value'
      UnionType
        BigIntKeyword
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BinaryExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    left'
      UnionType
        TypeReference
          Identifier: ' Expression'
        TypeReference
          Identifier: ' PrivateIdentifier'
    PropertySignature
      Identifier: '
    operator'
      TypeReference
        Identifier: ' ValueOf'
        TypeReference
          Identifier: 'BinaryOperatorToText'
    PropertySignature
      Identifier: '
    right'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'BinaryExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BinaryOperatorToText'
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AmpersandAmpersandToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AmpersandToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AsteriskAsteriskToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AsteriskToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'BarBarToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'BarToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'CaretToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'EqualsEqualsEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'EqualsEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'ExclamationEqualsEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'ExclamationEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanGreaterThanGreaterThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanGreaterThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'InKeyword'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'InstanceOfKeyword'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'LessThanEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'LessThanLessThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'LessThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'MinusToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'PercentToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'PlusToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'SlashToken'
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BindingName'
    UnionType
      TypeReference
        Identifier: ' BindingPattern'
      TypeReference
        Identifier: ' Identifier'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BindingPattern'
    UnionType
      TypeReference
        Identifier: ' ArrayPattern'
      TypeReference
        Identifier: ' ObjectPattern'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BlockComment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Block'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BlockStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      ArrayType
        TypeReference
          Identifier: ' Statement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'BlockStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BooleanLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralBase'
    PropertySignature
      Identifier: '
    raw'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    value'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BooleanToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Boolean'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' BreakStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    label'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'BreakStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' CallExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    arguments'
      ArrayType
        TypeReference
          Identifier: ' CallExpressionArgument'
    PropertySignature
      Identifier: '
    callee'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'CallExpression'
    PropertySignature
      Identifier: '
    typeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' CallExpressionArgument'
    UnionType
      TypeReference
        Identifier: ' Expression'
      TypeReference
        Identifier: ' SpreadElement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' CatchClause'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' BlockStatement'
    PropertySignature
      Identifier: '
    param'
      UnionType
        TypeReference
          Identifier: ' BindingName'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'CatchClause'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ChainElement'
    UnionType
      TypeReference
        Identifier: ' CallExpression'
      TypeReference
        Identifier: ' MemberExpression'
      TypeReference
        Identifier: ' TSNonNullExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ChainExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' ChainElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ChainExpression'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' ClassBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * Whether the class is an abstract class.
     * @example
     * ```ts
     * abstract class Foo {}
     * ```
     */
    abstract'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The class body.
     */
    body'
      TypeReference
        Identifier: ' ClassBody'
    PropertySignature
      Identifier: '
    /**
     * Whether the class has been `declare`d:
     * @example
     * ```ts
     * declare class Foo {}
     * ```
     */
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The decorators declared for the class.
     * @example
     * ```ts
     * @deco
     * class Foo {}
     * ```
     */
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    /**
     * The class's name.
     * - For a `ClassExpression` this may be `null` if the name is omitted.
     * - For a `ClassDeclaration` this may be `null` if and only if the parent is
     *   an `ExportDefaultDeclaration`.
     */
    id'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    /**
     * The implemented interfaces for the class.
     */
    implements'
      ArrayType
        TypeReference
          Identifier: ' TSClassImplements'
    PropertySignature
      Identifier: '
    /**
     * The super class this class extends.
     */
    superClass'
      UnionType
        TypeReference
          Identifier: ' LeftHandSideExpression'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    /**
     * The generic type parameters passed to the superClass.
     */
    superTypeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The generic type parameters declared for the class.
     */
    typeParameters'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterDeclaration'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ClassBody'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      ArrayType
        TypeReference
          Identifier: ' ClassElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ClassBody'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ClassDeclaration'
    UnionType
      TypeReference
        Identifier: ' ClassDeclarationWithName'
      TypeReference
        Identifier: ' ClassDeclarationWithOptionalName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' ClassDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ClassDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ClassDeclarationWithName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassDeclarationBase'
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ClassDeclarationWithOptionalName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassDeclarationBase'
    PropertySignature
      Identifier: '
    id'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        LiteralType
          NullKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ClassElement'
    UnionType
      TypeReference
        Identifier: ' AccessorProperty'
      TypeReference
        Identifier: ' MethodDefinition'
      TypeReference
        Identifier: ' PropertyDefinition'
      TypeReference
        Identifier: ' StaticBlock'
      TypeReference
        Identifier: ' TSAbstractAccessorProperty'
      TypeReference
        Identifier: ' TSAbstractMethodDefinition'
      TypeReference
        Identifier: ' TSAbstractPropertyDefinition'
      TypeReference
        Identifier: ' TSIndexSignature'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ClassExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassBase'
    PropertySignature
      Identifier: '
    abstract'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    declare'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ClassExpression'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' ClassMethodDefinitionNonComputedNameBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MethodDefinitionBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' ClassPropertyNameNonComputed'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' ClassPropertyDefinitionNonComputedNameBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' ClassPropertyNameNonComputed'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ClassPropertyNameNonComputed'
    UnionType
      TypeReference
        Identifier: ' PrivateIdentifier'
      TypeReference
        Identifier: ' PropertyNameNonComputed'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Comment'
    UnionType
      TypeReference
        Identifier: ' BlockComment'
      TypeReference
        Identifier: ' LineComment'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ConditionalExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    alternate'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    consequent'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    test'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ConditionalExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ConstDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LetOrConstOrVarDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * In a `declare const` declaration, the declarators may have initializers, but
     * not definite assignment assertions. Each declarator cannot have both an
     * initializer and a type annotation.
     *
     * Even if the declaration has no `declare`, it may still be ambient and have
     * no initializer.
     */
    declarations'
      ArrayType
        TypeReference
          Identifier: ' VariableDeclaratorMaybeInit'
    PropertySignature
      Identifier: '
    kind'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ContinueStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    label'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ContinueStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' DebuggerStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'DebuggerStatement'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' DeclarationStatement'
    UnionType
      TypeReference
        Identifier: ' ClassDeclaration'
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' ExportAllDeclaration'
      TypeReference
        Identifier: ' ExportDefaultDeclaration'
      TypeReference
        Identifier: ' ExportNamedDeclaration'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' TSDeclareFunction'
      TypeReference
        Identifier: ' TSEnumDeclaration'
      TypeReference
        Identifier: ' TSImportEqualsDeclaration'
      TypeReference
        Identifier: ' TSInterfaceDeclaration'
      TypeReference
        Identifier: ' TSModuleDeclaration'
      TypeReference
        Identifier: ' TSNamespaceExportDeclaration'
      TypeReference
        Identifier: ' TSTypeAliasDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Decorator'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'Decorator'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' DefaultExportDeclarations'
    UnionType
      TypeReference
        Identifier: ' ClassDeclarationWithOptionalName'
      TypeReference
        Identifier: ' Expression'
      TypeReference
        Identifier: ' FunctionDeclarationWithName'
      TypeReference
        Identifier: ' FunctionDeclarationWithOptionalName'
      TypeReference
        Identifier: ' TSDeclareFunction'
      TypeReference
        Identifier: ' TSEnumDeclaration'
      TypeReference
        Identifier: ' TSInterfaceDeclaration'
      TypeReference
        Identifier: ' TSModuleDeclaration'
      TypeReference
        Identifier: ' TSTypeAliasDeclaration'
      TypeReference
        Identifier: ' VariableDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' DestructuringPattern'
    UnionType
      TypeReference
        Identifier: ' ArrayPattern'
      TypeReference
        Identifier: ' AssignmentPattern'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' MemberExpression'
      TypeReference
        Identifier: ' ObjectPattern'
      TypeReference
        Identifier: ' RestElement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' DoWhileStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      Identifier: '
    test'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'DoWhileStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' EmptyStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'EmptyStatement'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' EntityName'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' ThisExpression'
      TypeReference
        Identifier: ' TSQualifiedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExportAllDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The assertions declared for the export.
     * @example
     * ```ts
     * export * from 'mod' assert \{ type: 'json' \};
     * ```
     * @deprecated Replaced with {@link `attributes`}.
     */
    assertions'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    /**
     * The attributes declared for the export.
     * @example
     * ```ts
     * export * from 'mod' with \{ type: 'json' \};
     * ```
     */
    attributes'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    /**
     * The name for the exported items (`as X`). `null` if no name is assigned.
     */
    exported'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    /**
     * The kind of the export.
     */
    exportKind'
      TypeReference
        Identifier: ' ExportKind'
    PropertySignature
      Identifier: '
    /**
     * The source module being exported from.
     */
    source'
      TypeReference
        Identifier: ' StringLiteral'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ExportAllDeclaration'
  TypeAliasDeclaration
    DeclareKeyword
    Identifier: ' ExportAndImportKind'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExportDeclaration'
    UnionType
      TypeReference
        Identifier: ' DefaultExportDeclarations'
      TypeReference
        Identifier: ' NamedExportDeclarations'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExportDefaultDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The declaration being exported.
     */
    declaration'
      TypeReference
        Identifier: ' DefaultExportDeclarations'
    PropertySignature
      Identifier: '
    /**
     * The kind of the export. Always `value` for default exports.
     */
    exportKind'
      LiteralType
        StringLiteral
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ExportDefaultDeclaration'
  TypeAliasDeclaration
    DeclareKeyword
    Identifier: ' ExportKind'
    TypeReference
      Identifier: ' ExportAndImportKind'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExportNamedDeclaration'
    UnionType
      TypeReference
        Identifier: ' ExportNamedDeclarationWithoutSourceWithMultiple'
      TypeReference
        Identifier: ' ExportNamedDeclarationWithoutSourceWithSingle'
      TypeReference
        Identifier: ' ExportNamedDeclarationWithSource'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' ExportNamedDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The assertions declared for the export.
     * @example
     * ```ts
     * export { foo } from 'mod' assert \{ type: 'json' \};
     * ```
     * This will be an empty array if `source` is `null`
     * @deprecated Replaced with {@link `attributes`}.
     */
    assertions'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    /**
     * The attributes declared for the export.
     * @example
     * ```ts
     * export { foo } from 'mod' with \{ type: 'json' \};
     * ```
     * This will be an empty array if `source` is `null`
     */
    attributes'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    /**
     * The exported declaration.
     * @example
     * ```ts
     * export const x = 1;
     * ```
     * This will be `null` if `source` is not `null`, or if there are `specifiers`
     */
    declaration'
      UnionType
        TypeReference
          Identifier: ' NamedExportDeclarations'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    /**
     * The kind of the export.
     */
    exportKind'
      TypeReference
        Identifier: ' ExportKind'
    PropertySignature
      Identifier: '
    /**
     * The source module being exported from.
     */
    source'
      UnionType
        TypeReference
          Identifier: ' StringLiteral'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    /**
     * The specifiers being exported.
     * @example
     * ```ts
     * export { a, b };
     * ```
     * This will be an empty array if `declaration` is not `null`
     */
    specifiers'
      ArrayType
        TypeReference
          Identifier: ' ExportSpecifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ExportNamedDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExportNamedDeclarationWithoutSourceWithMultiple'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ExportNamedDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * This will always be an empty array.
     * @deprecated Replaced with {@link `attributes`}.
     */
    assertions'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    /**
     * This will always be an empty array.
     */
    attributes'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    declaration'
      LiteralType
        NullKeyword
    PropertySignature
      Identifier: '
    source'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExportNamedDeclarationWithoutSourceWithSingle'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ExportNamedDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * This will always be an empty array.
     * @deprecated Replaced with {@link `attributes`}.
     */
    assertions'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    /**
     * This will always be an empty array.
     */
    attributes'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    declaration'
      TypeReference
        Identifier: ' NamedExportDeclarations'
    PropertySignature
      Identifier: '
    source'
      LiteralType
        NullKeyword
    PropertySignature
      Identifier: '
    /**
     * This will always be an empty array.
     */
    specifiers'
      ArrayType
        TypeReference
          Identifier: ' ExportSpecifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExportNamedDeclarationWithSource'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ExportNamedDeclarationBase'
    PropertySignature
      Identifier: '
    declaration'
      LiteralType
        NullKeyword
    PropertySignature
      Identifier: '
    source'
      TypeReference
        Identifier: ' StringLiteral'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExportSpecifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    exported'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    exportKind'
      TypeReference
        Identifier: ' ExportKind'
    PropertySignature
      Identifier: '
    local'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ExportSpecifier'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Expression'
    UnionType
      TypeReference
        Identifier: ' ArrayExpression'
      TypeReference
        Identifier: ' ArrayPattern'
      TypeReference
        Identifier: ' ArrowFunctionExpression'
      TypeReference
        Identifier: ' AssignmentExpression'
      TypeReference
        Identifier: ' AwaitExpression'
      TypeReference
        Identifier: ' BinaryExpression'
      TypeReference
        Identifier: ' CallExpression'
      TypeReference
        Identifier: ' ChainExpression'
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' ConditionalExpression'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' ImportExpression'
      TypeReference
        Identifier: ' JSXElement'
      TypeReference
        Identifier: ' JSXFragment'
      TypeReference
        Identifier: ' LiteralExpression'
      TypeReference
        Identifier: ' LogicalExpression'
      TypeReference
        Identifier: ' MemberExpression'
      TypeReference
        Identifier: ' MetaProperty'
      TypeReference
        Identifier: ' NewExpression'
      TypeReference
        Identifier: ' ObjectExpression'
      TypeReference
        Identifier: ' ObjectPattern'
      TypeReference
        Identifier: ' SequenceExpression'
      TypeReference
        Identifier: ' Super'
      TypeReference
        Identifier: ' TaggedTemplateExpression'
      TypeReference
        Identifier: ' TemplateLiteral'
      TypeReference
        Identifier: ' ThisExpression'
      TypeReference
        Identifier: ' TSAsExpression'
      TypeReference
        Identifier: ' TSInstantiationExpression'
      TypeReference
        Identifier: ' TSNonNullExpression'
      TypeReference
        Identifier: ' TSSatisfiesExpression'
      TypeReference
        Identifier: ' TSTypeAssertion'
      TypeReference
        Identifier: ' UnaryExpression'
      TypeReference
        Identifier: ' UpdateExpression'
      TypeReference
        Identifier: ' YieldExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ExpressionStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    directive'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ExpressionStatement'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ForInitialiser'
    UnionType
      TypeReference
        Identifier: ' Expression'
      TypeReference
        Identifier: ' LetOrConstOrVarDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ForInStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      Identifier: '
    left'
      TypeReference
        Identifier: ' ForInitialiser'
    PropertySignature
      Identifier: '
    right'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ForInStatement'
  TypeAliasDeclaration
    DeclareKeyword
    Identifier: ' ForOfInitialiser'
    UnionType
      TypeReference
        Identifier: ' Expression'
      TypeReference
        Identifier: ' LetOrConstOrVarDeclaration'
      TypeReference
        Identifier: ' UsingInForOfDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ForOfStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    await'
      BooleanKeyword
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      Identifier: '
    left'
      TypeReference
        Identifier: ' ForOfInitialiser'
    PropertySignature
      Identifier: '
    right'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ForOfStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ForStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      Identifier: '
    init'
      UnionType
        TypeReference
          Identifier: ' Expression'
        TypeReference
          Identifier: ' ForInitialiser'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    test'
      UnionType
        TypeReference
          Identifier: ' Expression'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ForStatement'
    PropertySignature
      Identifier: '
    update'
      UnionType
        TypeReference
          Identifier: ' Expression'
        LiteralType
          NullKeyword
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' FunctionBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * Whether the function is async:
     * ```
     * async function foo() {}
     * const x = async function () {}
     * const x = async () => {}
     * ```
     */
    async'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The body of the function.
     * - For an `ArrowFunctionExpression` this may be an `Expression` or `BlockStatement`.
     * - For a `FunctionDeclaration` or `FunctionExpression` this is always a `BlockStatement`.
     * - For a `TSDeclareFunction` this is always `undefined`.
     * - For a `TSEmptyBodyFunctionExpression` this is always `null`.
     */
    body'
      UnionType
        TypeReference
          Identifier: ' BlockStatement'
        TypeReference
          Identifier: ' Expression'
        LiteralType
          NullKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * This is only `true` if and only if the node is a `TSDeclareFunction` and it has `declare`:
     * ```
     * declare function foo() {}
     * ```
     */
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * This is only ever `true` if and only the node is an `ArrowFunctionExpression` and the body
     * is an expression:
     * ```
     * (() => 1)
     * ```
     */
    expression'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Whether the function is a generator function:
     * ```
     * function *foo() {}
     * const x = function *() {}
     * ```
     * This is always `false` for arrow functions as they cannot be generators.
     */
    generator'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The function's name.
     * - For an `ArrowFunctionExpression` this is always `null`.
     * - For a `FunctionExpression` this may be `null` if the name is omitted.
     * - For a `FunctionDeclaration` or `TSDeclareFunction` this may be `null` if
     *   and only if the parent is an `ExportDefaultDeclaration`.
     */
    id'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    /**
     * The list of parameters declared for the function.
     */
    params'
      ArrayType
        TypeReference
          Identifier: ' Parameter'
    PropertySignature
      Identifier: '
    /**
     * The return type annotation for the function.
     */
    returnType'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * The generic type parameter declaration for the function.
     */
    typeParameters'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterDeclaration'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' FunctionDeclaration'
    UnionType
      TypeReference
        Identifier: ' FunctionDeclarationWithName'
      TypeReference
        Identifier: ' FunctionDeclarationWithOptionalName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' FunctionDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionBase'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' BlockStatement'
    PropertySignature
      Identifier: '
    declare'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    expression'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'FunctionDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' FunctionDeclarationWithName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionDeclarationBase'
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' Identifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' FunctionDeclarationWithOptionalName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionDeclarationBase'
    PropertySignature
      Identifier: '
    id'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' FunctionExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionBase'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' BlockStatement'
    PropertySignature
      Identifier: '
    expression'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'FunctionExpression'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' FunctionLike'
    UnionType
      TypeReference
        Identifier: ' ArrowFunctionExpression'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' TSDeclareFunction'
      TypeReference
        Identifier: ' TSEmptyBodyFunctionExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Identifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'Identifier'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' IdentifierToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Identifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' IfStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    alternate'
      UnionType
        TypeReference
          Identifier: ' Statement'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    consequent'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      Identifier: '
    test'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'IfStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ImportAttribute'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    key'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' Literal'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ImportAttribute'
    PropertySignature
      Identifier: '
    value'
      TypeReference
        Identifier: ' Literal'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ImportClause'
    UnionType
      TypeReference
        Identifier: ' ImportDefaultSpecifier'
      TypeReference
        Identifier: ' ImportNamespaceSpecifier'
      TypeReference
        Identifier: ' ImportSpecifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ImportDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The assertions declared for the export.
     * @example
     * ```ts
     * import * from 'mod' assert \{ type: 'json' \};
     * ```
     * @deprecated Replaced with {@link `attributes`}.
     */
    assertions'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    /**
     * The attributes declared for the export.
     * @example
     * ```ts
     * import * from 'mod' with \{ type: 'json' \};
     * ```
     */
    attributes'
      ArrayType
        TypeReference
          Identifier: ' ImportAttribute'
    PropertySignature
      Identifier: '
    /**
     * The kind of the import.
     */
    importKind'
      TypeReference
        Identifier: ' ImportKind'
    PropertySignature
      Identifier: '
    /**
     * The source module being imported from.
     */
    source'
      TypeReference
        Identifier: ' StringLiteral'
    PropertySignature
      Identifier: '
    /**
     * The specifiers being imported.
     * If this is an empty array then either there are no specifiers:
     * ```
     * import {} from 'mod';
     * ```
     * Or it is a side-effect import:
     * ```
     * import 'mod';
     * ```
     */
    specifiers'
      ArrayType
        TypeReference
          Identifier: ' ImportClause'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ImportDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ImportDefaultSpecifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    local'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ImportDefaultSpecifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ImportExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    attributes'
      UnionType
        TypeReference
          Identifier: ' Expression'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    source'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ImportExpression'
  TypeAliasDeclaration
    DeclareKeyword
    Identifier: ' ImportKind'
    TypeReference
      Identifier: ' ExportAndImportKind'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ImportNamespaceSpecifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    local'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ImportNamespaceSpecifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ImportSpecifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    imported'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    importKind'
      TypeReference
        Identifier: ' ImportKind'
    PropertySignature
      Identifier: '
    local'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ImportSpecifier'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' IterationStatement'
    UnionType
      TypeReference
        Identifier: ' DoWhileStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' WhileStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXAttribute'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    name'
      UnionType
        TypeReference
          Identifier: ' JSXIdentifier'
        TypeReference
          Identifier: ' JSXNamespacedName'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXAttribute'
    PropertySignature
      Identifier: '
    value'
      UnionType
        TypeReference
          Identifier: ' JSXElement'
        TypeReference
          Identifier: ' JSXExpression'
        TypeReference
          Identifier: ' Literal'
        LiteralType
          NullKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXChild'
    UnionType
      TypeReference
        Identifier: ' JSXElement'
      TypeReference
        Identifier: ' JSXExpression'
      TypeReference
        Identifier: ' JSXFragment'
      TypeReference
        Identifier: ' JSXText'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXClosingElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' JSXTagNameExpression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXClosingElement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXClosingFragment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXClosingFragment'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    children'
      ArrayType
        TypeReference
          Identifier: ' JSXChild'
    PropertySignature
      Identifier: '
    closingElement'
      UnionType
        TypeReference
          Identifier: ' JSXClosingElement'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    openingElement'
      TypeReference
        Identifier: ' JSXOpeningElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXElement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXEmptyExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXEmptyExpression'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXExpression'
    UnionType
      TypeReference
        Identifier: ' JSXExpressionContainer'
      TypeReference
        Identifier: ' JSXSpreadChild'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXExpressionContainer'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      UnionType
        TypeReference
          Identifier: ' Expression'
        TypeReference
          Identifier: ' JSXEmptyExpression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXExpressionContainer'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXFragment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    children'
      ArrayType
        TypeReference
          Identifier: ' JSXChild'
    PropertySignature
      Identifier: '
    closingFragment'
      TypeReference
        Identifier: ' JSXClosingFragment'
    PropertySignature
      Identifier: '
    openingFragment'
      TypeReference
        Identifier: ' JSXOpeningFragment'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXFragment'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXIdentifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXIdentifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXIdentifierToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'JSXIdentifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXMemberExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    object'
      TypeReference
        Identifier: ' JSXTagNameExpression'
    PropertySignature
      Identifier: '
    property'
      TypeReference
        Identifier: ' JSXIdentifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXMemberExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXNamespacedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' JSXIdentifier'
    PropertySignature
      Identifier: '
    namespace'
      TypeReference
        Identifier: ' JSXIdentifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXNamespacedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXOpeningElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    attributes'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'JSXAttribute'
            TypeReference
              Identifier: ' JSXSpreadAttribute'
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' JSXTagNameExpression'
    PropertySignature
      Identifier: '
    selfClosing'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXOpeningElement'
    PropertySignature
      Identifier: '
    typeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXOpeningFragment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXOpeningFragment'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXSpreadAttribute'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXSpreadAttribute'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXSpreadChild'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      UnionType
        TypeReference
          Identifier: ' Expression'
        TypeReference
          Identifier: ' JSXEmptyExpression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXSpreadChild'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXTagNameExpression'
    UnionType
      TypeReference
        Identifier: ' JSXIdentifier'
      TypeReference
        Identifier: ' JSXMemberExpression'
      TypeReference
        Identifier: ' JSXNamespacedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXText'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    raw'
      StringKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'JSXText'
    PropertySignature
      Identifier: '
    value'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' JSXTextToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'JSXText'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' KeywordToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Keyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LabeledStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      Identifier: '
    label'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'LabeledStatement'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LeftHandSideExpression'
    UnionType
      TypeReference
        Identifier: ' ArrayExpression'
      TypeReference
        Identifier: ' ArrayPattern'
      TypeReference
        Identifier: ' ArrowFunctionExpression'
      TypeReference
        Identifier: ' CallExpression'
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' JSXElement'
      TypeReference
        Identifier: ' JSXFragment'
      TypeReference
        Identifier: ' LiteralExpression'
      TypeReference
        Identifier: ' MemberExpression'
      TypeReference
        Identifier: ' MetaProperty'
      TypeReference
        Identifier: ' ObjectExpression'
      TypeReference
        Identifier: ' ObjectPattern'
      TypeReference
        Identifier: ' SequenceExpression'
      TypeReference
        Identifier: ' Super'
      TypeReference
        Identifier: ' TaggedTemplateExpression'
      TypeReference
        Identifier: ' ThisExpression'
      TypeReference
        Identifier: ' TSAsExpression'
      TypeReference
        Identifier: ' TSNonNullExpression'
      TypeReference
        Identifier: ' TSTypeAssertion'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LetOrConstOrVarDeclaration'
    UnionType
      TypeReference
        Identifier: ' ConstDeclaration'
      TypeReference
        Identifier: ' LetOrVarDeclaredDeclaration'
      TypeReference
        Identifier: ' LetOrVarNonDeclaredDeclaration'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' LetOrConstOrVarDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The variables declared by this declaration.
     * Always non-empty.
     * @example
     * ```ts
     * let x;
     * let y, z;
     * ```
     */
    declarations'
      ArrayType
        TypeReference
          Identifier: ' LetOrConstOrVarDeclarator'
    PropertySignature
      Identifier: '
    /**
     * Whether the declaration is `declare`d
     * @example
     * ```ts
     * declare const x = 1;
     * ```
     */
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The keyword used to declare the variable(s)
     * @example
     * ```ts
     * const x = 1;
     * let y = 2;
     * var z = 3;
     * ```
     */
    kind'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'VariableDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LetOrConstOrVarDeclarator'
    UnionType
      TypeReference
        Identifier: ' VariableDeclaratorDefiniteAssignment'
      TypeReference
        Identifier: ' VariableDeclaratorMaybeInit'
      TypeReference
        Identifier: ' VariableDeclaratorNoInit'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LetOrVarDeclaredDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LetOrConstOrVarDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * In a `declare let` declaration, the declarators must not have definite assignment
     * assertions or initializers.
     *
     * @example
     * ```ts
     * using x = 1;
     * using y =1, z = 2;
     * ```
     */
    declarations'
      ArrayType
        TypeReference
          Identifier: ' VariableDeclaratorNoInit'
    PropertySignature
      Identifier: '
    declare'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    kind'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LetOrVarNonDeclaredDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LetOrConstOrVarDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * In a `let`/`var` declaration, the declarators may have definite assignment
     * assertions or initializers, but not both.
     */
    declarations'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'VariableDeclaratorDefiniteAssignment'
            TypeReference
              Identifier: ' VariableDeclaratorMaybeInit'
    PropertySignature
      Identifier: '
    declare'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    kind'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LineComment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Line'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Literal'
    UnionType
      TypeReference
        Identifier: ' BigIntLiteral'
      TypeReference
        Identifier: ' BooleanLiteral'
      TypeReference
        Identifier: ' NullLiteral'
      TypeReference
        Identifier: ' NumberLiteral'
      TypeReference
        Identifier: ' RegExpLiteral'
      TypeReference
        Identifier: ' StringLiteral'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' LiteralBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    raw'
      StringKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'Literal'
    PropertySignature
      Identifier: '
    value'
      UnionType
        TypeReference
          Identifier: ' RegExp'
        BigIntKeyword
        BooleanKeyword
        NumberKeyword
        StringKeyword
        LiteralType
          NullKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LiteralExpression'
    UnionType
      TypeReference
        Identifier: ' Literal'
      TypeReference
        Identifier: ' TemplateLiteral'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' LogicalExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    left'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    operator'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    right'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'LogicalExpression'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' MemberExpression'
    UnionType
      TypeReference
        Identifier: ' MemberExpressionComputedName'
      TypeReference
        Identifier: ' MemberExpressionNonComputedName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' MemberExpressionBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    computed'
      BooleanKeyword
    PropertySignature
      Identifier: '
    object'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    property'
      UnionType
        TypeReference
          Identifier: ' Expression'
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' PrivateIdentifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' MemberExpressionComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MemberExpressionBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    property'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'MemberExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' MemberExpressionNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MemberExpressionBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    property'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' PrivateIdentifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'MemberExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' MetaProperty'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    meta'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    property'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'MetaProperty'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' MethodDefinition'
    UnionType
      TypeReference
        Identifier: ' MethodDefinitionComputedName'
      TypeReference
        Identifier: ' MethodDefinitionNonComputedName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' MethodDefinitionBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    accessibility'
      UnionType
        TypeReference
          Identifier: ' Accessibility'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    computed'
      BooleanKeyword
    PropertySignature
      Identifier: '
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      Identifier: '
    kind'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    override'
      BooleanKeyword
    PropertySignature
      Identifier: '
    static'
      BooleanKeyword
    PropertySignature
      Identifier: '
    value'
      UnionType
        TypeReference
          Identifier: ' FunctionExpression'
        TypeReference
          Identifier: ' TSEmptyBodyFunctionExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' MethodDefinitionComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MethodDefinitionComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'MethodDefinition'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' MethodDefinitionComputedNameBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MethodDefinitionBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' MethodDefinitionNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassMethodDefinitionNonComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'MethodDefinition'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' MethodDefinitionNonComputedNameBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MethodDefinitionBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameNonComputed'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' NamedExportDeclarations'
    UnionType
      TypeReference
        Identifier: ' ClassDeclarationWithName'
      TypeReference
        Identifier: ' ClassDeclarationWithOptionalName'
      TypeReference
        Identifier: ' FunctionDeclarationWithName'
      TypeReference
        Identifier: ' FunctionDeclarationWithOptionalName'
      TypeReference
        Identifier: ' TSDeclareFunction'
      TypeReference
        Identifier: ' TSEnumDeclaration'
      TypeReference
        Identifier: ' TSImportEqualsDeclaration'
      TypeReference
        Identifier: ' TSInterfaceDeclaration'
      TypeReference
        Identifier: ' TSModuleDeclaration'
      TypeReference
        Identifier: ' TSTypeAliasDeclaration'
      TypeReference
        Identifier: ' VariableDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' NewExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    arguments'
      ArrayType
        TypeReference
          Identifier: ' CallExpressionArgument'
    PropertySignature
      Identifier: '
    callee'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'NewExpression'
    PropertySignature
      Identifier: '
    typeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Node'
    UnionType
      TypeReference
        Identifier: ' AccessorProperty'
      TypeReference
        Identifier: ' ArrayExpression'
      TypeReference
        Identifier: ' ArrayPattern'
      TypeReference
        Identifier: ' ArrowFunctionExpression'
      TypeReference
        Identifier: ' AssignmentExpression'
      TypeReference
        Identifier: ' AssignmentPattern'
      TypeReference
        Identifier: ' AwaitExpression'
      TypeReference
        Identifier: ' BinaryExpression'
      TypeReference
        Identifier: ' BlockStatement'
      TypeReference
        Identifier: ' BreakStatement'
      TypeReference
        Identifier: ' CallExpression'
      TypeReference
        Identifier: ' CatchClause'
      TypeReference
        Identifier: ' ChainExpression'
      TypeReference
        Identifier: ' ClassBody'
      TypeReference
        Identifier: ' ClassDeclaration'
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' ConditionalExpression'
      TypeReference
        Identifier: ' ContinueStatement'
      TypeReference
        Identifier: ' DebuggerStatement'
      TypeReference
        Identifier: ' Decorator'
      TypeReference
        Identifier: ' DoWhileStatement'
      TypeReference
        Identifier: ' EmptyStatement'
      TypeReference
        Identifier: ' ExportAllDeclaration'
      TypeReference
        Identifier: ' ExportDefaultDeclaration'
      TypeReference
        Identifier: ' ExportNamedDeclaration'
      TypeReference
        Identifier: ' ExportSpecifier'
      TypeReference
        Identifier: ' ExpressionStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' FunctionDeclaration'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' IfStatement'
      TypeReference
        Identifier: ' ImportAttribute'
      TypeReference
        Identifier: ' ImportDeclaration'
      TypeReference
        Identifier: ' ImportDefaultSpecifier'
      TypeReference
        Identifier: ' ImportExpression'
      TypeReference
        Identifier: ' ImportNamespaceSpecifier'
      TypeReference
        Identifier: ' ImportSpecifier'
      TypeReference
        Identifier: ' JSXAttribute'
      TypeReference
        Identifier: ' JSXClosingElement'
      TypeReference
        Identifier: ' JSXClosingFragment'
      TypeReference
        Identifier: ' JSXElement'
      TypeReference
        Identifier: ' JSXEmptyExpression'
      TypeReference
        Identifier: ' JSXExpressionContainer'
      TypeReference
        Identifier: ' JSXFragment'
      TypeReference
        Identifier: ' JSXIdentifier'
      TypeReference
        Identifier: ' JSXMemberExpression'
      TypeReference
        Identifier: ' JSXNamespacedName'
      TypeReference
        Identifier: ' JSXOpeningElement'
      TypeReference
        Identifier: ' JSXOpeningFragment'
      TypeReference
        Identifier: ' JSXSpreadAttribute'
      TypeReference
        Identifier: ' JSXSpreadChild'
      TypeReference
        Identifier: ' JSXText'
      TypeReference
        Identifier: ' LabeledStatement'
      TypeReference
        Identifier: ' Literal'
      TypeReference
        Identifier: ' LogicalExpression'
      TypeReference
        Identifier: ' MemberExpression'
      TypeReference
        Identifier: ' MetaProperty'
      TypeReference
        Identifier: ' MethodDefinition'
      TypeReference
        Identifier: ' NewExpression'
      TypeReference
        Identifier: ' ObjectExpression'
      TypeReference
        Identifier: ' ObjectPattern'
      TypeReference
        Identifier: ' PrivateIdentifier'
      TypeReference
        Identifier: ' Program'
      TypeReference
        Identifier: ' Property'
      TypeReference
        Identifier: ' PropertyDefinition'
      TypeReference
        Identifier: ' RestElement'
      TypeReference
        Identifier: ' ReturnStatement'
      TypeReference
        Identifier: ' SequenceExpression'
      TypeReference
        Identifier: ' SpreadElement'
      TypeReference
        Identifier: ' StaticBlock'
      TypeReference
        Identifier: ' Super'
      TypeReference
        Identifier: ' SwitchCase'
      TypeReference
        Identifier: ' SwitchStatement'
      TypeReference
        Identifier: ' TaggedTemplateExpression'
      TypeReference
        Identifier: ' TemplateElement'
      TypeReference
        Identifier: ' TemplateLiteral'
      TypeReference
        Identifier: ' ThisExpression'
      TypeReference
        Identifier: ' ThrowStatement'
      TypeReference
        Identifier: ' TryStatement'
      TypeReference
        Identifier: ' TSAbstractAccessorProperty'
      TypeReference
        Identifier: ' TSAbstractKeyword'
      TypeReference
        Identifier: ' TSAbstractMethodDefinition'
      TypeReference
        Identifier: ' TSAbstractPropertyDefinition'
      TypeReference
        Identifier: ' TSAnyKeyword'
      TypeReference
        Identifier: ' TSArrayType'
      TypeReference
        Identifier: ' TSAsExpression'
      TypeReference
        Identifier: ' TSAsyncKeyword'
      TypeReference
        Identifier: ' TSBigIntKeyword'
      TypeReference
        Identifier: ' TSBooleanKeyword'
      TypeReference
        Identifier: ' TSCallSignatureDeclaration'
      TypeReference
        Identifier: ' TSClassImplements'
      TypeReference
        Identifier: ' TSConditionalType'
      TypeReference
        Identifier: ' TSConstructorType'
      TypeReference
        Identifier: ' TSConstructSignatureDeclaration'
      TypeReference
        Identifier: ' TSDeclareFunction'
      TypeReference
        Identifier: ' TSDeclareKeyword'
      TypeReference
        Identifier: ' TSEmptyBodyFunctionExpression'
      TypeReference
        Identifier: ' TSEnumBody'
      TypeReference
        Identifier: ' TSEnumDeclaration'
      TypeReference
        Identifier: ' TSEnumMember'
      TypeReference
        Identifier: ' TSExportAssignment'
      TypeReference
        Identifier: ' TSExportKeyword'
      TypeReference
        Identifier: ' TSExternalModuleReference'
      TypeReference
        Identifier: ' TSFunctionType'
      TypeReference
        Identifier: ' TSImportEqualsDeclaration'
      TypeReference
        Identifier: ' TSImportType'
      TypeReference
        Identifier: ' TSIndexedAccessType'
      TypeReference
        Identifier: ' TSIndexSignature'
      TypeReference
        Identifier: ' TSInferType'
      TypeReference
        Identifier: ' TSInstantiationExpression'
      TypeReference
        Identifier: ' TSInterfaceBody'
      TypeReference
        Identifier: ' TSInterfaceDeclaration'
      TypeReference
        Identifier: ' TSInterfaceHeritage'
      TypeReference
        Identifier: ' TSIntersectionType'
      TypeReference
        Identifier: ' TSIntrinsicKeyword'
      TypeReference
        Identifier: ' TSLiteralType'
      TypeReference
        Identifier: ' TSMappedType'
      TypeReference
        Identifier: ' TSMethodSignature'
      TypeReference
        Identifier: ' TSModuleBlock'
      TypeReference
        Identifier: ' TSModuleDeclaration'
      TypeReference
        Identifier: ' TSNamedTupleMember'
      TypeReference
        Identifier: ' TSNamespaceExportDeclaration'
      TypeReference
        Identifier: ' TSNeverKeyword'
      TypeReference
        Identifier: ' TSNonNullExpression'
      TypeReference
        Identifier: ' TSNullKeyword'
      TypeReference
        Identifier: ' TSNumberKeyword'
      TypeReference
        Identifier: ' TSObjectKeyword'
      TypeReference
        Identifier: ' TSOptionalType'
      TypeReference
        Identifier: ' TSParameterProperty'
      TypeReference
        Identifier: ' TSPrivateKeyword'
      TypeReference
        Identifier: ' TSPropertySignature'
      TypeReference
        Identifier: ' TSProtectedKeyword'
      TypeReference
        Identifier: ' TSPublicKeyword'
      TypeReference
        Identifier: ' TSQualifiedName'
      TypeReference
        Identifier: ' TSReadonlyKeyword'
      TypeReference
        Identifier: ' TSRestType'
      TypeReference
        Identifier: ' TSSatisfiesExpression'
      TypeReference
        Identifier: ' TSStaticKeyword'
      TypeReference
        Identifier: ' TSStringKeyword'
      TypeReference
        Identifier: ' TSSymbolKeyword'
      TypeReference
        Identifier: ' TSTemplateLiteralType'
      TypeReference
        Identifier: ' TSThisType'
      TypeReference
        Identifier: ' TSTupleType'
      TypeReference
        Identifier: ' TSTypeAliasDeclaration'
      TypeReference
        Identifier: ' TSTypeAnnotation'
      TypeReference
        Identifier: ' TSTypeAssertion'
      TypeReference
        Identifier: ' TSTypeLiteral'
      TypeReference
        Identifier: ' TSTypeOperator'
      TypeReference
        Identifier: ' TSTypeParameter'
      TypeReference
        Identifier: ' TSTypeParameterDeclaration'
      TypeReference
        Identifier: ' TSTypeParameterInstantiation'
      TypeReference
        Identifier: ' TSTypePredicate'
      TypeReference
        Identifier: ' TSTypeQuery'
      TypeReference
        Identifier: ' TSTypeReference'
      TypeReference
        Identifier: ' TSUndefinedKeyword'
      TypeReference
        Identifier: ' TSUnionType'
      TypeReference
        Identifier: ' TSUnknownKeyword'
      TypeReference
        Identifier: ' TSVoidKeyword'
      TypeReference
        Identifier: ' UnaryExpression'
      TypeReference
        Identifier: ' UpdateExpression'
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' VariableDeclarator'
      TypeReference
        Identifier: ' WhileStatement'
      TypeReference
        Identifier: ' WithStatement'
      TypeReference
        Identifier: ' YieldExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' NodeOrTokenData'
    PropertySignature
      Identifier: '
    /**
     * The source location information of the node.
     *
     * The loc property is defined as nullable by ESTree, but ESLint requires this property.
     */
    loc'
      TypeReference
        Identifier: ' SourceLocation'
    PropertySignature
      Identifier: '
    range'
      TypeReference
        Identifier: ' Range'
    PropertySignature
      Identifier: '
    type'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' NullLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralBase'
    PropertySignature
      Identifier: '
    raw'
      LiteralType
        StringLiteral
    PropertySignature
      Identifier: '
    value'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' NullToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Null'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' NumberLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralBase'
    PropertySignature
      Identifier: '
    value'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' NumericToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Numeric'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ObjectExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    properties'
      ArrayType
        TypeReference
          Identifier: ' ObjectLiteralElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ObjectExpression'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ObjectLiteralElement'
    UnionType
      TypeReference
        Identifier: ' Property'
      TypeReference
        Identifier: ' SpreadElement'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ObjectLiteralElementLike'
    TypeReference
      Identifier: ' ObjectLiteralElement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ObjectPattern'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    properties'
      ArrayType
        ParenthesizedType
          UnionType
            TypeReference
              Identifier: 'Property'
            TypeReference
              Identifier: ' RestElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ObjectPattern'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' OptionalRangeAndLoc'
    TypeParameter
      Identifier: 'T'
    IntersectionType
      TypeLiteral
        PropertySignature
          Identifier: '
    loc'
          QuestionToken
          TypeReference
            Identifier: ' SourceLocation'
        PropertySignature
          Identifier: '
    range'
          QuestionToken
          TypeReference
            Identifier: ' Range'
      TypeReference
        Identifier: ' Pick'
        TypeReference
          Identifier: 'T'
        TypeReference
          Identifier: ' Exclude'
          TypeOperator
            TypeReference
              Identifier: ' T'
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Parameter'
    UnionType
      TypeReference
        Identifier: ' ArrayPattern'
      TypeReference
        Identifier: ' AssignmentPattern'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' ObjectPattern'
      TypeReference
        Identifier: ' RestElement'
      TypeReference
        Identifier: ' TSParameterProperty'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Position'
    PropertySignature
      Identifier: '
    /**
     * Column number on the line (0-indexed)
     */
    column'
      NumberKeyword
    PropertySignature
      Identifier: '
    /**
     * Line number (1-indexed)
     */
    line'
      NumberKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PrimaryExpression'
    UnionType
      TypeReference
        Identifier: ' ArrayExpression'
      TypeReference
        Identifier: ' ArrayPattern'
      TypeReference
        Identifier: ' ClassExpression'
      TypeReference
        Identifier: ' FunctionExpression'
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' JSXElement'
      TypeReference
        Identifier: ' JSXFragment'
      TypeReference
        Identifier: ' JSXOpeningElement'
      TypeReference
        Identifier: ' LiteralExpression'
      TypeReference
        Identifier: ' MetaProperty'
      TypeReference
        Identifier: ' ObjectExpression'
      TypeReference
        Identifier: ' ObjectPattern'
      TypeReference
        Identifier: ' Super'
      TypeReference
        Identifier: ' TemplateLiteral'
      TypeReference
        Identifier: ' ThisExpression'
      TypeReference
        Identifier: ' TSNullKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PrivateIdentifier'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    name'
      StringKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'PrivateIdentifier'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Program'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' NodeOrTokenData'
    PropertySignature
      Identifier: '
    body'
      ArrayType
        TypeReference
          Identifier: ' ProgramStatement'
    PropertySignature
      Identifier: '
    comments'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Comment'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    sourceType'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    tokens'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' Token'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'Program'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ProgramStatement'
    UnionType
      TypeReference
        Identifier: ' ExportAllDeclaration'
      TypeReference
        Identifier: ' ExportDefaultDeclaration'
      TypeReference
        Identifier: ' ExportNamedDeclaration'
      TypeReference
        Identifier: ' ImportDeclaration'
      TypeReference
        Identifier: ' Statement'
      TypeReference
        Identifier: ' TSImportEqualsDeclaration'
      TypeReference
        Identifier: ' TSNamespaceExportDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Property'
    UnionType
      TypeReference
        Identifier: ' PropertyComputedName'
      TypeReference
        Identifier: ' PropertyNonComputedName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' PropertyBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    computed'
      BooleanKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      Identifier: '
    kind'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    method'
      BooleanKeyword
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    shorthand'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'Property'
    PropertySignature
      Identifier: '
    value'
      UnionType
        TypeReference
          Identifier: ' AssignmentPattern'
        TypeReference
          Identifier: ' BindingName'
        TypeReference
          Identifier: ' Expression'
        TypeReference
          Identifier: ' TSEmptyBodyFunctionExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PropertyComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameComputed'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PropertyDefinition'
    UnionType
      TypeReference
        Identifier: ' PropertyDefinitionComputedName'
      TypeReference
        Identifier: ' PropertyDefinitionNonComputedName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' PropertyDefinitionBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    accessibility'
      UnionType
        TypeReference
          Identifier: ' Accessibility'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    computed'
      BooleanKeyword
    PropertySignature
      Identifier: '
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    definite'
      BooleanKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    override'
      BooleanKeyword
    PropertySignature
      Identifier: '
    readonly'
      BooleanKeyword
    PropertySignature
      Identifier: '
    static'
      BooleanKeyword
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    value'
      UnionType
        TypeReference
          Identifier: ' Expression'
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PropertyDefinitionComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'PropertyDefinition'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' PropertyDefinitionComputedNameBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PropertyDefinitionNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' ClassPropertyDefinitionNonComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'PropertyDefinition'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' PropertyDefinitionNonComputedNameBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameNonComputed'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PropertyName'
    UnionType
      TypeReference
        Identifier: ' ClassPropertyNameNonComputed'
      TypeReference
        Identifier: ' PropertyNameComputed'
      TypeReference
        Identifier: ' PropertyNameNonComputed'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PropertyNameComputed'
    TypeReference
      Identifier: ' Expression'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PropertyNameNonComputed'
    UnionType
      TypeReference
        Identifier: ' Identifier'
      TypeReference
        Identifier: ' NumberLiteral'
      TypeReference
        Identifier: ' StringLiteral'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PropertyNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameNonComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PunctuatorToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Punctuator'
    PropertySignature
      Identifier: '
    value'
      TypeReference
        Identifier: ' ValueOf'
        TypeReference
          Identifier: 'PunctuatorTokenToText'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' PunctuatorTokenToText'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' AssignmentOperatorToText'
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AmpersandAmpersandToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AmpersandToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AsteriskAsteriskToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AsteriskToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'AtToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'BacktickToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'BarBarToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'BarToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'CaretToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'CloseBraceToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'CloseBracketToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'CloseParenToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'ColonToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'CommaToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'DotDotDotToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'DotToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'EqualsEqualsEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'EqualsEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'EqualsGreaterThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'ExclamationEqualsEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'ExclamationEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'ExclamationToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanGreaterThanGreaterThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanGreaterThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'GreaterThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'HashToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'LessThanEqualsToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'LessThanLessThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'LessThanSlashToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'LessThanToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'MinusMinusToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'MinusToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'OpenBraceToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'OpenBracketToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'OpenParenToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'PercentToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'PlusPlusToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'PlusToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'QuestionDotToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'QuestionQuestionToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'QuestionToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'SemicolonToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'SlashToken'
      LiteralType
        StringLiteral
    PropertySignature
      ComputedPropertyName
        PropertyAccessExpression
          Identifier: 'SyntaxKind'
          Identifier: 'TildeToken'
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Range'
    TupleType
      NumberKeyword
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' RegExpLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralBase'
    PropertySignature
      Identifier: '
    regex'
      TypeLiteral
        PropertySignature
          Identifier: '
        flags'
          StringKeyword
        PropertySignature
          Identifier: '
        pattern'
          StringKeyword
    PropertySignature
      Identifier: '
    value'
      UnionType
        TypeReference
          Identifier: ' RegExp'
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' RegularExpressionToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    regex'
      TypeLiteral
        PropertySignature
          Identifier: '
        flags'
          StringKeyword
        PropertySignature
          Identifier: '
        pattern'
          StringKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'RegularExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' RestElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      TypeReference
        Identifier: ' DestructuringPattern'
    PropertySignature
      Identifier: '
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'RestElement'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    value'
      UnionType
        TypeReference
          Identifier: ' AssignmentPattern'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ReturnStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      UnionType
        TypeReference
          Identifier: ' Expression'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ReturnStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' SequenceExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expressions'
      ArrayType
        TypeReference
          Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'SequenceExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' SourceLocation'
    PropertySignature
      Identifier: '
    /**
     * The position of the first character after the parsed source region
     */
    end'
      TypeReference
        Identifier: ' Position'
    PropertySignature
      Identifier: '
    /**
     * The position of the first character of the parsed source region
     */
    start'
      TypeReference
        Identifier: ' Position'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' SpreadElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'SpreadElement'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Statement'
    UnionType
      TypeReference
        Identifier: ' BlockStatement'
      TypeReference
        Identifier: ' BreakStatement'
      TypeReference
        Identifier: ' ClassDeclarationWithName'
      TypeReference
        Identifier: ' ContinueStatement'
      TypeReference
        Identifier: ' DebuggerStatement'
      TypeReference
        Identifier: ' DoWhileStatement'
      TypeReference
        Identifier: ' EmptyStatement'
      TypeReference
        Identifier: ' ExportAllDeclaration'
      TypeReference
        Identifier: ' ExportDefaultDeclaration'
      TypeReference
        Identifier: ' ExportNamedDeclaration'
      TypeReference
        Identifier: ' ExpressionStatement'
      TypeReference
        Identifier: ' ForInStatement'
      TypeReference
        Identifier: ' ForOfStatement'
      TypeReference
        Identifier: ' ForStatement'
      TypeReference
        Identifier: ' FunctionDeclarationWithName'
      TypeReference
        Identifier: ' IfStatement'
      TypeReference
        Identifier: ' ImportDeclaration'
      TypeReference
        Identifier: ' LabeledStatement'
      TypeReference
        Identifier: ' ReturnStatement'
      TypeReference
        Identifier: ' SwitchStatement'
      TypeReference
        Identifier: ' ThrowStatement'
      TypeReference
        Identifier: ' TryStatement'
      TypeReference
        Identifier: ' TSDeclareFunction'
      TypeReference
        Identifier: ' TSEnumDeclaration'
      TypeReference
        Identifier: ' TSExportAssignment'
      TypeReference
        Identifier: ' TSImportEqualsDeclaration'
      TypeReference
        Identifier: ' TSInterfaceDeclaration'
      TypeReference
        Identifier: ' TSModuleDeclaration'
      TypeReference
        Identifier: ' TSNamespaceExportDeclaration'
      TypeReference
        Identifier: ' TSTypeAliasDeclaration'
      TypeReference
        Identifier: ' VariableDeclaration'
      TypeReference
        Identifier: ' WhileStatement'
      TypeReference
        Identifier: ' WithStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' StaticBlock'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      ArrayType
        TypeReference
          Identifier: ' Statement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'StaticBlock'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' StringLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' LiteralBase'
    PropertySignature
      Identifier: '
    value'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' StringToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'String'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Super'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'Super'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' SwitchCase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    consequent'
      ArrayType
        TypeReference
          Identifier: ' Statement'
    PropertySignature
      Identifier: '
    test'
      UnionType
        TypeReference
          Identifier: ' Expression'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'SwitchCase'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' SwitchStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    cases'
      ArrayType
        TypeReference
          Identifier: ' SwitchCase'
    PropertySignature
      Identifier: '
    discriminant'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'SwitchStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TaggedTemplateExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    quasi'
      TypeReference
        Identifier: ' TemplateLiteral'
    PropertySignature
      Identifier: '
    tag'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TaggedTemplateExpression'
    PropertySignature
      Identifier: '
    typeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TemplateElement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    tail'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TemplateElement'
    PropertySignature
      Identifier: '
    value'
      TypeLiteral
        PropertySignature
          Identifier: '
        cooked'
          StringKeyword
        PropertySignature
          Identifier: '
        raw'
          StringKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TemplateLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expressions'
      ArrayType
        TypeReference
          Identifier: ' Expression'
    PropertySignature
      Identifier: '
    quasis'
      ArrayType
        TypeReference
          Identifier: ' TemplateElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TemplateLiteral'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TemplateToken'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseToken'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_TOKEN_TYPES'
          Identifier: 'Template'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ThisExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ThisExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' ThrowStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'ThrowStatement'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' Token'
    UnionType
      TypeReference
        Identifier: ' BooleanToken'
      TypeReference
        Identifier: ' Comment'
      TypeReference
        Identifier: ' IdentifierToken'
      TypeReference
        Identifier: ' JSXIdentifierToken'
      TypeReference
        Identifier: ' JSXTextToken'
      TypeReference
        Identifier: ' KeywordToken'
      TypeReference
        Identifier: ' NullToken'
      TypeReference
        Identifier: ' NumericToken'
      TypeReference
        Identifier: ' PunctuatorToken'
      TypeReference
        Identifier: ' RegularExpressionToken'
      TypeReference
        Identifier: ' StringToken'
      TypeReference
        Identifier: ' TemplateToken'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TryStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    block'
      TypeReference
        Identifier: ' BlockStatement'
    PropertySignature
      Identifier: '
    finalizer'
      UnionType
        TypeReference
          Identifier: ' BlockStatement'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    handler'
      UnionType
        TypeReference
          Identifier: ' CatchClause'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TryStatement'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractAccessorProperty'
    UnionType
      TypeReference
        Identifier: ' TSAbstractAccessorPropertyComputedName'
      TypeReference
        Identifier: ' TSAbstractAccessorPropertyNonComputedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractAccessorPropertyComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAbstractAccessorProperty'
    PropertySignature
      Identifier: '
    value'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractAccessorPropertyNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionNonComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAbstractAccessorProperty'
    PropertySignature
      Identifier: '
    value'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAbstractKeyword'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractMethodDefinition'
    UnionType
      TypeReference
        Identifier: ' TSAbstractMethodDefinitionComputedName'
      TypeReference
        Identifier: ' TSAbstractMethodDefinitionNonComputedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractMethodDefinitionComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MethodDefinitionComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAbstractMethodDefinition'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractMethodDefinitionNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MethodDefinitionNonComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAbstractMethodDefinition'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractPropertyDefinition'
    UnionType
      TypeReference
        Identifier: ' TSAbstractPropertyDefinitionComputedName'
      TypeReference
        Identifier: ' TSAbstractPropertyDefinitionNonComputedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractPropertyDefinitionComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAbstractPropertyDefinition'
    PropertySignature
      Identifier: '
    value'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAbstractPropertyDefinitionNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' PropertyDefinitionNonComputedNameBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAbstractPropertyDefinition'
    PropertySignature
      Identifier: '
    value'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAnyKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAnyKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSArrayType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    elementType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSArrayType'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAsExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAsExpression'
    PropertySignature
      Identifier: '
    typeAnnotation'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSAsyncKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSAsyncKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSBigIntKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSBigIntKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSBooleanKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSBooleanKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSCallSignatureDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSFunctionSignatureBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSCallSignatureDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSClassImplements'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSHeritageBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSClassImplements'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSConditionalType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    checkType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    extendsType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    falseType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    trueType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSConditionalType'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSConstructorType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSFunctionSignatureBase'
    PropertySignature
      Identifier: '
    abstract'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSConstructorType'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSConstructSignatureDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSFunctionSignatureBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSConstructSignatureDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSDeclareFunction'
    UnionType
      TypeReference
        Identifier: ' TSDeclareFunctionNoDeclare'
      TypeReference
        Identifier: ' TSDeclareFunctionWithDeclare'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSDeclareFunctionBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionBase'
    PropertySignature
      Identifier: '
    /**
     * TS1183: An implementation cannot be declared in ambient contexts.
     */
    body'
      UndefinedKeyword
    PropertySignature
      Identifier: '
    /**
     * Whether the declaration has `declare` modifier.
     */
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    expression'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSDeclareFunction'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSDeclareFunctionNoDeclare'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSDeclareFunctionBase'
    PropertySignature
      Identifier: '
    declare'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    /**
     * - TS1221: Generators are not allowed in an ambient context.
     * - TS1222: An overload signature cannot be declared as a generator.
     */
    generator'
      LiteralType
        FalseKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSDeclareFunctionWithDeclare'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSDeclareFunctionBase'
    PropertySignature
      Identifier: '
    /**
     * TS1040: 'async' modifier cannot be used in an ambient context.
     */
    async'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    declare'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    /**
     * TS1221: Generators are not allowed in an ambient context.
     */
    generator'
      LiteralType
        FalseKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSDeclareKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSDeclareKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSEmptyBodyFunctionExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' FunctionBase'
    PropertySignature
      Identifier: '
    body'
      LiteralType
        NullKeyword
    PropertySignature
      Identifier: '
    id'
      LiteralType
        NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSEmptyBodyFunctionExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSEnumBody'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    members'
      ArrayType
        TypeReference
          Identifier: ' TSEnumMember'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSEnumBody'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSEnumDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The body of the enum.
     */
    body'
      TypeReference
        Identifier: ' TSEnumBody'
    PropertySignature
      Identifier: '
    /**
     * Whether this is a `const` enum.
     * @example
     * ```ts
     * const enum Foo {}
     * ```
     */
    const'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Whether this is a `declare`d enum.
     * @example
     * ```ts
     * declare enum Foo {}
     * ```
     */
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The enum name.
     */
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    /**
     * The enum members.
     * @deprecated Use {@link body} instead.
     */
    members'
      ArrayType
        TypeReference
          Identifier: ' TSEnumMember'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSEnumDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSEnumMember'
    UnionType
      TypeReference
        Identifier: ' TSEnumMemberComputedName'
      TypeReference
        Identifier: ' TSEnumMemberNonComputedName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSEnumMemberBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    computed'
      BooleanKeyword
    PropertySignature
      Identifier: '
    id'
      UnionType
        TypeReference
          Identifier: ' PropertyNameComputed'
        TypeReference
          Identifier: ' PropertyNameNonComputed'
    PropertySignature
      Identifier: '
    initializer'
      UnionType
        TypeReference
          Identifier: ' Expression'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSEnumMember'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSEnumMemberComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSEnumMemberBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' PropertyNameComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSEnumMemberNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSEnumMemberBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' PropertyNameNonComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSExportAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSExportAssignment'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSExportKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSExportKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSExternalModuleReference'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' StringLiteral'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSExternalModuleReference'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSFunctionSignatureBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    params'
      ArrayType
        TypeReference
          Identifier: ' Parameter'
    PropertySignature
      Identifier: '
    returnType'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    typeParameters'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterDeclaration'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSFunctionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSFunctionSignatureBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSFunctionType'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSHeritageBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    typeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        UndefinedKeyword
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSImportEqualsDeclaration'
    UnionType
      TypeReference
        Identifier: ' TSImportEqualsNamespaceDeclaration'
      TypeReference
        Identifier: ' TSImportEqualsRequireDeclaration'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSImportEqualsDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The locally imported name.
     */
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    /**
     * The kind of the import. Always `'value'` unless `moduleReference` is a
     * `TSExternalModuleReference`.
     */
    importKind'
      TypeReference
        Identifier: ' ImportKind'
    PropertySignature
      Identifier: '
    /**
     * The value being aliased.
     * @example
     * ```ts
     * import F1 = A;
     * import F2 = A.B.C;
     * import F3 = require('mod');
     * ```
     */
    moduleReference'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' TSExternalModuleReference'
        TypeReference
          Identifier: ' TSQualifiedName'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSImportEqualsDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSImportEqualsNamespaceDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSImportEqualsDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * The kind of the import.
     */
    importKind'
      LiteralType
        StringLiteral
    PropertySignature
      Identifier: '
    /**
     * The value being aliased.
     * ```
     * import F1 = A;
     * import F2 = A.B.C;
     * ```
     */
    moduleReference'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' TSQualifiedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSImportEqualsRequireDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSImportEqualsDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * The kind of the import.
     */
    importKind'
      TypeReference
        Identifier: ' ImportKind'
    PropertySignature
      Identifier: '
    /**
     * The value being aliased.
     * ```
     * import F3 = require('mod');
     * ```
     */
    moduleReference'
      TypeReference
        Identifier: ' TSExternalModuleReference'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSImportType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    qualifier'
      UnionType
        TypeReference
          Identifier: ' EntityName'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSImportType'
    PropertySignature
      Identifier: '
    typeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSIndexedAccessType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    indexType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    objectType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSIndexedAccessType'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSIndexSignature'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    accessibility'
      UnionType
        TypeReference
          Identifier: ' Accessibility'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    parameters'
      ArrayType
        TypeReference
          Identifier: ' Parameter'
    PropertySignature
      Identifier: '
    readonly'
      BooleanKeyword
    PropertySignature
      Identifier: '
    static'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSIndexSignature'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSInferType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSInferType'
    PropertySignature
      Identifier: '
    typeParameter'
      TypeReference
        Identifier: ' TSTypeParameter'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSInstantiationExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSInstantiationExpression'
    PropertySignature
      Identifier: '
    typeArguments'
      TypeReference
        Identifier: ' TSTypeParameterInstantiation'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSInterfaceBody'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      ArrayType
        TypeReference
          Identifier: ' TypeElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSInterfaceBody'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSInterfaceDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The body of the interface
     */
    body'
      TypeReference
        Identifier: ' TSInterfaceBody'
    PropertySignature
      Identifier: '
    /**
     * Whether the interface was `declare`d
     */
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The types this interface `extends`
     */
    extends'
      ArrayType
        TypeReference
          Identifier: ' TSInterfaceHeritage'
    PropertySignature
      Identifier: '
    /**
     * The name of this interface
     */
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSInterfaceDeclaration'
    PropertySignature
      Identifier: '
    /**
     * The generic type parameters declared for the interface. Empty declaration
     * (`<>`) is different from no declaration.
     */
    typeParameters'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterDeclaration'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSInterfaceHeritage'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSHeritageBase'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSInterfaceHeritage'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSIntersectionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSIntersectionType'
    PropertySignature
      Identifier: '
    types'
      ArrayType
        TypeReference
          Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSIntrinsicKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSIntrinsicKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSLiteralType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    literal'
      UnionType
        TypeReference
          Identifier: ' LiteralExpression'
        TypeReference
          Identifier: ' UnaryExpression'
        TypeReference
          Identifier: ' UpdateExpression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSLiteralType'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSMappedType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    constraint'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    nameType'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    optional'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    readonly'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        BooleanKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSMappedType'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    /** @deprecated Use {@link `constraint`} and {@link `key`} instead. */
    typeParameter'
      TypeReference
        Identifier: ' TSTypeParameter'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSMethodSignature'
    UnionType
      TypeReference
        Identifier: ' TSMethodSignatureComputedName'
      TypeReference
        Identifier: ' TSMethodSignatureNonComputedName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSMethodSignatureBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    accessibility'
      UnionType
        TypeReference
          Identifier: ' Accessibility'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    computed'
      BooleanKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      Identifier: '
    kind'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    params'
      ArrayType
        TypeReference
          Identifier: ' Parameter'
    PropertySignature
      Identifier: '
    readonly'
      BooleanKeyword
    PropertySignature
      Identifier: '
    returnType'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    static'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSMethodSignature'
    PropertySignature
      Identifier: '
    typeParameters'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterDeclaration'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSMethodSignatureComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSMethodSignatureBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSMethodSignatureNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSMethodSignatureBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameNonComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleBlock'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      ArrayType
        TypeReference
          Identifier: ' ProgramStatement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSModuleBlock'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclaration'
    UnionType
      TypeReference
        Identifier: ' TSModuleDeclarationGlobal'
      TypeReference
        Identifier: ' TSModuleDeclarationModule'
      TypeReference
        Identifier: ' TSModuleDeclarationNamespace'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSModuleDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The body of the module.
     * This can only be `undefined` for the code `declare module 'mod';`
     */
    body'
      QuestionToken
      TypeReference
        Identifier: ' TSModuleBlock'
    PropertySignature
      Identifier: '
    /**
     * Whether the module is `declare`d
     * @example
     * ```ts
     * declare namespace F {}
     * ```
     */
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * Whether this is a global declaration
     * @example
     * ```ts
     * declare global {}
     * ```
     *
     * @deprecated Use {@link kind} instead
     */
    global'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The name of the module
     * ```
     * namespace A {}
     * namespace A.B.C {}
     * module 'a' {}
     * ```
     */
    id'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' Literal'
        TypeReference
          Identifier: ' TSQualifiedName'
    PropertySignature
      Identifier: '
    /**
     * The keyword used to define this module declaration
     * @example
     * ```ts
     * namespace Foo {}
     * ^^^^^^^^^
     *
     * module 'foo' {}
     * ^^^^^^
     *
     * global {}
     * ^^^^^^
     * ```
     */
    kind'
      TypeReference
        Identifier: ' TSModuleDeclarationKind'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSModuleDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclarationGlobal'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSModuleDeclarationBase'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' TSModuleBlock'
    PropertySignature
      Identifier: '
    /**
     * This will always be an Identifier with name `global`
     */
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    kind'
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclarationKind'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclarationModule'
    UnionType
      TypeReference
        Identifier: ' TSModuleDeclarationModuleWithIdentifierId'
      TypeReference
        Identifier: ' TSModuleDeclarationModuleWithStringId'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSModuleDeclarationModuleBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSModuleDeclarationBase'
    PropertySignature
      Identifier: '
    kind'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclarationModuleWithIdentifierId'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSModuleDeclarationModuleBase'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' TSModuleBlock'
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    kind'
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclarationModuleWithStringId'
    UnionType
      TypeReference
        Identifier: ' TSModuleDeclarationModuleWithStringIdDeclared'
      TypeReference
        Identifier: ' TSModuleDeclarationModuleWithStringIdNotDeclared'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclarationModuleWithStringIdDeclared'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSModuleDeclarationModuleBase'
    PropertySignature
      Identifier: '
    body'
      QuestionToken
      TypeReference
        Identifier: ' TSModuleBlock'
    PropertySignature
      Identifier: '
    declare'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' StringLiteral'
    PropertySignature
      Identifier: '
    kind'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclarationModuleWithStringIdNotDeclared'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSModuleDeclarationModuleBase'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' TSModuleBlock'
    PropertySignature
      Identifier: '
    declare'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' StringLiteral'
    PropertySignature
      Identifier: '
    kind'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSModuleDeclarationNamespace'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSModuleDeclarationBase'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' TSModuleBlock'
    PropertySignature
      Identifier: '
    id'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' TSQualifiedName'
    PropertySignature
      Identifier: '
    kind'
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSNamedTupleMember'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    elementType'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    label'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSNamedTupleMember'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSNamespaceExportDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * The name of the global variable that's exported as namespace
     */
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSNamespaceExportDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSNeverKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSNeverKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSNonNullExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSNonNullExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSNullKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSNullKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSNumberKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSNumberKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSObjectKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSObjectKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSOptionalType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSOptionalType'
    PropertySignature
      Identifier: '
    typeAnnotation'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSParameterProperty'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    accessibility'
      UnionType
        TypeReference
          Identifier: ' Accessibility'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    decorators'
      ArrayType
        TypeReference
          Identifier: ' Decorator'
    PropertySignature
      Identifier: '
    override'
      BooleanKeyword
    PropertySignature
      Identifier: '
    parameter'
      UnionType
        TypeReference
          Identifier: ' AssignmentPattern'
        TypeReference
          Identifier: ' BindingName'
        TypeReference
          Identifier: ' RestElement'
    PropertySignature
      Identifier: '
    readonly'
      BooleanKeyword
    PropertySignature
      Identifier: '
    static'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSParameterProperty'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSPrivateKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSPrivateKeyword'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSPropertySignature'
    UnionType
      TypeReference
        Identifier: ' TSPropertySignatureComputedName'
      TypeReference
        Identifier: ' TSPropertySignatureNonComputedName'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' TSPropertySignatureBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    accessibility'
      UnionType
        TypeReference
          Identifier: ' Accessibility'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    computed'
      BooleanKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyName'
    PropertySignature
      Identifier: '
    optional'
      BooleanKeyword
    PropertySignature
      Identifier: '
    readonly'
      BooleanKeyword
    PropertySignature
      Identifier: '
    static'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSPropertySignature'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSPropertySignatureComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSPropertySignatureBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSPropertySignatureNonComputedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TSPropertySignatureBase'
    PropertySignature
      Identifier: '
    computed'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    key'
      TypeReference
        Identifier: ' PropertyNameNonComputed'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSProtectedKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSProtectedKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSPublicKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSPublicKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSQualifiedName'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    left'
      TypeReference
        Identifier: ' EntityName'
    PropertySignature
      Identifier: '
    right'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSQualifiedName'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSReadonlyKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSReadonlyKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSRestType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSRestType'
    PropertySignature
      Identifier: '
    typeAnnotation'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSSatisfiesExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSSatisfiesExpression'
    PropertySignature
      Identifier: '
    typeAnnotation'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSStaticKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSStaticKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSStringKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSStringKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSSymbolKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSSymbolKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTemplateLiteralType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    quasis'
      ArrayType
        TypeReference
          Identifier: ' TemplateElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTemplateLiteralType'
    PropertySignature
      Identifier: '
    types'
      ArrayType
        TypeReference
          Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSThisType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSThisType'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTupleType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    elementTypes'
      ArrayType
        TypeReference
          Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTupleType'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeAliasDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * Whether the type was `declare`d.
     * @example
     * ```ts
     * declare type T = 1;
     * ```
     */
    declare'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The name of the type.
     */
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeAliasDeclaration'
    PropertySignature
      Identifier: '
    /**
     * The "value" (type) of the declaration
     */
    typeAnnotation'
      TypeReference
        Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    /**
     * The generic type parameters declared for the type. Empty declaration
     * (`<>`) is different from no declaration.
     */
    typeParameters'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterDeclaration'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeAnnotation'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeAnnotation'
    PropertySignature
      Identifier: '
    typeAnnotation'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeAssertion'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    expression'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeAssertion'
    PropertySignature
      Identifier: '
    typeAnnotation'
      TypeReference
        Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeLiteral'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    members'
      ArrayType
        TypeReference
          Identifier: ' TypeElement'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeLiteral'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeOperator'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    operator'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeOperator'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeParameter'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    const'
      BooleanKeyword
    PropertySignature
      Identifier: '
    constraint'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    default'
      UnionType
        TypeReference
          Identifier: ' TypeNode'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    in'
      BooleanKeyword
    PropertySignature
      Identifier: '
    name'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    out'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeParameter'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeParameterDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    params'
      ArrayType
        TypeReference
          Identifier: ' TSTypeParameter'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeParameterDeclaration'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeParameterInstantiation'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    params'
      ArrayType
        TypeReference
          Identifier: ' TypeNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeParameterInstantiation'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypePredicate'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    asserts'
      BooleanKeyword
    PropertySignature
      Identifier: '
    parameterName'
      UnionType
        TypeReference
          Identifier: ' Identifier'
        TypeReference
          Identifier: ' TSThisType'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypePredicate'
    PropertySignature
      Identifier: '
    typeAnnotation'
      UnionType
        TypeReference
          Identifier: ' TSTypeAnnotation'
        LiteralType
          NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeQuery'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    exprName'
      UnionType
        TypeReference
          Identifier: ' EntityName'
        TypeReference
          Identifier: ' TSImportType'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeQuery'
    PropertySignature
      Identifier: '
    typeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSTypeReference'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSTypeReference'
    PropertySignature
      Identifier: '
    typeArguments'
      UnionType
        TypeReference
          Identifier: ' TSTypeParameterInstantiation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    typeName'
      TypeReference
        Identifier: ' EntityName'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSUnaryExpression'
    UnionType
      TypeReference
        Identifier: ' AwaitExpression'
      TypeReference
        Identifier: ' LeftHandSideExpression'
      TypeReference
        Identifier: ' UnaryExpression'
      TypeReference
        Identifier: ' UpdateExpression'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSUndefinedKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSUndefinedKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSUnionType'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSUnionType'
    PropertySignature
      Identifier: '
    types'
      ArrayType
        TypeReference
          Identifier: ' TypeNode'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSUnknownKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSUnknownKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TSVoidKeyword'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'TSVoidKeyword'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TypeElement'
    UnionType
      TypeReference
        Identifier: ' TSCallSignatureDeclaration'
      TypeReference
        Identifier: ' TSConstructSignatureDeclaration'
      TypeReference
        Identifier: ' TSIndexSignature'
      TypeReference
        Identifier: ' TSMethodSignature'
      TypeReference
        Identifier: ' TSPropertySignature'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' TypeNode'
    UnionType
      TypeReference
        Identifier: ' TSAbstractKeyword'
      TypeReference
        Identifier: ' TSAnyKeyword'
      TypeReference
        Identifier: ' TSArrayType'
      TypeReference
        Identifier: ' TSAsyncKeyword'
      TypeReference
        Identifier: ' TSBigIntKeyword'
      TypeReference
        Identifier: ' TSBooleanKeyword'
      TypeReference
        Identifier: ' TSConditionalType'
      TypeReference
        Identifier: ' TSConstructorType'
      TypeReference
        Identifier: ' TSDeclareKeyword'
      TypeReference
        Identifier: ' TSExportKeyword'
      TypeReference
        Identifier: ' TSFunctionType'
      TypeReference
        Identifier: ' TSImportType'
      TypeReference
        Identifier: ' TSIndexedAccessType'
      TypeReference
        Identifier: ' TSInferType'
      TypeReference
        Identifier: ' TSIntersectionType'
      TypeReference
        Identifier: ' TSIntrinsicKeyword'
      TypeReference
        Identifier: ' TSLiteralType'
      TypeReference
        Identifier: ' TSMappedType'
      TypeReference
        Identifier: ' TSNamedTupleMember'
      TypeReference
        Identifier: ' TSNeverKeyword'
      TypeReference
        Identifier: ' TSNullKeyword'
      TypeReference
        Identifier: ' TSNumberKeyword'
      TypeReference
        Identifier: ' TSObjectKeyword'
      TypeReference
        Identifier: ' TSOptionalType'
      TypeReference
        Identifier: ' TSPrivateKeyword'
      TypeReference
        Identifier: ' TSProtectedKeyword'
      TypeReference
        Identifier: ' TSPublicKeyword'
      TypeReference
        Identifier: ' TSQualifiedName'
      TypeReference
        Identifier: ' TSReadonlyKeyword'
      TypeReference
        Identifier: ' TSRestType'
      TypeReference
        Identifier: ' TSStaticKeyword'
      TypeReference
        Identifier: ' TSStringKeyword'
      TypeReference
        Identifier: ' TSSymbolKeyword'
      TypeReference
        Identifier: ' TSTemplateLiteralType'
      TypeReference
        Identifier: ' TSThisType'
      TypeReference
        Identifier: ' TSTupleType'
      TypeReference
        Identifier: ' TSTypeLiteral'
      TypeReference
        Identifier: ' TSTypeOperator'
      TypeReference
        Identifier: ' TSTypePredicate'
      TypeReference
        Identifier: ' TSTypeQuery'
      TypeReference
        Identifier: ' TSTypeReference'
      TypeReference
        Identifier: ' TSUndefinedKeyword'
      TypeReference
        Identifier: ' TSUnionType'
      TypeReference
        Identifier: ' TSUnknownKeyword'
      TypeReference
        Identifier: ' TSVoidKeyword'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' UnaryExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnaryExpressionBase'
    PropertySignature
      Identifier: '
    operator'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'UnaryExpression'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' UnaryExpressionBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    operator'
      StringKeyword
    PropertySignature
      Identifier: '
    prefix'
      BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' UpdateExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UnaryExpressionBase'
    PropertySignature
      Identifier: '
    operator'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'UpdateExpression'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' UsingDeclaration'
    UnionType
      TypeReference
        Identifier: ' UsingInForOfDeclaration'
      TypeReference
        Identifier: ' UsingInNormalContextDeclaration'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' UsingDeclarationBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * This value will always be `false`
     * because 'declare' modifier cannot appear on a 'using' declaration.
     */
    declare'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    /**
     * The keyword used to declare the variable(s)
     * @example
     * ```ts
     * using x = 1;
     * await using y = 2;
     * ```
     */
    kind'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'VariableDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' UsingDeclarator'
    UnionType
      TypeReference
        Identifier: ' UsingInForOfDeclarator'
      TypeReference
        Identifier: ' UsingInNormalContextDeclarator'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' UsingInForOfDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UsingDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * The variables declared by this declaration.
     * Always has exactly one element.
     * @example
     * ```ts
     * for (using x of y) {}
     * ```
     */
    declarations'
      TupleType
        TypeReference
          Identifier: 'UsingInForOfDeclarator'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' UsingInForOfDeclarator'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VariableDeclaratorBase'
    PropertySignature
      Identifier: '
    definite'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    init'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' UsingInNormalContextDeclaration'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' UsingDeclarationBase'
    PropertySignature
      Identifier: '
    /**
     * The variables declared by this declaration.
     * Always non-empty.
     * @example
     * ```ts
     * using x = 1;
     * using y = 1, z = 2;
     * ```
     */
    declarations'
      ArrayType
        TypeReference
          Identifier: ' UsingInNormalContextDeclarator'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' UsingInNormalContextDeclarator'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VariableDeclaratorBase'
    PropertySignature
      Identifier: '
    definite'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    init'
      TypeReference
        Identifier: ' Expression'
  TypeAliasDeclaration
    DeclareKeyword
    Identifier: ' ValueOf'
    TypeParameter
      Identifier: 'T'
    IndexedAccessType
      TypeReference
        Identifier: ' T'
      TypeOperator
        TypeReference
          Identifier: ' T'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' VariableDeclaration'
    UnionType
      TypeReference
        Identifier: ' LetOrConstOrVarDeclaration'
      TypeReference
        Identifier: ' UsingDeclaration'
  TypeAliasDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' VariableDeclarator'
    UnionType
      TypeReference
        Identifier: ' LetOrConstOrVarDeclarator'
      TypeReference
        Identifier: ' UsingDeclarator'
  InterfaceDeclaration
    DeclareKeyword
    Identifier: ' VariableDeclaratorBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    /**
     * Whether there's definite assignment assertion (`let x!: number`).
     * If `true`, then: `id` must be an identifier with a type annotation,
     * `init` must be `null`, and the declarator must be a `var`/`let` declarator.
     */
    definite'
      BooleanKeyword
    PropertySignature
      Identifier: '
    /**
     * The name(s) of the variable(s).
     */
    id'
      TypeReference
        Identifier: ' BindingName'
    PropertySignature
      Identifier: '
    /**
     * The initializer expression of the variable. Must be present for `const` unless
     * in a `declare const`.
     */
    init'
      UnionType
        TypeReference
          Identifier: ' Expression'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'VariableDeclarator'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' VariableDeclaratorDefiniteAssignment'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VariableDeclaratorBase'
    PropertySignature
      Identifier: '
    definite'
      LiteralType
        TrueKeyword
    PropertySignature
      Identifier: '
    /**
     * The name of the variable. Must have a type annotation.
     */
    id'
      TypeReference
        Identifier: ' Identifier'
    PropertySignature
      Identifier: '
    init'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' VariableDeclaratorMaybeInit'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VariableDeclaratorBase'
    PropertySignature
      Identifier: '
    definite'
      LiteralType
        FalseKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' VariableDeclaratorNoInit'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VariableDeclaratorBase'
    PropertySignature
      Identifier: '
    definite'
      LiteralType
        FalseKeyword
    PropertySignature
      Identifier: '
    init'
      LiteralType
        NullKeyword
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' WhileStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      Identifier: '
    test'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'WhileStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' WithStatement'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    body'
      TypeReference
        Identifier: ' Statement'
    PropertySignature
      Identifier: '
    object'
      TypeReference
        Identifier: ' Expression'
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'WithStatement'
  InterfaceDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' YieldExpression'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BaseNode'
    PropertySignature
      Identifier: '
    argument'
      UnionType
        TypeReference
          Identifier: ' Expression'
        UndefinedKeyword
    PropertySignature
      Identifier: '
    delegate'
      BooleanKeyword
    PropertySignature
      Identifier: '
    type'
      TypeReference
        QualifiedName
          Identifier: ' AST_NODE_TYPES'
          Identifier: 'YieldExpression'
  ExportDeclaration
    NamedExports
