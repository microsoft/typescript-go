SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' ParserServices'
        ImportSpecifier
          Identifier: ' TSESTree'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Parser'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Scope'
    StringLiteral
  ClassDeclaration
    DeclareKeyword
    Identifier: ' TokenStore'
    MethodDeclaration
      Identifier: '
    /**
     * Checks whether any comments exist or not between the given 2 nodes.
     * @param left The node to check.
     * @param right The node to check.
     * @returns `true` if one or more comments exist.
     */
    commentsExistBetween'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' right'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets all comment tokens directly after the given node or token.
     * @param nodeOrToken The AST node or token to check for adjacent comment tokens.
     * @returns An array of comments in occurrence order.
     */
    getCommentsAfter'
      Parameter
        Identifier: 'nodeOrToken'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Comment'
    MethodDeclaration
      Identifier: '
    /**
     * Gets all comment tokens directly before the given node or token.
     * @param nodeOrToken The AST node or token to check for adjacent comment tokens.
     * @returns An array of comments in occurrence order.
     */
    getCommentsBefore'
      Parameter
        Identifier: 'nodeOrToken'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Comment'
    MethodDeclaration
      Identifier: '
    /**
     * Gets all comment tokens inside the given node.
     * @param node The AST node to get the comments for.
     * @returns An array of comments in occurrence order.
     */
    getCommentsInside'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Comment'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the first token of the given node.
     * @param node The AST node.
     * @param options The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.
     * @returns An object representing the token.
     */
    getFirstToken'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithSkipOptions'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the first token between two non-overlapping nodes.
     * @param left Node before the desired token range.
     * @param right Node after the desired token range.
     * @param options The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.
     * @returns An object representing the token.
     */
    getFirstTokenBetween'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithSkipOptions'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' right'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the first `count` tokens of the given node.
     * @param node The AST node.
     * @param options The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.
     */
    getFirstTokens'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithCountOptions'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the first `count` tokens between two non-overlapping nodes.
     * @param left Node before the desired token range.
     * @param right Node after the desired token range.
     * @param options The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.
     * @returns Tokens between left and right.
     */
    getFirstTokensBetween'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithCountOptions'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' right'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the last token of the given node.
     * @param node The AST node.
     * @param options The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.
     * @returns An object representing the token.
     */
    getLastToken'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithSkipOptions'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the last token between two non-overlapping nodes.
     * @param left Node before the desired token range.
     * @param right Node after the desired token range.
     * @param options The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.
     * @returns An object representing the token.
     */
    getLastTokenBetween'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithSkipOptions'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' right'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the last `count` tokens of the given node.
     * @param node The AST node.
     * @param options The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.
     */
    getLastTokens'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithCountOptions'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the last `count` tokens between two non-overlapping nodes.
     * @param left Node before the desired token range.
     * @param right Node after the desired token range.
     * @param options The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.
     * @returns Tokens between left and right.
     */
    getLastTokensBetween'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithCountOptions'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' right'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the token that follows a given node or token.
     * @param node The AST node or token.
     * @param options The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.
     * @returns An object representing the token.
     */
    getTokenAfter'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithSkipOptions'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the token that precedes a given node or token.
     * @param node The AST node or token.
     * @param options The option object
     * @returns An object representing the token.
     */
    getTokenBefore'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithSkipOptions'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the token starting at the specified index.
     * @param offset Index of the start of the token's range.
     * @param options The option object. If this is a number then it's `options.skip`. If this is a function then it's `options.filter`.
     * @returns The token starting at index, or null if no such token.
     */
    getTokenByRangeStart'
      TypeParameter
        Identifier: 'T'
        TypeLiteral
          PropertySignature
            Identifier: '
        includeComments'
            QuestionToken
            BooleanKeyword
      Parameter
        Identifier: 'offset'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' T'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets all tokens that are related to the given node.
     * @param node The AST node.
     * @param beforeCount The number of tokens before the node to retrieve.
     * @param afterCount The number of tokens after the node to retrieve.
     * @returns Array of objects representing tokens.
     */
    getTokens'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      Parameter
        Identifier: ' beforeCount'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' afterCount'
        QuestionToken
        NumberKeyword
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Token'
    MethodDeclaration
      Identifier: '
    /**
     * Gets all tokens that are related to the given node.
     * @param node The AST node.
     * @param options The option object. If this is a function then it's `options.filter`.
     * @returns Array of objects representing tokens.
     */
    getTokens'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithCountOptions'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      Parameter
        Identifier: ' options'
        TypeReference
          Identifier: ' T'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the `count` tokens that follows a given node or token.
     * @param node The AST node.
     * @param options The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.
     */
    getTokensAfter'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithCountOptions'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' T'
          NumberKeyword
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the `count` tokens that precedes a given node or token.
     * @param node The AST node.
     * @param options The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.
     */
    getTokensBefore'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithCountOptions'
      Parameter
        Identifier: 'node'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' T'
          NumberKeyword
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
    MethodDeclaration
      Identifier: '
    /**
     * Gets all of the tokens between two non-overlapping nodes.
     * @param left Node before the desired token range.
     * @param right Node after the desired token range.
     * @param options The option object. If this is a number then it's `options.count`. If this is a function then it's `options.filter`.
     * @returns Tokens between left and right.
     */
    getTokensBetween'
      TypeParameter
        Identifier: 'T'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'CursorWithCountOptions'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' right'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' options'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' T'
          NumberKeyword
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'ReturnTypeFromOptions'
          TypeReference
            Identifier: 'T'
  ClassDeclaration
    DeclareKeyword
    Identifier: ' SourceCodeBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TokenStore'
    Constructor
      Parameter
        Identifier: 'text'
        StringKeyword
      Parameter
        Identifier: ' ast'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'Program'
    Constructor
      Parameter
        Identifier: 'config'
        TypeReference
          QualifiedName
            Identifier: ' SourceCode'
            Identifier: 'SourceCodeConfig'
    PropertyDeclaration
      Identifier: '
    /**
     * The parsed AST for the source code.
     */
    ast'
      TypeReference
        QualifiedName
          Identifier: ' SourceCode'
          Identifier: 'Program'
    MethodDeclaration
      Identifier: '
    applyInlineConfig'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    applyLanguageOptions'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    finalize'
      VoidKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Retrieves an array containing all comments in the source code.
     * @returns An array of comment nodes.
     */
    getAllComments'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Comment'
    MethodDeclaration
      Identifier: '
    /**
     * Converts a (line, column) pair into a range index.
     * @param location A line/column location
     * @returns The range index of the location in the file.
     */
    getIndexFromLoc'
      Parameter
        Identifier: 'location'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Position'
      NumberKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the entire source text split into an array of lines.
     * @returns The source text as an array of lines.
     */
    getLines'
      ArrayType
        StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Converts a source text index into a (line, column) pair.
     * @param index The index of a character in a file
     * @returns A {line, column} location object with a 0-indexed column
     */
    getLocFromIndex'
      Parameter
        Identifier: 'index'
        NumberKeyword
      TypeReference
        QualifiedName
          Identifier: ' TSESTree'
          Identifier: 'Position'
    MethodDeclaration
      Identifier: '
    /**
     * Gets the deepest node containing a range index.
     * @param index Range index of the desired node.
     * @returns The node if found or `null` if not found.
     */
    getNodeByRangeIndex'
      Parameter
        Identifier: 'index'
        NumberKeyword
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
        LiteralType
          NullKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets the source code for the given node.
     * @param node The AST node to get the text for.
     * @param beforeCount The number of characters before the node to retrieve.
     * @param afterCount The number of characters after the node to retrieve.
     * @returns The text representing the AST node.
     */
    getText'
      Parameter
        Identifier: 'node'
        QuestionToken
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' beforeCount'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' afterCount'
        QuestionToken
        NumberKeyword
      StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The flag to indicate that the source code has Unicode BOM.
     */
    hasBOM'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Determines if two nodes or tokens have at least one whitespace character
     * between them. Order does not matter. Returns false if the given nodes or
     * tokens overlap.
     * @param first The first node or token to check between.
     * @param second The second node or token to check between.
     * @returns True if there is a whitespace character between any of the tokens found between the two given nodes or tokens.
     */
    isSpaceBetween'
      Parameter
        Identifier: 'first'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      Parameter
        Identifier: ' second'
        UnionType
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Node'
          TypeReference
            QualifiedName
              Identifier: ' TSESTree'
              Identifier: 'Token'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Determines if two nodes or tokens have at least one whitespace character
     * between them. Order does not matter. Returns false if the given nodes or
     * tokens overlap.
     * For backward compatibility, this method returns true if there are
     * `JSXText` tokens that contain whitespace between the two.
     * @param first The first node or token to check between.
     * @param second The second node or token to check between.
     * @returns {boolean} True if there is a whitespace character between
     * any of the tokens found between the two given nodes or tokens.
     * @deprecated in favor of isSpaceBetween
     */
    isSpaceBetweenTokens'
      Parameter
        Identifier: 'first'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Token'
      Parameter
        Identifier: ' second'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Token'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Returns the scope of the given node.
     * This information can be used track references to variables.
     */
    getScope'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      TypeReference
        QualifiedName
          Identifier: ' Scope'
          Identifier: 'Scope'
    MethodDeclaration
      Identifier: '
    /**
     * Returns an array of the ancestors of the given node, starting at
     * the root of the AST and continuing through the direct parent of the current node.
     * This array does not include the currently-traversed node itself.
     */
    getAncestors'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
    MethodDeclaration
      Identifier: '
    /**
     * Returns a list of variables declared by the given node.
     * This information can be used to track references to variables.
     */
    getDeclaredVariables'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      TypeOperator
        ArrayType
          TypeReference
            QualifiedName
              Identifier: ' Scope'
              Identifier: 'Variable'
    MethodDeclaration
      Identifier: '
    /**
     * Marks a variable with the given name in the current scope as used.
     * This affects the no-unused-vars rule.
     */
    markVariableAsUsed'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      BooleanKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The source code split into lines according to ECMA-262 specification.
     * This is done to avoid each rule needing to do so separately.
     */
    lines'
      ArrayType
        StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The indexes in `text` that each line starts
     */
    lineStartIndices'
      ArrayType
        NumberKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The parser services of this source code.
     */
    parserServices'
      QuestionToken
      TypeReference
        Identifier: ' Partial'
        TypeReference
          Identifier: 'ParserServices'
    PropertyDeclaration
      Identifier: '
    /**
     * The scope of this source code.
     */
    scopeManager'
      UnionType
        TypeReference
          QualifiedName
            Identifier: ' Scope'
            Identifier: 'ScopeManager'
        LiteralType
          NullKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The original text source code. BOM was stripped from this text.
     */
    text'
      StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * All of the tokens and comments in the AST.
     *
     * TODO: rename to 'tokens'
     */
    tokensAndComments'
      ArrayType
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Token'
    PropertyDeclaration
      Identifier: '
    /**
     * The visitor keys to traverse AST.
     */
    visitorKeys'
      TypeReference
        QualifiedName
          Identifier: ' SourceCode'
          Identifier: 'VisitorKeys'
    MethodDeclaration
      StaticKeyword
      Identifier: ' splitLines'
      Parameter
        Identifier: 'text'
        StringKeyword
      ArrayType
        StringKeyword
  ModuleDeclaration
    DeclareKeyword
    Identifier: ' SourceCode'
    ModuleBlock
      InterfaceDeclaration
        Identifier: ' Program'
        HeritageClause
          ExpressionWithTypeArguments
            PropertyAccessExpression
              Identifier: ' TSESTree'
              Identifier: 'Program'
        PropertySignature
          Identifier: '
        comments'
          ArrayType
            TypeReference
              QualifiedName
                Identifier: ' TSESTree'
                Identifier: 'Comment'
        PropertySignature
          Identifier: '
        tokens'
          ArrayType
            TypeReference
              QualifiedName
                Identifier: ' TSESTree'
                Identifier: 'Token'
      InterfaceDeclaration
        Identifier: ' SourceCodeConfig'
        PropertySignature
          Identifier: '
        /**
         * The Program node of the AST representing the code. This AST should be created from the text that BOM was stripped.
         */
        ast'
          TypeReference
            Identifier: ' Program'
        PropertySignature
          Identifier: '
        /**
         * The parser services.
         */
        parserServices'
          UnionType
            TypeReference
              Identifier: ' ParserServices'
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        /**
         * The scope of this source code.
         */
        scopeManager'
          UnionType
            TypeReference
              QualifiedName
                Identifier: ' Scope'
                Identifier: 'ScopeManager'
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
        /**
         * The source code text.
         */
        text'
          StringKeyword
        PropertySignature
          Identifier: '
        /**
         * The visitor keys to traverse AST.
         */
        visitorKeys'
          UnionType
            TypeReference
              Identifier: ' VisitorKeys'
            LiteralType
              NullKeyword
      TypeAliasDeclaration
        Identifier: ' VisitorKeys'
        TypeReference
          QualifiedName
            Identifier: ' Parser'
            Identifier: 'VisitorKeys'
      TypeAliasDeclaration
        Identifier: ' FilterPredicate'
        FunctionType
          Parameter
            Identifier: 'token'
            TypeReference
              QualifiedName
                Identifier: ' TSESTree'
                Identifier: 'Token'
          BooleanKeyword
      TypeAliasDeclaration
        Identifier: ' GetFilterPredicate'
        TypeParameter
          Identifier: 'Filter'
        TypeParameter
          Identifier: ' Default'
        ConditionalType
          TypeReference
            Identifier: ' Filter'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'token'
                TypeReference
                  QualifiedName
                    Identifier: ' TSESTree'
                    Identifier: 'Token'
              TypePredicate
                Identifier: ' token'
                InferType
                  TypeParameter
                    Identifier: ' U'
                    TypeReference
                      QualifiedName
                        Identifier: ' TSESTree'
                        Identifier: 'Token'
          TypeReference
            Identifier: ' U'
          TypeReference
            Identifier: ' Default'
      TypeAliasDeclaration
        Identifier: ' GetFilterPredicateFromOptions'
        TypeParameter
          Identifier: 'Options'
        TypeParameter
          Identifier: ' Default'
        ConditionalType
          TypeReference
            Identifier: ' Options'
          TypeLiteral
            PropertySignature
              Identifier: '
        filter'
              QuestionToken
              TypeReference
                Identifier: ' FilterPredicate'
          TypeReference
            Identifier: ' GetFilterPredicate'
            IndexedAccessType
              TypeReference
                Identifier: 'Options'
              LiteralType
                StringLiteral
            TypeReference
              Identifier: ' Default'
          TypeReference
            Identifier: ' GetFilterPredicate'
            TypeReference
              Identifier: 'Options'
            TypeReference
              Identifier: ' Default'
      TypeAliasDeclaration
        Identifier: ' ReturnTypeFromOptions'
        TypeParameter
          Identifier: 'T'
        ConditionalType
          TypeReference
            Identifier: ' T'
          TypeLiteral
            PropertySignature
              Identifier: '
        includeComments'
              LiteralType
                TrueKeyword
          TypeReference
            Identifier: ' GetFilterPredicateFromOptions'
            TypeReference
              Identifier: 'T'
            TypeReference
              QualifiedName
                Identifier: ' TSESTree'
                Identifier: 'Token'
          TypeReference
            Identifier: ' GetFilterPredicateFromOptions'
            TypeReference
              Identifier: 'T'
            TypeReference
              Identifier: ' Exclude'
              TypeReference
                QualifiedName
                  Identifier: 'TSESTree'
                  Identifier: 'Token'
              TypeReference
                QualifiedName
                  Identifier: ' TSESTree'
                  Identifier: 'Comment'
      TypeAliasDeclaration
        Identifier: ' CursorWithSkipOptions'
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: '
        /**
         * The predicate function to choose tokens.
         */
        filter'
              QuestionToken
              TypeReference
                Identifier: ' FilterPredicate'
            PropertySignature
              Identifier: '
        /**
         * The flag to iterate comments as well.
         */
        includeComments'
              QuestionToken
              BooleanKeyword
            PropertySignature
              Identifier: '
        /**
         * The count of tokens the cursor skips.
         */
        skip'
              QuestionToken
              NumberKeyword
          TypeReference
            Identifier: ' FilterPredicate'
          NumberKeyword
      TypeAliasDeclaration
        Identifier: ' CursorWithCountOptions'
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: '
        /**
         * The maximum count of tokens the cursor iterates.
         */
        count'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '
        /**
         * The predicate function to choose tokens.
         */
        filter'
              QuestionToken
              TypeReference
                Identifier: ' FilterPredicate'
            PropertySignature
              Identifier: '
        /**
         * The flag to iterate comments as well.
         */
        includeComments'
              QuestionToken
              BooleanKeyword
          TypeReference
            Identifier: ' FilterPredicate'
          NumberKeyword
  VariableStatement
    DeclareKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' SourceCode_base'
        TypeQuery
          Identifier: ' SourceCodeBase'
  ClassDeclaration
    DeclareKeyword
    Identifier: ' SourceCode'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SourceCode_base'
  ExportDeclaration
    NamedExports
      ExportSpecifier
        Identifier: ' SourceCode'
