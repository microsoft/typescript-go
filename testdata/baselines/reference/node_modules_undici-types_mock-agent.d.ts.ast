SourceFile
  ImportDeclaration
    ImportClause
      Identifier: ' Agent'
    StringLiteral
  ImportDeclaration
    ImportClause
      Identifier: ' Dispatcher'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Interceptable'
        ImportSpecifier
          Identifier: ' MockInterceptor'
    StringLiteral
  ImportEqualsDeclaration
    Identifier: ' MockDispatch'
    QualifiedName
      Identifier: ' MockInterceptor'
      Identifier: 'MockDispatch'
  ExportAssignment
    Identifier: ' MockAgent'
  InterfaceDeclaration
    Identifier: ' PendingInterceptor'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' MockDispatch'
    PropertySignature
      Identifier: '
  origin'
      StringKeyword
  ClassDeclaration
    DeclareKeyword
    Identifier: ' MockAgent'
    TypeParameter
      Identifier: 'TMockAgentOptions'
      TypeReference
        QualifiedName
          Identifier: ' MockAgent'
          Identifier: 'Options'
      TypeReference
        QualifiedName
          Identifier: ' MockAgent'
          Identifier: 'Options'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' Dispatcher'
    Constructor
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          QualifiedName
            Identifier: ' MockAgent'
            Identifier: 'Options'
    MethodDeclaration
      Identifier: '
  /** Creates and retrieves mock Dispatcher instances which can then be used to intercept HTTP requests. If the number of connections on the mock agent is set to 1, a MockClient instance is returned. Otherwise a MockPool instance is returned. */
  get'
      TypeParameter
        Identifier: 'TInterceptable'
        TypeReference
          Identifier: ' Interceptable'
      Parameter
        Identifier: 'origin'
        StringKeyword
      TypeReference
        Identifier: ' TInterceptable'
    MethodDeclaration
      Identifier: '
  get'
      TypeParameter
        Identifier: 'TInterceptable'
        TypeReference
          Identifier: ' Interceptable'
      Parameter
        Identifier: 'origin'
        TypeReference
          Identifier: ' RegExp'
      TypeReference
        Identifier: ' TInterceptable'
    MethodDeclaration
      Identifier: '
  get'
      TypeParameter
        Identifier: 'TInterceptable'
        TypeReference
          Identifier: ' Interceptable'
      Parameter
        Identifier: 'origin'
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'origin'
              StringKeyword
            BooleanKeyword
      TypeReference
        Identifier: ' TInterceptable'
    MethodDeclaration
      Identifier: '
  /** Dispatches a mocked request. */
  dispatch'
      Parameter
        Identifier: 'options'
        TypeReference
          QualifiedName
            Identifier: ' Agent'
            Identifier: 'DispatchOptions'
      Parameter
        Identifier: ' handler'
        TypeReference
          QualifiedName
            Identifier: ' Dispatcher'
            Identifier: 'DispatchHandlers'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
  /** Closes the mock agent and waits for registered mock pools and clients to also close before resolving. */
  close'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '
  /** Disables mocking in MockAgent. */
  deactivate'
      VoidKeyword
    MethodDeclaration
      Identifier: '
  /** Enables mocking in a MockAgent instance. When instantiated, a MockAgent is automatically activated. Therefore, this method is only effective after `MockAgent.deactivate` has been called. */
  activate'
      VoidKeyword
    MethodDeclaration
      Identifier: '
  /** Define host matchers so only matching requests that aren't intercepted by the mock dispatchers will be attempted. */
  enableNetConnect'
      VoidKeyword
    MethodDeclaration
      Identifier: '
  enableNetConnect'
      Parameter
        Identifier: 'host'
        StringKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
  enableNetConnect'
      Parameter
        Identifier: 'host'
        TypeReference
          Identifier: ' RegExp'
      VoidKeyword
    MethodDeclaration
      Identifier: '
  enableNetConnect'
      Parameter
        Identifier: 'host'
        ParenthesizedType
          FunctionType
            Parameter
              Identifier: 'host'
              StringKeyword
            BooleanKeyword
      VoidKeyword
    MethodDeclaration
      Identifier: '
  /** Causes all requests to throw when requests are not matched in a MockAgent intercept. */
  disableNetConnect'
      VoidKeyword
    MethodDeclaration
      Identifier: '
  pendingInterceptors'
      ArrayType
        TypeReference
          Identifier: ' PendingInterceptor'
    MethodDeclaration
      Identifier: '
  assertNoPendingInterceptors'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    pendingInterceptorsFormatter'
            QuestionToken
            TypeReference
              Identifier: ' PendingInterceptorsFormatter'
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' PendingInterceptorsFormatter'
    MethodSignature
      Identifier: '
  format'
      Parameter
        Identifier: 'pendingInterceptors'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' PendingInterceptor'
      StringKeyword
  ModuleDeclaration
    DeclareKeyword
    Identifier: ' MockAgent'
    ModuleBlock
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Options'
        HeritageClause
          ExpressionWithTypeArguments
            PropertyAccessExpression
              Identifier: ' Agent'
              Identifier: 'Options'
        PropertySignature
          Identifier: '
    /** A custom agent to be encapsulated by the MockAgent. */
    agent'
          QuestionToken
          TypeReference
            Identifier: ' Agent'
