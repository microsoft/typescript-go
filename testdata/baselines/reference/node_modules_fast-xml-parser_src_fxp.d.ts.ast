SourceFile
  TypeAliasDeclaration
    Identifier: ' X2jOptions'
    TypeLiteral
      PropertySignature
        Identifier: '
  /**
   * Preserve the order of tags in resulting JS object
   * 
   * Defaults to `false`
   */
  preserveOrder'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Give a prefix to the attribute name in the resulting JS object
   * 
   * Defaults to '@_'
   */  
  attributeNamePrefix'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '

  /**
   * A name to group all attributes of a tag under, or `false` to disable
   * 
   * Defaults to `false`
   */
  attributesGroupName'
        QuestionToken
        UnionType
          LiteralType
            FalseKeyword
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * The name of the next node in the resulting JS
   * 
   * Defaults to `#text`
   */
  textNodeName'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to ignore attributes when parsing
   * 
   * When `true` - ignores all the attributes
   * 
   * When `false` - parses all the attributes
   * 
   * When `Array<string | RegExp>` - filters out attributes that match provided patterns
   * 
   * When `Function` - calls the function for each attribute and filters out those for which the function returned `true`
   * 
   * Defaults to `true`
   */
  ignoreAttributes'
        QuestionToken
        UnionType
          BooleanKeyword
          ArrayType
            ParenthesizedType
              UnionType
                StringKeyword
                TypeReference
                  Identifier: ' RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'attrName'
                StringKeyword
              Parameter
                Identifier: ' jPath'
                StringKeyword
              BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to remove namespace string from tag and attribute names
   * 
   * Defaults to `false`
   */
  removeNSPrefix'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to allow attributes without value
   * 
   * Defaults to `false`
   */
  allowBooleanAttributes'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to parse tag value with `strnum` package
   * 
   * Defaults to `true`
   */
  parseTagValue'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to parse tag value with `strnum` package
   * 
   * Defaults to `false`
   */
  parseAttributeValue'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to remove surrounding whitespace from tag or attribute value
   * 
   * Defaults to `true`
   */
  trimValues'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Give a property name to set CDATA values to instead of merging to tag's text value
   * 
   * Defaults to `false`
   */
  cdataPropName'
        QuestionToken
        UnionType
          LiteralType
            FalseKeyword
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * If set, parse comments and set as this property
   * 
   * Defaults to `false`
   */
  commentPropName'
        QuestionToken
        UnionType
          LiteralType
            FalseKeyword
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Control how tag value should be parsed. Called only if tag value is not empty
   * 
   * @returns {undefined|null} `undefined` or `null` to set original value.
   * @returns {unknown} 
   * 
   * 1. Different value or value with different data type to set new value.
   * 2. Same value to set parsed value if `parseTagValue: true`.
   * 
   * Defaults to `(tagName, val, jPath, hasAttributes, isLeafNode) => val`
   */
  tagValueProcessor'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'tagName'
            StringKeyword
          Parameter
            Identifier: ' tagValue'
            StringKeyword
          Parameter
            Identifier: ' jPath'
            StringKeyword
          Parameter
            Identifier: ' hasAttributes'
            BooleanKeyword
          Parameter
            Identifier: ' isLeafNode'
            BooleanKeyword
          UnknownKeyword
      PropertySignature
        Identifier: '

  /**
   * Control how attribute value should be parsed
   * 
   * @param attrName 
   * @param attrValue 
   * @param jPath 
   * @returns {undefined|null} `undefined` or `null` to set original value
   * @returns {unknown}
   * 
   * Defaults to `(attrName, val, jPath) => val`
   */
  attributeValueProcessor'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'attrName'
            StringKeyword
          Parameter
            Identifier: ' attrValue'
            StringKeyword
          Parameter
            Identifier: ' jPath'
            StringKeyword
          UnknownKeyword
      PropertySignature
        Identifier: '

  /**
   * Options to pass to `strnum` for parsing numbers
   * 
   * Defaults to `{ hex: true, leadingZeros: true, eNotation: true }`
   */
  numberParseOptions'
        QuestionToken
        TypeReference
          Identifier: ' strnumOptions'
      PropertySignature
        Identifier: '

  /**
   * Nodes to stop parsing at
   * 
   * Defaults to `[]`
   */
  stopNodes'
        QuestionToken
        ArrayType
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * List of tags without closing tags
   * 
   * Defaults to `[]`
   */
  unpairedTags'
        QuestionToken
        ArrayType
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to always create a text node
   * 
   * Defaults to `false`
   */
  alwaysCreateTextNode'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Determine whether a tag should be parsed as an array
   * 
   * @param tagName 
   * @param jPath 
   * @param isLeafNode 
   * @param isAttribute 
   * @returns {boolean}
   * 
   * Defaults to `() => false`
   */
  isArray'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'tagName'
            StringKeyword
          Parameter
            Identifier: ' jPath'
            StringKeyword
          Parameter
            Identifier: ' isLeafNode'
            BooleanKeyword
          Parameter
            Identifier: ' isAttribute'
            BooleanKeyword
          BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to process default and DOCTYPE entities
   * 
   * Defaults to `true`
   */
  processEntities'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to process HTML entities
   * 
   * Defaults to `false`
   */
  htmlEntities'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to ignore the declaration tag from output
   * 
   * Defaults to `false`
   */
  ignoreDeclaration'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to ignore Pi tags
   * 
   * Defaults to `false`
   */
  ignorePiTags'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Transform tag names
   * 
   * Defaults to `false`
   */
  transformTagName'
        QuestionToken
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'tagName'
                StringKeyword
              StringKeyword
          LiteralType
            FalseKeyword
      PropertySignature
        Identifier: '

  /**
   * Transform attribute names
   * 
   * Defaults to `false`
   */
  transformAttributeName'
        QuestionToken
        UnionType
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'attributeName'
                StringKeyword
              StringKeyword
          LiteralType
            FalseKeyword
      PropertySignature
        Identifier: '

  /**
   * Change the tag name when a different name is returned. Skip the tag from parsed result when false is returned.
   * Modify `attrs` object to control attributes for the given tag.
   * 
   * @returns {string} new tag name.
   * @returns false to skip the tag
   * 
   * Defaults to `(tagName, jPath, attrs) => tagName`
   */
  updateTag'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'tagName'
            StringKeyword
          Parameter
            Identifier: ' jPath'
            StringKeyword
          Parameter
            Identifier: ' attrs'
            TypeLiteral
              IndexSignature
                Parameter
                  Identifier: 'k'
                  StringKeyword
                StringKeyword
          UnionType
            StringKeyword
            BooleanKeyword
  TypeAliasDeclaration
    Identifier: ' strnumOptions'
    TypeLiteral
      PropertySignature
        Identifier: '
  hex'
        BooleanKeyword
      PropertySignature
        Identifier: '
  leadingZeros'
        BooleanKeyword
      PropertySignature
        Identifier: '
  skipLike'
        QuestionToken
        TypeReference
          Identifier: ' RegExp'
      PropertySignature
        Identifier: '
  eNotation'
        QuestionToken
        BooleanKeyword
  TypeAliasDeclaration
    Identifier: ' validationOptions'
    TypeLiteral
      PropertySignature
        Identifier: '
  /**
   * Whether to allow attributes without value
   * 
   * Defaults to `false`
   */
  allowBooleanAttributes'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  
  /**
   * List of tags without closing tags
   * 
   * Defaults to `[]`
   */
  unpairedTags'
        QuestionToken
        ArrayType
          StringKeyword
  TypeAliasDeclaration
    Identifier: ' XmlBuilderOptions'
    TypeLiteral
      PropertySignature
        Identifier: '
  /**
   * Give a prefix to the attribute name in the resulting JS object
   * 
   * Defaults to '@_'
   */  
  attributeNamePrefix'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '

  /**
   * A name to group all attributes of a tag under, or `false` to disable
   * 
   * Defaults to `false`
   */
  attributesGroupName'
        QuestionToken
        UnionType
          LiteralType
            FalseKeyword
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * The name of the next node in the resulting JS
   * 
   * Defaults to `#text`
   */
  textNodeName'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to ignore attributes when building
   * 
   * When `true` - ignores all the attributes
   * 
   * When `false` - builds all the attributes
   * 
   * When `Array<string | RegExp>` - filters out attributes that match provided patterns
   * 
   * When `Function` - calls the function for each attribute and filters out those for which the function returned `true`
   * 
   * Defaults to `true`
   */
  ignoreAttributes'
        QuestionToken
        UnionType
          BooleanKeyword
          ArrayType
            ParenthesizedType
              UnionType
                StringKeyword
                TypeReference
                  Identifier: ' RegExp'
          ParenthesizedType
            FunctionType
              Parameter
                Identifier: 'attrName'
                StringKeyword
              Parameter
                Identifier: ' jPath'
                StringKeyword
              BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Give a property name to set CDATA values to instead of merging to tag's text value
   * 
   * Defaults to `false`
   */
  cdataPropName'
        QuestionToken
        UnionType
          LiteralType
            FalseKeyword
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * If set, parse comments and set as this property
   * 
   * Defaults to `false`
   */
  commentPropName'
        QuestionToken
        UnionType
          LiteralType
            FalseKeyword
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to make output pretty instead of single line
   * 
   * Defaults to `false`
   */
  format'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '


  /**
   * If `format` is set to `true`, sets the indent string
   * 
   * Defaults to `  `
   */
  indentBy'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Give a name to a top-level array
   * 
   * Defaults to `undefined`
   */
  arrayNodeName'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Create empty tags for tags with no text value
   * 
   * Defaults to `false`
   */
  suppressEmptyNode'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Suppress an unpaired tag
   * 
   * Defaults to `true`
   */
  suppressUnpairedNode'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Don't put a value for boolean attributes
   * 
   * Defaults to `true`
   */
  suppressBooleanAttributes'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * Preserve the order of tags in resulting JS object
   * 
   * Defaults to `false`
   */
  preserveOrder'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '

  /**
   * List of tags without closing tags
   * 
   * Defaults to `[]`
   */
  unpairedTags'
        QuestionToken
        ArrayType
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Nodes to stop parsing at
   * 
   * Defaults to `[]`
   */
  stopNodes'
        QuestionToken
        ArrayType
          StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Control how tag value should be parsed. Called only if tag value is not empty
   * 
   * @returns {undefined|null} `undefined` or `null` to set original value.
   * @returns {unknown} 
   * 
   * 1. Different value or value with different data type to set new value.
   * 2. Same value to set parsed value if `parseTagValue: true`.
   * 
   * Defaults to `(tagName, val, jPath, hasAttributes, isLeafNode) => val`
   */
  tagValueProcessor'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' value'
            UnknownKeyword
          UnknownKeyword
      PropertySignature
        Identifier: '

  /**
   * Control how attribute value should be parsed
   * 
   * @param attrName 
   * @param attrValue 
   * @param jPath 
   * @returns {undefined|null} `undefined` or `null` to set original value
   * @returns {unknown}
   * 
   * Defaults to `(attrName, val, jPath) => val`
   */
  attributeValueProcessor'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'name'
            StringKeyword
          Parameter
            Identifier: ' value'
            UnknownKeyword
          UnknownKeyword
      PropertySignature
        Identifier: '

  /**
   * Whether to process default and DOCTYPE entities
   * 
   * Defaults to `true`
   */
  processEntities'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '


  oneListGroup'
        QuestionToken
        BooleanKeyword
  TypeAliasDeclaration
    Identifier: ' ESchema'
    UnionType
      StringKeyword
      ObjectKeyword
      TypeReference
        Identifier: ' Array'
        UnionType
          StringKeyword
          ObjectKeyword
  TypeAliasDeclaration
    Identifier: ' ValidationError'
    TypeLiteral
      PropertySignature
        Identifier: '
  err'
        TypeLiteral
          PropertySignature
            Identifier: ' 
    code'
            StringKeyword
          PropertySignature
            Identifier: '
    msg'
            StringKeyword
          PropertySignature
            Identifier: '
    line'
            NumberKeyword
          PropertySignature
            Identifier: '
    col'
            NumberKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' XMLParser'
    Constructor
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' X2jOptions'
    MethodDeclaration
      Identifier: '
  parse'
      Parameter
        Identifier: 'xmlData'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Buffer'
      Parameter
        Identifier: 'validationOptions'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' validationOptions'
          BooleanKeyword
      AnyKeyword
    MethodDeclaration
      Identifier: '
  /**
   * Add Entity which is not by default supported by this library
   * @param entityIdentifier {string} Eg: 'ent' for &ent;
   * @param entityValue {string} Eg: '\r'
   */
  addEntity'
      Parameter
        Identifier: 'entityIdentifier'
        StringKeyword
      Parameter
        Identifier: ' entityValue'
        StringKeyword
      VoidKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' XMLValidator'
    MethodDeclaration
      StaticKeyword
      Identifier: ' validate'
      Parameter
        Identifier: '  xmlData'
        StringKeyword
      Parameter
        Identifier: '  options'
        QuestionToken
        TypeReference
          Identifier: ' validationOptions'
      UnionType
        LiteralType
          TrueKeyword
        TypeReference
          Identifier: ' ValidationError'
  ClassDeclaration
    ExportKeyword
    Identifier: ' XMLBuilder'
    Constructor
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' XmlBuilderOptions'
    MethodDeclaration
      Identifier: '
  build'
      Parameter
        Identifier: 'jObj'
        AnyKeyword
      AnyKeyword
