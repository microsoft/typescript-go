SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' CancellationToken'
        ImportSpecifier
          Identifier: ' CompilerHost'
        ImportSpecifier
          Identifier: ' CompilerOptions'
        ImportSpecifier
          Identifier: ' CustomTransformers'
        ImportSpecifier
          Identifier: ' Diagnostic'
        ImportSpecifier
          Identifier: ' DiagnosticWithLocation'
        ImportSpecifier
          Identifier: ' EmitResult'
        ImportSpecifier
          Identifier: ' Program'
        ImportSpecifier
          Identifier: ' ProjectReference'
        ImportSpecifier
          Identifier: ' ReusableBuilderProgramState'
        ImportSpecifier
          Identifier: ' SourceFile'
        ImportSpecifier
          Identifier: ' WriteFileCallback'
    StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' AffectedFileResult'
    TypeParameter
      Identifier: 'T'
    UnionType
      TypeLiteral
        PropertySignature
          Identifier: '
    result'
          TypeReference
            Identifier: ' T'
        PropertySignature
          Identifier: '
    affected'
          UnionType
            TypeReference
              Identifier: ' SourceFile'
            TypeReference
              Identifier: ' Program'
      UndefinedKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BuilderProgramHost'
    PropertySignature
      Identifier: '
    /**
     * If provided this would be used this hash instead of actual file shape text for detecting changes
     */
    createHash'
      QuestionToken
      FunctionType
        Parameter
          Identifier: 'data'
          StringKeyword
        StringKeyword
    PropertySignature
      Identifier: '
    /**
     * When emit or emitNextAffectedFile are called without writeFile,
     * this callback if present would be used to write files
     */
    writeFile'
      QuestionToken
      TypeReference
        Identifier: ' WriteFileCallback'
    PropertySignature
      Identifier: '
    /**
     * Store information about the signature
     *
     * @internal
     */
    storeSignatureInfo'
      QuestionToken
      BooleanKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' HostForComputeHash'
    TypeReference
      Identifier: ' Pick'
      TypeReference
        Identifier: 'BuilderProgramHost'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' BuilderProgram'
    PropertySignature
      Identifier: '
    /** @internal */
    state'
      TypeReference
        Identifier: ' ReusableBuilderProgramState'
    MethodSignature
      Identifier: '
    /** @internal */
    hasChangedEmitSignature'
      QuestionToken
      BooleanKeyword
    MethodSignature
      Identifier: '
    /**
     * Returns current program
     */
    getProgram'
      TypeReference
        Identifier: ' Program'
    MethodSignature
      Identifier: '
    /**
     * Returns current program that could be undefined if the program was released
     *
     * @internal
     */
    getProgramOrUndefined'
      UnionType
        TypeReference
          Identifier: ' Program'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Releases reference to the program, making all the other operations that need program to fail.
     *
     * @internal
     */
    releaseProgram'
      VoidKeyword
    MethodSignature
      Identifier: '
    /**
     * Get compiler options of the program
     */
    getCompilerOptions'
      TypeReference
        Identifier: ' CompilerOptions'
    MethodSignature
      Identifier: '
    /**
     * Get the source file in the program with file name
     */
    getSourceFile'
      Parameter
        Identifier: 'fileName'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' SourceFile'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    /**
     * Get a list of files in the program
     */
    getSourceFiles'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' SourceFile'
    MethodSignature
      Identifier: '
    /**
     * Get the diagnostics for compiler options
     */
    getOptionsDiagnostics'
      Parameter
        Identifier: 'cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /**
     * Get the diagnostics that dont belong to any file
     */
    getGlobalDiagnostics'
      Parameter
        Identifier: 'cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /**
     * Get the diagnostics from config file parsing
     */
    getConfigFileParsingDiagnostics'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /**
     * Get the syntax diagnostics, for all source files if source file is not supplied
     */
    getSyntacticDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /**
     * Get the declaration diagnostics, for all source files if source file is not supplied
     */
    getDeclarationDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' DiagnosticWithLocation'
    MethodSignature
      Identifier: '
    /**
     * Get all the dependencies of the file
     */
    getAllDependencies'
      Parameter
        Identifier: 'sourceFile'
        TypeReference
          Identifier: ' SourceFile'
      TypeOperator
        ArrayType
          StringKeyword
    MethodSignature
      Identifier: '
    /**
     * Gets the semantic diagnostics from the program corresponding to this state of file (if provided) or whole program
     * The semantic diagnostics are cached and managed here
     * Note that it is assumed that when asked about semantic diagnostics through this API,
     * the file has been taken out of affected files so it is safe to use cache or get from program and cache the diagnostics
     * In case of SemanticDiagnosticsBuilderProgram if the source file is not provided,
     * it will iterate through all the affected files, to ensure that cache stays valid and yet provide a way to get all semantic diagnostics
     */
    getSemanticDiagnostics'
      Parameter
        Identifier: 'sourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    MethodSignature
      Identifier: '
    /**
     * Emits the JavaScript and declaration files.
     * When targetSource file is specified, emits the files corresponding to that source file,
     * otherwise for the whole program.
     * In case of EmitAndSemanticDiagnosticsBuilderProgram, when targetSourceFile is specified,
     * it is assumed that that file is handled from affected file list. If targetSourceFile is not specified,
     * it will only emit all the affected files instead of whole program
     *
     * The first of writeFile if provided, writeFile of BuilderProgramHost if provided, writeFile of compiler host
     * in that order would be used to write the files
     */
    emit'
      Parameter
        Identifier: 'targetSourceFile'
        QuestionToken
        TypeReference
          Identifier: ' SourceFile'
      Parameter
        Identifier: ' writeFile'
        QuestionToken
        TypeReference
          Identifier: ' WriteFileCallback'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      Parameter
        Identifier: ' emitOnlyDtsFiles'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' customTransformers'
        QuestionToken
        TypeReference
          Identifier: ' CustomTransformers'
      TypeReference
        Identifier: ' EmitResult'
    MethodSignature
      Identifier: '
    /** @internal */
    emitBuildInfo'
      Parameter
        Identifier: 'writeFile'
        QuestionToken
        TypeReference
          Identifier: ' WriteFileCallback'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      TypeReference
        Identifier: ' EmitResult'
    MethodSignature
      Identifier: '
    /**
     * Get the current directory of the program
     */
    getCurrentDirectory'
      StringKeyword
    MethodSignature
      Identifier: '
    /** @internal */
    close'
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' SemanticDiagnosticsBuilderProgram'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' BuilderProgram'
    MethodSignature
      Identifier: '
    /**
     * Gets the semantic diagnostics from the program for the next affected file and caches it
     * Returns undefined if the iteration is complete
     */
    getSemanticDiagnosticsOfNextAffectedFile'
      Parameter
        Identifier: 'cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      Parameter
        Identifier: ' ignoreSourceFile'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'sourceFile'
            TypeReference
              Identifier: ' SourceFile'
          BooleanKeyword
      TypeReference
        Identifier: ' AffectedFileResult'
        TypeOperator
          ArrayType
            TypeReference
              Identifier: ' Diagnostic'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' EmitAndSemanticDiagnosticsBuilderProgram'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' SemanticDiagnosticsBuilderProgram'
    MethodSignature
      Identifier: '
    /**
     * Emits the next affected file's emit result (EmitResult and sourceFiles emitted) or returns undefined if iteration is complete
     * The first of writeFile if provided, writeFile of BuilderProgramHost if provided, writeFile of compiler host
     * in that order would be used to write the files
     */
    emitNextAffectedFile'
      Parameter
        Identifier: 'writeFile'
        QuestionToken
        TypeReference
          Identifier: ' WriteFileCallback'
      Parameter
        Identifier: ' cancellationToken'
        QuestionToken
        TypeReference
          Identifier: ' CancellationToken'
      Parameter
        Identifier: ' emitOnlyDtsFiles'
        QuestionToken
        BooleanKeyword
      Parameter
        Identifier: ' customTransformers'
        QuestionToken
        TypeReference
          Identifier: ' CustomTransformers'
      TypeReference
        Identifier: ' AffectedFileResult'
        TypeReference
          Identifier: 'EmitResult'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createSemanticDiagnosticsBuilderProgram'
    Parameter
      Identifier: 'newProgram'
      TypeReference
        Identifier: ' Program'
    Parameter
      Identifier: ' host'
      TypeReference
        Identifier: ' BuilderProgramHost'
    Parameter
      Identifier: ' oldProgram'
      QuestionToken
      TypeReference
        Identifier: ' SemanticDiagnosticsBuilderProgram'
    Parameter
      Identifier: ' configFileParsingDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    TypeReference
      Identifier: ' SemanticDiagnosticsBuilderProgram'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createSemanticDiagnosticsBuilderProgram'
    Parameter
      Identifier: 'rootNames'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    Parameter
      Identifier: ' options'
      UnionType
        TypeReference
          Identifier: ' CompilerOptions'
        UndefinedKeyword
    Parameter
      Identifier: ' host'
      QuestionToken
      TypeReference
        Identifier: ' CompilerHost'
    Parameter
      Identifier: ' oldProgram'
      QuestionToken
      TypeReference
        Identifier: ' SemanticDiagnosticsBuilderProgram'
    Parameter
      Identifier: ' configFileParsingDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    Parameter
      Identifier: ' projectReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectReference'
    TypeReference
      Identifier: ' SemanticDiagnosticsBuilderProgram'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createEmitAndSemanticDiagnosticsBuilderProgram'
    Parameter
      Identifier: 'newProgram'
      TypeReference
        Identifier: ' Program'
    Parameter
      Identifier: ' host'
      TypeReference
        Identifier: ' BuilderProgramHost'
    Parameter
      Identifier: ' oldProgram'
      QuestionToken
      TypeReference
        Identifier: ' EmitAndSemanticDiagnosticsBuilderProgram'
    Parameter
      Identifier: ' configFileParsingDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    TypeReference
      Identifier: ' EmitAndSemanticDiagnosticsBuilderProgram'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createEmitAndSemanticDiagnosticsBuilderProgram'
    Parameter
      Identifier: 'rootNames'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    Parameter
      Identifier: ' options'
      UnionType
        TypeReference
          Identifier: ' CompilerOptions'
        UndefinedKeyword
    Parameter
      Identifier: ' host'
      QuestionToken
      TypeReference
        Identifier: ' CompilerHost'
    Parameter
      Identifier: ' oldProgram'
      QuestionToken
      TypeReference
        Identifier: ' EmitAndSemanticDiagnosticsBuilderProgram'
    Parameter
      Identifier: ' configFileParsingDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    Parameter
      Identifier: ' projectReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectReference'
    TypeReference
      Identifier: ' EmitAndSemanticDiagnosticsBuilderProgram'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createAbstractBuilder'
    Parameter
      Identifier: 'newProgram'
      TypeReference
        Identifier: ' Program'
    Parameter
      Identifier: ' host'
      TypeReference
        Identifier: ' BuilderProgramHost'
    Parameter
      Identifier: ' oldProgram'
      QuestionToken
      TypeReference
        Identifier: ' BuilderProgram'
    Parameter
      Identifier: ' configFileParsingDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    TypeReference
      Identifier: ' BuilderProgram'
  FunctionDeclaration
    ExportKeyword
    DeclareKeyword
    Identifier: ' createAbstractBuilder'
    Parameter
      Identifier: 'rootNames'
      UnionType
        TypeOperator
          ArrayType
            StringKeyword
        UndefinedKeyword
    Parameter
      Identifier: ' options'
      UnionType
        TypeReference
          Identifier: ' CompilerOptions'
        UndefinedKeyword
    Parameter
      Identifier: ' host'
      QuestionToken
      TypeReference
        Identifier: ' CompilerHost'
    Parameter
      Identifier: ' oldProgram'
      QuestionToken
      TypeReference
        Identifier: ' BuilderProgram'
    Parameter
      Identifier: ' configFileParsingDiagnostics'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' Diagnostic'
    Parameter
      Identifier: ' projectReferences'
      QuestionToken
      TypeOperator
        ArrayType
          TypeReference
            Identifier: ' ProjectReference'
    TypeReference
      Identifier: ' BuilderProgram'
