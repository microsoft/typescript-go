SourceFile
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamespaceImport
            Identifier: ' AST'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' RegExpParser'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' RegExpValidator'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' RegExpVisitor'
        StringLiteral
      ExportDeclaration
        NamedExports
          ExportSpecifier
            Identifier: ' RegExpSyntaxError'
        StringLiteral
      ExportDeclaration
        NamedExports
          ExportSpecifier
            Identifier: ' AST'
          ExportSpecifier
            Identifier: ' RegExpParser'
          ExportSpecifier
            Identifier: ' RegExpValidator'
      FunctionDeclaration
        ExportKeyword
        Identifier: ' parseRegExpLiteral'
        Parameter
          Identifier: '
    source'
          UnionType
            TypeReference
              Identifier: ' RegExp'
            StringKeyword
        Parameter
          Identifier: '
    options'
          QuestionToken
          TypeReference
            QualifiedName
              Identifier: ' RegExpParser'
              Identifier: 'Options'
        TypeReference
          QualifiedName
            Identifier: ' AST'
            Identifier: 'RegExpLiteral'
      FunctionDeclaration
        ExportKeyword
        Identifier: ' validateRegExpLiteral'
        Parameter
          Identifier: '
    source'
          StringKeyword
        Parameter
          Identifier: '
    options'
          QuestionToken
          TypeReference
            QualifiedName
              Identifier: ' RegExpValidator'
              Identifier: 'Options'
        VoidKeyword
      FunctionDeclaration
        ExportKeyword
        Identifier: ' visitRegExpAST'
        Parameter
          Identifier: '
    node'
          TypeReference
            QualifiedName
              Identifier: ' AST'
              Identifier: 'Node'
        Parameter
          Identifier: '
    handlers'
          TypeReference
            QualifiedName
              Identifier: ' RegExpVisitor'
              Identifier: 'Handlers'
        VoidKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' Node'
        UnionType
          TypeReference
            Identifier: ' BranchNode'
          TypeReference
            Identifier: ' LeafNode'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' BranchNode'
        UnionType
          TypeReference
            Identifier: ' Alternative'
          TypeReference
            Identifier: ' CapturingGroup'
          TypeReference
            Identifier: ' CharacterClass'
          TypeReference
            Identifier: ' CharacterClassRange'
          TypeReference
            Identifier: ' ClassIntersection'
          TypeReference
            Identifier: ' ClassStringDisjunction'
          TypeReference
            Identifier: ' ClassSubtraction'
          TypeReference
            Identifier: ' ExpressionCharacterClass'
          TypeReference
            Identifier: ' Group'
          TypeReference
            Identifier: ' LookaroundAssertion'
          TypeReference
            Identifier: ' Pattern'
          TypeReference
            Identifier: ' Quantifier'
          TypeReference
            Identifier: ' RegExpLiteral'
          TypeReference
            Identifier: ' StringAlternative'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' LeafNode'
        UnionType
          TypeReference
            Identifier: ' Backreference'
          TypeReference
            Identifier: ' BoundaryAssertion'
          TypeReference
            Identifier: ' Character'
          TypeReference
            Identifier: ' CharacterSet'
          TypeReference
            Identifier: ' Flags'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' Element'
        UnionType
          TypeReference
            Identifier: ' Assertion'
          TypeReference
            Identifier: ' QuantifiableElement'
          TypeReference
            Identifier: ' Quantifier'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' QuantifiableElement'
        UnionType
          TypeReference
            Identifier: ' Backreference'
          TypeReference
            Identifier: ' CapturingGroup'
          TypeReference
            Identifier: ' Character'
          TypeReference
            Identifier: ' CharacterClass'
          TypeReference
            Identifier: ' CharacterSet'
          TypeReference
            Identifier: ' ExpressionCharacterClass'
          TypeReference
            Identifier: ' Group'
          TypeReference
            Identifier: ' LookaheadAssertion'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' CharacterClassElement'
        UnionType
          TypeReference
            Identifier: ' ClassRangesCharacterClassElement'
          TypeReference
            Identifier: ' UnicodeSetsCharacterClassElement'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' ClassRangesCharacterClassElement'
        UnionType
          TypeReference
            Identifier: ' Character'
          TypeReference
            Identifier: ' CharacterClassRange'
          TypeReference
            Identifier: ' CharacterUnicodePropertyCharacterSet'
          TypeReference
            Identifier: ' EscapeCharacterSet'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' UnicodeSetsCharacterClassElement'
        UnionType
          TypeReference
            Identifier: ' Character'
          TypeReference
            Identifier: ' CharacterClassRange'
          TypeReference
            Identifier: ' ClassStringDisjunction'
          TypeReference
            Identifier: ' EscapeCharacterSet'
          TypeReference
            Identifier: ' ExpressionCharacterClass'
          TypeReference
            Identifier: ' UnicodePropertyCharacterSet'
          TypeReference
            Identifier: ' UnicodeSetsCharacterClass'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    /** The node type. */
    type'
          IndexedAccessType
            TypeReference
              Identifier: ' Node'
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '
    /** The parent node. */
    parent'
          IndexedAccessType
            TypeReference
              Identifier: ' Node'
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '
    /** The 0-based index that this node starts. */
    start'
          NumberKeyword
        PropertySignature
          Identifier: '
    /** The 0-based index that this node ends. */
    end'
          NumberKeyword
        PropertySignature
          Identifier: '
    /** The raw text of this node. */
    raw'
          StringKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' RegExpLiteral'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          LiteralType
            NullKeyword
        PropertySignature
          Identifier: '
    pattern'
          TypeReference
            Identifier: ' Pattern'
        PropertySignature
          Identifier: '
    flags'
          TypeReference
            Identifier: ' Flags'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Pattern'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' RegExpLiteral'
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
    alternatives'
          ArrayType
            TypeReference
              Identifier: ' Alternative'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Alternative'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' CapturingGroup'
            TypeReference
              Identifier: ' Group'
            TypeReference
              Identifier: ' LookaroundAssertion'
            TypeReference
              Identifier: ' Pattern'
        PropertySignature
          Identifier: '
    elements'
          ArrayType
            TypeReference
              Identifier: ' Element'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Group'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    alternatives'
          ArrayType
            TypeReference
              Identifier: ' Alternative'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' CapturingGroup'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    name'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
    alternatives'
          ArrayType
            TypeReference
              Identifier: ' Alternative'
        PropertySignature
          Identifier: '
    references'
          ArrayType
            TypeReference
              Identifier: ' Backreference'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' LookaroundAssertion'
        UnionType
          TypeReference
            Identifier: ' LookaheadAssertion'
          TypeReference
            Identifier: ' LookbehindAssertion'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' LookaheadAssertion'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    kind'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    negate'
          BooleanKeyword
        PropertySignature
          Identifier: '
    alternatives'
          ArrayType
            TypeReference
              Identifier: ' Alternative'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' LookbehindAssertion'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          TypeReference
            Identifier: ' Alternative'
        PropertySignature
          Identifier: '
    kind'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    negate'
          BooleanKeyword
        PropertySignature
          Identifier: '
    alternatives'
          ArrayType
            TypeReference
              Identifier: ' Alternative'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Quantifier'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          TypeReference
            Identifier: ' Alternative'
        PropertySignature
          Identifier: '
    min'
          NumberKeyword
        PropertySignature
          Identifier: '
    max'
          NumberKeyword
        PropertySignature
          Identifier: '
    greedy'
          BooleanKeyword
        PropertySignature
          Identifier: '
    element'
          TypeReference
            Identifier: ' QuantifiableElement'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' CharacterClass'
        UnionType
          TypeReference
            Identifier: ' ClassRangesCharacterClass'
          TypeReference
            Identifier: ' UnicodeSetsCharacterClass'
      InterfaceDeclaration
        Identifier: ' BaseCharacterClass'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' Quantifier'
            TypeReference
              Identifier: ' UnicodeSetsCharacterClass'
        PropertySignature
          Identifier: '
    unicodeSets'
          BooleanKeyword
        PropertySignature
          Identifier: '
    negate'
          BooleanKeyword
        PropertySignature
          Identifier: '
    elements'
          ArrayType
            TypeReference
              Identifier: ' CharacterClassElement'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' ClassRangesCharacterClass'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseCharacterClass'
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    unicodeSets'
          LiteralType
            FalseKeyword
        PropertySignature
          Identifier: '
    elements'
          ArrayType
            TypeReference
              Identifier: ' ClassRangesCharacterClassElement'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' UnicodeSetsCharacterClass'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseCharacterClass'
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' Quantifier'
            TypeReference
              Identifier: ' UnicodeSetsCharacterClass'
        PropertySignature
          Identifier: '
    unicodeSets'
          LiteralType
            TrueKeyword
        PropertySignature
          Identifier: '
    elements'
          ArrayType
            TypeReference
              Identifier: ' UnicodeSetsCharacterClassElement'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' CharacterClassRange'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          TypeReference
            Identifier: ' CharacterClass'
        PropertySignature
          Identifier: '
    min'
          TypeReference
            Identifier: ' Character'
        PropertySignature
          Identifier: '
    max'
          TypeReference
            Identifier: ' Character'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' Assertion'
        UnionType
          TypeReference
            Identifier: ' BoundaryAssertion'
          TypeReference
            Identifier: ' LookaroundAssertion'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' BoundaryAssertion'
        UnionType
          TypeReference
            Identifier: ' EdgeAssertion'
          TypeReference
            Identifier: ' WordBoundaryAssertion'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' EdgeAssertion'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    kind'
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' WordBoundaryAssertion'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    kind'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    negate'
          BooleanKeyword
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' CharacterSet'
        UnionType
          TypeReference
            Identifier: ' AnyCharacterSet'
          TypeReference
            Identifier: ' EscapeCharacterSet'
          TypeReference
            Identifier: ' UnicodePropertyCharacterSet'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' AnyCharacterSet'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    kind'
          LiteralType
            StringLiteral
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' EscapeCharacterSet'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' CharacterClass'
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    kind'
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
        PropertySignature
          Identifier: '
    negate'
          BooleanKeyword
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' UnicodePropertyCharacterSet'
        UnionType
          TypeReference
            Identifier: ' CharacterUnicodePropertyCharacterSet'
          TypeReference
            Identifier: ' StringsUnicodePropertyCharacterSet'
      InterfaceDeclaration
        Identifier: ' BaseUnicodePropertyCharacterSet'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' CharacterClass'
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    kind'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    strings'
          BooleanKeyword
        PropertySignature
          Identifier: '
    key'
          StringKeyword
        PropertySignature
          Identifier: '
    value'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
    negate'
          BooleanKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' CharacterUnicodePropertyCharacterSet'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseUnicodePropertyCharacterSet'
        PropertySignature
          Identifier: '
    strings'
          LiteralType
            FalseKeyword
        PropertySignature
          Identifier: '
    value'
          UnionType
            StringKeyword
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
    negate'
          BooleanKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' StringsUnicodePropertyCharacterSet'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseUnicodePropertyCharacterSet'
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' Quantifier'
            TypeReference
              Identifier: ' UnicodeSetsCharacterClass'
        PropertySignature
          Identifier: '
    strings'
          LiteralType
            TrueKeyword
        PropertySignature
          Identifier: '
    value'
          LiteralType
            NullKeyword
        PropertySignature
          Identifier: '
    negate'
          LiteralType
            FalseKeyword
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' ExpressionCharacterClass'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' Quantifier'
            TypeReference
              Identifier: ' UnicodeSetsCharacterClass'
        PropertySignature
          Identifier: '
    negate'
          BooleanKeyword
        PropertySignature
          Identifier: '
    expression'
          UnionType
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' ClassSetOperand'
        UnionType
          TypeReference
            Identifier: ' Character'
          TypeReference
            Identifier: ' ClassStringDisjunction'
          TypeReference
            Identifier: ' EscapeCharacterSet'
          TypeReference
            Identifier: ' ExpressionCharacterClass'
          TypeReference
            Identifier: ' UnicodePropertyCharacterSet'
          TypeReference
            Identifier: ' UnicodeSetsCharacterClass'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' ClassIntersection'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ExpressionCharacterClass'
        PropertySignature
          Identifier: '
    left'
          UnionType
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSetOperand'
        PropertySignature
          Identifier: '
    right'
          TypeReference
            Identifier: ' ClassSetOperand'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' ClassSubtraction'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' ExpressionCharacterClass'
        PropertySignature
          Identifier: '
    left'
          UnionType
            TypeReference
              Identifier: ' ClassSetOperand'
            TypeReference
              Identifier: ' ClassSubtraction'
        PropertySignature
          Identifier: '
    right'
          TypeReference
            Identifier: ' ClassSetOperand'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' ClassStringDisjunction'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' UnicodeSetsCharacterClass'
        PropertySignature
          Identifier: '
    alternatives'
          ArrayType
            TypeReference
              Identifier: ' StringAlternative'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' StringAlternative'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          TypeReference
            Identifier: ' ClassStringDisjunction'
        PropertySignature
          Identifier: '
    elements'
          ArrayType
            TypeReference
              Identifier: ' Character'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Character'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' CharacterClass'
            TypeReference
              Identifier: ' CharacterClassRange'
            TypeReference
              Identifier: ' ClassIntersection'
            TypeReference
              Identifier: ' ClassSubtraction'
            TypeReference
              Identifier: ' Quantifier'
            TypeReference
              Identifier: ' StringAlternative'
        PropertySignature
          Identifier: '
    value'
          NumberKeyword
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' Backreference'
        UnionType
          TypeReference
            Identifier: ' AmbiguousBackreference'
          TypeReference
            Identifier: ' UnambiguousBackreference'
      InterfaceDeclaration
        Identifier: ' BaseBackreference'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' Alternative'
            TypeReference
              Identifier: ' Quantifier'
        PropertySignature
          Identifier: '
    ref'
          UnionType
            NumberKeyword
            StringKeyword
        PropertySignature
          Identifier: '
    ambiguous'
          BooleanKeyword
        PropertySignature
          Identifier: '
    resolved'
          UnionType
            TypeReference
              Identifier: ' CapturingGroup'
            ArrayType
              TypeReference
                Identifier: ' CapturingGroup'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' AmbiguousBackreference'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseBackreference'
        PropertySignature
          Identifier: '
    ref'
          StringKeyword
        PropertySignature
          Identifier: '
    ambiguous'
          LiteralType
            TrueKeyword
        PropertySignature
          Identifier: '
    resolved'
          ArrayType
            TypeReference
              Identifier: ' CapturingGroup'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' UnambiguousBackreference'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' BaseBackreference'
        PropertySignature
          Identifier: '
    ambiguous'
          LiteralType
            FalseKeyword
        PropertySignature
          Identifier: '
    resolved'
          TypeReference
            Identifier: ' CapturingGroup'
      InterfaceDeclaration
        ExportKeyword
        Identifier: ' Flags'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' NodeBase'
        PropertySignature
          Identifier: '
    type'
          LiteralType
            StringLiteral
        PropertySignature
          Identifier: '
    parent'
          UnionType
            TypeReference
              Identifier: ' RegExpLiteral'
            LiteralType
              NullKeyword
        PropertySignature
          Identifier: '
    dotAll'
          BooleanKeyword
        PropertySignature
          Identifier: '
    global'
          BooleanKeyword
        PropertySignature
          Identifier: '
    hasIndices'
          BooleanKeyword
        PropertySignature
          Identifier: '
    ignoreCase'
          BooleanKeyword
        PropertySignature
          Identifier: '
    multiline'
          BooleanKeyword
        PropertySignature
          Identifier: '
    sticky'
          BooleanKeyword
        PropertySignature
          Identifier: '
    unicode'
          BooleanKeyword
        PropertySignature
          Identifier: '
    unicodeSets'
          BooleanKeyword
      ExportDeclaration
        NamedExports
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: '
    Flags'
            ImportSpecifier
              Identifier: '
    RegExpLiteral'
            ImportSpecifier
              Identifier: '
    Pattern'
        StringLiteral
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' EcmaVersion'
        StringLiteral
      ModuleDeclaration
        ExportKeyword
        Identifier: ' RegExpParser'
        ModuleBlock
          InterfaceDeclaration
            Identifier: ' Options'
            PropertySignature
              Identifier: '
      /**
       * The flag to disable Annex B syntax. Default is `false`.
       */
      strict'
              QuestionToken
              BooleanKeyword
            PropertySignature
              Identifier: '
      /**
       * ECMAScript version. Default is `2025`.
       * - `2015` added `u` and `y` flags.
       * - `2018` added `s` flag, Named Capturing Group, Lookbehind Assertion,
       *   and Unicode Property Escape.
       * - `2019`, `2020`, and `2021` added more valid Unicode Property Escapes.
       * - `2022` added `d` flag.
       * - `2023` added more valid Unicode Property Escapes.
       * - `2024` added `v` flag.
       * - `2025` added duplicate named capturing groups.
       */
      ecmaVersion'
              QuestionToken
              TypeReference
                Identifier: ' EcmaVersion'
      ClassDeclaration
        ExportKeyword
        Identifier: ' RegExpParser'
        Constructor
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              QualifiedName
                Identifier: ' RegExpParser'
                Identifier: 'Options'
        MethodDeclaration
          Identifier: '
    /**
     * Parse a regular expression literal. E.g. "/abc/g"
     * @param source The source code to parse.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @returns The AST of the given regular expression.
     */
    parseLiteral'
          Parameter
            Identifier: 'source'
            StringKeyword
          Parameter
            Identifier: ' start'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: ' end'
            QuestionToken
            NumberKeyword
          TypeReference
            Identifier: ' RegExpLiteral'
        MethodDeclaration
          Identifier: '
    /**
     * Parse a regular expression flags. E.g. "gim"
     * @param source The source code to parse.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @returns The AST of the given flags.
     */
    parseFlags'
          Parameter
            Identifier: 'source'
            StringKeyword
          Parameter
            Identifier: ' start'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: ' end'
            QuestionToken
            NumberKeyword
          TypeReference
            Identifier: ' Flags'
        MethodDeclaration
          Identifier: '
    /**
     * Parse a regular expression pattern. E.g. "abc"
     * @param source The source code to parse.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @param flags The flags.
     * @returns The AST of the given pattern.
     */
    parsePattern'
          Parameter
            Identifier: '
      source'
            StringKeyword
          Parameter
            Identifier: '
      start'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: '
      end'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: '
      flags'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
        unicode'
                QuestionToken
                BooleanKeyword
              PropertySignature
                Identifier: '
        unicodeSets'
                QuestionToken
                BooleanKeyword
          TypeReference
            Identifier: ' Pattern'
        MethodDeclaration
          Identifier: '
    /**
     * @deprecated Backward compatibility
     * Use object `flags` instead of boolean `uFlag`.
     *
     * @param source The source code to parse.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @param uFlag The flag to set unicode mode.
     * @returns The AST of the given pattern.
     */
    parsePattern'
          Parameter
            Identifier: '
      source'
            StringKeyword
          Parameter
            Identifier: '
      start'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: '
      end'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: '
      uFlag'
            QuestionToken
            BooleanKeyword
          TypeReference
            Identifier: ' Pattern'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' EcmaVersion'
        StringLiteral
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' RegExpValidatorSourceContext'
        TypeLiteral
          PropertySignature
            ReadonlyKeyword
            Identifier: ' source'
            StringKeyword
          PropertySignature
            ReadonlyKeyword
            Identifier: ' start'
            NumberKeyword
          PropertySignature
            ReadonlyKeyword
            Identifier: ' end'
            NumberKeyword
          PropertySignature
            ReadonlyKeyword
            Identifier: ' kind'
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      ModuleDeclaration
        ExportKeyword
        Identifier: ' RegExpValidator'
        ModuleBlock
          InterfaceDeclaration
            Identifier: ' Options'
            PropertySignature
              Identifier: '
      /**
       * The flag to disable Annex B syntax. Default is `false`.
       */
      strict'
              QuestionToken
              BooleanKeyword
            PropertySignature
              Identifier: '
      /**
       * ECMAScript version. Default is `2025`.
       * - `2015` added `u` and `y` flags.
       * - `2018` added `s` flag, Named Capturing Group, Lookbehind Assertion,
       *   and Unicode Property Escape.
       * - `2019`, `2020`, and `2021` added more valid Unicode Property Escapes.
       * - `2022` added `d` flag.
       * - `2023` added more valid Unicode Property Escapes.
       * - `2024` added `v` flag.
       * - `2025` added duplicate named capturing groups.
       */
      ecmaVersion'
              QuestionToken
              TypeReference
                Identifier: ' EcmaVersion'
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered a RegExp literal.
       * @param start The 0-based index of the first character.
       */
      onLiteralEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left a RegExp literal.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onLiteralLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found flags.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param flags.global `g` flag.
       * @param flags.ignoreCase `i` flag.
       * @param flags.multiline `m` flag.
       * @param flags.unicode `u` flag.
       * @param flags.sticky `y` flag.
       * @param flags.dotAll `s` flag.
       * @param flags.hasIndices `d` flag.
       * @param flags.unicodeSets `v` flag.
       */
      onRegExpFlags'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        flags'
                  TypeLiteral
                    PropertySignature
                      Identifier: '
          global'
                      BooleanKeyword
                    PropertySignature
                      Identifier: '
          ignoreCase'
                      BooleanKeyword
                    PropertySignature
                      Identifier: '
          multiline'
                      BooleanKeyword
                    PropertySignature
                      Identifier: '
          unicode'
                      BooleanKeyword
                    PropertySignature
                      Identifier: '
          sticky'
                      BooleanKeyword
                    PropertySignature
                      Identifier: '
          dotAll'
                      BooleanKeyword
                    PropertySignature
                      Identifier: '
          hasIndices'
                      BooleanKeyword
                    PropertySignature
                      Identifier: '
          unicodeSets'
                      BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found flags.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param global `g` flag.
       * @param ignoreCase `i` flag.
       * @param multiline `m` flag.
       * @param unicode `u` flag.
       * @param sticky `y` flag.
       * @param dotAll `s` flag.
       * @param hasIndices `d` flag.
       *
       * @deprecated Use `onRegExpFlags` instead.
       */
      onFlags'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        global'
                  BooleanKeyword
                Parameter
                  Identifier: '
        ignoreCase'
                  BooleanKeyword
                Parameter
                  Identifier: '
        multiline'
                  BooleanKeyword
                Parameter
                  Identifier: '
        unicode'
                  BooleanKeyword
                Parameter
                  Identifier: '
        sticky'
                  BooleanKeyword
                Parameter
                  Identifier: '
        dotAll'
                  BooleanKeyword
                Parameter
                  Identifier: '
        hasIndices'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered a pattern.
       * @param start The 0-based index of the first character.
       */
      onPatternEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left a pattern.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onPatternLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered a disjunction.
       * @param start The 0-based index of the first character.
       */
      onDisjunctionEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left a disjunction.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onDisjunctionLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered an alternative.
       * @param start The 0-based index of the first character.
       * @param index The 0-based index of alternatives in a disjunction.
       */
      onAlternativeEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' index'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left an alternative.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param index The 0-based index of alternatives in a disjunction.
       */
      onAlternativeLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                Parameter
                  Identifier: ' index'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered an uncapturing group.
       * @param start The 0-based index of the first character.
       */
      onGroupEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left an uncapturing group.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onGroupLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered a capturing group.
       * @param start The 0-based index of the first character.
       * @param name The group name.
       */
      onCapturingGroupEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' name'
                  UnionType
                    StringKeyword
                    LiteralType
                      NullKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left a capturing group.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param name The group name.
       */
      onCapturingGroupLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        name'
                  UnionType
                    StringKeyword
                    LiteralType
                      NullKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a quantifier.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param min The minimum number of repeating.
       * @param max The maximum number of repeating.
       * @param greedy The flag to choose the longest matching.
       */
      onQuantifier'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        min'
                  NumberKeyword
                Parameter
                  Identifier: '
        max'
                  NumberKeyword
                Parameter
                  Identifier: '
        greedy'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered a lookahead/lookbehind assertion.
       * @param start The 0-based index of the first character.
       * @param kind The kind of the assertion.
       * @param negate The flag which represents that the assertion is negative.
       */
      onLookaroundAssertionEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        kind'
                  UnionType
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
                Parameter
                  Identifier: '
        negate'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left a lookahead/lookbehind assertion.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the assertion.
       * @param negate The flag which represents that the assertion is negative.
       */
      onLookaroundAssertionLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        kind'
                  UnionType
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
                Parameter
                  Identifier: '
        negate'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found an edge boundary assertion.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the assertion.
       */
      onEdgeAssertion'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        kind'
                  UnionType
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a word boundary assertion.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the assertion.
       * @param negate The flag which represents that the assertion is negative.
       */
      onWordBoundaryAssertion'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        kind'
                  LiteralType
                    StringLiteral
                Parameter
                  Identifier: '
        negate'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a dot.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the character set.
       */
      onAnyCharacterSet'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                Parameter
                  Identifier: ' kind'
                  LiteralType
                    StringLiteral
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a character set escape.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the character set.
       * @param negate The flag which represents that the character set is negative.
       */
      onEscapeCharacterSet'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        kind'
                  UnionType
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
                    LiteralType
                      StringLiteral
                Parameter
                  Identifier: '
        negate'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a Unicode proerty escape.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param kind The kind of the character set.
       * @param key The property name.
       * @param value The property value.
       * @param negate The flag which represents that the character set is negative.
       * @param strings If true, the given property is property of strings.
       */
      onUnicodePropertyCharacterSet'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        kind'
                  LiteralType
                    StringLiteral
                Parameter
                  Identifier: '
        key'
                  StringKeyword
                Parameter
                  Identifier: '
        value'
                  UnionType
                    StringKeyword
                    LiteralType
                      NullKeyword
                Parameter
                  Identifier: '
        negate'
                  BooleanKeyword
                Parameter
                  Identifier: '
        strings'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a character.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param value The code point of the character.
       */
      onCharacter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                Parameter
                  Identifier: ' value'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a backreference.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param ref The key of the referred capturing group.
       */
      onBackreference'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        ref'
                  UnionType
                    NumberKeyword
                    StringKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered a character class.
       * @param start The 0-based index of the first character.
       * @param negate The flag which represents that the character class is negative.
       * @param unicodeSets `true` if unicodeSets mode.
       */
      onCharacterClassEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        negate'
                  BooleanKeyword
                Parameter
                  Identifier: '
        unicodeSets'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left a character class.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param negate The flag which represents that the character class is negative.
       */
      onCharacterClassLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        negate'
                  BooleanKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a character class range.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param min The minimum code point of the range.
       * @param max The maximum code point of the range.
       */
      onCharacterClassRange'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        min'
                  NumberKeyword
                Parameter
                  Identifier: '
        max'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a class intersection.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onClassIntersection'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator found a class subtraction.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onClassSubtraction'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered a class string disjunction.
       * @param start The 0-based index of the first character.
       */
      onClassStringDisjunctionEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left a class string disjunction.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       */
      onClassStringDisjunctionLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' end'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator entered a string alternative.
       * @param start The 0-based index of the first character.
       * @param index The 0-based index of alternatives in a disjunction.
       */
      onStringAlternativeEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'start'
                  NumberKeyword
                Parameter
                  Identifier: ' index'
                  NumberKeyword
                VoidKeyword
            PropertySignature
              Identifier: '
      /**
       * A function that is called when the validator left a string alternative.
       * @param start The 0-based index of the first character.
       * @param end The next 0-based index of the last character.
       * @param index The 0-based index of alternatives in a disjunction.
       */
      onStringAlternativeLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        start'
                  NumberKeyword
                Parameter
                  Identifier: '
        end'
                  NumberKeyword
                Parameter
                  Identifier: '
        index'
                  NumberKeyword
                VoidKeyword
      ClassDeclaration
        ExportKeyword
        Identifier: ' RegExpValidator'
        Constructor
          Parameter
            Identifier: 'options'
            QuestionToken
            TypeReference
              QualifiedName
                Identifier: ' RegExpValidator'
                Identifier: 'Options'
        MethodDeclaration
          Identifier: '
    /**
     * Validate a regular expression literal. E.g. "/abc/g"
     * @param source The source code to validate.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     */
    validateLiteral'
          Parameter
            Identifier: 'source'
            StringKeyword
          Parameter
            Identifier: ' start'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: ' end'
            QuestionToken
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
    /**
     * Validate a regular expression flags. E.g. "gim"
     * @param source The source code to validate.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     */
    validateFlags'
          Parameter
            Identifier: 'source'
            StringKeyword
          Parameter
            Identifier: ' start'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: ' end'
            QuestionToken
            NumberKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
    /**
     * Validate a regular expression pattern. E.g. "abc"
     * @param source The source code to validate.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @param flags The flags.
     */
    validatePattern'
          Parameter
            Identifier: '
      source'
            StringKeyword
          Parameter
            Identifier: '
      start'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: '
      end'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: '
      flags'
            QuestionToken
            TypeLiteral
              PropertySignature
                Identifier: '
        unicode'
                QuestionToken
                BooleanKeyword
              PropertySignature
                Identifier: '
        unicodeSets'
                QuestionToken
                BooleanKeyword
          VoidKeyword
        MethodDeclaration
          Identifier: '
    /**
     * @deprecated Backward compatibility
     * Use object `flags` instead of boolean `uFlag`.
     * @param source The source code to validate.
     * @param start The start index in the source code.
     * @param end The end index in the source code.
     * @param uFlag The flag to set unicode mode.
     */
    validatePattern'
          Parameter
            Identifier: '
      source'
            StringKeyword
          Parameter
            Identifier: '
      start'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: '
      end'
            QuestionToken
            NumberKeyword
          Parameter
            Identifier: '
      uFlag'
            QuestionToken
            BooleanKeyword
          VoidKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: '
    Alternative'
            ImportSpecifier
              Identifier: '
    Assertion'
            ImportSpecifier
              Identifier: '
    Backreference'
            ImportSpecifier
              Identifier: '
    CapturingGroup'
            ImportSpecifier
              Identifier: '
    Character'
            ImportSpecifier
              Identifier: '
    CharacterClass'
            ImportSpecifier
              Identifier: '
    CharacterClassRange'
            ImportSpecifier
              Identifier: '
    CharacterSet'
            ImportSpecifier
              Identifier: '
    ClassIntersection'
            ImportSpecifier
              Identifier: '
    ClassStringDisjunction'
            ImportSpecifier
              Identifier: '
    ClassSubtraction'
            ImportSpecifier
              Identifier: '
    ExpressionCharacterClass'
            ImportSpecifier
              Identifier: '
    Flags'
            ImportSpecifier
              Identifier: '
    Group'
            ImportSpecifier
              Identifier: '
    Node'
            ImportSpecifier
              Identifier: '
    Pattern'
            ImportSpecifier
              Identifier: '
    Quantifier'
            ImportSpecifier
              Identifier: '
    RegExpLiteral'
            ImportSpecifier
              Identifier: '
    StringAlternative'
        StringLiteral
      ClassDeclaration
        ExportKeyword
        Identifier: ' RegExpVisitor'
        Constructor
          Parameter
            Identifier: 'handlers'
            TypeReference
              QualifiedName
                Identifier: ' RegExpVisitor'
                Identifier: 'Handlers'
        MethodDeclaration
          Identifier: '
    /**
     * Visit a given node and descendant nodes.
     * @param node The root node to visit tree.
     */
    visit'
          Parameter
            Identifier: 'node'
            TypeReference
              Identifier: ' Node'
          VoidKeyword
      ModuleDeclaration
        ExportKeyword
        Identifier: ' RegExpVisitor'
        ModuleBlock
          InterfaceDeclaration
            Identifier: ' Handlers'
            PropertySignature
              Identifier: '
      onAlternativeEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Alternative'
                VoidKeyword
            PropertySignature
              Identifier: '
      onAlternativeLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Alternative'
                VoidKeyword
            PropertySignature
              Identifier: '
      onAssertionEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Assertion'
                VoidKeyword
            PropertySignature
              Identifier: '
      onAssertionLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Assertion'
                VoidKeyword
            PropertySignature
              Identifier: '
      onBackreferenceEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Backreference'
                VoidKeyword
            PropertySignature
              Identifier: '
      onBackreferenceLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Backreference'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCapturingGroupEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' CapturingGroup'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCapturingGroupLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' CapturingGroup'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCharacterEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Character'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCharacterLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Character'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCharacterClassEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' CharacterClass'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCharacterClassLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' CharacterClass'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCharacterClassRangeEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' CharacterClassRange'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCharacterClassRangeLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' CharacterClassRange'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCharacterSetEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' CharacterSet'
                VoidKeyword
            PropertySignature
              Identifier: '
      onCharacterSetLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' CharacterSet'
                VoidKeyword
            PropertySignature
              Identifier: '
      onClassIntersectionEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' ClassIntersection'
                VoidKeyword
            PropertySignature
              Identifier: '
      onClassIntersectionLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' ClassIntersection'
                VoidKeyword
            PropertySignature
              Identifier: '
      onClassStringDisjunctionEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' ClassStringDisjunction'
                VoidKeyword
            PropertySignature
              Identifier: '
      onClassStringDisjunctionLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' ClassStringDisjunction'
                VoidKeyword
            PropertySignature
              Identifier: '
      onClassSubtractionEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' ClassSubtraction'
                VoidKeyword
            PropertySignature
              Identifier: '
      onClassSubtractionLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' ClassSubtraction'
                VoidKeyword
            PropertySignature
              Identifier: '
      onExpressionCharacterClassEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        node'
                  TypeReference
                    Identifier: ' ExpressionCharacterClass'
                VoidKeyword
            PropertySignature
              Identifier: '
      onExpressionCharacterClassLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: '
        node'
                  TypeReference
                    Identifier: ' ExpressionCharacterClass'
                VoidKeyword
            PropertySignature
              Identifier: '
      onFlagsEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Flags'
                VoidKeyword
            PropertySignature
              Identifier: '
      onFlagsLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Flags'
                VoidKeyword
            PropertySignature
              Identifier: '
      onGroupEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Group'
                VoidKeyword
            PropertySignature
              Identifier: '
      onGroupLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Group'
                VoidKeyword
            PropertySignature
              Identifier: '
      onPatternEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Pattern'
                VoidKeyword
            PropertySignature
              Identifier: '
      onPatternLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Pattern'
                VoidKeyword
            PropertySignature
              Identifier: '
      onQuantifierEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Quantifier'
                VoidKeyword
            PropertySignature
              Identifier: '
      onQuantifierLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' Quantifier'
                VoidKeyword
            PropertySignature
              Identifier: '
      onRegExpLiteralEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' RegExpLiteral'
                VoidKeyword
            PropertySignature
              Identifier: '
      onRegExpLiteralLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' RegExpLiteral'
                VoidKeyword
            PropertySignature
              Identifier: '
      onStringAlternativeEnter'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' StringAlternative'
                VoidKeyword
            PropertySignature
              Identifier: '
      onStringAlternativeLeave'
              QuestionToken
              FunctionType
                Parameter
                  Identifier: 'node'
                  TypeReference
                    Identifier: ' StringAlternative'
                VoidKeyword
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      ImportDeclaration
        ImportClause
          NamedImports
            ImportSpecifier
              Identifier: ' RegExpValidatorSourceContext'
        StringLiteral
      ClassDeclaration
        ExportKeyword
        Identifier: ' RegExpSyntaxError'
        HeritageClause
          ExpressionWithTypeArguments
            Identifier: ' SyntaxError'
        PropertyDeclaration
          Identifier: '
    index'
          NumberKeyword
        Constructor
          Parameter
            Identifier: 'message'
            StringKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
      FunctionDeclaration
        ExportKeyword
        Identifier: ' newRegExpSyntaxError'
        Parameter
          Identifier: '
    srcCtx'
          TypeReference
            Identifier: ' RegExpValidatorSourceContext'
        Parameter
          Identifier: '
    flags'
          TypeLiteral
            PropertySignature
              Identifier: '
      unicode'
              BooleanKeyword
            PropertySignature
              Identifier: '
      unicodeSets'
              BooleanKeyword
        Parameter
          Identifier: '
    index'
          NumberKeyword
        Parameter
          Identifier: '
    message'
          StringKeyword
        TypeReference
          Identifier: ' RegExpSyntaxError'
  ModuleDeclaration
    DeclareKeyword
    StringLiteral
    ModuleBlock
      TypeAliasDeclaration
        ExportKeyword
        Identifier: ' EcmaVersion'
        UnionType
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
          LiteralType
            NumericLiteral
      VariableStatement
        ExportKeyword
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' latestEcmaVersion'
            NumericLiteral
