SourceFile
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' VisitTraversalStep'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'VisitTraversalStep'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' CallTraversalStep'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'CallTraversalStep'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TextSourceCode'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'TextSourceCode'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TraversalStep'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'TraversalStep'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SourceLocation'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'SourceLocation'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SourceLocationWithOffset'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'SourceLocationWithOffset'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' SourceRange'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'SourceRange'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' RuleConfig'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'RuleConfig'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' RulesConfig'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'RulesConfig'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' StringConfig'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'StringConfig'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' BooleanConfig'
    ImportType
      LiteralType
        StringLiteral
      Identifier: 'BooleanConfig'
  ClassDeclaration
    ExportKeyword
    Identifier: ' CallMethodStep'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' CallTraversalStep'
    Constructor
      Parameter
        ObjectBindingPattern
          BindingElement
            Identifier: ' target'
          BindingElement
            Identifier: ' args'
        TypeLiteral
          PropertySignature
            Identifier: '
        target'
            StringKeyword
          PropertySignature
            Identifier: '
        args'
            TypeReference
              Identifier: ' Array'
              AnyKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' type'
      LiteralType
        StringLiteral
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' kind'
      LiteralType
        NumericLiteral
    PropertyDeclaration
      Identifier: '
    /**
     * The name of the method to call.
     * @type {string}
     */
    target'
      StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The arguments to pass to the method.
     * @type {Array<any>}
     */
    args'
      TypeReference
        Identifier: ' Array'
        AnyKeyword
  ClassDeclaration
    ExportKeyword
    Identifier: ' ConfigCommentParser'
    MethodDeclaration
      Identifier: '
    /**
     * Parses a list of "name:string_value" or/and "name" options divided by comma or
     * whitespace. Used for "global" comments.
     * @param {string} string The string to parse.
     * @returns {StringConfig} Result map object of names and string values, or null values if no value was provided.
     */
    parseStringConfig'
      Parameter
        Identifier: 'string'
        StringKeyword
      TypeReference
        Identifier: ' StringConfig'
    MethodDeclaration
      Identifier: '
    /**
     * Parses a JSON-like config.
     * @param {string} string The string to parse.
     * @returns {({ok: true, config: RulesConfig}|{ok: false, error: {message: string}})} Result map object
     */
    parseJSONLikeConfig'
      Parameter
        Identifier: 'string'
        StringKeyword
      ParenthesizedType
        UnionType
          TypeLiteral
            PropertySignature
              Identifier: '
        ok'
              LiteralType
                TrueKeyword
            PropertySignature
              Identifier: '
        config'
              TypeReference
                Identifier: ' RulesConfig'
          TypeLiteral
            PropertySignature
              Identifier: '
        ok'
              LiteralType
                FalseKeyword
            PropertySignature
              Identifier: '
        error'
              TypeLiteral
                PropertySignature
                  Identifier: '
            message'
                  StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Parses a config of values separated by comma.
     * @param {string} string The string to parse.
     * @returns {BooleanConfig} Result map of values and true values
     */
    parseListConfig'
      Parameter
        Identifier: 'string'
        StringKeyword
      TypeReference
        Identifier: ' BooleanConfig'
    MethodDeclaration
      Identifier: '
    /**
     * Parses a directive comment into directive text and value.
     * @param {string} string The string with the directive to be parsed.
     * @returns {DirectiveComment|undefined} The parsed directive or `undefined` if the directive is invalid.
     */
    parseDirective'
      Parameter
        Identifier: 'string'
        StringKeyword
      UnionType
        TypeReference
          Identifier: ' DirectiveComment'
        UndefinedKeyword
    PropertyDeclaration
      PrivateIdentifier
  ClassDeclaration
    ExportKeyword
    Identifier: ' TextSourceCodeBase'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TextSourceCode'
    Constructor
      Parameter
        ObjectBindingPattern
          BindingElement
            Identifier: ' text'
          BindingElement
            Identifier: ' ast'
          BindingElement
            Identifier: ' lineEndingPattern'
        TypeLiteral
          PropertySignature
            Identifier: '
        text'
            StringKeyword
          PropertySignature
            Identifier: '
        ast'
            ObjectKeyword
          PropertySignature
            Identifier: '
        lineEndingPattern'
            QuestionToken
            TypeReference
              Identifier: ' RegExp'
    PropertyDeclaration
      Identifier: '
    /**
     * The AST of the source code.
     * @type {object}
     */
    ast'
      ObjectKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The text of the source code.
     * @type {string}
     */
    text'
      StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Returns the loc information for the given node or token.
     * @param {object} nodeOrToken The node or token to get the loc information for.
     * @returns {SourceLocation} The loc information for the node or token.
     */
    getLoc'
      Parameter
        Identifier: 'nodeOrToken'
        ObjectKeyword
      TypeReference
        Identifier: ' SourceLocation'
    MethodDeclaration
      Identifier: '
    /**
     * Returns the range information for the given node or token.
     * @param {object} nodeOrToken The node or token to get the range information for.
     * @returns {SourceRange} The range information for the node or token.
     */
    getRange'
      Parameter
        Identifier: 'nodeOrToken'
        ObjectKeyword
      TypeReference
        Identifier: ' SourceRange'
    MethodDeclaration
      Identifier: '
    /**
     * Returns the parent of the given node.
     * @param {object} node The node to get the parent of.
     * @returns {object|undefined} The parent of the node.
     */
    getParent'
      Parameter
        Identifier: 'node'
        ObjectKeyword
      UnionType
        ObjectKeyword
        UndefinedKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Gets all the ancestors of a given node
     * @param {object} node The node
     * @returns {Array<object>} All the ancestor nodes in the AST, not including the provided node, starting
     * from the root node at index 0 and going inwards to the parent node.
     * @throws {TypeError} When `node` is missing.
     */
    getAncestors'
      Parameter
        Identifier: 'node'
        ObjectKeyword
      TypeReference
        Identifier: ' Array'
        ObjectKeyword
    MethodDeclaration
      PublicKeyword
      Identifier: ' getText'
      Parameter
        Identifier: 'node'
        QuestionToken
        ObjectKeyword
      Parameter
        Identifier: ' beforeCount'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' afterCount'
        QuestionToken
        NumberKeyword
      StringKeyword
    GetAccessor
      PublicKeyword
      Identifier: ' lines'
      ArrayType
        StringKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Traverse the source code and return the steps that were taken.
     * @returns {Iterable<TraversalStep>} The steps that were taken while traversing the source code.
     */
    traverse'
      TypeReference
        Identifier: ' Iterable'
        TypeReference
          Identifier: 'TraversalStep'
    PropertyDeclaration
      PrivateIdentifier
  ClassDeclaration
    ExportKeyword
    Identifier: ' VisitNodeStep'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' VisitTraversalStep'
    Constructor
      Parameter
        ObjectBindingPattern
          BindingElement
            Identifier: ' target'
          BindingElement
            Identifier: ' phase'
          BindingElement
            Identifier: ' args'
        TypeLiteral
          PropertySignature
            Identifier: '
        target'
            ObjectKeyword
          PropertySignature
            Identifier: '
        phase'
            UnionType
              LiteralType
                NumericLiteral
              LiteralType
                NumericLiteral
          PropertySignature
            Identifier: '
        args'
            TypeReference
              Identifier: ' Array'
              AnyKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' type'
      LiteralType
        StringLiteral
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' kind'
      LiteralType
        NumericLiteral
    PropertyDeclaration
      Identifier: '
    /**
     * The target of the step.
     * @type {object}
     */
    target'
      ObjectKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The phase of the step.
     * @type {1|2}
     */
    phase'
      UnionType
        LiteralType
          NumericLiteral
        LiteralType
          NumericLiteral
    PropertyDeclaration
      Identifier: '
    /**
     * The arguments of the step.
     * @type {Array<any>}
     */
    args'
      TypeReference
        Identifier: ' Array'
        AnyKeyword
  ClassDeclaration
    DeclareKeyword
    Identifier: ' DirectiveComment'
    Constructor
      Parameter
        Identifier: 'label'
        StringKeyword
      Parameter
        Identifier: ' value'
        StringKeyword
      Parameter
        Identifier: ' justification'
        StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The label of the directive, such as "eslint", "eslint-disable", etc.
     * @type {string}
     */
    label'
      StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The value of the directive (the string after the label).
     * @type {string}
     */
    value'
      StringKeyword
    PropertyDeclaration
      Identifier: '
    /**
     * The justification of the directive (the string after the --).
     * @type {string}
     */
    justification'
      StringKeyword
  ExportDeclaration
    NamedExports
