SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' SourceType'
        ImportSpecifier
          Identifier: ' TSESTree'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Scope'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' BlockScope'
        ImportSpecifier
          Identifier: ' CatchScope'
        ImportSpecifier
          Identifier: ' ClassScope'
        ImportSpecifier
          Identifier: ' ConditionalTypeScope'
        ImportSpecifier
          Identifier: ' ForScope'
        ImportSpecifier
          Identifier: ' FunctionExpressionNameScope'
        ImportSpecifier
          Identifier: ' FunctionScope'
        ImportSpecifier
          Identifier: ' FunctionTypeScope'
        ImportSpecifier
          Identifier: ' GlobalScope'
        ImportSpecifier
          Identifier: ' MappedTypeScope'
        ImportSpecifier
          Identifier: ' ModuleScope'
        ImportSpecifier
          Identifier: ' SwitchScope'
        ImportSpecifier
          Identifier: ' TSEnumScope'
        ImportSpecifier
          Identifier: ' TSModuleScope'
        ImportSpecifier
          Identifier: ' TypeScope'
        ImportSpecifier
          Identifier: ' WithScope'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' ClassFieldInitializerScope'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' ClassStaticBlockScope'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Variable'
    StringLiteral
  InterfaceDeclaration
    Identifier: ' ScopeManagerOptions'
    PropertySignature
      Identifier: '
    globalReturn'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    impliedStrict'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '
    sourceType'
      QuestionToken
      TypeReference
        Identifier: ' SourceType'
  ClassDeclaration
    DeclareKeyword
    Identifier: ' ScopeManager'
    PropertyDeclaration
      PrivateIdentifier
    PropertyDeclaration
      Identifier: '
    currentScope'
      UnionType
        TypeReference
          Identifier: ' Scope'
        LiteralType
          NullKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' declaredVariables'
      TypeReference
        Identifier: ' WeakMap'
        TypeReference
          QualifiedName
            Identifier: 'TSESTree'
            Identifier: 'Node'
        ArrayType
          TypeReference
            Identifier: ' Variable'
    PropertyDeclaration
      Identifier: '
    /**
     * The root scope
     */
    globalScope'
      UnionType
        TypeReference
          Identifier: ' GlobalScope'
        LiteralType
          NullKeyword
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' nodeToScope'
      TypeReference
        Identifier: ' WeakMap'
        TypeReference
          QualifiedName
            Identifier: 'TSESTree'
            Identifier: 'Node'
        ArrayType
          TypeReference
            Identifier: ' Scope'
    PropertyDeclaration
      ReadonlyKeyword
      Identifier: ' scopes'
      ArrayType
        TypeReference
          Identifier: ' Scope'
    GetAccessor
      Identifier: ' variables'
      ArrayType
        TypeReference
          Identifier: ' Variable'
    Constructor
      Parameter
        Identifier: 'options'
        TypeReference
          Identifier: ' ScopeManagerOptions'
    MethodDeclaration
      Identifier: '
    isGlobalReturn'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    isModule'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    isImpliedStrict'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    isStrictModeSupported'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    isES6'
      BooleanKeyword
    MethodDeclaration
      Identifier: '
    /**
     * Get the variables that a given AST node defines. The gotten variables' `def[].node`/`def[].parent` property is the node.
     * If the node does not define any variable, this returns an empty array.
     * @param node An AST node to get their variables.
     */
    getDeclaredVariables'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      ArrayType
        TypeReference
          Identifier: ' Variable'
    MethodDeclaration
      Identifier: '
    /**
     * Get the scope of a given AST node. The gotten scope's `block` property is the node.
     * This method never returns `function-expression-name` scope. If the node does not have their scope, this returns `null`.
     *
     * @param node An AST node to get their scope.
     * @param inner If the node has multiple scopes, this returns the outermost scope normally.
     *                If `inner` is `true` then this returns the innermost scope.
     */
    acquire'
      Parameter
        Identifier: 'node'
        TypeReference
          QualifiedName
            Identifier: ' TSESTree'
            Identifier: 'Node'
      Parameter
        Identifier: ' inner'
        QuestionToken
        BooleanKeyword
      UnionType
        TypeReference
          Identifier: ' Scope'
        LiteralType
          NullKeyword
    MethodDeclaration
      ProtectedKeyword
      Identifier: ' nestScope'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' Scope'
      Parameter
        Identifier: 'scope'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' T'
    MethodDeclaration
      Identifier: '
    nestBlockScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' BlockScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' BlockScope'
    MethodDeclaration
      Identifier: '
    nestCatchScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' CatchScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' CatchScope'
    MethodDeclaration
      Identifier: '
    nestClassScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' ClassScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' ClassScope'
    MethodDeclaration
      Identifier: '
    nestClassFieldInitializerScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' ClassFieldInitializerScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' ClassFieldInitializerScope'
    MethodDeclaration
      Identifier: '
    nestClassStaticBlockScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' ClassStaticBlockScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' ClassStaticBlockScope'
    MethodDeclaration
      Identifier: '
    nestConditionalTypeScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' ConditionalTypeScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' ConditionalTypeScope'
    MethodDeclaration
      Identifier: '
    nestForScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' ForScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' ForScope'
    MethodDeclaration
      Identifier: '
    nestFunctionExpressionNameScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' FunctionExpressionNameScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' FunctionExpressionNameScope'
    MethodDeclaration
      Identifier: '
    nestFunctionScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' FunctionScope'
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' isMethodDefinition'
        BooleanKeyword
      TypeReference
        Identifier: ' FunctionScope'
    MethodDeclaration
      Identifier: '
    nestFunctionTypeScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' FunctionTypeScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' FunctionTypeScope'
    MethodDeclaration
      Identifier: '
    nestGlobalScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' GlobalScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' GlobalScope'
    MethodDeclaration
      Identifier: '
    nestMappedTypeScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' MappedTypeScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' MappedTypeScope'
    MethodDeclaration
      Identifier: '
    nestModuleScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' ModuleScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' ModuleScope'
    MethodDeclaration
      Identifier: '
    nestSwitchScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' SwitchScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' SwitchScope'
    MethodDeclaration
      Identifier: '
    nestTSEnumScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' TSEnumScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' TSEnumScope'
    MethodDeclaration
      Identifier: '
    nestTSModuleScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' TSModuleScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' TSModuleScope'
    MethodDeclaration
      Identifier: '
    nestTypeScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' TypeScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' TypeScope'
    MethodDeclaration
      Identifier: '
    nestWithScope'
      Parameter
        Identifier: 'node'
        IndexedAccessType
          TypeReference
            Identifier: ' WithScope'
          LiteralType
            StringLiteral
      TypeReference
        Identifier: ' WithScope'
  ExportDeclaration
    NamedExports
      ExportSpecifier
        Identifier: ' ScopeManager'
