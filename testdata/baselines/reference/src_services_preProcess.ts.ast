SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: '
    FileReference'
        ImportSpecifier
          Identifier: '
    isKeyword'
        ImportSpecifier
          Identifier: '
    lastOrUndefined'
        ImportSpecifier
          Identifier: '
    length'
        ImportSpecifier
          Identifier: '
    noop'
        ImportSpecifier
          Identifier: '
    PragmaContext'
        ImportSpecifier
          Identifier: '
    PreProcessedFileInfo'
        ImportSpecifier
          Identifier: '
    processCommentPragmas'
        ImportSpecifier
          Identifier: '
    processPragmasIntoFields'
        ImportSpecifier
          Identifier: '
    scanner'
        ImportSpecifier
          Identifier: '
    ScriptTarget'
        ImportSpecifier
          Identifier: '
    SyntaxKind'
    StringLiteral
  FunctionDeclaration
    ExportKeyword
    Identifier: ' preProcessFile'
    Parameter
      Identifier: 'sourceText'
      StringKeyword
    Parameter
      Identifier: ' readImportFiles'
      TrueKeyword
    Parameter
      Identifier: ' detectJavaScriptImports'
      FalseKeyword
    TypeReference
      Identifier: ' PreProcessedFileInfo'
    Block
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' pragmaContext'
            TypeReference
              Identifier: ' PragmaContext'
            ObjectLiteralExpression
              PropertyAssignment
                Identifier: '
        languageVersion'
                PropertyAccessExpression
                  Identifier: ' ScriptTarget'
                  Identifier: 'ES5'
              PropertyAssignment
                Identifier: ' // controls whether the token scanner considers unicode identifiers or not - shouldn't matter, since we're only using it for trivia
        pragmas'
                Identifier: ' undefined'
              PropertyAssignment
                Identifier: '
        checkJsDirective'
                Identifier: ' undefined'
              PropertyAssignment
                Identifier: '
        referencedFiles'
                ArrayLiteralExpression
              PropertyAssignment
                Identifier: '
        typeReferenceDirectives'
                ArrayLiteralExpression
              PropertyAssignment
                Identifier: '
        libReferenceDirectives'
                ArrayLiteralExpression
              PropertyAssignment
                Identifier: '
        amdDependencies'
                ArrayLiteralExpression
              PropertyAssignment
                Identifier: '
        hasNoDefaultLib'
                Identifier: ' undefined'
              PropertyAssignment
                Identifier: '
        moduleName'
                Identifier: ' undefined'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' importedFiles'
            ArrayType
              TypeReference
                Identifier: ' FileReference'
            ArrayLiteralExpression
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' ambientExternalModules'
            UnionType
              ArrayType
                TypeLiteral
                  PropertySignature
                    Identifier: ' ref'
                    TypeReference
                      Identifier: ' FileReference'
                  PropertySignature
                    Identifier: ' depth'
                    NumberKeyword
              UndefinedKeyword
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' lastToken'
            TypeReference
              Identifier: ' SyntaxKind'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' currentToken'
            TypeReference
              Identifier: ' SyntaxKind'
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' braceNesting'
            NumericLiteral
      VariableStatement
        VariableDeclarationList
          VariableDeclaration
            Identifier: ' externalModule'
            FalseKeyword
      FunctionDeclaration
        Identifier: ' nextToken'
        Block
          ExpressionStatement
            BinaryExpression
              Identifier: '
        lastToken'
              EqualsToken
              Identifier: ' currentToken'
          ExpressionStatement
            BinaryExpression
              Identifier: '
        currentToken'
              EqualsToken
              CallExpression
                PropertyAccessExpression
                  Identifier: ' scanner'
                  Identifier: 'scan'
          IfStatement
            BinaryExpression
              Identifier: 'currentToken'
              EqualsEqualsEqualsToken
              PropertyAccessExpression
                Identifier: ' SyntaxKind'
                Identifier: 'OpenBraceToken'
            Block
              ExpressionStatement
                PostfixUnaryExpression
                  Identifier: '
            braceNesting'
            IfStatement
              BinaryExpression
                Identifier: 'currentToken'
                EqualsEqualsEqualsToken
                PropertyAccessExpression
                  Identifier: ' SyntaxKind'
                  Identifier: 'CloseBraceToken'
              Block
                ExpressionStatement
                  PostfixUnaryExpression
                    Identifier: '
            braceNesting'
          ReturnStatement
            Identifier: ' currentToken'
      FunctionDeclaration
        Identifier: ' getFileReference'
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' fileName'
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' scanner'
                    Identifier: 'getTokenValue'
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' pos'
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' scanner'
                    Identifier: 'getTokenStart'
          ReturnStatement
            ObjectLiteralExpression
              ShorthandPropertyAssignment
                Identifier: ' fileName'
              ShorthandPropertyAssignment
                Identifier: ' pos'
              PropertyAssignment
                Identifier: ' end'
                BinaryExpression
                  Identifier: ' pos'
                  PlusToken
                  PropertyAccessExpression
                    Identifier: ' fileName'
                    Identifier: 'length'
      FunctionDeclaration
        Identifier: ' recordAmbientExternalModule'
        VoidKeyword
        Block
          IfStatement
            PrefixUnaryExpression
              Identifier: 'ambientExternalModules'
            Block
              ExpressionStatement
                BinaryExpression
                  Identifier: '
            ambientExternalModules'
                  EqualsToken
                  ArrayLiteralExpression
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        ambientExternalModules'
                Identifier: 'push'
              ObjectLiteralExpression
                PropertyAssignment
                  Identifier: ' ref'
                  CallExpression
                    Identifier: ' getFileReference'
                PropertyAssignment
                  Identifier: ' depth'
                  Identifier: ' braceNesting'
      FunctionDeclaration
        Identifier: ' recordModuleName'
        Block
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        importedFiles'
                Identifier: 'push'
              CallExpression
                Identifier: 'getFileReference'
          ExpressionStatement
            CallExpression
              Identifier: '

        markAsExternalModuleIfTopLevel'
      FunctionDeclaration
        Identifier: ' markAsExternalModuleIfTopLevel'
        Block
          IfStatement
            BinaryExpression
              Identifier: 'braceNesting'
              EqualsEqualsEqualsToken
              NumericLiteral
            Block
              ExpressionStatement
                BinaryExpression
                  Identifier: '
            externalModule'
                  EqualsToken
                  TrueKeyword
      FunctionDeclaration
        Identifier: ' tryConsumeDeclare'
        BooleanKeyword
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' token'
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' scanner'
                    Identifier: 'getToken'
          IfStatement
            BinaryExpression
              Identifier: 'token'
              EqualsEqualsEqualsToken
              PropertyAccessExpression
                Identifier: ' SyntaxKind'
                Identifier: 'DeclareKeyword'
            Block
              ExpressionStatement
                BinaryExpression
                  Identifier: '
            // declare module "mod"
            token'
                  EqualsToken
                  CallExpression
                    Identifier: ' nextToken'
              IfStatement
                BinaryExpression
                  Identifier: 'token'
                  EqualsEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'ModuleKeyword'
                Block
                  ExpressionStatement
                    BinaryExpression
                      Identifier: '
                token'
                      EqualsToken
                      CallExpression
                        Identifier: ' nextToken'
                  IfStatement
                    BinaryExpression
                      Identifier: 'token'
                      EqualsEqualsEqualsToken
                      PropertyAccessExpression
                        Identifier: ' SyntaxKind'
                        Identifier: 'StringLiteral'
                    Block
                      ExpressionStatement
                        CallExpression
                          Identifier: '
                    recordAmbientExternalModule'
              ReturnStatement
                TrueKeyword
          ReturnStatement
            FalseKeyword
      FunctionDeclaration
        Identifier: ' tryConsumeImport'
        BooleanKeyword
        Block
          IfStatement
            BinaryExpression
              Identifier: 'lastToken'
              EqualsEqualsEqualsToken
              PropertyAccessExpression
                Identifier: ' SyntaxKind'
                Identifier: 'DotToken'
            Block
              ReturnStatement
                FalseKeyword
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' token'
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' scanner'
                    Identifier: 'getToken'
          IfStatement
            BinaryExpression
              Identifier: 'token'
              EqualsEqualsEqualsToken
              PropertyAccessExpression
                Identifier: ' SyntaxKind'
                Identifier: 'ImportKeyword'
            Block
              ExpressionStatement
                BinaryExpression
                  Identifier: '
            token'
                  EqualsToken
                  CallExpression
                    Identifier: ' nextToken'
              IfStatement
                BinaryExpression
                  Identifier: 'token'
                  EqualsEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'OpenParenToken'
                Block
                  ExpressionStatement
                    BinaryExpression
                      Identifier: '
                token'
                      EqualsToken
                      CallExpression
                        Identifier: ' nextToken'
                  IfStatement
                    BinaryExpression
                      BinaryExpression
                        Identifier: 'token'
                        EqualsEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'StringLiteral'
                      BarBarToken
                      BinaryExpression
                        Identifier: ' token'
                        EqualsEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'NoSubstitutionTemplateLiteral'
                    Block
                      ExpressionStatement
                        CallExpression
                          Identifier: '
                    // import("mod");
                    recordModuleName'
                      ReturnStatement
                        TrueKeyword
                IfStatement
                  BinaryExpression
                    Identifier: 'token'
                    EqualsEqualsEqualsToken
                    PropertyAccessExpression
                      Identifier: ' SyntaxKind'
                      Identifier: 'StringLiteral'
                  Block
                    ExpressionStatement
                      CallExpression
                        Identifier: '
                // import "mod";
                recordModuleName'
                    ReturnStatement
                      TrueKeyword
                  Block
                    IfStatement
                      BinaryExpression
                        Identifier: 'token'
                        EqualsEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'TypeKeyword'
                      Block
                        VariableStatement
                          VariableDeclarationList
                            VariableDeclaration
                              Identifier: ' skipTypeKeyword'
                              CallExpression
                                PropertyAccessExpression
                                  Identifier: ' scanner'
                                  Identifier: 'lookAhead'
                                ArrowFunction
                                  EqualsGreaterThanToken
                                  Block
                                    VariableStatement
                                      VariableDeclarationList
                                        VariableDeclaration
                                          Identifier: ' token'
                                          CallExpression
                                            PropertyAccessExpression
                                              Identifier: ' scanner'
                                              Identifier: 'scan'
                                    ReturnStatement
                                      BinaryExpression
                                        BinaryExpression
                                          Identifier: ' token'
                                          ExclamationEqualsEqualsToken
                                          PropertyAccessExpression
                                            Identifier: ' SyntaxKind'
                                            Identifier: 'FromKeyword'
                                        AmpersandAmpersandToken
                                        ParenthesizedExpression
                                          BinaryExpression
                                            BinaryExpression
                                              BinaryExpression
                                                BinaryExpression
                                                  Identifier: '
                            token'
                                                  EqualsEqualsEqualsToken
                                                  PropertyAccessExpression
                                                    Identifier: ' SyntaxKind'
                                                    Identifier: 'AsteriskToken'
                                                BarBarToken
                                                BinaryExpression
                                                  Identifier: '
                            token'
                                                  EqualsEqualsEqualsToken
                                                  PropertyAccessExpression
                                                    Identifier: ' SyntaxKind'
                                                    Identifier: 'OpenBraceToken'
                                              BarBarToken
                                              BinaryExpression
                                                Identifier: '
                            token'
                                                EqualsEqualsEqualsToken
                                                PropertyAccessExpression
                                                  Identifier: ' SyntaxKind'
                                                  Identifier: 'Identifier'
                                            BarBarToken
                                            CallExpression
                                              Identifier: '
                            isKeyword'
                                              Identifier: 'token'
                        IfStatement
                          Identifier: 'skipTypeKeyword'
                          Block
                            ExpressionStatement
                              BinaryExpression
                                Identifier: '
                        token'
                                EqualsToken
                                CallExpression
                                  Identifier: ' nextToken'
                    IfStatement
                      BinaryExpression
                        BinaryExpression
                          Identifier: 'token'
                          EqualsEqualsEqualsToken
                          PropertyAccessExpression
                            Identifier: ' SyntaxKind'
                            Identifier: 'Identifier'
                        BarBarToken
                        CallExpression
                          Identifier: ' isKeyword'
                          Identifier: 'token'
                      Block
                        ExpressionStatement
                          BinaryExpression
                            Identifier: '
                    token'
                            EqualsToken
                            CallExpression
                              Identifier: ' nextToken'
                        IfStatement
                          BinaryExpression
                            Identifier: 'token'
                            EqualsEqualsEqualsToken
                            PropertyAccessExpression
                              Identifier: ' SyntaxKind'
                              Identifier: 'FromKeyword'
                          Block
                            ExpressionStatement
                              BinaryExpression
                                Identifier: '
                        token'
                                EqualsToken
                                CallExpression
                                  Identifier: ' nextToken'
                            IfStatement
                              BinaryExpression
                                Identifier: 'token'
                                EqualsEqualsEqualsToken
                                PropertyAccessExpression
                                  Identifier: ' SyntaxKind'
                                  Identifier: 'StringLiteral'
                              Block
                                ExpressionStatement
                                  CallExpression
                                    Identifier: '
                            // import d from "mod";
                            recordModuleName'
                                ReturnStatement
                                  TrueKeyword
                          IfStatement
                            BinaryExpression
                              Identifier: 'token'
                              EqualsEqualsEqualsToken
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'EqualsToken'
                            Block
                              IfStatement
                                CallExpression
                                  Identifier: 'tryConsumeRequireCall'
                                  TrueKeyword
                                Block
                                  ReturnStatement
                                    TrueKeyword
                            IfStatement
                              BinaryExpression
                                Identifier: 'token'
                                EqualsEqualsEqualsToken
                                PropertyAccessExpression
                                  Identifier: ' SyntaxKind'
                                  Identifier: 'CommaToken'
                              Block
                                ExpressionStatement
                                  BinaryExpression
                                    Identifier: '
                        // consume comma and keep going
                        token'
                                    EqualsToken
                                    CallExpression
                                      Identifier: ' nextToken'
                              Block
                                ReturnStatement
                                  TrueKeyword
                    IfStatement
                      BinaryExpression
                        Identifier: 'token'
                        EqualsEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'OpenBraceToken'
                      Block
                        ExpressionStatement
                          BinaryExpression
                            Identifier: '
                    token'
                            EqualsToken
                            CallExpression
                              Identifier: ' nextToken'
                        WhileStatement
                          BinaryExpression
                            BinaryExpression
                              Identifier: 'token'
                              ExclamationEqualsEqualsToken
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'CloseBraceToken'
                            AmpersandAmpersandToken
                            BinaryExpression
                              Identifier: ' token'
                              ExclamationEqualsEqualsToken
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'EndOfFileToken'
                          Block
                            ExpressionStatement
                              BinaryExpression
                                Identifier: '
                        token'
                                EqualsToken
                                CallExpression
                                  Identifier: ' nextToken'
                        IfStatement
                          BinaryExpression
                            Identifier: 'token'
                            EqualsEqualsEqualsToken
                            PropertyAccessExpression
                              Identifier: ' SyntaxKind'
                              Identifier: 'CloseBraceToken'
                          Block
                            ExpressionStatement
                              BinaryExpression
                                Identifier: '
                        token'
                                EqualsToken
                                CallExpression
                                  Identifier: ' nextToken'
                            IfStatement
                              BinaryExpression
                                Identifier: 'token'
                                EqualsEqualsEqualsToken
                                PropertyAccessExpression
                                  Identifier: ' SyntaxKind'
                                  Identifier: 'FromKeyword'
                              Block
                                ExpressionStatement
                                  BinaryExpression
                                    Identifier: '
                            token'
                                    EqualsToken
                                    CallExpression
                                      Identifier: ' nextToken'
                                IfStatement
                                  BinaryExpression
                                    Identifier: 'token'
                                    EqualsEqualsEqualsToken
                                    PropertyAccessExpression
                                      Identifier: ' SyntaxKind'
                                      Identifier: 'StringLiteral'
                                  Block
                                    ExpressionStatement
                                      CallExpression
                                        Identifier: '
                                // import {a as A} from "mod";
                                // import d, {a, b as B} from "mod"
                                recordModuleName'
                      IfStatement
                        BinaryExpression
                          Identifier: 'token'
                          EqualsEqualsEqualsToken
                          PropertyAccessExpression
                            Identifier: ' SyntaxKind'
                            Identifier: 'AsteriskToken'
                        Block
                          ExpressionStatement
                            BinaryExpression
                              Identifier: '
                    token'
                              EqualsToken
                              CallExpression
                                Identifier: ' nextToken'
                          IfStatement
                            BinaryExpression
                              Identifier: 'token'
                              EqualsEqualsEqualsToken
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'AsKeyword'
                            Block
                              ExpressionStatement
                                BinaryExpression
                                  Identifier: '
                        token'
                                  EqualsToken
                                  CallExpression
                                    Identifier: ' nextToken'
                              IfStatement
                                BinaryExpression
                                  BinaryExpression
                                    Identifier: 'token'
                                    EqualsEqualsEqualsToken
                                    PropertyAccessExpression
                                      Identifier: ' SyntaxKind'
                                      Identifier: 'Identifier'
                                  BarBarToken
                                  CallExpression
                                    Identifier: ' isKeyword'
                                    Identifier: 'token'
                                Block
                                  ExpressionStatement
                                    BinaryExpression
                                      Identifier: '
                            token'
                                      EqualsToken
                                      CallExpression
                                        Identifier: ' nextToken'
                                  IfStatement
                                    BinaryExpression
                                      Identifier: 'token'
                                      EqualsEqualsEqualsToken
                                      PropertyAccessExpression
                                        Identifier: ' SyntaxKind'
                                        Identifier: 'FromKeyword'
                                    Block
                                      ExpressionStatement
                                        BinaryExpression
                                          Identifier: '
                                token'
                                          EqualsToken
                                          CallExpression
                                            Identifier: ' nextToken'
                                      IfStatement
                                        BinaryExpression
                                          Identifier: 'token'
                                          EqualsEqualsEqualsToken
                                          PropertyAccessExpression
                                            Identifier: ' SyntaxKind'
                                            Identifier: 'StringLiteral'
                                        Block
                                          ExpressionStatement
                                            CallExpression
                                              Identifier: '
                                    // import * as NS from "mod"
                                    // import d, * as NS from "mod"
                                    recordModuleName'
              ReturnStatement
                TrueKeyword
          ReturnStatement
            FalseKeyword
      FunctionDeclaration
        Identifier: ' tryConsumeExport'
        BooleanKeyword
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' token'
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' scanner'
                    Identifier: 'getToken'
          IfStatement
            BinaryExpression
              Identifier: 'token'
              EqualsEqualsEqualsToken
              PropertyAccessExpression
                Identifier: ' SyntaxKind'
                Identifier: 'ExportKeyword'
            Block
              ExpressionStatement
                CallExpression
                  Identifier: '
            markAsExternalModuleIfTopLevel'
              ExpressionStatement
                BinaryExpression
                  Identifier: '
            token'
                  EqualsToken
                  CallExpression
                    Identifier: ' nextToken'
              IfStatement
                BinaryExpression
                  Identifier: 'token'
                  EqualsEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'TypeKeyword'
                Block
                  VariableStatement
                    VariableDeclarationList
                      VariableDeclaration
                        Identifier: ' skipTypeKeyword'
                        CallExpression
                          PropertyAccessExpression
                            Identifier: ' scanner'
                            Identifier: 'lookAhead'
                          ArrowFunction
                            EqualsGreaterThanToken
                            Block
                              VariableStatement
                                VariableDeclarationList
                                  VariableDeclaration
                                    Identifier: ' token'
                                    CallExpression
                                      PropertyAccessExpression
                                        Identifier: ' scanner'
                                        Identifier: 'scan'
                              ReturnStatement
                                BinaryExpression
                                  BinaryExpression
                                    Identifier: ' token'
                                    EqualsEqualsEqualsToken
                                    PropertyAccessExpression
                                      Identifier: ' SyntaxKind'
                                      Identifier: 'AsteriskToken'
                                  BarBarToken
                                  BinaryExpression
                                    Identifier: '
                        token'
                                    EqualsEqualsEqualsToken
                                    PropertyAccessExpression
                                      Identifier: ' SyntaxKind'
                                      Identifier: 'OpenBraceToken'
                  IfStatement
                    Identifier: 'skipTypeKeyword'
                    Block
                      ExpressionStatement
                        BinaryExpression
                          Identifier: '
                    token'
                          EqualsToken
                          CallExpression
                            Identifier: ' nextToken'
              IfStatement
                BinaryExpression
                  Identifier: 'token'
                  EqualsEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'OpenBraceToken'
                Block
                  ExpressionStatement
                    BinaryExpression
                      Identifier: '
                token'
                      EqualsToken
                      CallExpression
                        Identifier: ' nextToken'
                  WhileStatement
                    BinaryExpression
                      BinaryExpression
                        Identifier: 'token'
                        ExclamationEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'CloseBraceToken'
                      AmpersandAmpersandToken
                      BinaryExpression
                        Identifier: ' token'
                        ExclamationEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'EndOfFileToken'
                    Block
                      ExpressionStatement
                        BinaryExpression
                          Identifier: '
                    token'
                          EqualsToken
                          CallExpression
                            Identifier: ' nextToken'
                  IfStatement
                    BinaryExpression
                      Identifier: 'token'
                      EqualsEqualsEqualsToken
                      PropertyAccessExpression
                        Identifier: ' SyntaxKind'
                        Identifier: 'CloseBraceToken'
                    Block
                      ExpressionStatement
                        BinaryExpression
                          Identifier: '
                    token'
                          EqualsToken
                          CallExpression
                            Identifier: ' nextToken'
                      IfStatement
                        BinaryExpression
                          Identifier: 'token'
                          EqualsEqualsEqualsToken
                          PropertyAccessExpression
                            Identifier: ' SyntaxKind'
                            Identifier: 'FromKeyword'
                        Block
                          ExpressionStatement
                            BinaryExpression
                              Identifier: '
                        token'
                              EqualsToken
                              CallExpression
                                Identifier: ' nextToken'
                          IfStatement
                            BinaryExpression
                              Identifier: 'token'
                              EqualsEqualsEqualsToken
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'StringLiteral'
                            Block
                              ExpressionStatement
                                CallExpression
                                  Identifier: '
                            // export {a as A} from "mod";
                            // export {a, b as B} from "mod"
                            recordModuleName'
                IfStatement
                  BinaryExpression
                    Identifier: 'token'
                    EqualsEqualsEqualsToken
                    PropertyAccessExpression
                      Identifier: ' SyntaxKind'
                      Identifier: 'AsteriskToken'
                  Block
                    ExpressionStatement
                      BinaryExpression
                        Identifier: '
                token'
                        EqualsToken
                        CallExpression
                          Identifier: ' nextToken'
                    IfStatement
                      BinaryExpression
                        Identifier: 'token'
                        EqualsEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'FromKeyword'
                      Block
                        ExpressionStatement
                          BinaryExpression
                            Identifier: '
                    token'
                            EqualsToken
                            CallExpression
                              Identifier: ' nextToken'
                        IfStatement
                          BinaryExpression
                            Identifier: 'token'
                            EqualsEqualsEqualsToken
                            PropertyAccessExpression
                              Identifier: ' SyntaxKind'
                              Identifier: 'StringLiteral'
                          Block
                            ExpressionStatement
                              CallExpression
                                Identifier: '
                        // export * from "mod"
                        recordModuleName'
                  IfStatement
                    BinaryExpression
                      Identifier: 'token'
                      EqualsEqualsEqualsToken
                      PropertyAccessExpression
                        Identifier: ' SyntaxKind'
                        Identifier: 'ImportKeyword'
                    Block
                      ExpressionStatement
                        BinaryExpression
                          Identifier: '
                token'
                          EqualsToken
                          CallExpression
                            Identifier: ' nextToken'
                      IfStatement
                        BinaryExpression
                          Identifier: 'token'
                          EqualsEqualsEqualsToken
                          PropertyAccessExpression
                            Identifier: ' SyntaxKind'
                            Identifier: 'TypeKeyword'
                        Block
                          VariableStatement
                            VariableDeclarationList
                              VariableDeclaration
                                Identifier: ' skipTypeKeyword'
                                CallExpression
                                  PropertyAccessExpression
                                    Identifier: ' scanner'
                                    Identifier: 'lookAhead'
                                  ArrowFunction
                                    EqualsGreaterThanToken
                                    Block
                                      VariableStatement
                                        VariableDeclarationList
                                          VariableDeclaration
                                            Identifier: ' token'
                                            CallExpression
                                              PropertyAccessExpression
                                                Identifier: ' scanner'
                                                Identifier: 'scan'
                                      ReturnStatement
                                        BinaryExpression
                                          BinaryExpression
                                            Identifier: ' token'
                                            EqualsEqualsEqualsToken
                                            PropertyAccessExpression
                                              Identifier: ' SyntaxKind'
                                              Identifier: 'Identifier'
                                          BarBarToken
                                          CallExpression
                                            Identifier: '
                            isKeyword'
                                            Identifier: 'token'
                          IfStatement
                            Identifier: 'skipTypeKeyword'
                            Block
                              ExpressionStatement
                                BinaryExpression
                                  Identifier: '
                        token'
                                  EqualsToken
                                  CallExpression
                                    Identifier: ' nextToken'
                      IfStatement
                        BinaryExpression
                          BinaryExpression
                            Identifier: 'token'
                            EqualsEqualsEqualsToken
                            PropertyAccessExpression
                              Identifier: ' SyntaxKind'
                              Identifier: 'Identifier'
                          BarBarToken
                          CallExpression
                            Identifier: ' isKeyword'
                            Identifier: 'token'
                        Block
                          ExpressionStatement
                            BinaryExpression
                              Identifier: '
                    token'
                              EqualsToken
                              CallExpression
                                Identifier: ' nextToken'
                          IfStatement
                            BinaryExpression
                              Identifier: 'token'
                              EqualsEqualsEqualsToken
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'EqualsToken'
                            Block
                              IfStatement
                                CallExpression
                                  Identifier: 'tryConsumeRequireCall'
                                  TrueKeyword
                                Block
                                  ReturnStatement
                                    TrueKeyword
              ReturnStatement
                TrueKeyword
          ReturnStatement
            FalseKeyword
      FunctionDeclaration
        Identifier: ' tryConsumeRequireCall'
        Parameter
          Identifier: 'skipCurrentToken'
          BooleanKeyword
        Parameter
          Identifier: ' allowTemplateLiterals'
          FalseKeyword
        BooleanKeyword
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' token'
                ConditionalExpression
                  Identifier: ' skipCurrentToken'
                  QuestionToken
                  CallExpression
                    Identifier: ' nextToken'
                  ColonToken
                  CallExpression
                    PropertyAccessExpression
                      Identifier: ' scanner'
                      Identifier: 'getToken'
          IfStatement
            BinaryExpression
              Identifier: 'token'
              EqualsEqualsEqualsToken
              PropertyAccessExpression
                Identifier: ' SyntaxKind'
                Identifier: 'RequireKeyword'
            Block
              ExpressionStatement
                BinaryExpression
                  Identifier: '
            token'
                  EqualsToken
                  CallExpression
                    Identifier: ' nextToken'
              IfStatement
                BinaryExpression
                  Identifier: 'token'
                  EqualsEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'OpenParenToken'
                Block
                  ExpressionStatement
                    BinaryExpression
                      Identifier: '
                token'
                      EqualsToken
                      CallExpression
                        Identifier: ' nextToken'
                  IfStatement
                    BinaryExpression
                      BinaryExpression
                        Identifier: '
                    token'
                        EqualsEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'StringLiteral'
                      BarBarToken
                      BinaryExpression
                        Identifier: '
                    allowTemplateLiterals'
                        AmpersandAmpersandToken
                        BinaryExpression
                          Identifier: ' token'
                          EqualsEqualsEqualsToken
                          PropertyAccessExpression
                            Identifier: ' SyntaxKind'
                            Identifier: 'NoSubstitutionTemplateLiteral'
                    Block
                      ExpressionStatement
                        CallExpression
                          Identifier: '
                    //  require("mod");
                    recordModuleName'
              ReturnStatement
                TrueKeyword
          ReturnStatement
            FalseKeyword
      FunctionDeclaration
        Identifier: ' tryConsumeDefine'
        BooleanKeyword
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' token'
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' scanner'
                    Identifier: 'getToken'
          IfStatement
            BinaryExpression
              BinaryExpression
                Identifier: 'token'
                EqualsEqualsEqualsToken
                PropertyAccessExpression
                  Identifier: ' SyntaxKind'
                  Identifier: 'Identifier'
              AmpersandAmpersandToken
              BinaryExpression
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' scanner'
                    Identifier: 'getTokenValue'
                EqualsEqualsEqualsToken
                StringLiteral
            Block
              ExpressionStatement
                BinaryExpression
                  Identifier: '
            token'
                  EqualsToken
                  CallExpression
                    Identifier: ' nextToken'
              IfStatement
                BinaryExpression
                  Identifier: 'token'
                  ExclamationEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'OpenParenToken'
                Block
                  ReturnStatement
                    TrueKeyword
              ExpressionStatement
                BinaryExpression
                  Identifier: '

            token'
                  EqualsToken
                  CallExpression
                    Identifier: ' nextToken'
              IfStatement
                BinaryExpression
                  BinaryExpression
                    Identifier: 'token'
                    EqualsEqualsEqualsToken
                    PropertyAccessExpression
                      Identifier: ' SyntaxKind'
                      Identifier: 'StringLiteral'
                  BarBarToken
                  BinaryExpression
                    Identifier: ' token'
                    EqualsEqualsEqualsToken
                    PropertyAccessExpression
                      Identifier: ' SyntaxKind'
                      Identifier: 'NoSubstitutionTemplateLiteral'
                Block
                  ExpressionStatement
                    BinaryExpression
                      Identifier: '
                // looks like define ("modname", ... - skip string literal and comma
                token'
                      EqualsToken
                      CallExpression
                        Identifier: ' nextToken'
                  IfStatement
                    BinaryExpression
                      Identifier: 'token'
                      EqualsEqualsEqualsToken
                      PropertyAccessExpression
                        Identifier: ' SyntaxKind'
                        Identifier: 'CommaToken'
                    Block
                      ExpressionStatement
                        BinaryExpression
                          Identifier: '
                    token'
                          EqualsToken
                          CallExpression
                            Identifier: ' nextToken'
                    Block
                      ReturnStatement
                        TrueKeyword
              IfStatement
                BinaryExpression
                  Identifier: 'token'
                  ExclamationEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'OpenBracketToken'
                Block
                  ReturnStatement
                    TrueKeyword
              ExpressionStatement
                BinaryExpression
                  Identifier: '

            // skip open bracket
            token'
                  EqualsToken
                  CallExpression
                    Identifier: ' nextToken'
              WhileStatement
                BinaryExpression
                  BinaryExpression
                    Identifier: 'token'
                    ExclamationEqualsEqualsToken
                    PropertyAccessExpression
                      Identifier: ' SyntaxKind'
                      Identifier: 'CloseBracketToken'
                  AmpersandAmpersandToken
                  BinaryExpression
                    Identifier: ' token'
                    ExclamationEqualsEqualsToken
                    PropertyAccessExpression
                      Identifier: ' SyntaxKind'
                      Identifier: 'EndOfFileToken'
                Block
                  IfStatement
                    BinaryExpression
                      BinaryExpression
                        Identifier: 'token'
                        EqualsEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'StringLiteral'
                      BarBarToken
                      BinaryExpression
                        Identifier: ' token'
                        EqualsEqualsEqualsToken
                        PropertyAccessExpression
                          Identifier: ' SyntaxKind'
                          Identifier: 'NoSubstitutionTemplateLiteral'
                    Block
                      ExpressionStatement
                        CallExpression
                          Identifier: '
                    recordModuleName'
                  ExpressionStatement
                    BinaryExpression
                      Identifier: '

                token'
                      EqualsToken
                      CallExpression
                        Identifier: ' nextToken'
              ReturnStatement
                TrueKeyword
          ReturnStatement
            FalseKeyword
      FunctionDeclaration
        Identifier: ' processImports'
        VoidKeyword
        Block
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '
        scanner'
                Identifier: 'setText'
              Identifier: 'sourceText'
          ExpressionStatement
            CallExpression
              Identifier: '
        nextToken'
          WhileStatement
            TrueKeyword
            Block
              IfStatement
                BinaryExpression
                  CallExpression
                    PropertyAccessExpression
                      Identifier: 'scanner'
                      Identifier: 'getToken'
                  EqualsEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'EndOfFileToken'
                Block
                  BreakStatement
              IfStatement
                BinaryExpression
                  CallExpression
                    PropertyAccessExpression
                      Identifier: 'scanner'
                      Identifier: 'getToken'
                  EqualsEqualsEqualsToken
                  PropertyAccessExpression
                    Identifier: ' SyntaxKind'
                    Identifier: 'TemplateHead'
                Block
                  VariableStatement
                    VariableDeclarationList
                      VariableDeclaration
                        Identifier: ' stack'
                        ArrayLiteralExpression
                          CallExpression
                            PropertyAccessExpression
                              Identifier: 'scanner'
                              Identifier: 'getToken'
                  LabeledStatement
                    Identifier: '
                loop'
                    WhileStatement
                      CallExpression
                        Identifier: 'length'
                        Identifier: 'stack'
                      Block
                        VariableStatement
                          VariableDeclarationList
                            VariableDeclaration
                              Identifier: ' token'
                              CallExpression
                                PropertyAccessExpression
                                  Identifier: ' scanner'
                                  Identifier: 'scan'
                        SwitchStatement
                          Identifier: 'token'
                          CaseBlock
                            CaseClause
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'EndOfFileToken'
                              BreakStatement
                                Identifier: ' loop'
                            CaseClause
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'ImportKeyword'
                              ExpressionStatement
                                CallExpression
                                  Identifier: '
                            tryConsumeImport'
                              BreakStatement
                            CaseClause
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'TemplateHead'
                              ExpressionStatement
                                CallExpression
                                  PropertyAccessExpression
                                    Identifier: '
                            stack'
                                    Identifier: 'push'
                                  Identifier: 'token'
                              BreakStatement
                            CaseClause
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'OpenBraceToken'
                              IfStatement
                                CallExpression
                                  Identifier: 'length'
                                  Identifier: 'stack'
                                Block
                                  ExpressionStatement
                                    CallExpression
                                      PropertyAccessExpression
                                        Identifier: '
                                stack'
                                        Identifier: 'push'
                                      Identifier: 'token'
                              BreakStatement
                            CaseClause
                              PropertyAccessExpression
                                Identifier: ' SyntaxKind'
                                Identifier: 'CloseBraceToken'
                              IfStatement
                                CallExpression
                                  Identifier: 'length'
                                  Identifier: 'stack'
                                Block
                                  IfStatement
                                    BinaryExpression
                                      CallExpression
                                        Identifier: 'lastOrUndefined'
                                        Identifier: 'stack'
                                      EqualsEqualsEqualsToken
                                      PropertyAccessExpression
                                        Identifier: ' SyntaxKind'
                                        Identifier: 'TemplateHead'
                                    Block
                                      IfStatement
                                        BinaryExpression
                                          CallExpression
                                            PropertyAccessExpression
                                              Identifier: 'scanner'
                                              Identifier: 'reScanTemplateToken'
                                            FalseKeyword
                                          EqualsEqualsEqualsToken
                                          PropertyAccessExpression
                                            Identifier: ' SyntaxKind'
                                            Identifier: 'TemplateTail'
                                        Block
                                          ExpressionStatement
                                            CallExpression
                                              PropertyAccessExpression
                                                Identifier: '
                                        stack'
                                                Identifier: 'pop'
                                    Block
                                      ExpressionStatement
                                        CallExpression
                                          PropertyAccessExpression
                                            Identifier: '
                                    stack'
                                            Identifier: 'pop'
                              BreakStatement
                  ExpressionStatement
                    CallExpression
                      Identifier: '
                nextToken'
              IfStatement
                BinaryExpression
                  BinaryExpression
                    BinaryExpression
                      CallExpression
                        Identifier: '
                tryConsumeDeclare'
                      BarBarToken
                      CallExpression
                        Identifier: '
                tryConsumeImport'
                    BarBarToken
                    CallExpression
                      Identifier: '
                tryConsumeExport'
                  BarBarToken
                  ParenthesizedExpression
                    BinaryExpression
                      Identifier: 'detectJavaScriptImports'
                      AmpersandAmpersandToken
                      ParenthesizedExpression
                        BinaryExpression
                          CallExpression
                            Identifier: '
                    tryConsumeRequireCall'
                            FalseKeyword
                            TrueKeyword
                          BarBarToken
                          CallExpression
                            Identifier: '
                    tryConsumeDefine'
                Block
                  ContinueStatement
                Block
                  ExpressionStatement
                    CallExpression
                      Identifier: '
                nextToken'
          ExpressionStatement
            CallExpression
              PropertyAccessExpression
                Identifier: '

        scanner'
                Identifier: 'setText'
              Identifier: 'undefined'
      IfStatement
        Identifier: 'readImportFiles'
        Block
          ExpressionStatement
            CallExpression
              Identifier: '
        processImports'
      ExpressionStatement
        CallExpression
          Identifier: '
    processCommentPragmas'
          Identifier: 'pragmaContext'
          Identifier: ' sourceText'
      ExpressionStatement
        CallExpression
          Identifier: '
    processPragmasIntoFields'
          Identifier: 'pragmaContext'
          Identifier: ' noop'
      IfStatement
        Identifier: 'externalModule'
        Block
          IfStatement
            Identifier: 'ambientExternalModules'
            Block
              ForOfStatement
                VariableDeclarationList
                  VariableDeclaration
                    Identifier: ' decl'
                Identifier: ' ambientExternalModules'
                Block
                  ExpressionStatement
                    CallExpression
                      PropertyAccessExpression
                        Identifier: '
                importedFiles'
                        Identifier: 'push'
                      PropertyAccessExpression
                        Identifier: 'decl'
                        Identifier: 'ref'
          ReturnStatement
            ObjectLiteralExpression
              PropertyAssignment
                Identifier: ' referencedFiles'
                PropertyAccessExpression
                  Identifier: ' pragmaContext'
                  Identifier: 'referencedFiles'
              PropertyAssignment
                Identifier: ' typeReferenceDirectives'
                PropertyAccessExpression
                  Identifier: ' pragmaContext'
                  Identifier: 'typeReferenceDirectives'
              PropertyAssignment
                Identifier: ' libReferenceDirectives'
                PropertyAccessExpression
                  Identifier: ' pragmaContext'
                  Identifier: 'libReferenceDirectives'
              ShorthandPropertyAssignment
                Identifier: ' importedFiles'
              PropertyAssignment
                Identifier: ' isLibFile'
                PrefixUnaryExpression
                  PrefixUnaryExpression
                    PropertyAccessExpression
                      Identifier: 'pragmaContext'
                      Identifier: 'hasNoDefaultLib'
              PropertyAssignment
                Identifier: ' ambientExternalModules'
                Identifier: ' undefined'
        Block
          VariableStatement
            VariableDeclarationList
              VariableDeclaration
                Identifier: ' ambientModuleNames'
                UnionType
                  ArrayType
                    StringKeyword
                  UndefinedKeyword
          IfStatement
            Identifier: 'ambientExternalModules'
            Block
              ForOfStatement
                VariableDeclarationList
                  VariableDeclaration
                    Identifier: ' decl'
                Identifier: ' ambientExternalModules'
                Block
                  IfStatement
                    BinaryExpression
                      PropertyAccessExpression
                        Identifier: 'decl'
                        Identifier: 'depth'
                      EqualsEqualsEqualsToken
                      NumericLiteral
                    Block
                      IfStatement
                        PrefixUnaryExpression
                          Identifier: 'ambientModuleNames'
                        Block
                          ExpressionStatement
                            BinaryExpression
                              Identifier: '
                        ambientModuleNames'
                              EqualsToken
                              ArrayLiteralExpression
                      ExpressionStatement
                        CallExpression
                          PropertyAccessExpression
                            Identifier: '
                    ambientModuleNames'
                            Identifier: 'push'
                          PropertyAccessExpression
                            PropertyAccessExpression
                              Identifier: 'decl'
                              Identifier: 'ref'
                            Identifier: 'fileName'
                    Block
                      ExpressionStatement
                        CallExpression
                          PropertyAccessExpression
                            Identifier: '
                    importedFiles'
                            Identifier: 'push'
                          PropertyAccessExpression
                            Identifier: 'decl'
                            Identifier: 'ref'
          ReturnStatement
            ObjectLiteralExpression
              PropertyAssignment
                Identifier: ' referencedFiles'
                PropertyAccessExpression
                  Identifier: ' pragmaContext'
                  Identifier: 'referencedFiles'
              PropertyAssignment
                Identifier: ' typeReferenceDirectives'
                PropertyAccessExpression
                  Identifier: ' pragmaContext'
                  Identifier: 'typeReferenceDirectives'
              PropertyAssignment
                Identifier: ' libReferenceDirectives'
                PropertyAccessExpression
                  Identifier: ' pragmaContext'
                  Identifier: 'libReferenceDirectives'
              ShorthandPropertyAssignment
                Identifier: ' importedFiles'
              PropertyAssignment
                Identifier: ' isLibFile'
                PrefixUnaryExpression
                  PrefixUnaryExpression
                    PropertyAccessExpression
                      Identifier: 'pragmaContext'
                      Identifier: 'hasNoDefaultLib'
              PropertyAssignment
                Identifier: ' ambientExternalModules'
                Identifier: ' ambientModuleNames'
