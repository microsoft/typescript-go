SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' EarlyEndOfParseError'
        ImportSpecifier
          Identifier: ' NoParsletFoundError'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Lexer'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Grammar'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' assertRootResult'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Precedence'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' RootResult'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' IntermediateResult'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' TokenType'
    StringLiteral
  ClassDeclaration
    ExportKeyword
    Identifier: ' Parser'
    PropertyDeclaration
      PrivateKeyword
      ReadonlyKeyword
      Identifier: ' grammar'
      TypeReference
        Identifier: ' Grammar'
    PropertyDeclaration
      PrivateKeyword
      Identifier: ' _lexer'
      TypeReference
        Identifier: ' Lexer'
    PropertyDeclaration
      PublicKeyword
      ReadonlyKeyword
      Identifier: ' baseParser'
      QuestionToken
      TypeReference
        Identifier: ' Parser'
    Constructor
      Parameter
        Identifier: 'grammar'
        TypeReference
          Identifier: ' Grammar'
      Parameter
        Identifier: ' textOrLexer'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Lexer'
      Parameter
        Identifier: ' baseParser'
        QuestionToken
        TypeReference
          Identifier: ' Parser'
      Block
        ExpressionStatement
          BinaryExpression
            PropertyAccessExpression
              ThisKeyword
              Identifier: 'grammar'
            EqualsToken
            Identifier: ' grammar'
        IfStatement
          BinaryExpression
            TypeOfExpression
              Identifier: ' textOrLexer'
            EqualsEqualsEqualsToken
            StringLiteral
          Block
            ExpressionStatement
              BinaryExpression
                PropertyAccessExpression
                  ThisKeyword
                  Identifier: '_lexer'
                EqualsToken
                CallExpression
                  PropertyAccessExpression
                    Identifier: ' Lexer'
                    Identifier: 'create'
                  Identifier: 'textOrLexer'
          Block
            ExpressionStatement
              BinaryExpression
                PropertyAccessExpression
                  ThisKeyword
                  Identifier: '_lexer'
                EqualsToken
                Identifier: ' textOrLexer'
        ExpressionStatement
          BinaryExpression
            PropertyAccessExpression
              ThisKeyword
              Identifier: 'baseParser'
            EqualsToken
            Identifier: ' baseParser'
    GetAccessor
      Identifier: ' lexer'
      TypeReference
        Identifier: ' Lexer'
      Block
        ReturnStatement
          PropertyAccessExpression
            ThisKeyword
            Identifier: '_lexer'
    MethodDeclaration
      Identifier: '

  /**
   * Parses a given string and throws an error if the parse ended before the end of the string.
   */
  parse'
      TypeReference
        Identifier: ' RootResult'
      Block
        VariableStatement
          VariableDeclarationList
            VariableDeclaration
              Identifier: ' result'
              CallExpression
                PropertyAccessExpression
                  ThisKeyword
                  Identifier: 'parseType'
                PropertyAccessExpression
                  Identifier: 'Precedence'
                  Identifier: 'ALL'
        IfStatement
          BinaryExpression
            PropertyAccessExpression
              PropertyAccessExpression
                PropertyAccessExpression
                  ThisKeyword
                  Identifier: 'lexer'
                Identifier: 'current'
              Identifier: 'type'
            ExclamationEqualsEqualsToken
            StringLiteral
          Block
            ThrowStatement
              NewExpression
                Identifier: ' EarlyEndOfParseError'
                PropertyAccessExpression
                  PropertyAccessExpression
                    ThisKeyword
                    Identifier: 'lexer'
                  Identifier: 'current'
        ReturnStatement
          Identifier: ' result'
    MethodDeclaration
      PublicKeyword
      Identifier: ' parseType'
      Parameter
        Identifier: 'precedence'
        TypeReference
          Identifier: ' Precedence'
      TypeReference
        Identifier: ' RootResult'
      Block
        ReturnStatement
          CallExpression
            Identifier: ' assertRootResult'
            CallExpression
              PropertyAccessExpression
                ThisKeyword
                Identifier: 'parseIntermediateType'
              Identifier: 'precedence'
    MethodDeclaration
      PublicKeyword
      Identifier: ' parseIntermediateType'
      Parameter
        Identifier: 'precedence'
        TypeReference
          Identifier: ' Precedence'
      TypeReference
        Identifier: ' IntermediateResult'
      Block
        VariableStatement
          VariableDeclarationList
            VariableDeclaration
              Identifier: ' result'
              CallExpression
                PropertyAccessExpression
                  ThisKeyword
                  Identifier: 'tryParslets'
                NullKeyword
                Identifier: ' precedence'
        IfStatement
          BinaryExpression
            Identifier: 'result'
            EqualsEqualsEqualsToken
            NullKeyword
          Block
            ThrowStatement
              NewExpression
                Identifier: ' NoParsletFoundError'
                PropertyAccessExpression
                  PropertyAccessExpression
                    ThisKeyword
                    Identifier: 'lexer'
                  Identifier: 'current'
        ReturnStatement
          CallExpression
            PropertyAccessExpression
              ThisKeyword
              Identifier: 'parseInfixIntermediateType'
            Identifier: 'result'
            Identifier: ' precedence'
    MethodDeclaration
      PublicKeyword
      Identifier: ' parseInfixIntermediateType'
      Parameter
        Identifier: 'left'
        TypeReference
          Identifier: ' IntermediateResult'
      Parameter
        Identifier: ' precedence'
        TypeReference
          Identifier: ' Precedence'
      TypeReference
        Identifier: ' IntermediateResult'
      Block
        VariableStatement
          VariableDeclarationList
            VariableDeclaration
              Identifier: ' result'
              CallExpression
                PropertyAccessExpression
                  ThisKeyword
                  Identifier: 'tryParslets'
                Identifier: 'left'
                Identifier: ' precedence'
        WhileStatement
          BinaryExpression
            Identifier: 'result'
            ExclamationEqualsEqualsToken
            NullKeyword
          Block
            ExpressionStatement
              BinaryExpression
                Identifier: '
      left'
                EqualsToken
                Identifier: ' result'
            ExpressionStatement
              BinaryExpression
                Identifier: '
      result'
                EqualsToken
                CallExpression
                  PropertyAccessExpression
                    ThisKeyword
                    Identifier: 'tryParslets'
                  Identifier: 'left'
                  Identifier: ' precedence'
        ReturnStatement
          Identifier: ' left'
    MethodDeclaration
      PrivateKeyword
      Identifier: ' tryParslets'
      Parameter
        Identifier: 'left'
        UnionType
          TypeReference
            Identifier: ' IntermediateResult'
          LiteralType
            NullKeyword
      Parameter
        Identifier: ' precedence'
        TypeReference
          Identifier: ' Precedence'
      UnionType
        TypeReference
          Identifier: ' IntermediateResult'
        LiteralType
          NullKeyword
      Block
        ForOfStatement
          VariableDeclarationList
            VariableDeclaration
              Identifier: ' parslet'
          PropertyAccessExpression
            ThisKeyword
            Identifier: 'grammar'
          Block
            VariableStatement
              VariableDeclarationList
                VariableDeclaration
                  Identifier: ' result'
                  CallExpression
                    Identifier: ' parslet'
                    ThisKeyword
                    Identifier: ' precedence'
                    Identifier: ' left'
            IfStatement
              BinaryExpression
                Identifier: 'result'
                ExclamationEqualsEqualsToken
                NullKeyword
              Block
                ReturnStatement
                  Identifier: ' result'
        ReturnStatement
          NullKeyword
    MethodDeclaration
      PublicKeyword
      Identifier: ' consume'
      Parameter
        Identifier: 'types'
        UnionType
          TypeReference
            Identifier: ' TokenType'
          ArrayType
            TypeReference
              Identifier: ' TokenType'
      BooleanKeyword
      Block
        IfStatement
          PrefixUnaryExpression
            CallExpression
              PropertyAccessExpression
                Identifier: 'Array'
                Identifier: 'isArray'
              Identifier: 'types'
          Block
            ExpressionStatement
              BinaryExpression
                Identifier: '
      types'
                EqualsToken
                ArrayLiteralExpression
                  Identifier: 'types'
        IfStatement
          CallExpression
            PropertyAccessExpression
              Identifier: 'types'
              Identifier: 'includes'
            PropertyAccessExpression
              PropertyAccessExpression
                PropertyAccessExpression
                  ThisKeyword
                  Identifier: 'lexer'
                Identifier: 'current'
              Identifier: 'type'
          Block
            ExpressionStatement
              BinaryExpression
                PropertyAccessExpression
                  ThisKeyword
                  Identifier: '_lexer'
                EqualsToken
                CallExpression
                  PropertyAccessExpression
                    PropertyAccessExpression
                      ThisKeyword
                      Identifier: 'lexer'
                    Identifier: 'advance'
            ReturnStatement
              TrueKeyword
          Block
            ReturnStatement
              FalseKeyword
    MethodDeclaration
      PublicKeyword
      Identifier: ' acceptLexerState'
      Parameter
        Identifier: 'parser'
        TypeReference
          Identifier: ' Parser'
      VoidKeyword
      Block
        ExpressionStatement
          BinaryExpression
            PropertyAccessExpression
              ThisKeyword
              Identifier: '_lexer'
            EqualsToken
            PropertyAccessExpression
              Identifier: ' parser'
              Identifier: 'lexer'
