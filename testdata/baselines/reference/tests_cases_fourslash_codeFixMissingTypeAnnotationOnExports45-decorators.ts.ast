SourceFile
  ExpressionStatement
    CallExpression
      PropertyAccessExpression
        Identifier: '/// <reference path='fourslash.ts'/>

// @isolatedDeclarations: true
// @declaration: true

// @Filename: /code.ts

//// function classDecorator<T extends Function> (value: T, context: ClassDecoratorContext) {}
//// function methodDecorator<This> (
////   target: (...args: number[])=> number,
////   context: ClassMethodDecoratorContext<This, (this: This, ...args: number[]) => number>) {}
//// function getterDecorator(value: Function, context: ClassGetterDecoratorContext) {}
//// function setterDecorator(value: Function, context: ClassSetterDecoratorContext) {}
//// function fieldDecorator(value: undefined, context: ClassFieldDecoratorContext) {}
//// function foo() { return 42;}
////
//// @classDecorator
//// export class A {
////   @methodDecorator
////   sum(...args: number[]) {
////     return args.reduce((a, b) => a + b, 0);
////   }
////   getSelf() {
////     return this;
////   }
////   @getterDecorator
////   get a() {
////     return foo();
////   }
////   @setterDecorator
////   set a(value) {}
////
////   @fieldDecorator classProp = foo();
//// }

verify'
        Identifier: 'codeFixAll'
      ObjectLiteralExpression
        PropertyAssignment
          Identifier: '
  fixId'
          StringLiteral
        PropertyAssignment
          Identifier: '
  fixAllDescription'
          PropertyAccessExpression
            PropertyAccessExpression
              PropertyAccessExpression
                Identifier: ' ts'
                Identifier: 'Diagnostics'
              Identifier: 'Add_all_missing_type_annotations'
            Identifier: 'message'
        PropertyAssignment
          Identifier: '
  newFileContent'
          NoSubstitutionTemplateLiteral
