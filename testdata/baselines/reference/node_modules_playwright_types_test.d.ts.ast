SourceFile
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' APIRequestContext'
        ImportSpecifier
          Identifier: ' Browser'
        ImportSpecifier
          Identifier: ' BrowserContext'
        ImportSpecifier
          Identifier: ' BrowserContextOptions'
        ImportSpecifier
          Identifier: ' Page'
        ImportSpecifier
          Identifier: ' LaunchOptions'
        ImportSpecifier
          Identifier: ' ViewportSize'
        ImportSpecifier
          Identifier: ' Geolocation'
        ImportSpecifier
          Identifier: ' HTTPCredentials'
        ImportSpecifier
          Identifier: ' Locator'
        ImportSpecifier
          Identifier: ' APIResponse'
        ImportSpecifier
          Identifier: ' PageScreenshotOptions'
    StringLiteral
  ExportDeclaration
    StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ReporterDescription'
    TypeReference
      Identifier: ' Readonly'
      UnionType
        TupleType
          LiteralType
            StringLiteral
        TupleType
          LiteralType
            StringLiteral
          TypeLiteral
            PropertySignature
              Identifier: ' outputDir'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: ' fileName'
              QuestionToken
              StringKeyword
        TupleType
          LiteralType
            StringLiteral
        TupleType
          LiteralType
            StringLiteral
        TupleType
          LiteralType
            StringLiteral
        TupleType
          LiteralType
            StringLiteral
          TypeLiteral
            PropertySignature
              Identifier: ' printSteps'
              QuestionToken
              BooleanKeyword
        TupleType
          LiteralType
            StringLiteral
        TupleType
          LiteralType
            StringLiteral
        TupleType
          LiteralType
            StringLiteral
          TypeLiteral
            PropertySignature
              Identifier: ' outputFile'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: ' stripANSIControlSequences'
              QuestionToken
              BooleanKeyword
            PropertySignature
              Identifier: ' includeProjectInTestName'
              QuestionToken
              BooleanKeyword
        TupleType
          LiteralType
            StringLiteral
        TupleType
          LiteralType
            StringLiteral
          TypeLiteral
            PropertySignature
              Identifier: ' outputFile'
              QuestionToken
              StringKeyword
        TupleType
          LiteralType
            StringLiteral
        TupleType
          LiteralType
            StringLiteral
          TypeLiteral
            PropertySignature
              Identifier: ' outputFolder'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: ' open'
              QuestionToken
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            PropertySignature
              Identifier: ' host'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: ' port'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: ' attachmentsBaseURL'
              QuestionToken
              StringKeyword
        TupleType
          LiteralType
            StringLiteral
        TupleType
          StringKeyword
        TupleType
          StringKeyword
          AnyKeyword
  TypeAliasDeclaration
    Identifier: ' UseOptions'
    TypeParameter
      Identifier: 'TestArgs'
    TypeParameter
      Identifier: ' WorkerArgs'
    IntersectionType
      TypeReference
        Identifier: ' Partial'
        TypeReference
          Identifier: 'WorkerArgs'
      TypeReference
        Identifier: ' Partial'
        TypeReference
          Identifier: 'TestArgs'
  InterfaceDeclaration
    Identifier: ' TestProject'
    TypeParameter
      Identifier: 'TestArgs'
      TypeLiteral
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeLiteral
    PropertySignature
      Identifier: '
  /**
   * Options for all tests in this project, for example
   * [testOptions.browserName](https://playwright.dev/docs/api/class-testoptions#test-options-browser-name). Learn more
   * about [configuration](https://playwright.dev/docs/test-configuration) and see [available options]{@link TestOptions}.
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   projects: [
   *     {
   *       name: 'Chromium',
   *       use: {
   *         browserName: 'chromium',
   *       },
   *     },
   *   ],
   * });
   * ```
   *
   * Use [testConfig.use](https://playwright.dev/docs/api/class-testconfig#test-config-use) to change this option for
   * all projects.
   */
  use'
      QuestionToken
      TypeReference
        Identifier: ' UseOptions'
        TypeReference
          Identifier: 'TestArgs'
        TypeReference
          Identifier: ' WorkerArgs'
    PropertySignature
      Identifier: '
  /**
   * List of projects that need to run before any test in this project runs. Dependencies can be useful for configuring
   * the global setup actions in a way that every action is in a form of a test. Passing `--no-deps` argument ignores
   * the dependencies and behaves as if they were not specified.
   *
   * Using dependencies allows global setup to produce traces and other artifacts, see the setup steps in the test
   * report, etc.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   projects: [
   *     {
   *       name: 'setup',
   *       testMatch: /global.setup\.ts/,
   *     },
   *     {
   *       name: 'chromium',
   *       use: devices['Desktop Chrome'],
   *       dependencies: ['setup'],
   *     },
   *     {
   *       name: 'firefox',
   *       use: devices['Desktop Firefox'],
   *       dependencies: ['setup'],
   *     },
   *     {
   *       name: 'webkit',
   *       use: devices['Desktop Safari'],
   *       dependencies: ['setup'],
   *     },
   *   ],
   * });
   * ```
   *
   */
  dependencies'
      QuestionToken
      TypeReference
        Identifier: ' Array'
        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Configuration for the `expect` assertion library.
   *
   * Use [testConfig.expect](https://playwright.dev/docs/api/class-testconfig#test-config-expect) to change this option
   * for all projects.
   */
  expect'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Default timeout for async expect matchers in milliseconds, defaults to 5000ms.
     */
    timeout'
          QuestionToken
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Configuration for the
     * [expect(page).toHaveScreenshot(name[, options])](https://playwright.dev/docs/api/class-pageassertions#page-assertions-to-have-screenshot-1)
     * method.
     */
    toHaveScreenshot'
          QuestionToken
          TypeLiteral
            PropertySignature
              Identifier: '
      /**
       * an acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and
       * `1` (lax). `"pixelmatch"` comparator computes color difference in
       * [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.
       */
      threshold'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * an acceptable amount of pixels that could be different, unset by default.
       */
      maxDiffPixels'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by
       * default.
       */
      maxDiffPixelRatio'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * See `animations` in [page.screenshot([options])](https://playwright.dev/docs/api/class-page#page-screenshot).
       * Defaults to `"disabled"`.
       */
      animations'
              QuestionToken
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            PropertySignature
              Identifier: '

      /**
       * See `caret` in [page.screenshot([options])](https://playwright.dev/docs/api/class-page#page-screenshot). Defaults
       * to `"hide"`.
       */
      caret'
              QuestionToken
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            PropertySignature
              Identifier: '

      /**
       * See `scale` in [page.screenshot([options])](https://playwright.dev/docs/api/class-page#page-screenshot). Defaults
       * to `"css"`.
       */
      scale'
              QuestionToken
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            PropertySignature
              Identifier: '

      /**
       * See `style` in [page.screenshot([options])](https://playwright.dev/docs/api/class-page#page-screenshot).
       */
      stylePath'
              QuestionToken
              UnionType
                StringKeyword
                TypeReference
                  Identifier: 'Array'
                  StringKeyword
        PropertySignature
          Identifier: '

    /**
     * Configuration for the
     * [expect(value).toMatchSnapshot(name[, options])](https://playwright.dev/docs/api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1)
     * method.
     */
    toMatchSnapshot'
          QuestionToken
          TypeLiteral
            PropertySignature
              Identifier: '
      /**
       * an acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and
       * `1` (lax). `"pixelmatch"` comparator computes color difference in
       * [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.
       */
      threshold'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * an acceptable amount of pixels that could be different, unset by default.
       */
      maxDiffPixels'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * an acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by
       * default.
       */
      maxDiffPixelRatio'
              QuestionToken
              NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Configuration for the [expect(value).toPass()](https://playwright.dev/docs/test-assertions) method.
     */
    toPass'
          QuestionToken
          TypeLiteral
            PropertySignature
              Identifier: '
      /**
       * timeout for toPass method in milliseconds.
       */
      timeout'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * probe intervals for toPass method in milliseconds.
       */
      intervals'
              QuestionToken
              TypeReference
                Identifier: ' Array'
                NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Playwright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the
   * same time. By default, **test files** are run in parallel. Tests in a single file are run in order, in the same
   * worker process.
   *
   * You can configure entire test project to concurrently run all tests in all files using this option.
   */
  fullyParallel'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Filter to only run tests with a title matching one of the patterns. For example, passing `grep: /cart/` should only
   * run tests with "cart" in the title. Also available globally and in the [command line](https://playwright.dev/docs/test-cli) with the `-g`
   * option. The regular expression will be tested against the string that consists of the project name, the test file
   * name, the `test.describe` name (if any), the test name and the test tags divided by spaces, e.g. `chromium
   * my-test.spec.ts my-suite my-test`.
   *
   * `grep` option is also useful for [tagging tests](https://playwright.dev/docs/test-annotations#tag-tests).
   */
  grep'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' RegExp'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Filter to only run tests with a title **not** matching one of the patterns. This is the opposite of
   * [testProject.grep](https://playwright.dev/docs/api/class-testproject#test-project-grep). Also available globally
   * and in the [command line](https://playwright.dev/docs/test-cli) with the `--grep-invert` option.
   *
   * `grepInvert` option is also useful for [tagging tests](https://playwright.dev/docs/test-annotations#tag-tests).
   */
  grepInvert'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' RegExp'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Whether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await
   * expect(page).toHaveScreenshot()`.
   *
   * **Usage**
   *
   * The following example will only perform screenshot assertions on Chromium.
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   projects: [
   *     {
   *       name: 'chromium',
   *       use: devices['Desktop Chrome'],
   *     },
   *     {
   *       name: 'firefox',
   *       use: devices['Desktop Firefox'],
   *       ignoreSnapshots: true,
   *     },
   *     {
   *       name: 'webkit',
   *       use: devices['Desktop Safari'],
   *       ignoreSnapshots: true,
   *     },
   *   ],
   * });
   * ```
   *
   */
  ignoreSnapshots'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Metadata that will be put directly to the test report serialized as JSON.
   */
  metadata'
      QuestionToken
      TypeReference
        Identifier: ' Metadata'
    PropertySignature
      Identifier: '

  /**
   * Project name is visible in the report and during test execution.
   */
  name'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.
   *
   * This directory is cleaned at the start. When running a test, a unique subdirectory inside the
   * [testProject.outputDir](https://playwright.dev/docs/api/class-testproject#test-project-output-dir) is created,
   * guaranteeing that test running in parallel do not conflict. This directory can be accessed by
   * [testInfo.outputDir](https://playwright.dev/docs/api/class-testinfo#test-info-output-dir) and
   * [testInfo.outputPath(...pathSegments)](https://playwright.dev/docs/api/class-testinfo#test-info-output-path).
   *
   * Here is an example that uses
   * [testInfo.outputPath(...pathSegments)](https://playwright.dev/docs/api/class-testinfo#test-info-output-path) to
   * create a temporary file.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   * import fs from 'fs';
   *
   * test('example test', async ({}, testInfo) => {
   *   const file = testInfo.outputPath('temporary-file.txt');
   *   await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');
   * });
   * ```
   *
   * Use [testConfig.outputDir](https://playwright.dev/docs/api/class-testconfig#test-config-output-dir) to change this
   * option for all projects.
   */
  outputDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The number of times to repeat each test, useful for debugging flaky tests.
   *
   * Use [testConfig.repeatEach](https://playwright.dev/docs/api/class-testconfig#test-config-repeat-each) to change
   * this option for all projects.
   */
  repeatEach'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to skip entries from `.gitignore` when searching for test files. By default, if neither
   * [testConfig.testDir](https://playwright.dev/docs/api/class-testconfig#test-config-test-dir) nor
   * [testProject.testDir](https://playwright.dev/docs/api/class-testproject#test-project-test-dir) are explicitly
   * specified, Playwright will ignore any test files matching `.gitignore` entries. This option allows to override that
   * behavior.
   */
  respectGitIgnore'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The maximum number of retry attempts given to failed tests. Learn more about
   * [test retries](https://playwright.dev/docs/test-retries#retries).
   *
   * Use [test.describe.configure([options])](https://playwright.dev/docs/api/class-test#test-describe-configure) to
   * change the number of retries for a specific file or a group of tests.
   *
   * Use [testConfig.retries](https://playwright.dev/docs/api/class-testconfig#test-config-retries) to change this
   * option for all projects.
   */
  retries'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * The base directory, relative to the config file, for snapshot files created with `toMatchSnapshot`. Defaults to
   * [testProject.testDir](https://playwright.dev/docs/api/class-testproject#test-project-test-dir).
   *
   * The directory for each test can be accessed by
   * [testInfo.snapshotDir](https://playwright.dev/docs/api/class-testinfo#test-info-snapshot-dir) and
   * [testInfo.snapshotPath(...pathSegments)](https://playwright.dev/docs/api/class-testinfo#test-info-snapshot-path).
   *
   * This path will serve as the base directory for each test file snapshot directory. Setting `snapshotDir` to
   * `'snapshots'`, the [testInfo.snapshotDir](https://playwright.dev/docs/api/class-testinfo#test-info-snapshot-dir)
   * would resolve to `snapshots/a.spec.js-snapshots`.
   */
  snapshotDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * This option configures a template controlling location of snapshots generated by
   * [expect(page).toHaveScreenshot(name[, options])](https://playwright.dev/docs/api/class-pageassertions#page-assertions-to-have-screenshot-1)
   * and
   * [expect(value).toMatchSnapshot(name[, options])](https://playwright.dev/docs/api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   testDir: './tests',
   *   snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',
   * });
   * ```
   *
   * **Details**
   *
   * The value might include some "tokens" that will be replaced with actual values during test execution.
   *
   * Consider the following file structure:
   *
   * ```txt
   * playwright.config.ts
   * tests/
   * └── page/
   *     └── page-click.spec.ts
   * ```
   *
   * And the following `page-click.spec.ts` that uses `toHaveScreenshot()` call:
   *
   * ```js
   * // page-click.spec.ts
   * import { test, expect } from '@playwright/test';
   *
   * test.describe('suite', () => {
   *   test('test should work', async ({ page }) => {
   *     await expect(page).toHaveScreenshot(['foo', 'bar', 'baz.png']);
   *   });
   * });
   * ```
   *
   * The list of supported tokens:
   * - `{arg}` - Relative snapshot path **without extension**. These come from the arguments passed to the
   *   `toHaveScreenshot()` and `toMatchSnapshot()` calls; if called without arguments, this will be an auto-generated
   *   snapshot name.
   *   - Value: `foo/bar/baz`
   * - `{ext}` - snapshot extension (with dots)
   *   - Value: `.png`
   * - `{platform}` - The value of `process.platform`.
   * - `{projectName}` - Project's file-system-sanitized name, if any.
   *   - Value: `''` (empty string).
   * - `{snapshotDir}` - Project's
   *   [testConfig.snapshotDir](https://playwright.dev/docs/api/class-testconfig#test-config-snapshot-dir).
   *   - Value: `/home/playwright/tests` (since `snapshotDir` is not provided in config, it defaults to `testDir`)
   * - `{testDir}` - Project's
   *   [testConfig.testDir](https://playwright.dev/docs/api/class-testconfig#test-config-test-dir).
   *   - Value: `/home/playwright/tests` (absolute path is since `testDir` is resolved relative to directory with
   *     config)
   * - `{testFileDir}` - Directories in relative path from `testDir` to **test file**.
   *   - Value: `page`
   * - `{testFileName}` - Test file name with extension.
   *   - Value: `page-click.spec.ts`
   * - `{testFilePath}` - Relative path from `testDir` to **test file**
   *   - Value: `page/page-click.spec.ts`
   * - `{testName}` - File-system-sanitized test title, including parent describes but excluding file name.
   *   - Value: `suite-test-should-work`
   *
   * Each token can be preceded with a single character that will be used **only if** this token has non-empty value.
   *
   * Consider the following config:
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   snapshotPathTemplate: '__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',
   *   testMatch: 'example.spec.ts',
   *   projects: [
   *     { use: { browserName: 'firefox' } },
   *     { name: 'chromium', use: { browserName: 'chromium' } },
   *   ],
   * });
   * ```
   *
   * In this config:
   * 1. First project **does not** have a name, so its snapshots will be stored in
   *    `<configDir>/__screenshots__/example.spec.ts/...`.
   * 1. Second project **does** have a name, so its snapshots will be stored in
   *    `<configDir>/__screenshots__/chromium/example.spec.ts/..`.
   * 1. Since `snapshotPathTemplate` resolves to relative path, it will be resolved relative to `configDir`.
   * 1. Forward slashes `"/"` can be used as path separators on any platform.
   */
  snapshotPathTemplate'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Name of a project that needs to run after this and all dependent projects have finished. Teardown is useful to
   * cleanup any resources acquired by this project.
   *
   * Passing `--no-deps` argument ignores
   * [testProject.teardown](https://playwright.dev/docs/api/class-testproject#test-project-teardown) and behaves as if
   * it was not specified.
   *
   * **Usage**
   *
   * A common pattern is a "setup" dependency that has a corresponding "teardown":
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   projects: [
   *     {
   *       name: 'setup',
   *       testMatch: /global.setup\.ts/,
   *       teardown: 'teardown',
   *     },
   *     {
   *       name: 'teardown',
   *       testMatch: /global.teardown\.ts/,
   *     },
   *     {
   *       name: 'chromium',
   *       use: devices['Desktop Chrome'],
   *       dependencies: ['setup'],
   *     },
   *     {
   *       name: 'firefox',
   *       use: devices['Desktop Firefox'],
   *       dependencies: ['setup'],
   *     },
   *     {
   *       name: 'webkit',
   *       use: devices['Desktop Safari'],
   *       dependencies: ['setup'],
   *     },
   *   ],
   * });
   * ```
   *
   */
  teardown'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Directory that will be recursively scanned for test files. Defaults to the directory of the configuration file.
   *
   * Each project can use a different directory. Here is an example that runs smoke tests in three browsers and all
   * other tests in stable Chrome browser.
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   projects: [
   *     {
   *       name: 'Smoke Chromium',
   *       testDir: './smoke-tests',
   *       use: {
   *         browserName: 'chromium',
   *       }
   *     },
   *     {
   *       name: 'Smoke WebKit',
   *       testDir: './smoke-tests',
   *       use: {
   *         browserName: 'webkit',
   *       }
   *     },
   *     {
   *       name: 'Smoke Firefox',
   *       testDir: './smoke-tests',
   *       use: {
   *         browserName: 'firefox',
   *       }
   *     },
   *     {
   *       name: 'Chrome Stable',
   *       testDir: './',
   *       use: {
   *         browserName: 'chromium',
   *         channel: 'chrome',
   *       }
   *     },
   *   ],
   * });
   * ```
   *
   * Use [testConfig.testDir](https://playwright.dev/docs/api/class-testconfig#test-config-test-dir) to change this
   * option for all projects.
   */
  testDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Files matching one of these patterns are not executed as test files. Matching is performed against the absolute
   * file path. Strings are treated as glob patterns.
   *
   * For example, `'**\/test-assets/**'` will ignore any files in the `test-assets` directory.
   *
   * Use [testConfig.testIgnore](https://playwright.dev/docs/api/class-testconfig#test-config-test-ignore) to change
   * this option for all projects.
   */
  testIgnore'
      QuestionToken
      UnionType
        StringKeyword
        TypeReference
          Identifier: 'RegExp'
        TypeReference
          Identifier: 'Array'
          UnionType
            StringKeyword
            TypeReference
              Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Only the files matching one of these patterns are executed as test files. Matching is performed against the
   * absolute file path. Strings are treated as glob patterns.
   *
   * By default, Playwright looks for files matching the following glob pattern: `**\/*.@(spec|test).?(c|m)[jt]s?(x)`.
   * This means JavaScript or TypeScript files with `".test"` or `".spec"` suffix, for example
   * `login-screen.wrong-credentials.spec.ts`.
   *
   * Use [testConfig.testMatch](https://playwright.dev/docs/api/class-testconfig#test-config-test-match) to change this
   * option for all projects.
   */
  testMatch'
      QuestionToken
      UnionType
        StringKeyword
        TypeReference
          Identifier: 'RegExp'
        TypeReference
          Identifier: 'Array'
          UnionType
            StringKeyword
            TypeReference
              Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Timeout for each test in milliseconds. Defaults to 30 seconds.
   *
   * This is a base timeout for all tests. Each test can configure its own timeout with
   * [test.setTimeout(timeout)](https://playwright.dev/docs/api/class-test#test-set-timeout). Each file or a group of
   * tests can configure the timeout with
   * [test.describe.configure([options])](https://playwright.dev/docs/api/class-test#test-describe-configure).
   *
   * Use [testConfig.timeout](https://playwright.dev/docs/api/class-testconfig#test-config-timeout) to change this
   * option for all projects.
   */
  timeout'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Project'
    TypeParameter
      Identifier: 'TestArgs'
      TypeLiteral
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeLiteral
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestProject'
        TypeReference
          Identifier: 'TestArgs'
        TypeReference
          Identifier: ' WorkerArgs'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FullProject'
    TypeParameter
      Identifier: 'TestArgs'
      TypeLiteral
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeLiteral
    PropertySignature
      Identifier: '
  /**
   * See [testProject.use](https://playwright.dev/docs/api/class-testproject#test-project-use).
   */
  use'
      TypeReference
        Identifier: ' UseOptions'
        IntersectionType
          TypeReference
            Identifier: 'PlaywrightTestOptions'
          TypeReference
            Identifier: ' TestArgs'
        IntersectionType
          TypeReference
            Identifier: ' PlaywrightWorkerOptions'
          TypeReference
            Identifier: ' WorkerArgs'
    PropertySignature
      Identifier: '
  /**
   * See [testProject.dependencies](https://playwright.dev/docs/api/class-testproject#test-project-dependencies).
   */
  dependencies'
      TypeReference
        Identifier: ' Array'
        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testProject.grep](https://playwright.dev/docs/api/class-testproject#test-project-grep).
   */
  grep'
      UnionType
        TypeReference
          Identifier: ' RegExp'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * See [testProject.grepInvert](https://playwright.dev/docs/api/class-testproject#test-project-grep-invert).
   */
  grepInvert'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'RegExp'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * See [testProject.metadata](https://playwright.dev/docs/api/class-testproject#test-project-metadata).
   */
  metadata'
      TypeReference
        Identifier: ' Metadata'
    PropertySignature
      Identifier: '

  /**
   * See [testProject.name](https://playwright.dev/docs/api/class-testproject#test-project-name).
   */
  name'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testProject.outputDir](https://playwright.dev/docs/api/class-testproject#test-project-output-dir).
   */
  outputDir'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testProject.repeatEach](https://playwright.dev/docs/api/class-testproject#test-project-repeat-each).
   */
  repeatEach'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testProject.retries](https://playwright.dev/docs/api/class-testproject#test-project-retries).
   */
  retries'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testProject.snapshotDir](https://playwright.dev/docs/api/class-testproject#test-project-snapshot-dir).
   */
  snapshotDir'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testProject.teardown](https://playwright.dev/docs/api/class-testproject#test-project-teardown).
   */
  teardown'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testProject.testDir](https://playwright.dev/docs/api/class-testproject#test-project-test-dir).
   */
  testDir'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testProject.testIgnore](https://playwright.dev/docs/api/class-testproject#test-project-test-ignore).
   */
  testIgnore'
      UnionType
        StringKeyword
        TypeReference
          Identifier: 'RegExp'
        TypeReference
          Identifier: 'Array'
          UnionType
            StringKeyword
            TypeReference
              Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * See [testProject.testMatch](https://playwright.dev/docs/api/class-testproject#test-project-test-match).
   */
  testMatch'
      UnionType
        StringKeyword
        TypeReference
          Identifier: 'RegExp'
        TypeReference
          Identifier: 'Array'
          UnionType
            StringKeyword
            TypeReference
              Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * See [testProject.timeout](https://playwright.dev/docs/api/class-testproject#test-project-timeout).
   */
  timeout'
      NumberKeyword
  TypeAliasDeclaration
    Identifier: ' LiteralUnion'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' U'
    TypeParameter
      Identifier: ' U'
      StringKeyword
    UnionType
      TypeReference
        Identifier: ' T'
      ParenthesizedType
        IntersectionType
          TypeReference
            Identifier: 'U'
          TypeLiteral
            PropertySignature
              Identifier: ' zz_IGNORE_ME'
              QuestionToken
              NeverKeyword
  InterfaceDeclaration
    Identifier: ' TestConfig'
    TypeParameter
      Identifier: 'TestArgs'
      TypeLiteral
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeLiteral
    PropertySignature
      Identifier: '
  /**
   * Playwright Test supports running multiple test projects at the same time. See {@link TestProject} for more
   * information.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig, devices } from '@playwright/test';
   *
   * export default defineConfig({
   *   projects: [
   *     { name: 'chromium', use: devices['Desktop Chrome'] }
   *   ]
   * });
   * ```
   *
   */
  projects'
      QuestionToken
      ArrayType
        TypeReference
          Identifier: ' Project'
          TypeReference
            Identifier: 'TestArgs'
          TypeReference
            Identifier: ' WorkerArgs'
    PropertySignature
      Identifier: '
  /**
   * The list of reporters to use. Each reporter can be:
   * - A builtin reporter name like `'list'` or `'json'`.
   * - A module name like `'my-awesome-reporter'`.
   * - A relative path to the reporter like `'./reporters/my-awesome-reporter.js'`.
   *
   * You can pass options to the reporter in a tuple like `['json', { outputFile: './report.json' }]`.
   *
   * Learn more in the [reporters guide](https://playwright.dev/docs/test-reporters).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   reporter: 'line',
   * });
   * ```
   *
   */
  reporter'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' LiteralUnion'
          UnionType
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
            LiteralType
              StringLiteral
          StringKeyword
        ArrayType
          TypeReference
            Identifier: ' ReporterDescription'
    PropertySignature
      Identifier: '
  /**
   * Global options for all tests, for example
   * [testOptions.browserName](https://playwright.dev/docs/api/class-testoptions#test-options-browser-name). Learn more
   * about [configuration](https://playwright.dev/docs/test-configuration) and see [available options]{@link TestOptions}.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     browserName: 'chromium',
   *   },
   * });
   * ```
   *
   */
  use'
      QuestionToken
      TypeReference
        Identifier: ' UseOptions'
        TypeReference
          Identifier: 'TestArgs'
        TypeReference
          Identifier: ' WorkerArgs'
    PropertySignature
      Identifier: '
  /**
   * Launch a development web server (or multiple) during the tests.
   *
   * **Details**
   *
   * If the port is specified, Playwright Test will wait for it to be available on `127.0.0.1` or `::1`, before running
   * the tests. If the url is specified, Playwright Test will wait for the URL to return a 2xx, 3xx, 400, 401, 402, or
   * 403 status code before running the tests.
   *
   * For continuous integration, you may want to use the `reuseExistingServer: !process.env.CI` option which does not
   * use an existing server on the CI. To see the stdout, you can set the `DEBUG=pw:webserver` environment variable.
   *
   * The `port` (but not the `url`) gets passed over to Playwright as a
   * [testOptions.baseURL](https://playwright.dev/docs/api/class-testoptions#test-options-base-url). For example port
   * `8080` produces `baseURL` equal `http://localhost:8080`. If `webServer` is specified as an array, you must
   * explicitly configure the `baseURL` (even if it only has one entry).
   *
   * **NOTE** It is also recommended to specify
   * [testOptions.baseURL](https://playwright.dev/docs/api/class-testoptions#test-options-base-url) in the config, so
   * that tests could use relative urls.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   * export default defineConfig({
   *   webServer: {
   *     command: 'npm run start',
   *     url: 'http://127.0.0.1:3000',
   *     timeout: 120 * 1000,
   *     reuseExistingServer: !process.env.CI,
   *   },
   *   use: {
   *     baseURL: 'http://localhost:3000/',
   *   },
   * });
   * ```
   *
   * Now you can use a relative path when navigating the page:
   *
   * ```js
   * // test.spec.ts
   * import { test } from '@playwright/test';
   *
   * test('test', async ({ page }) => {
   *   // This will result in http://localhost:3000/foo
   *   await page.goto('/foo');
   * });
   * ```
   *
   * Multiple web servers (or background processes) can be launched:
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   * export default defineConfig({
   *   webServer: [
   *     {
   *       command: 'npm run start',
   *       url: 'http://127.0.0.1:3000',
   *       timeout: 120 * 1000,
   *       reuseExistingServer: !process.env.CI,
   *     },
   *     {
   *       command: 'npm run backend',
   *       url: 'http://127.0.0.1:3333',
   *       timeout: 120 * 1000,
   *       reuseExistingServer: !process.env.CI,
   *     }
   *   ],
   *   use: {
   *     baseURL: 'http://127.0.0.1:3000',
   *   },
   * });
   * ```
   *
   */
  webServer'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' TestConfigWebServer'
        ArrayType
          TypeReference
            Identifier: ' TestConfigWebServer'
    PropertySignature
      Identifier: '
  /**
   * Playwright transpiler configuration.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   build: {
   *     external: ['**\/*bundle.js'],
   *   },
   * });
   * ```
   *
   */
  build'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Paths to exclude from the transpilation expressed as a list of glob patterns. Typically heavy JS bundles that your
     * test uses are listed here.
     */
    external'
          QuestionToken
          TypeReference
            Identifier: ' Array'
            StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Configuration for the `expect` assertion library. Learn more about [various timeouts](https://playwright.dev/docs/test-timeouts).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   expect: {
   *     timeout: 10000,
   *     toMatchSnapshot: {
   *       maxDiffPixels: 10,
   *     },
   *   },
   * });
   * ```
   *
   */
  expect'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * Default timeout for async expect matchers in milliseconds, defaults to 5000ms.
     */
    timeout'
          QuestionToken
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Configuration for the
     * [expect(page).toHaveScreenshot(name[, options])](https://playwright.dev/docs/api/class-pageassertions#page-assertions-to-have-screenshot-1)
     * method.
     */
    toHaveScreenshot'
          QuestionToken
          TypeLiteral
            PropertySignature
              Identifier: '
      /**
       * See `animations` in [page.screenshot([options])](https://playwright.dev/docs/api/class-page#page-screenshot).
       * Defaults to `"disabled"`.
       */
      animations'
              QuestionToken
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            PropertySignature
              Identifier: '

      /**
       * See `caret` in [page.screenshot([options])](https://playwright.dev/docs/api/class-page#page-screenshot). Defaults
       * to `"hide"`.
       */
      caret'
              QuestionToken
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            PropertySignature
              Identifier: '

      /**
       * An acceptable amount of pixels that could be different, unset by default.
       */
      maxDiffPixels'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by
       * default.
       */
      maxDiffPixelRatio'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * See `scale` in [page.screenshot([options])](https://playwright.dev/docs/api/class-page#page-screenshot). Defaults
       * to `"css"`.
       */
      scale'
              QuestionToken
              UnionType
                LiteralType
                  StringLiteral
                LiteralType
                  StringLiteral
            PropertySignature
              Identifier: '

      /**
       * See `style` in [page.screenshot([options])](https://playwright.dev/docs/api/class-page#page-screenshot).
       */
      stylePath'
              QuestionToken
              UnionType
                StringKeyword
                TypeReference
                  Identifier: 'Array'
                  StringKeyword
            PropertySignature
              Identifier: '

      /**
       * An acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and
       * `1` (lax). `"pixelmatch"` comparator computes color difference in
       * [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.
       */
      threshold'
              QuestionToken
              NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Configuration for the
     * [expect(value).toMatchSnapshot(name[, options])](https://playwright.dev/docs/api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1)
     * method.
     */
    toMatchSnapshot'
          QuestionToken
          TypeLiteral
            PropertySignature
              Identifier: '
      /**
       * An acceptable amount of pixels that could be different, unset by default.
       */
      maxDiffPixels'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1` , unset by
       * default.
       */
      maxDiffPixelRatio'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * An acceptable perceived color difference between the same pixel in compared images, ranging from `0` (strict) and
       * `1` (lax). `"pixelmatch"` comparator computes color difference in
       * [YIQ color space](https://en.wikipedia.org/wiki/YIQ) and defaults `threshold` value to `0.2`.
       */
      threshold'
              QuestionToken
              NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * Configuration for the [expect(value).toPass()](https://playwright.dev/docs/test-assertions#expecttopass) method.
     */
    toPass'
          QuestionToken
          TypeLiteral
            PropertySignature
              Identifier: '
      /**
       * Probe intervals for toPass method in milliseconds.
       */
      intervals'
              QuestionToken
              TypeReference
                Identifier: ' Array'
                NumberKeyword
            PropertySignature
              Identifier: '

      /**
       * Timeout for toPass method in milliseconds.
       */
      timeout'
              QuestionToken
              NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to exit with an error if any tests or groups are marked as
   * [test.only(title[, details, body])](https://playwright.dev/docs/api/class-test#test-only) or
   * [test.describe.only([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-only).
   * Useful on CI.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   forbidOnly: !!process.env.CI,
   * });
   * ```
   *
   */
  forbidOnly'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Playwright Test runs tests in parallel. In order to achieve that, it runs several worker processes that run at the
   * same time. By default, **test files** are run in parallel. Tests in a single file are run in order, in the same
   * worker process.
   *
   * You can configure entire test run to concurrently execute all tests in all files using this option.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   fullyParallel: true,
   * });
   * ```
   *
   */
  fullyParallel'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Path to the global setup file. This file will be required and run before all the tests. It must export a single
   * function that takes a {@link FullConfig} argument.
   *
   * Learn more about [global setup and teardown](https://playwright.dev/docs/test-global-setup-teardown).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   globalSetup: './global-setup',
   * });
   * ```
   *
   */
  globalSetup'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Path to the global teardown file. This file will be required and run after all the tests. It must export a single
   * function. See also
   * [testConfig.globalSetup](https://playwright.dev/docs/api/class-testconfig#test-config-global-setup).
   *
   * Learn more about [global setup and teardown](https://playwright.dev/docs/test-global-setup-teardown).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   globalTeardown: './global-teardown',
   * });
   * ```
   *
   */
  globalTeardown'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Maximum time in milliseconds the whole test suite can run. Zero timeout (default) disables this behavior. Useful on
   * CI to prevent broken setup from running too long and wasting resources. Learn more about
   * [various timeouts](https://playwright.dev/docs/test-timeouts).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   globalTimeout: process.env.CI ? 60 * 60 * 1000 : undefined,
   * });
   * ```
   *
   */
  globalTimeout'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Filter to only run tests with a title matching one of the patterns. For example, passing `grep: /cart/` should only
   * run tests with "cart" in the title. Also available in the [command line](https://playwright.dev/docs/test-cli) with the `-g` option. The
   * regular expression will be tested against the string that consists of the project name, the test file name, the
   * `test.describe` name (if any), the test name and the test tags divided by spaces, e.g. `chromium my-test.spec.ts
   * my-suite my-test`.
   *
   * `grep` option is also useful for [tagging tests](https://playwright.dev/docs/test-annotations#tag-tests).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   grep: /smoke/,
   * });
   * ```
   *
   */
  grep'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' RegExp'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Filter to only run tests with a title **not** matching one of the patterns. This is the opposite of
   * [testConfig.grep](https://playwright.dev/docs/api/class-testconfig#test-config-grep). Also available in the
   * [command line](https://playwright.dev/docs/test-cli) with the `--grep-invert` option.
   *
   * `grepInvert` option is also useful for [tagging tests](https://playwright.dev/docs/test-annotations#tag-tests).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   grepInvert: /manual/,
   * });
   * ```
   *
   */
  grepInvert'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' RegExp'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Whether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await
   * expect(page).toHaveScreenshot()`.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   ignoreSnapshots: !process.env.CI,
   * });
   * ```
   *
   */
  ignoreSnapshots'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The maximum number of test failures for the whole test suite run. After reaching this number, testing will stop and
   * exit with an error. Setting to zero (default) disables this behavior.
   *
   * Also available in the [command line](https://playwright.dev/docs/test-cli) with the `--max-failures` and `-x` options.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   maxFailures: process.env.CI ? 1 : 0,
   * });
   * ```
   *
   */
  maxFailures'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Metadata that will be put directly to the test report serialized as JSON.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   metadata: 'acceptance tests',
   * });
   * ```
   *
   */
  metadata'
      QuestionToken
      TypeReference
        Identifier: ' Metadata'
    PropertySignature
      Identifier: '

  /**
   * Config name is visible in the report and during test execution, unless overridden by
   * [testProject.name](https://playwright.dev/docs/api/class-testproject#test-project-name).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   name: 'acceptance tests',
   * });
   * ```
   *
   */
  name'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The output directory for files created during test execution. Defaults to `<package.json-directory>/test-results`.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   outputDir: './test-results',
   * });
   * ```
   *
   * **Details**
   *
   * This directory is cleaned at the start. When running a test, a unique subdirectory inside the
   * [testConfig.outputDir](https://playwright.dev/docs/api/class-testconfig#test-config-output-dir) is created,
   * guaranteeing that test running in parallel do not conflict. This directory can be accessed by
   * [testInfo.outputDir](https://playwright.dev/docs/api/class-testinfo#test-info-output-dir) and
   * [testInfo.outputPath(...pathSegments)](https://playwright.dev/docs/api/class-testinfo#test-info-output-path).
   *
   * Here is an example that uses
   * [testInfo.outputPath(...pathSegments)](https://playwright.dev/docs/api/class-testinfo#test-info-output-path) to
   * create a temporary file.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   * import fs from 'fs';
   *
   * test('example test', async ({}, testInfo) => {
   *   const file = testInfo.outputPath('temporary-file.txt');
   *   await fs.promises.writeFile(file, 'Put some data to the file', 'utf8');
   * });
   * ```
   *
   */
  outputDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to preserve test output in the
   * [testConfig.outputDir](https://playwright.dev/docs/api/class-testconfig#test-config-output-dir). Defaults to
   * `'always'`.
   * - `'always'` - preserve output for all tests;
   * - `'never'` - do not preserve output for any tests;
   * - `'failures-only'` - only preserve output for failed tests.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   preserveOutput: 'always',
   * });
   * ```
   *
   */
  preserveOutput'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Whether to suppress stdio and stderr output from the tests.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   quiet: !!process.env.CI,
   * });
   * ```
   *
   */
  quiet'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The number of times to repeat each test, useful for debugging flaky tests.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   repeatEach: 3,
   * });
   * ```
   *
   */
  repeatEach'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to report slow test files. Pass `null` to disable this feature.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   reportSlowTests: null,
   * });
   * ```
   *
   * **Details**
   *
   * Test files that took more than `threshold` milliseconds are considered slow, and the slowest ones are reported, no
   * more than `max` number of them. Passing zero as `max` reports all test files that exceed the threshold.
   */
  reportSlowTests'
      QuestionToken
      UnionType
        LiteralType
          NullKeyword
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The maximum number of slow test files to report. Defaults to `5`.
     */
    max'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Test duration in milliseconds that is considered slow. Defaults to 15 seconds.
     */
    threshold'
            NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to skip entries from `.gitignore` when searching for test files. By default, if neither
   * [testConfig.testDir](https://playwright.dev/docs/api/class-testconfig#test-config-test-dir) nor
   * [testProject.testDir](https://playwright.dev/docs/api/class-testproject#test-project-test-dir) are explicitly
   * specified, Playwright will ignore any test files matching `.gitignore` entries.
   */
  respectGitIgnore'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The maximum number of retry attempts given to failed tests. By default failing tests are not retried. Learn more
   * about [test retries](https://playwright.dev/docs/test-retries#retries).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   retries: 2,
   * });
   * ```
   *
   */
  retries'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Shard tests and execute only the selected shard. Specify in the one-based form like `{ total: 5, current: 2 }`.
   *
   * Learn more about [parallelism and sharding](https://playwright.dev/docs/test-parallel) with Playwright Test.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   shard: { total: 10, current: 3 },
   * });
   * ```
   *
   */
  shard'
      QuestionToken
      UnionType
        LiteralType
          NullKeyword
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The index of the shard to execute, one-based.
     */
    current'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * The total number of shards.
     */
    total'
            NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * **NOTE** Use
   * [testConfig.snapshotPathTemplate](https://playwright.dev/docs/api/class-testconfig#test-config-snapshot-path-template)
   * to configure snapshot paths.
   *
   * The base directory, relative to the config file, for snapshot files created with `toMatchSnapshot`. Defaults to
   * [testConfig.testDir](https://playwright.dev/docs/api/class-testconfig#test-config-test-dir).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   snapshotDir: './snapshots',
   * });
   * ```
   *
   * **Details**
   *
   * The directory for each test can be accessed by
   * [testInfo.snapshotDir](https://playwright.dev/docs/api/class-testinfo#test-info-snapshot-dir) and
   * [testInfo.snapshotPath(...pathSegments)](https://playwright.dev/docs/api/class-testinfo#test-info-snapshot-path).
   *
   * This path will serve as the base directory for each test file snapshot directory. Setting `snapshotDir` to
   * `'snapshots'`, the [testInfo.snapshotDir](https://playwright.dev/docs/api/class-testinfo#test-info-snapshot-dir)
   * would resolve to `snapshots/a.spec.js-snapshots`.
   */
  snapshotDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * This option configures a template controlling location of snapshots generated by
   * [expect(page).toHaveScreenshot(name[, options])](https://playwright.dev/docs/api/class-pageassertions#page-assertions-to-have-screenshot-1)
   * and
   * [expect(value).toMatchSnapshot(name[, options])](https://playwright.dev/docs/api/class-snapshotassertions#snapshot-assertions-to-match-snapshot-1).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   testDir: './tests',
   *   snapshotPathTemplate: '{testDir}/__screenshots__/{testFilePath}/{arg}{ext}',
   * });
   * ```
   *
   * **Details**
   *
   * The value might include some "tokens" that will be replaced with actual values during test execution.
   *
   * Consider the following file structure:
   *
   * ```txt
   * playwright.config.ts
   * tests/
   * └── page/
   *     └── page-click.spec.ts
   * ```
   *
   * And the following `page-click.spec.ts` that uses `toHaveScreenshot()` call:
   *
   * ```js
   * // page-click.spec.ts
   * import { test, expect } from '@playwright/test';
   *
   * test.describe('suite', () => {
   *   test('test should work', async ({ page }) => {
   *     await expect(page).toHaveScreenshot(['foo', 'bar', 'baz.png']);
   *   });
   * });
   * ```
   *
   * The list of supported tokens:
   * - `{arg}` - Relative snapshot path **without extension**. These come from the arguments passed to the
   *   `toHaveScreenshot()` and `toMatchSnapshot()` calls; if called without arguments, this will be an auto-generated
   *   snapshot name.
   *   - Value: `foo/bar/baz`
   * - `{ext}` - snapshot extension (with dots)
   *   - Value: `.png`
   * - `{platform}` - The value of `process.platform`.
   * - `{projectName}` - Project's file-system-sanitized name, if any.
   *   - Value: `''` (empty string).
   * - `{snapshotDir}` - Project's
   *   [testConfig.snapshotDir](https://playwright.dev/docs/api/class-testconfig#test-config-snapshot-dir).
   *   - Value: `/home/playwright/tests` (since `snapshotDir` is not provided in config, it defaults to `testDir`)
   * - `{testDir}` - Project's
   *   [testConfig.testDir](https://playwright.dev/docs/api/class-testconfig#test-config-test-dir).
   *   - Value: `/home/playwright/tests` (absolute path is since `testDir` is resolved relative to directory with
   *     config)
   * - `{testFileDir}` - Directories in relative path from `testDir` to **test file**.
   *   - Value: `page`
   * - `{testFileName}` - Test file name with extension.
   *   - Value: `page-click.spec.ts`
   * - `{testFilePath}` - Relative path from `testDir` to **test file**
   *   - Value: `page/page-click.spec.ts`
   * - `{testName}` - File-system-sanitized test title, including parent describes but excluding file name.
   *   - Value: `suite-test-should-work`
   *
   * Each token can be preceded with a single character that will be used **only if** this token has non-empty value.
   *
   * Consider the following config:
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   snapshotPathTemplate: '__screenshots__{/projectName}/{testFilePath}/{arg}{ext}',
   *   testMatch: 'example.spec.ts',
   *   projects: [
   *     { use: { browserName: 'firefox' } },
   *     { name: 'chromium', use: { browserName: 'chromium' } },
   *   ],
   * });
   * ```
   *
   * In this config:
   * 1. First project **does not** have a name, so its snapshots will be stored in
   *    `<configDir>/__screenshots__/example.spec.ts/...`.
   * 1. Second project **does** have a name, so its snapshots will be stored in
   *    `<configDir>/__screenshots__/chromium/example.spec.ts/..`.
   * 1. Since `snapshotPathTemplate` resolves to relative path, it will be resolved relative to `configDir`.
   * 1. Forward slashes `"/"` can be used as path separators on any platform.
   */
  snapshotPathTemplate'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Directory that will be recursively scanned for test files. Defaults to the directory of the configuration file.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   testDir: './tests/playwright',
   * });
   * ```
   *
   */
  testDir'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Files matching one of these patterns are not executed as test files. Matching is performed against the absolute
   * file path. Strings are treated as glob patterns.
   *
   * For example, `'**\/test-assets/**'` will ignore any files in the `test-assets` directory.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   testIgnore: '**\/test-assets/**',
   * });
   * ```
   *
   */
  testIgnore'
      QuestionToken
      UnionType
        StringKeyword
        TypeReference
          Identifier: 'RegExp'
        TypeReference
          Identifier: 'Array'
          UnionType
            StringKeyword
            TypeReference
              Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Only the files matching one of these patterns are executed as test files. Matching is performed against the
   * absolute file path. Strings are treated as glob patterns.
   *
   * By default, Playwright looks for files matching the following glob pattern: `**\/*.@(spec|test).?(c|m)[jt]s?(x)`.
   * This means JavaScript or TypeScript files with `".test"` or `".spec"` suffix, for example
   * `login-screen.wrong-credentials.spec.ts`.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   testMatch: /.*\.e2e\.js/,
   * });
   * ```
   *
   */
  testMatch'
      QuestionToken
      UnionType
        StringKeyword
        TypeReference
          Identifier: 'RegExp'
        TypeReference
          Identifier: 'Array'
          UnionType
            StringKeyword
            TypeReference
              Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * Timeout for each test in milliseconds. Defaults to 30 seconds.
   *
   * This is a base timeout for all tests. In addition, each test can configure its own timeout with
   * [test.setTimeout(timeout)](https://playwright.dev/docs/api/class-test#test-set-timeout). Learn more about
   * [various timeouts](https://playwright.dev/docs/test-timeouts).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   timeout: 5 * 60 * 1000,
   * });
   * ```
   *
   */
  timeout'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to update expected snapshots with the actual results produced by the test run. Defaults to `'missing'`.
   * - `'all'` - All tests that are executed will update snapshots that did not match. Matching snapshots will not be
   *   updated.
   * - `'none'` - No snapshots are updated.
   * - `'missing'` - Missing snapshots are created, for example when authoring a new test and running it for the first
   *   time. This is the default.
   *
   * Learn more about [snapshots](https://playwright.dev/docs/test-snapshots).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   updateSnapshots: 'missing',
   * });
   * ```
   *
   */
  updateSnapshots'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * The maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of
   * logical CPU cores, e.g. `'50%'.`
   *
   * Playwright Test uses worker processes to run tests. There is always at least one worker process, but more can be
   * used to speed up test execution.
   *
   * Defaults to half of the number of logical CPU cores. Learn more about
   * [parallelism and sharding](https://playwright.dev/docs/test-parallel) with Playwright Test.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   workers: 3,
   * });
   * ```
   *
   */
  workers'
      QuestionToken
      UnionType
        NumberKeyword
        StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' Config'
    TypeParameter
      Identifier: 'TestArgs'
      TypeLiteral
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeLiteral
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestConfig'
        TypeReference
          Identifier: 'TestArgs'
        TypeReference
          Identifier: ' WorkerArgs'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Metadata'
    TypeLiteral
      IndexSignature
        Parameter
          Identifier: 'key'
          StringKeyword
        AnyKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' FullConfig'
    TypeParameter
      Identifier: 'TestArgs'
      TypeLiteral
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeLiteral
    PropertySignature
      Identifier: '
  /**
   * List of resolved projects.
   */
  projects'
      ArrayType
        TypeReference
          Identifier: ' FullProject'
          TypeReference
            Identifier: 'TestArgs'
          TypeReference
            Identifier: ' WorkerArgs'
    PropertySignature
      Identifier: '
  /**
   * See [testConfig.reporter](https://playwright.dev/docs/api/class-testconfig#test-config-reporter).
   */
  reporter'
      ArrayType
        TypeReference
          Identifier: ' ReporterDescription'
    PropertySignature
      Identifier: '
  /**
   * See [testConfig.webServer](https://playwright.dev/docs/api/class-testconfig#test-config-web-server).
   */
  webServer'
      UnionType
        TypeReference
          Identifier: ' TestConfigWebServer'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
  /**
   * Path to the configuration file used to run the tests. The value is an empty string if no config file was used.
   */
  configFile'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.forbidOnly](https://playwright.dev/docs/api/class-testconfig#test-config-forbid-only).
   */
  forbidOnly'
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.fullyParallel](https://playwright.dev/docs/api/class-testconfig#test-config-fully-parallel).
   */
  fullyParallel'
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.globalSetup](https://playwright.dev/docs/api/class-testconfig#test-config-global-setup).
   */
  globalSetup'
      UnionType
        LiteralType
          NullKeyword
        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.globalTeardown](https://playwright.dev/docs/api/class-testconfig#test-config-global-teardown).
   */
  globalTeardown'
      UnionType
        LiteralType
          NullKeyword
        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.globalTimeout](https://playwright.dev/docs/api/class-testconfig#test-config-global-timeout).
   */
  globalTimeout'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.grep](https://playwright.dev/docs/api/class-testconfig#test-config-grep).
   */
  grep'
      UnionType
        TypeReference
          Identifier: ' RegExp'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.grepInvert](https://playwright.dev/docs/api/class-testconfig#test-config-grep-invert).
   */
  grepInvert'
      UnionType
        LiteralType
          NullKeyword
        TypeReference
          Identifier: 'RegExp'
        TypeReference
          Identifier: 'Array'
          TypeReference
            Identifier: 'RegExp'
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.maxFailures](https://playwright.dev/docs/api/class-testconfig#test-config-max-failures).
   */
  maxFailures'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.metadata](https://playwright.dev/docs/api/class-testconfig#test-config-metadata).
   */
  metadata'
      TypeReference
        Identifier: ' Metadata'
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.preserveOutput](https://playwright.dev/docs/api/class-testconfig#test-config-preserve-output).
   */
  preserveOutput'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.quiet](https://playwright.dev/docs/api/class-testconfig#test-config-quiet).
   */
  quiet'
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.reportSlowTests](https://playwright.dev/docs/api/class-testconfig#test-config-report-slow-tests).
   */
  reportSlowTests'
      UnionType
        LiteralType
          NullKeyword
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The maximum number of slow test files to report. Defaults to `5`.
     */
    max'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Test duration in milliseconds that is considered slow. Defaults to 15 seconds.
     */
    threshold'
            NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Base directory for all relative paths used in the reporters.
   */
  rootDir'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.shard](https://playwright.dev/docs/api/class-testconfig#test-config-shard).
   */
  shard'
      UnionType
        LiteralType
          NullKeyword
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The total number of shards.
     */
    total'
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * The index of the shard to execute, one-based.
     */
    current'
            NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.updateSnapshots](https://playwright.dev/docs/api/class-testconfig#test-config-update-snapshots).
   */
  updateSnapshots'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Playwright version.
   */
  version'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * See [testConfig.workers](https://playwright.dev/docs/api/class-testconfig#test-config-workers).
   */
  workers'
      NumberKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TestStatus'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    Identifier: ' TestDetailsAnnotation'
    TypeLiteral
      PropertySignature
        Identifier: '
  type'
        StringKeyword
      PropertySignature
        Identifier: '
  description'
        QuestionToken
        StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TestDetails'
    TypeLiteral
      PropertySignature
        Identifier: '
  tag'
        QuestionToken
        UnionType
          StringKeyword
          ArrayType
            StringKeyword
      PropertySignature
        Identifier: '
  annotation'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' TestDetailsAnnotation'
          ArrayType
            TypeReference
              Identifier: ' TestDetailsAnnotation'
  InterfaceDeclaration
    Identifier: ' SuiteFunction'
    CallSignature
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' callback'
        FunctionType
          VoidKeyword
      VoidKeyword
    CallSignature
      Parameter
        Identifier: 'callback'
        FunctionType
          VoidKeyword
      VoidKeyword
    CallSignature
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' details'
        TypeReference
          Identifier: ' TestDetails'
      Parameter
        Identifier: ' callback'
        FunctionType
          VoidKeyword
      VoidKeyword
  InterfaceDeclaration
    Identifier: ' TestFunction'
    TypeParameter
      Identifier: 'TestArgs'
    CallSignature
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' body'
        FunctionType
          Parameter
            Identifier: 'args'
            TypeReference
              Identifier: ' TestArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      VoidKeyword
    CallSignature
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' details'
        TypeReference
          Identifier: ' TestDetails'
      Parameter
        Identifier: ' body'
        FunctionType
          Parameter
            Identifier: 'args'
            TypeReference
              Identifier: ' TestArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TestType'
    TypeParameter
      Identifier: 'TestArgs'
      TypeReference
        Identifier: ' KeyValue'
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeReference
        Identifier: ' KeyValue'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' TestFunction'
        IntersectionType
          TypeReference
            Identifier: 'TestArgs'
          TypeReference
            Identifier: ' WorkerArgs'
    PropertySignature
      Identifier: '
  /**
   * Declares a focused test. If there are some focused tests or suites, all of them will be run but nothing else.
   * - `test.only(title, body)`
   * - `test.only(title, details, body)`
   *
   * **Usage**
   *
   * ```js
   * test.only('focus this test', async ({ page }) => {
   *   // Run only focused tests in the entire project.
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   */
  only'
      TypeReference
        Identifier: ' TestFunction'
        IntersectionType
          TypeReference
            Identifier: 'TestArgs'
          TypeReference
            Identifier: ' WorkerArgs'
    PropertySignature
      Identifier: '
  /**
   * Declares a group of tests.
   * - `test.describe(title, callback)`
   * - `test.describe(callback)`
   * - `test.describe(title, details, callback)`
   *
   * **Usage**
   *
   * You can declare a group of tests with a title. The title will be visible in the test report as a part of each
   * test's title.
   *
   * ```js
   * test.describe('two tests', () => {
   *   test('one', async ({ page }) => {
   *     // ...
   *   });
   *
   *   test('two', async ({ page }) => {
   *     // ...
   *   });
   * });
   * ```
   *
   * **Anonymous group**
   *
   * You can also declare a test group without a title. This is convenient to give a group of tests a common option with
   * [test.use(options)](https://playwright.dev/docs/api/class-test#test-use).
   *
   * ```js
   * test.describe(() => {
   *   test.use({ colorScheme: 'dark' });
   *
   *   test('one', async ({ page }) => {
   *     // ...
   *   });
   *
   *   test('two', async ({ page }) => {
   *     // ...
   *   });
   * });
   * ```
   *
   * **Tags**
   *
   * You can tag all tests in a group by providing additional details. Note that each tag must start with `@` symbol.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.describe('two tagged tests', {
   *   tag: '@smoke',
   * }, () => {
   *   test('one', async ({ page }) => {
   *     // ...
   *   });
   *
   *   test('two', async ({ page }) => {
   *     // ...
   *   });
   * });
   * ```
   *
   * Learn more about [tagging](https://playwright.dev/docs/test-annotations#tag-tests).
   *
   * **Annotations**
   *
   * You can annotate all tests in a group by providing additional details.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.describe('two annotated tests', {
   *   annotation: {
   *     type: 'issue',
   *     description: 'https://github.com/microsoft/playwright/issues/23180',
   *   },
   * }, () => {
   *   test('one', async ({ page }) => {
   *     // ...
   *   });
   *
   *   test('two', async ({ page }) => {
   *     // ...
   *   });
   * });
   * ```
   *
   * Learn more about [test annotations](https://playwright.dev/docs/test-annotations).
   * @param title Group title.
   * @param details Additional details for all tests in the group.
   * @param callback A callback that is run immediately when calling
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe). Any tests
   * declared in this callback will belong to the group.
   */
  describe'
      IntersectionType
        TypeReference
          Identifier: ' SuiteFunction'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
   * Declares a focused group of tests. If there are some focused tests or suites, all of them will be run but nothing
   * else.
   * - `test.describe.only(title, callback)`
   * - `test.describe.only(callback)`
   * - `test.describe.only(title, details, callback)`
   *
   * **Usage**
   *
   * ```js
   * test.describe.only('focused group', () => {
   *   test('in the focused group', async ({ page }) => {
   *     // This test will run
   *   });
   * });
   * test('not in the focused group', async ({ page }) => {
   *   // This test will not run
   * });
   * ```
   *
   * You can also omit the title.
   *
   * ```js
   * test.describe.only(() => {
   *   // ...
   * });
   * ```
   *
   * @param title Group title.
   * @param details See [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) for
   * details description.
   * @param callback A callback that is run immediately when calling
   * [test.describe.only([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-only).
   * Any tests added in this callback will belong to the group.
   */
  only'
            TypeReference
              Identifier: ' SuiteFunction'
          PropertySignature
            Identifier: '
    /**
   * Declares a skipped test group, similarly to
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe). Tests in the
   * skipped group are never run.
   * - `test.describe.skip(title, callback)`
   * - `test.describe.skip(title)`
   * - `test.describe.skip(title, details, callback)`
   *
   * **Usage**
   *
   * ```js
   * test.describe.skip('skipped group', () => {
   *   test('example', async ({ page }) => {
   *     // This test will not run
   *   });
   * });
   * ```
   *
   * You can also omit the title.
   *
   * ```js
   * test.describe.skip(() => {
   *   // ...
   * });
   * ```
   *
   * @param title Group title.
   * @param details See [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) for
   * details description.
   * @param callback A callback that is run immediately when calling
   * [test.describe.skip(title[, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-skip).
   * Any tests added in this callback will belong to the group, and will not be run.
   */
  skip'
            TypeReference
              Identifier: ' SuiteFunction'
          PropertySignature
            Identifier: '
    /**
   * Declares a test group similarly to
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe). Tests in
   * this group are marked as "fixme" and will not be executed.
   * - `test.describe.fixme(title, callback)`
   * - `test.describe.fixme(callback)`
   * - `test.describe.fixme(title, details, callback)`
   *
   * **Usage**
   *
   * ```js
   * test.describe.fixme('broken tests that should be fixed', () => {
   *   test('example', async ({ page }) => {
   *     // This test will not run
   *   });
   * });
   * ```
   *
   * You can also omit the title.
   *
   * ```js
   * test.describe.fixme(() => {
   *   // ...
   * });
   * ```
   *
   * @param title Group title.
   * @param details See [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) for
   * details description.
   * @param callback A callback that is run immediately when calling
   * [test.describe.fixme([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-fixme).
   * Any tests added in this callback will belong to the group, and will not be run.
   */
  fixme'
            TypeReference
              Identifier: ' SuiteFunction'
          PropertySignature
            Identifier: '
    /**
   * **NOTE** See [test.describe.configure([options])](https://playwright.dev/docs/api/class-test#test-describe-configure) for
   * the preferred way of configuring the execution mode.
   *
   * Declares a group of tests that should always be run serially. If one of the tests fails, all subsequent tests are
   * skipped. All tests in a group are retried together.
   *
   * **NOTE** Using serial is not recommended. It is usually better to make your tests isolated, so they can be run
   * independently.
   * - `test.describe.serial(title, callback)`
   * - `test.describe.serial(title)`
   * - `test.describe.serial(title, details, callback)`
   *
   * **Usage**
   *
   * ```js
   * test.describe.serial('group', () => {
   *   test('runs first', async ({ page }) => {});
   *   test('runs second', async ({ page }) => {});
   * });
   * ```
   *
   * You can also omit the title.
   *
   * ```js
   * test.describe.serial(() => {
   *   // ...
   * });
   * ```
   *
   * @param title Group title.
   * @param details See [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) for
   * details description.
   * @param callback A callback that is run immediately when calling
   * [test.describe.serial([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-serial).
   * Any tests added in this callback will belong to the group.
   */
  serial'
            IntersectionType
              TypeReference
                Identifier: ' SuiteFunction'
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
   * **NOTE** See [test.describe.configure([options])](https://playwright.dev/docs/api/class-test#test-describe-configure) for
   * the preferred way of configuring the execution mode.
   *
   * Declares a focused group of tests that should always be run serially. If one of the tests fails, all subsequent
   * tests are skipped. All tests in a group are retried together. If there are some focused tests or suites, all of
   * them will be run but nothing else.
   *
   * **NOTE** Using serial is not recommended. It is usually better to make your tests isolated, so they can be run
   * independently.
   * - `test.describe.serial.only(title, callback)`
   * - `test.describe.serial.only(title)`
   * - `test.describe.serial.only(title, details, callback)`
   *
   * **Usage**
   *
   * ```js
   * test.describe.serial.only('group', () => {
   *   test('runs first', async ({ page }) => {
   *   });
   *   test('runs second', async ({ page }) => {
   *   });
   * });
   * ```
   *
   * You can also omit the title.
   *
   * ```js
   * test.describe.serial.only(() => {
   *   // ...
   * });
   * ```
   *
   * @param title Group title.
   * @param details See [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) for
   * details description.
   * @param callback A callback that is run immediately when calling
   * [test.describe.serial.only(title[, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-serial-only).
   * Any tests added in this callback will belong to the group.
   */
  only'
                  TypeReference
                    Identifier: ' SuiteFunction'
          PropertySignature
            Identifier: '
    /**
   * **NOTE** See [test.describe.configure([options])](https://playwright.dev/docs/api/class-test#test-describe-configure) for
   * the preferred way of configuring the execution mode.
   *
   * Declares a group of tests that could be run in parallel. By default, tests in a single test file run one after
   * another, but using
   * [test.describe.parallel([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-parallel)
   * allows them to run in parallel.
   * - `test.describe.parallel(title, callback)`
   * - `test.describe.parallel(callback)`
   * - `test.describe.parallel(title, details, callback)`
   *
   * **Usage**
   *
   * ```js
   * test.describe.parallel('group', () => {
   *   test('runs in parallel 1', async ({ page }) => {});
   *   test('runs in parallel 2', async ({ page }) => {});
   * });
   * ```
   *
   * Note that parallel tests are executed in separate processes and cannot share any state or global variables. Each of
   * the parallel tests executes all relevant hooks.
   *
   * You can also omit the title.
   *
   * ```js
   * test.describe.parallel(() => {
   *   // ...
   * });
   * ```
   *
   * @param title Group title.
   * @param details See [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) for
   * details description.
   * @param callback A callback that is run immediately when calling
   * [test.describe.parallel([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-parallel).
   * Any tests added in this callback will belong to the group.
   */
  parallel'
            IntersectionType
              TypeReference
                Identifier: ' SuiteFunction'
              TypeLiteral
                PropertySignature
                  Identifier: '
      /**
   * **NOTE** See [test.describe.configure([options])](https://playwright.dev/docs/api/class-test#test-describe-configure) for
   * the preferred way of configuring the execution mode.
   *
   * Declares a focused group of tests that could be run in parallel. This is similar to
   * [test.describe.parallel([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-parallel),
   * but focuses the group. If there are some focused tests or suites, all of them will be run but nothing else.
   * - `test.describe.parallel.only(title, callback)`
   * - `test.describe.parallel.only(callback)`
   * - `test.describe.parallel.only(title, details, callback)`
   *
   * **Usage**
   *
   * ```js
   * test.describe.parallel.only('group', () => {
   *   test('runs in parallel 1', async ({ page }) => {});
   *   test('runs in parallel 2', async ({ page }) => {});
   * });
   * ```
   *
   * You can also omit the title.
   *
   * ```js
   * test.describe.parallel.only(() => {
   *   // ...
   * });
   * ```
   *
   * @param title Group title.
   * @param details See [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) for
   * details description.
   * @param callback A callback that is run immediately when calling
   * [test.describe.parallel.only([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe-parallel-only).
   * Any tests added in this callback will belong to the group.
   */
  only'
                  TypeReference
                    Identifier: ' SuiteFunction'
          PropertySignature
            Identifier: '
    /**
   * Configures the enclosing scope. Can be executed either on the top level or inside a describe. Configuration applies
   * to the entire scope, regardless of whether it run before or after the test declaration.
   *
   * Learn more about the execution modes [here](https://playwright.dev/docs/test-parallel).
   *
   * **Usage**
   * - Running tests in parallel.
   *
   *   ```js
   *   // Run all the tests in the file concurrently using parallel workers.
   *   test.describe.configure({ mode: 'parallel' });
   *   test('runs in parallel 1', async ({ page }) => {});
   *   test('runs in parallel 2', async ({ page }) => {});
   *   ```
   *
   * - Running tests serially, retrying from the start.
   *
   *   **NOTE** Running serially is not recommended. It is usually better to make your tests isolated, so they can be
   *   run independently.
   *
   *   ```js
   *   // Annotate tests as inter-dependent.
   *   test.describe.configure({ mode: 'serial' });
   *   test('runs first', async ({ page }) => {});
   *   test('runs second', async ({ page }) => {});
   *   ```
   *
   * - Configuring retries and timeout for each test.
   *
   *   ```js
   *   // Each test in the file will be retried twice and have a timeout of 20 seconds.
   *   test.describe.configure({ retries: 2, timeout: 20_000 });
   *   test('runs first', async ({ page }) => {});
   *   test('runs second', async ({ page }) => {});
   *   ```
   *
   * - Run multiple describes in parallel, but tests inside each describe in order.
   *
   *   ```js
   *   test.describe.configure({ mode: 'parallel' });
   *
   *   test.describe('A, runs in parallel with B', () => {
   *     test.describe.configure({ mode: 'default' });
   *     test('in order A1', async ({ page }) => {});
   *     test('in order A2', async ({ page }) => {});
   *   });
   *
   *   test.describe('B, runs in parallel with A', () => {
   *     test.describe.configure({ mode: 'default' });
   *     test('in order B1', async ({ page }) => {});
   *     test('in order B2', async ({ page }) => {});
   *   });
   *   ```
   *
   * @param options
   */
  configure'
            FunctionType
              Parameter
                Identifier: 'options'
                TypeLiteral
                  PropertySignature
                    Identifier: ' mode'
                    QuestionToken
                    UnionType
                      LiteralType
                        StringLiteral
                      LiteralType
                        StringLiteral
                      LiteralType
                        StringLiteral
                  PropertySignature
                    Identifier: ' retries'
                    QuestionToken
                    NumberKeyword
                  PropertySignature
                    Identifier: ' timeout'
                    QuestionToken
                    NumberKeyword
              VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Skip a test. Playwright will not run the test past the `test.skip()` call.
   *
   * Skipped tests are not supposed to be ever run. If you intent to fix the test, use
   * [test.fixme([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fixme)
   * instead.
   *
   * To declare a skipped test:
   * - `test.skip(title, body)`
   * - `test.skip(title, details, body)`
   *
   * To skip a test at runtime:
   * - `test.skip(condition, description)`
   * - `test.skip(callback, description)`
   * - `test.skip()`
   *
   * **Usage**
   *
   * You can declare a skipped test, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip('never run', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be skipped in some configurations, but not all, you can skip the test inside the test body
   * based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test,
   * but abort it immediately after the `test.skip` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('Safari-only test', async ({ page, browserName }) => {
   *   test.skip(browserName !== 'webkit', 'This feature is Safari-only');
   *   // ...
   * });
   * ```
   *
   * You can skip all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group based
   * on some condition with a single `test.skip(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');
   *
   * test('Safari-only test 1', async ({ page }) => {
   *   // ...
   * });
   * test('Safari-only test 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.skip()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.skip(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.skip();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  skip'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' body'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Skip a test. Playwright will not run the test past the `test.skip()` call.
   *
   * Skipped tests are not supposed to be ever run. If you intent to fix the test, use
   * [test.fixme([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fixme)
   * instead.
   *
   * To declare a skipped test:
   * - `test.skip(title, body)`
   * - `test.skip(title, details, body)`
   *
   * To skip a test at runtime:
   * - `test.skip(condition, description)`
   * - `test.skip(callback, description)`
   * - `test.skip()`
   *
   * **Usage**
   *
   * You can declare a skipped test, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip('never run', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be skipped in some configurations, but not all, you can skip the test inside the test body
   * based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test,
   * but abort it immediately after the `test.skip` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('Safari-only test', async ({ page, browserName }) => {
   *   test.skip(browserName !== 'webkit', 'This feature is Safari-only');
   *   // ...
   * });
   * ```
   *
   * You can skip all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group based
   * on some condition with a single `test.skip(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');
   *
   * test('Safari-only test 1', async ({ page }) => {
   *   // ...
   * });
   * test('Safari-only test 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.skip()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.skip(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.skip();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  skip'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' details'
        TypeReference
          Identifier: ' TestDetails'
      Parameter
        Identifier: ' body'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Skip a test. Playwright will not run the test past the `test.skip()` call.
   *
   * Skipped tests are not supposed to be ever run. If you intent to fix the test, use
   * [test.fixme([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fixme)
   * instead.
   *
   * To declare a skipped test:
   * - `test.skip(title, body)`
   * - `test.skip(title, details, body)`
   *
   * To skip a test at runtime:
   * - `test.skip(condition, description)`
   * - `test.skip(callback, description)`
   * - `test.skip()`
   *
   * **Usage**
   *
   * You can declare a skipped test, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip('never run', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be skipped in some configurations, but not all, you can skip the test inside the test body
   * based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test,
   * but abort it immediately after the `test.skip` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('Safari-only test', async ({ page, browserName }) => {
   *   test.skip(browserName !== 'webkit', 'This feature is Safari-only');
   *   // ...
   * });
   * ```
   *
   * You can skip all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group based
   * on some condition with a single `test.skip(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');
   *
   * test('Safari-only test 1', async ({ page }) => {
   *   // ...
   * });
   * test('Safari-only test 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.skip()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.skip(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.skip();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  skip'
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Skip a test. Playwright will not run the test past the `test.skip()` call.
   *
   * Skipped tests are not supposed to be ever run. If you intent to fix the test, use
   * [test.fixme([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fixme)
   * instead.
   *
   * To declare a skipped test:
   * - `test.skip(title, body)`
   * - `test.skip(title, details, body)`
   *
   * To skip a test at runtime:
   * - `test.skip(condition, description)`
   * - `test.skip(callback, description)`
   * - `test.skip()`
   *
   * **Usage**
   *
   * You can declare a skipped test, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip('never run', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be skipped in some configurations, but not all, you can skip the test inside the test body
   * based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test,
   * but abort it immediately after the `test.skip` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('Safari-only test', async ({ page, browserName }) => {
   *   test.skip(browserName !== 'webkit', 'This feature is Safari-only');
   *   // ...
   * });
   * ```
   *
   * You can skip all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group based
   * on some condition with a single `test.skip(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');
   *
   * test('Safari-only test 1', async ({ page }) => {
   *   // ...
   * });
   * test('Safari-only test 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.skip()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.skip(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.skip();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  skip'
      Parameter
        Identifier: 'condition'
        BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Skip a test. Playwright will not run the test past the `test.skip()` call.
   *
   * Skipped tests are not supposed to be ever run. If you intent to fix the test, use
   * [test.fixme([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fixme)
   * instead.
   *
   * To declare a skipped test:
   * - `test.skip(title, body)`
   * - `test.skip(title, details, body)`
   *
   * To skip a test at runtime:
   * - `test.skip(condition, description)`
   * - `test.skip(callback, description)`
   * - `test.skip()`
   *
   * **Usage**
   *
   * You can declare a skipped test, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip('never run', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be skipped in some configurations, but not all, you can skip the test inside the test body
   * based on some condition. We recommend passing a `description` argument in this case. Playwright will run the test,
   * but abort it immediately after the `test.skip` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('Safari-only test', async ({ page, browserName }) => {
   *   test.skip(browserName !== 'webkit', 'This feature is Safari-only');
   *   // ...
   * });
   * ```
   *
   * You can skip all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group based
   * on some condition with a single `test.skip(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.skip(({ browserName }) => browserName !== 'webkit', 'Safari-only');
   *
   * test('Safari-only test 1', async ({ page }) => {
   *   // ...
   * });
   * test('Safari-only test 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.skip()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.skip(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.skip();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  skip'
      Parameter
        Identifier: 'callback'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Mark a test as "fixme", with the intention to fix it. Playwright will not run the test past the `test.fixme()`
   * call.
   *
   * To declare a "fixme" test:
   * - `test.fixme(title, body)`
   * - `test.fixme(title, details, body)`
   *
   * To annotate test as "fixme" at runtime:
   * - `test.fixme(condition, description)`
   * - `test.fixme(callback, description)`
   * - `test.fixme()`
   *
   * **Usage**
   *
   * You can declare a test as to be fixed, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme('to be fixed', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be fixed in some configurations, but not all, you can mark the test as "fixme" inside the test
   * body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the
   * test, but abort it immediately after the `test.fixme` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('to be fixed in Safari', async ({ page, browserName }) => {
   *   test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "fixme" based on some condition with a single `test.fixme(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');
   *
   * test('to be fixed in Safari 1', async ({ page }) => {
   *   // ...
   * });
   * test('to be fixed in Safari 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fixme()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.fixme(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fixme();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fixme'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' body'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Mark a test as "fixme", with the intention to fix it. Playwright will not run the test past the `test.fixme()`
   * call.
   *
   * To declare a "fixme" test:
   * - `test.fixme(title, body)`
   * - `test.fixme(title, details, body)`
   *
   * To annotate test as "fixme" at runtime:
   * - `test.fixme(condition, description)`
   * - `test.fixme(callback, description)`
   * - `test.fixme()`
   *
   * **Usage**
   *
   * You can declare a test as to be fixed, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme('to be fixed', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be fixed in some configurations, but not all, you can mark the test as "fixme" inside the test
   * body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the
   * test, but abort it immediately after the `test.fixme` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('to be fixed in Safari', async ({ page, browserName }) => {
   *   test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "fixme" based on some condition with a single `test.fixme(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');
   *
   * test('to be fixed in Safari 1', async ({ page }) => {
   *   // ...
   * });
   * test('to be fixed in Safari 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fixme()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.fixme(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fixme();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fixme'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' details'
        TypeReference
          Identifier: ' TestDetails'
      Parameter
        Identifier: ' body'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Mark a test as "fixme", with the intention to fix it. Playwright will not run the test past the `test.fixme()`
   * call.
   *
   * To declare a "fixme" test:
   * - `test.fixme(title, body)`
   * - `test.fixme(title, details, body)`
   *
   * To annotate test as "fixme" at runtime:
   * - `test.fixme(condition, description)`
   * - `test.fixme(callback, description)`
   * - `test.fixme()`
   *
   * **Usage**
   *
   * You can declare a test as to be fixed, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme('to be fixed', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be fixed in some configurations, but not all, you can mark the test as "fixme" inside the test
   * body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the
   * test, but abort it immediately after the `test.fixme` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('to be fixed in Safari', async ({ page, browserName }) => {
   *   test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "fixme" based on some condition with a single `test.fixme(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');
   *
   * test('to be fixed in Safari 1', async ({ page }) => {
   *   // ...
   * });
   * test('to be fixed in Safari 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fixme()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.fixme(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fixme();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fixme'
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Mark a test as "fixme", with the intention to fix it. Playwright will not run the test past the `test.fixme()`
   * call.
   *
   * To declare a "fixme" test:
   * - `test.fixme(title, body)`
   * - `test.fixme(title, details, body)`
   *
   * To annotate test as "fixme" at runtime:
   * - `test.fixme(condition, description)`
   * - `test.fixme(callback, description)`
   * - `test.fixme()`
   *
   * **Usage**
   *
   * You can declare a test as to be fixed, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme('to be fixed', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be fixed in some configurations, but not all, you can mark the test as "fixme" inside the test
   * body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the
   * test, but abort it immediately after the `test.fixme` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('to be fixed in Safari', async ({ page, browserName }) => {
   *   test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "fixme" based on some condition with a single `test.fixme(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');
   *
   * test('to be fixed in Safari 1', async ({ page }) => {
   *   // ...
   * });
   * test('to be fixed in Safari 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fixme()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.fixme(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fixme();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fixme'
      Parameter
        Identifier: 'condition'
        BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Mark a test as "fixme", with the intention to fix it. Playwright will not run the test past the `test.fixme()`
   * call.
   *
   * To declare a "fixme" test:
   * - `test.fixme(title, body)`
   * - `test.fixme(title, details, body)`
   *
   * To annotate test as "fixme" at runtime:
   * - `test.fixme(condition, description)`
   * - `test.fixme(callback, description)`
   * - `test.fixme()`
   *
   * **Usage**
   *
   * You can declare a test as to be fixed, and Playwright will not run it.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme('to be fixed', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test should be fixed in some configurations, but not all, you can mark the test as "fixme" inside the test
   * body based on some condition. We recommend passing a `description` argument in this case. Playwright will run the
   * test, but abort it immediately after the `test.fixme` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('to be fixed in Safari', async ({ page, browserName }) => {
   *   test.fixme(browserName === 'webkit', 'This feature breaks in Safari for some reason');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "fixme" based on some condition with a single `test.fixme(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fixme(({ browserName }) => browserName === 'webkit', 'Should figure out the issue');
   *
   * test('to be fixed in Safari 1', async ({ page }) => {
   *   // ...
   * });
   * test('to be fixed in Safari 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fixme()` without arguments inside the test body to always mark the test as failed. We
   * recommend using `test.fixme(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fixme();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fixme'
      Parameter
        Identifier: 'callback'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Marks a test as "should fail". Playwright runs this test and ensures that it is actually failing. This is useful
   * for documentation purposes to acknowledge that some functionality is broken until it is fixed.
   *
   * To declare a "failing" test:
   * - `test.fail(title, body)`
   * - `test.fail(title, details, body)`
   *
   * To annotate test as "failing" at runtime:
   * - `test.fail(condition, description)`
   * - `test.fail(callback, description)`
   * - `test.fail()`
   *
   * **Usage**
   *
   * You can declare a test as failing, so that Playwright ensures it actually fails.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail('not yet ready', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test fails in some configurations, but not all, you can mark the test as failing inside the test body based
   * on some condition. We recommend passing a `description` argument in this case.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('fail in WebKit', async ({ page, browserName }) => {
   *   test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "should fail" based on some condition with a single `test.fail(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail(({ browserName }) => browserName === 'webkit', 'not implemented yet');
   *
   * test('fail in WebKit 1', async ({ page }) => {
   *   // ...
   * });
   * test('fail in WebKit 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fail()` without arguments inside the test body to always mark the test as failed. We
   * recommend declaring a failing test with `test.fail(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fail();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fail'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' body'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Marks a test as "should fail". Playwright runs this test and ensures that it is actually failing. This is useful
   * for documentation purposes to acknowledge that some functionality is broken until it is fixed.
   *
   * To declare a "failing" test:
   * - `test.fail(title, body)`
   * - `test.fail(title, details, body)`
   *
   * To annotate test as "failing" at runtime:
   * - `test.fail(condition, description)`
   * - `test.fail(callback, description)`
   * - `test.fail()`
   *
   * **Usage**
   *
   * You can declare a test as failing, so that Playwright ensures it actually fails.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail('not yet ready', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test fails in some configurations, but not all, you can mark the test as failing inside the test body based
   * on some condition. We recommend passing a `description` argument in this case.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('fail in WebKit', async ({ page, browserName }) => {
   *   test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "should fail" based on some condition with a single `test.fail(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail(({ browserName }) => browserName === 'webkit', 'not implemented yet');
   *
   * test('fail in WebKit 1', async ({ page }) => {
   *   // ...
   * });
   * test('fail in WebKit 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fail()` without arguments inside the test body to always mark the test as failed. We
   * recommend declaring a failing test with `test.fail(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fail();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fail'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' details'
        TypeReference
          Identifier: ' TestDetails'
      Parameter
        Identifier: ' body'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Marks a test as "should fail". Playwright runs this test and ensures that it is actually failing. This is useful
   * for documentation purposes to acknowledge that some functionality is broken until it is fixed.
   *
   * To declare a "failing" test:
   * - `test.fail(title, body)`
   * - `test.fail(title, details, body)`
   *
   * To annotate test as "failing" at runtime:
   * - `test.fail(condition, description)`
   * - `test.fail(callback, description)`
   * - `test.fail()`
   *
   * **Usage**
   *
   * You can declare a test as failing, so that Playwright ensures it actually fails.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail('not yet ready', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test fails in some configurations, but not all, you can mark the test as failing inside the test body based
   * on some condition. We recommend passing a `description` argument in this case.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('fail in WebKit', async ({ page, browserName }) => {
   *   test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "should fail" based on some condition with a single `test.fail(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail(({ browserName }) => browserName === 'webkit', 'not implemented yet');
   *
   * test('fail in WebKit 1', async ({ page }) => {
   *   // ...
   * });
   * test('fail in WebKit 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fail()` without arguments inside the test body to always mark the test as failed. We
   * recommend declaring a failing test with `test.fail(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fail();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fail'
      Parameter
        Identifier: 'condition'
        BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Marks a test as "should fail". Playwright runs this test and ensures that it is actually failing. This is useful
   * for documentation purposes to acknowledge that some functionality is broken until it is fixed.
   *
   * To declare a "failing" test:
   * - `test.fail(title, body)`
   * - `test.fail(title, details, body)`
   *
   * To annotate test as "failing" at runtime:
   * - `test.fail(condition, description)`
   * - `test.fail(callback, description)`
   * - `test.fail()`
   *
   * **Usage**
   *
   * You can declare a test as failing, so that Playwright ensures it actually fails.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail('not yet ready', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test fails in some configurations, but not all, you can mark the test as failing inside the test body based
   * on some condition. We recommend passing a `description` argument in this case.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('fail in WebKit', async ({ page, browserName }) => {
   *   test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "should fail" based on some condition with a single `test.fail(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail(({ browserName }) => browserName === 'webkit', 'not implemented yet');
   *
   * test('fail in WebKit 1', async ({ page }) => {
   *   // ...
   * });
   * test('fail in WebKit 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fail()` without arguments inside the test body to always mark the test as failed. We
   * recommend declaring a failing test with `test.fail(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fail();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fail'
      Parameter
        Identifier: 'callback'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Marks a test as "should fail". Playwright runs this test and ensures that it is actually failing. This is useful
   * for documentation purposes to acknowledge that some functionality is broken until it is fixed.
   *
   * To declare a "failing" test:
   * - `test.fail(title, body)`
   * - `test.fail(title, details, body)`
   *
   * To annotate test as "failing" at runtime:
   * - `test.fail(condition, description)`
   * - `test.fail(callback, description)`
   * - `test.fail()`
   *
   * **Usage**
   *
   * You can declare a test as failing, so that Playwright ensures it actually fails.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail('not yet ready', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * If your test fails in some configurations, but not all, you can mark the test as failing inside the test body based
   * on some condition. We recommend passing a `description` argument in this case.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('fail in WebKit', async ({ page, browserName }) => {
   *   test.fail(browserName === 'webkit', 'This feature is not implemented for Mac yet');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "should fail" based on some condition with a single `test.fail(callback, description)` call.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.fail(({ browserName }) => browserName === 'webkit', 'not implemented yet');
   *
   * test('fail in WebKit 1', async ({ page }) => {
   *   // ...
   * });
   * test('fail in WebKit 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * You can also call `test.fail()` without arguments inside the test body to always mark the test as failed. We
   * recommend declaring a failing test with `test.fail(title, body)` instead.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('less readable', async ({ page }) => {
   *   test.fail();
   *   // ...
   * });
   * ```
   *
   * @param title Test title.
   * @param details See [test.(call)(title[, details, body])](https://playwright.dev/docs/api/class-test#test-call) for test details
   * description.
   * @param body Test body that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param callback A function that returns whether to mark as "should fail", based on test fixtures. Test or tests are marked as
   * "should fail" when the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fail'
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Marks a test as "slow". Slow test will be given triple the default timeout.
   *
   * Note that [test.slow([condition, callback, description])](https://playwright.dev/docs/api/class-test#test-slow)
   * cannot be used in a `beforeAll` or `afterAll` hook. Use
   * [test.setTimeout(timeout)](https://playwright.dev/docs/api/class-test#test-set-timeout) instead.
   * - `test.slow()`
   * - `test.slow(condition, description)`
   * - `test.slow(callback, description)`
   *
   * **Usage**
   *
   * You can mark a test as slow by calling `test.slow()` inside the test body.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('slow test', async ({ page }) => {
   *   test.slow();
   *   // ...
   * });
   * ```
   *
   * If your test is slow in some configurations, but not all, you can mark it as slow based on a condition. We
   * recommend passing a `description` argument in this case.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('slow in Safari', async ({ page, browserName }) => {
   *   test.slow(browserName === 'webkit', 'This feature is slow in Safari');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "slow" based on some condition by passing a callback.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.slow(({ browserName }) => browserName === 'webkit', 'all tests are slow in Safari');
   *
   * test('slow in Safari 1', async ({ page }) => {
   *   // ...
   * });
   * test('fail in Safari 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * @param condition Test is marked as "slow" when the condition is `true`.
   * @param callback A function that returns whether to mark as "slow", based on test fixtures. Test or tests are marked as "slow" when
   * the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  slow'
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Marks a test as "slow". Slow test will be given triple the default timeout.
   *
   * Note that [test.slow([condition, callback, description])](https://playwright.dev/docs/api/class-test#test-slow)
   * cannot be used in a `beforeAll` or `afterAll` hook. Use
   * [test.setTimeout(timeout)](https://playwright.dev/docs/api/class-test#test-set-timeout) instead.
   * - `test.slow()`
   * - `test.slow(condition, description)`
   * - `test.slow(callback, description)`
   *
   * **Usage**
   *
   * You can mark a test as slow by calling `test.slow()` inside the test body.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('slow test', async ({ page }) => {
   *   test.slow();
   *   // ...
   * });
   * ```
   *
   * If your test is slow in some configurations, but not all, you can mark it as slow based on a condition. We
   * recommend passing a `description` argument in this case.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('slow in Safari', async ({ page, browserName }) => {
   *   test.slow(browserName === 'webkit', 'This feature is slow in Safari');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "slow" based on some condition by passing a callback.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.slow(({ browserName }) => browserName === 'webkit', 'all tests are slow in Safari');
   *
   * test('slow in Safari 1', async ({ page }) => {
   *   // ...
   * });
   * test('fail in Safari 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * @param condition Test is marked as "slow" when the condition is `true`.
   * @param callback A function that returns whether to mark as "slow", based on test fixtures. Test or tests are marked as "slow" when
   * the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  slow'
      Parameter
        Identifier: 'condition'
        BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Marks a test as "slow". Slow test will be given triple the default timeout.
   *
   * Note that [test.slow([condition, callback, description])](https://playwright.dev/docs/api/class-test#test-slow)
   * cannot be used in a `beforeAll` or `afterAll` hook. Use
   * [test.setTimeout(timeout)](https://playwright.dev/docs/api/class-test#test-set-timeout) instead.
   * - `test.slow()`
   * - `test.slow(condition, description)`
   * - `test.slow(callback, description)`
   *
   * **Usage**
   *
   * You can mark a test as slow by calling `test.slow()` inside the test body.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('slow test', async ({ page }) => {
   *   test.slow();
   *   // ...
   * });
   * ```
   *
   * If your test is slow in some configurations, but not all, you can mark it as slow based on a condition. We
   * recommend passing a `description` argument in this case.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('slow in Safari', async ({ page, browserName }) => {
   *   test.slow(browserName === 'webkit', 'This feature is slow in Safari');
   *   // ...
   * });
   * ```
   *
   * You can mark all tests in a file or
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group as
   * "slow" based on some condition by passing a callback.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.slow(({ browserName }) => browserName === 'webkit', 'all tests are slow in Safari');
   *
   * test('slow in Safari 1', async ({ page }) => {
   *   // ...
   * });
   * test('fail in Safari 2', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * @param condition Test is marked as "slow" when the condition is `true`.
   * @param callback A function that returns whether to mark as "slow", based on test fixtures. Test or tests are marked as "slow" when
   * the return value is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  slow'
      Parameter
        Identifier: 'callback'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Changes the timeout for the test. Zero means no timeout. Learn more about [various timeouts](https://playwright.dev/docs/test-timeouts).
   *
   * Timeout for the currently running test is available through
   * [testInfo.timeout](https://playwright.dev/docs/api/class-testinfo#test-info-timeout).
   *
   * **Usage**
   * - Changing test timeout.
   *
   *   ```js
   *   test('very slow test', async ({ page }) => {
   *     test.setTimeout(120000);
   *     // ...
   *   });
   *   ```
   *
   * - Changing timeout from a slow `beforeEach` or `afterEach` hook. Note that this affects the test timeout that is
   *   shared with `beforeEach`/`afterEach` hooks.
   *
   *   ```js
   *   test.beforeEach(async ({ page }, testInfo) => {
   *     // Extend timeout for all tests running this hook by 30 seconds.
   *     test.setTimeout(testInfo.timeout + 30000);
   *   });
   *   ```
   *
   * - Changing timeout for a `beforeAll` or `afterAll` hook. Note this affects the hook's timeout, not the test
   *   timeout.
   *
   *   ```js
   *   test.beforeAll(async () => {
   *     // Set timeout for this hook.
   *     test.setTimeout(60000);
   *   });
   *   ```
   *
   * - Changing timeout for all tests in a
   *   [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group.
   *
   *   ```js
   *   test.describe('group', () => {
   *     // Applies to all tests in this group.
   *     test.describe.configure({ timeout: 60000 });
   *
   *     test('test one', async () => { /* ... *\/ });
   *     test('test two', async () => { /* ... *\/ });
   *     test('test three', async () => { /* ... *\/ });
   *   });
   *   ```
   *
   * @param timeout Timeout in milliseconds.
   */
  setTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares a `beforeEach` hook that is executed before each test.
   *
   * When called in the scope of a test file, runs before each test in the file. When called inside a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group, runs
   * before each test in the group.
   *
   * You can access all the same {@link Fixtures} as the test body itself, and also the {@link TestInfo} object that
   * gives a lot of useful information. For example, you can navigate the page before starting the test.
   *
   * You can use [test.afterEach([title, hookFunction])](https://playwright.dev/docs/api/class-test#test-after-each) to
   * teardown any resources set up in `beforeEach`.
   * - `test.beforeEach(hookFunction)`
   * - `test.beforeEach(title, hookFunction)`
   *
   * **Details**
   *
   * When multiple `beforeEach` hooks are added, they will run in the order of their registration.
   *
   * Playwright will continue running all applicable hooks even if some of them have failed.
   *
   * **Usage**
   *
   * ```js
   * // example.spec.ts
   * import { test, expect } from '@playwright/test';
   *
   * test.beforeEach(async ({ page }) => {
   *   console.log(`Running ${test.info().title}`);
   *   await page.goto('https://my.start.url/');
   * });
   *
   * test('my test', async ({ page }) => {
   *   expect(page.url()).toBe('https://my.start.url/');
   * });
   * ```
   *
   * Alternatively, you can declare a hook **with a title**.
   *
   * ```js
   * // example.spec.ts
   * test.beforeEach('Open start URL', async ({ page }) => {
   *   console.log(`Running ${test.info().title}`);
   *   await page.goto('https://my.start.url/');
   * });
   * ```
   *
   * @param title Hook title.
   * @param hookFunction Hook function that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   */
  beforeEach'
      Parameter
        Identifier: 'inner'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
            AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares a `beforeEach` hook that is executed before each test.
   *
   * When called in the scope of a test file, runs before each test in the file. When called inside a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group, runs
   * before each test in the group.
   *
   * You can access all the same {@link Fixtures} as the test body itself, and also the {@link TestInfo} object that
   * gives a lot of useful information. For example, you can navigate the page before starting the test.
   *
   * You can use [test.afterEach([title, hookFunction])](https://playwright.dev/docs/api/class-test#test-after-each) to
   * teardown any resources set up in `beforeEach`.
   * - `test.beforeEach(hookFunction)`
   * - `test.beforeEach(title, hookFunction)`
   *
   * **Details**
   *
   * When multiple `beforeEach` hooks are added, they will run in the order of their registration.
   *
   * Playwright will continue running all applicable hooks even if some of them have failed.
   *
   * **Usage**
   *
   * ```js
   * // example.spec.ts
   * import { test, expect } from '@playwright/test';
   *
   * test.beforeEach(async ({ page }) => {
   *   console.log(`Running ${test.info().title}`);
   *   await page.goto('https://my.start.url/');
   * });
   *
   * test('my test', async ({ page }) => {
   *   expect(page.url()).toBe('https://my.start.url/');
   * });
   * ```
   *
   * Alternatively, you can declare a hook **with a title**.
   *
   * ```js
   * // example.spec.ts
   * test.beforeEach('Open start URL', async ({ page }) => {
   *   console.log(`Running ${test.info().title}`);
   *   await page.goto('https://my.start.url/');
   * });
   * ```
   *
   * @param title Hook title.
   * @param hookFunction Hook function that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   */
  beforeEach'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' inner'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
            AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares an `afterEach` hook that is executed after each test.
   *
   * When called in the scope of a test file, runs after each test in the file. When called inside a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group, runs
   * after each test in the group.
   *
   * You can access all the same {@link Fixtures} as the test body itself, and also the {@link TestInfo} object that
   * gives a lot of useful information. For example, you can check whether the test succeeded or failed.
   * - `test.afterEach(hookFunction)`
   * - `test.afterEach(title, hookFunction)`
   *
   * **Details**
   *
   * When multiple `afterEach` hooks are added, they will run in the order of their registration.
   *
   * Playwright will continue running all applicable hooks even if some of them have failed.
   *
   * **Usage**
   *
   * ```js
   * // example.spec.ts
   * import { test, expect } from '@playwright/test';
   *
   * test.afterEach(async ({ page }) => {
   *   console.log(`Finished ${test.info().title} with status ${test.info().status}`);
   *
   *   if (test.info().status !== test.info().expectedStatus)
   *     console.log(`Did not run as expected, ended up at ${page.url()}`);
   * });
   *
   * test('my test', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * Alternatively, you can declare a hook **with a title**.
   *
   * ```js
   * // example.spec.ts
   * test.afterEach('Status check', async ({ page }) => {
   *   if (test.info().status !== test.info().expectedStatus)
   *     console.log(`Did not run as expected, ended up at ${page.url()}`);
   * });
   * ```
   *
   * @param title Hook title.
   * @param hookFunction Hook function that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   */
  afterEach'
      Parameter
        Identifier: 'inner'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
            AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares an `afterEach` hook that is executed after each test.
   *
   * When called in the scope of a test file, runs after each test in the file. When called inside a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group, runs
   * after each test in the group.
   *
   * You can access all the same {@link Fixtures} as the test body itself, and also the {@link TestInfo} object that
   * gives a lot of useful information. For example, you can check whether the test succeeded or failed.
   * - `test.afterEach(hookFunction)`
   * - `test.afterEach(title, hookFunction)`
   *
   * **Details**
   *
   * When multiple `afterEach` hooks are added, they will run in the order of their registration.
   *
   * Playwright will continue running all applicable hooks even if some of them have failed.
   *
   * **Usage**
   *
   * ```js
   * // example.spec.ts
   * import { test, expect } from '@playwright/test';
   *
   * test.afterEach(async ({ page }) => {
   *   console.log(`Finished ${test.info().title} with status ${test.info().status}`);
   *
   *   if (test.info().status !== test.info().expectedStatus)
   *     console.log(`Did not run as expected, ended up at ${page.url()}`);
   * });
   *
   * test('my test', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * Alternatively, you can declare a hook **with a title**.
   *
   * ```js
   * // example.spec.ts
   * test.afterEach('Status check', async ({ page }) => {
   *   if (test.info().status !== test.info().expectedStatus)
   *     console.log(`Did not run as expected, ended up at ${page.url()}`);
   * });
   * ```
   *
   * @param title Hook title.
   * @param hookFunction Hook function that takes one or two arguments: an object with fixtures and optional {@link TestInfo}.
   */
  afterEach'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' inner'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
            AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares a `beforeAll` hook that is executed once per worker process before all tests.
   *
   * When called in the scope of a test file, runs before all tests in the file. When called inside a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group, runs
   * before all tests in the group.
   *
   * You can use [test.afterAll([title, hookFunction])](https://playwright.dev/docs/api/class-test#test-after-all) to
   * teardown any resources set up in `beforeAll`.
   * - `test.beforeAll(hookFunction)`
   * - `test.beforeAll(title, hookFunction)`
   *
   * **Details**
   *
   * When multiple `beforeAll` hooks are added, they will run in the order of their registration.
   *
   * Note that worker process is restarted on test failures, and `beforeAll` hook runs again in the new worker. Learn
   * more about [workers and failures](https://playwright.dev/docs/test-retries).
   *
   * Playwright will continue running all applicable hooks even if some of them have failed.
   *
   * **Usage**
   *
   * ```js
   * // example.spec.ts
   * import { test, expect } from '@playwright/test';
   *
   * test.beforeAll(async () => {
   *   console.log('Before tests');
   * });
   *
   * test.afterAll(async () => {
   *   console.log('After tests');
   * });
   *
   * test('my test', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * Alternatively, you can declare a hook **with a title**.
   *
   * ```js
   * // example.spec.ts
   * test.beforeAll('Setup', async () => {
   *   console.log('Before tests');
   * });
   * ```
   *
   * @param title Hook title.
   * @param hookFunction Hook function that takes one or two arguments: an object with worker fixtures and optional {@link TestInfo}.
   */
  beforeAll'
      Parameter
        Identifier: 'inner'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
            AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares a `beforeAll` hook that is executed once per worker process before all tests.
   *
   * When called in the scope of a test file, runs before all tests in the file. When called inside a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group, runs
   * before all tests in the group.
   *
   * You can use [test.afterAll([title, hookFunction])](https://playwright.dev/docs/api/class-test#test-after-all) to
   * teardown any resources set up in `beforeAll`.
   * - `test.beforeAll(hookFunction)`
   * - `test.beforeAll(title, hookFunction)`
   *
   * **Details**
   *
   * When multiple `beforeAll` hooks are added, they will run in the order of their registration.
   *
   * Note that worker process is restarted on test failures, and `beforeAll` hook runs again in the new worker. Learn
   * more about [workers and failures](https://playwright.dev/docs/test-retries).
   *
   * Playwright will continue running all applicable hooks even if some of them have failed.
   *
   * **Usage**
   *
   * ```js
   * // example.spec.ts
   * import { test, expect } from '@playwright/test';
   *
   * test.beforeAll(async () => {
   *   console.log('Before tests');
   * });
   *
   * test.afterAll(async () => {
   *   console.log('After tests');
   * });
   *
   * test('my test', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   * Alternatively, you can declare a hook **with a title**.
   *
   * ```js
   * // example.spec.ts
   * test.beforeAll('Setup', async () => {
   *   console.log('Before tests');
   * });
   * ```
   *
   * @param title Hook title.
   * @param hookFunction Hook function that takes one or two arguments: an object with worker fixtures and optional {@link TestInfo}.
   */
  beforeAll'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' inner'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
            AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares an `afterAll` hook that is executed once per worker after all tests.
   *
   * When called in the scope of a test file, runs after all tests in the file. When called inside a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group, runs
   * after all tests in the group.
   *
   * **Details**
   *
   * When multiple `afterAll` hooks are added, they will run in the order of their registration.
   *
   * Note that worker process is restarted on test failures, and `afterAll` hook runs again in the new worker. Learn
   * more about [workers and failures](https://playwright.dev/docs/test-retries).
   *
   * Playwright will continue running all applicable hooks even if some of them have failed.
   * - `test.afterAll(hookFunction)`
   * - `test.afterAll(title, hookFunction)`
   *
   * **Usage**
   *
   * ```js
   * test.afterAll(async () => {
   *   console.log('Done with tests');
   *   // ...
   * });
   * ```
   *
   * Alternatively, you can declare a hook **with a title**.
   *
   * ```js
   * test.afterAll('Teardown', async () => {
   *   console.log('Done with tests');
   *   // ...
   * });
   * ```
   *
   * @param title Hook title.
   * @param hookFunction Hook function that takes one or two arguments: an object with worker fixtures and optional {@link TestInfo}.
   */
  afterAll'
      Parameter
        Identifier: 'inner'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
            AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares an `afterAll` hook that is executed once per worker after all tests.
   *
   * When called in the scope of a test file, runs after all tests in the file. When called inside a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group, runs
   * after all tests in the group.
   *
   * **Details**
   *
   * When multiple `afterAll` hooks are added, they will run in the order of their registration.
   *
   * Note that worker process is restarted on test failures, and `afterAll` hook runs again in the new worker. Learn
   * more about [workers and failures](https://playwright.dev/docs/test-retries).
   *
   * Playwright will continue running all applicable hooks even if some of them have failed.
   * - `test.afterAll(hookFunction)`
   * - `test.afterAll(title, hookFunction)`
   *
   * **Usage**
   *
   * ```js
   * test.afterAll(async () => {
   *   console.log('Done with tests');
   *   // ...
   * });
   * ```
   *
   * Alternatively, you can declare a hook **with a title**.
   *
   * ```js
   * test.afterAll('Teardown', async () => {
   *   console.log('Done with tests');
   *   // ...
   * });
   * ```
   *
   * @param title Hook title.
   * @param hookFunction Hook function that takes one or two arguments: an object with worker fixtures and optional {@link TestInfo}.
   */
  afterAll'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' inner'
        FunctionType
          Parameter
            Identifier: 'args'
            IntersectionType
              TypeReference
                Identifier: ' TestArgs'
              TypeReference
                Identifier: ' WorkerArgs'
          Parameter
            Identifier: ' testInfo'
            TypeReference
              Identifier: ' TestInfo'
          UnionType
            TypeReference
              Identifier: ' Promise'
              AnyKeyword
            AnyKeyword
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Specifies options or fixtures to use in a single test file or a
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) group. Most
   * useful to set an option, for example set `locale` to configure `context` fixture.
   *
   * **Usage**
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.use({ locale: 'en-US' });
   *
   * test('test with locale', async ({ page }) => {
   *   // Default context and page have locale as specified
   * });
   * ```
   *
   * **Details**
   *
   * `test.use` can be called either in the global scope or inside `test.describe`. It is an error to call it within
   * `beforeEach` or `beforeAll`.
   *
   * It is also possible to override a fixture by providing a function.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.use({
   *   locale: async ({}, use) => {
   *     // Read locale from some configuration file.
   *     const locale = await fs.promises.readFile('test-locale', 'utf-8');
   *     await use(locale);
   *   },
   * });
   *
   * test('test with locale', async ({ page }) => {
   *   // Default context and page have locale as specified
   * });
   * ```
   *
   * @param options An object with local options.
   */
  use'
      Parameter
        Identifier: 'fixtures'
        TypeReference
          Identifier: ' Fixtures'
          TypeLiteral
          TypeLiteral
          TypeReference
            Identifier: ' TestArgs'
          TypeReference
            Identifier: ' WorkerArgs'
      VoidKeyword
    MethodSignature
      Identifier: '
  /**
   * Declares a test step that is shown in the report.
   *
   * **Usage**
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('test', async ({ page }) => {
   *   await test.step('Log in', async () => {
   *     // ...
   *   });
   *
   *   await test.step('Outer step', async () => {
   *     // ...
   *     // You can nest steps inside each other.
   *     await test.step('Inner step', async () => {
   *       // ...
   *     });
   *   });
   * });
   * ```
   *
   * **Details**
   *
   * The method returns the value returned by the step callback.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('test', async ({ page }) => {
   *   const user = await test.step('Log in', async () => {
   *     // ...
   *     return 'john';
   *   });
   *   expect(user).toBe('john');
   * });
   * ```
   *
   * **Decorator**
   *
   * You can use TypeScript method decorators to turn a method into a step. Each call to the decorated method will show
   * up as a step in the report.
   *
   * ```js
   * function step(target: Function, context: ClassMethodDecoratorContext) {
   *   return function replacementMethod(...args: any) {
   *     const name = this.constructor.name + '.' + (context.name as string);
   *     return test.step(name, async () => {
   *       return await target.call(this, ...args);
   *     });
   *   };
   * }
   *
   * class LoginPage {
   *   constructor(readonly page: Page) {}
   *
   *   @step
   *   async login() {
   *     const account = { username: 'Alice', password: 's3cr3t' };
   *     await this.page.getByLabel('Username or email address').fill(account.username);
   *     await this.page.getByLabel('Password').fill(account.password);
   *     await this.page.getByRole('button', { name: 'Sign in' }).click();
   *     await expect(this.page.getByRole('button', { name: 'View profile and more' })).toBeVisible();
   *   }
   * }
   *
   * test('example', async ({ page }) => {
   *   const loginPage = new LoginPage(page);
   *   await loginPage.login();
   * });
   * ```
   *
   * **Boxing**
   *
   * When something inside a step fails, you would usually see the error pointing to the exact action that failed. For
   * example, consider the following login step:
   *
   * ```js
   * async function login(page) {
   *   await test.step('login', async () => {
   *     const account = { username: 'Alice', password: 's3cr3t' };
   *     await page.getByLabel('Username or email address').fill(account.username);
   *     await page.getByLabel('Password').fill(account.password);
   *     await page.getByRole('button', { name: 'Sign in' }).click();
   *     await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();
   *   });
   * }
   *
   * test('example', async ({ page }) => {
   *   await page.goto('https://github.com/login');
   *   await login(page);
   * });
   * ```
   *
   * ```txt
   * Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
   *   ... error details omitted ...
   *
   *    8 |     await page.getByRole('button', { name: 'Sign in' }).click();
   * >  9 |     await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();
   *      |                                                                               ^
   *   10 |   });
   * ```
   *
   * As we see above, the test may fail with an error pointing inside the step. If you would like the error to highlight
   * the "login" step instead of its internals, use the `box` option. An error inside a boxed step points to the step
   * call site.
   *
   * ```js
   * async function login(page) {
   *   await test.step('login', async () => {
   *     // ...
   *   }, { box: true });  // Note the "box" option here.
   * }
   * ```
   *
   * ```txt
   * Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
   *   ... error details omitted ...
   *
   *   14 |   await page.goto('https://github.com/login');
   * > 15 |   await login(page);
   *      |         ^
   *   16 | });
   * ```
   *
   * You can also create a TypeScript decorator for a boxed step, similar to a regular step decorator above:
   *
   * ```js
   * function boxedStep(target: Function, context: ClassMethodDecoratorContext) {
   *   return function replacementMethod(...args: any) {
   *     const name = this.constructor.name + '.' + (context.name as string);
   *     return test.step(name, async () => {
   *       return await target.call(this, ...args);
   *     }, { box: true });  // Note the "box" option here.
   *   };
   * }
   *
   * class LoginPage {
   *   constructor(readonly page: Page) {}
   *
   *   @boxedStep
   *   async login() {
   *     // ....
   *   }
   * }
   *
   * test('example', async ({ page }) => {
   *   const loginPage = new LoginPage(page);
   *   await loginPage.login();  // <-- Error will be reported on this line.
   * });
   * ```
   *
   * @param title Step name.
   * @param body Step body.
   * @param options
   */
  step'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'title'
        StringKeyword
      Parameter
        Identifier: ' body'
        FunctionType
          UnionType
            TypeReference
              Identifier: ' T'
            TypeReference
              Identifier: ' Promise'
              TypeReference
                Identifier: 'T'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: ' box'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        TypeReference
          Identifier: 'T'
    PropertySignature
      Identifier: '
  /**
   * `expect` function can be used to create test assertions. Read more about [test assertions](https://playwright.dev/docs/test-assertions).
   *
   * **Usage**
   *
   * ```js
   * test('example', async ({ page }) => {
   *   await test.expect(page).toHaveTitle('Title');
   * });
   * ```
   *
   */
  expect'
      TypeReference
        Identifier: ' Expect'
        TypeLiteral
    MethodSignature
      Identifier: '
  /**
   * Extends the `test` object by defining fixtures and/or options that can be used in the tests.
   *
   * **Usage**
   *
   * First define a fixture and/or an option.
   *
   * ```js
   * import { test as base } from '@playwright/test';
   * import { TodoPage } from './todo-page';
   *
   * export type Options = { defaultItem: string };
   *
   * // Extend basic test by providing a "defaultItem" option and a "todoPage" fixture.
   * export const test = base.extend<Options & { todoPage: TodoPage }>({
   *   // Define an option and provide a default value.
   *   // We can later override it in the config.
   *   defaultItem: ['Do stuff', { option: true }],
   *
   *   // Define a fixture. Note that it can use built-in fixture "page"
   *   // and a new option "defaultItem".
   *   todoPage: async ({ page, defaultItem }, use) => {
   *     const todoPage = new TodoPage(page);
   *     await todoPage.goto();
   *     await todoPage.addToDo(defaultItem);
   *     await use(todoPage);
   *     await todoPage.removeAll();
   *   },
   * });
   * ```
   *
   * Then use the fixture in the test.
   *
   * ```js
   * // example.spec.ts
   * import { test } from './my-test';
   *
   * test('test 1', async ({ todoPage }) => {
   *   await todoPage.addToDo('my todo');
   *   // ...
   * });
   * ```
   *
   * Configure the option in config file.
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   * import type { Options } from './my-test';
   *
   * export default defineConfig<Options>({
   *   projects: [
   *     {
   *       name: 'shopping',
   *       use: { defaultItem: 'Buy milk' },
   *     },
   *     {
   *       name: 'wellbeing',
   *       use: { defaultItem: 'Exercise!' },
   *     },
   *   ]
   * });
   * ```
   *
   * Learn more about [fixtures](https://playwright.dev/docs/test-fixtures) and [parametrizing tests](https://playwright.dev/docs/test-parameterize).
   * @param fixtures An object containing fixtures and/or options. Learn more about [fixtures format](https://playwright.dev/docs/test-fixtures).
   */
  extend'
      TypeParameter
        Identifier: 'T'
        TypeReference
          Identifier: ' KeyValue'
      TypeParameter
        Identifier: ' W'
        TypeReference
          Identifier: ' KeyValue'
        TypeLiteral
      Parameter
        Identifier: 'fixtures'
        TypeReference
          Identifier: ' Fixtures'
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: ' W'
          TypeReference
            Identifier: ' TestArgs'
          TypeReference
            Identifier: ' WorkerArgs'
      TypeReference
        Identifier: ' TestType'
        IntersectionType
          TypeReference
            Identifier: 'TestArgs'
          TypeReference
            Identifier: ' T'
        IntersectionType
          TypeReference
            Identifier: ' WorkerArgs'
          TypeReference
            Identifier: ' W'
    MethodSignature
      Identifier: '
  /**
   * Returns information about the currently running test. This method can only be called during the test execution,
   * otherwise it throws.
   *
   * **Usage**
   *
   * ```js
   * test('example test', async ({ page }) => {
   *   // ...
   *   await test.info().attach('screenshot', {
   *     body: await page.screenshot(),
   *     contentType: 'image/png',
   *   });
   * });
   * ```
   *
   */
  info'
      TypeReference
        Identifier: ' TestInfo'
  TypeAliasDeclaration
    Identifier: ' KeyValue'
    TypeLiteral
      IndexSignature
        Parameter
          Identifier: 'key'
          StringKeyword
        AnyKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TestFixture'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' Args'
      TypeReference
        Identifier: ' KeyValue'
    FunctionType
      Parameter
        Identifier: 'args'
        TypeReference
          Identifier: ' Args'
      Parameter
        Identifier: ' use'
        FunctionType
          Parameter
            Identifier: 'r'
            TypeReference
              Identifier: ' R'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
      Parameter
        Identifier: ' testInfo'
        TypeReference
          Identifier: ' TestInfo'
      AnyKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' WorkerFixture'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' Args'
      TypeReference
        Identifier: ' KeyValue'
    FunctionType
      Parameter
        Identifier: 'args'
        TypeReference
          Identifier: ' Args'
      Parameter
        Identifier: ' use'
        FunctionType
          Parameter
            Identifier: 'r'
            TypeReference
              Identifier: ' R'
          TypeReference
            Identifier: ' Promise'
            VoidKeyword
      Parameter
        Identifier: ' workerInfo'
        TypeReference
          Identifier: ' WorkerInfo'
      AnyKeyword
  TypeAliasDeclaration
    Identifier: ' TestFixtureValue'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' Args'
      TypeReference
        Identifier: ' KeyValue'
    UnionType
      TypeReference
        Identifier: ' Exclude'
        TypeReference
          Identifier: 'R'
        TypeReference
          Identifier: ' Function'
      TypeReference
        Identifier: ' TestFixture'
        TypeReference
          Identifier: 'R'
        TypeReference
          Identifier: ' Args'
  TypeAliasDeclaration
    Identifier: ' WorkerFixtureValue'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' Args'
      TypeReference
        Identifier: ' KeyValue'
    UnionType
      TypeReference
        Identifier: ' Exclude'
        TypeReference
          Identifier: 'R'
        TypeReference
          Identifier: ' Function'
      TypeReference
        Identifier: ' WorkerFixture'
        TypeReference
          Identifier: 'R'
        TypeReference
          Identifier: ' Args'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Fixtures'
    TypeParameter
      Identifier: 'T'
      TypeReference
        Identifier: ' KeyValue'
      TypeLiteral
    TypeParameter
      Identifier: ' W'
      TypeReference
        Identifier: ' KeyValue'
      TypeLiteral
    TypeParameter
      Identifier: ' PT'
      TypeReference
        Identifier: ' KeyValue'
      TypeLiteral
    TypeParameter
      Identifier: ' PW'
      TypeReference
        Identifier: ' KeyValue'
      TypeLiteral
    IntersectionType
      MappedType
        TypeParameter
          Identifier: 'K'
          TypeOperator
            TypeReference
              Identifier: ' PW'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' WorkerFixtureValue'
            IndexedAccessType
              TypeReference
                Identifier: 'PW'
              TypeReference
                Identifier: 'K'
            IntersectionType
              TypeReference
                Identifier: ' W'
              TypeReference
                Identifier: ' PW'
          TupleType
            TypeReference
              Identifier: 'WorkerFixtureValue'
              IndexedAccessType
                TypeReference
                  Identifier: 'PW'
                TypeReference
                  Identifier: 'K'
              IntersectionType
                TypeReference
                  Identifier: ' W'
                TypeReference
                  Identifier: ' PW'
            TypeLiteral
              PropertySignature
                Identifier: ' scope'
                LiteralType
                  StringLiteral
              PropertySignature
                Identifier: ' timeout'
                QuestionToken
                UnionType
                  NumberKeyword
                  UndefinedKeyword
              PropertySignature
                Identifier: ' title'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: ' box'
                QuestionToken
                BooleanKeyword
      MappedType
        TypeParameter
          Identifier: 'K'
          TypeOperator
            TypeReference
              Identifier: ' PT'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' TestFixtureValue'
            IndexedAccessType
              TypeReference
                Identifier: 'PT'
              TypeReference
                Identifier: 'K'
            IntersectionType
              TypeReference
                Identifier: ' T'
              TypeReference
                Identifier: ' W'
              TypeReference
                Identifier: ' PT'
              TypeReference
                Identifier: ' PW'
          TupleType
            TypeReference
              Identifier: 'TestFixtureValue'
              IndexedAccessType
                TypeReference
                  Identifier: 'PT'
                TypeReference
                  Identifier: 'K'
              IntersectionType
                TypeReference
                  Identifier: ' T'
                TypeReference
                  Identifier: ' W'
                TypeReference
                  Identifier: ' PT'
                TypeReference
                  Identifier: ' PW'
            TypeLiteral
              PropertySignature
                Identifier: ' scope'
                LiteralType
                  StringLiteral
              PropertySignature
                Identifier: ' timeout'
                QuestionToken
                UnionType
                  NumberKeyword
                  UndefinedKeyword
              PropertySignature
                Identifier: ' title'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: ' box'
                QuestionToken
                BooleanKeyword
      MappedType
        TypeParameter
          Identifier: 'K'
          TypeOperator
            TypeReference
              Identifier: ' W'
        QuestionToken
        TupleType
          TypeReference
            Identifier: 'WorkerFixtureValue'
            IndexedAccessType
              TypeReference
                Identifier: 'W'
              TypeReference
                Identifier: 'K'
            IntersectionType
              TypeReference
                Identifier: ' W'
              TypeReference
                Identifier: ' PW'
          TypeLiteral
            PropertySignature
              Identifier: ' scope'
              LiteralType
                StringLiteral
            PropertySignature
              Identifier: ' auto'
              QuestionToken
              BooleanKeyword
            PropertySignature
              Identifier: ' option'
              QuestionToken
              BooleanKeyword
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              UnionType
                NumberKeyword
                UndefinedKeyword
            PropertySignature
              Identifier: ' title'
              QuestionToken
              StringKeyword
            PropertySignature
              Identifier: ' box'
              QuestionToken
              BooleanKeyword
      MappedType
        TypeParameter
          Identifier: 'K'
          TypeOperator
            TypeReference
              Identifier: ' T'
        QuestionToken
        UnionType
          TypeReference
            Identifier: ' TestFixtureValue'
            IndexedAccessType
              TypeReference
                Identifier: 'T'
              TypeReference
                Identifier: 'K'
            IntersectionType
              TypeReference
                Identifier: ' T'
              TypeReference
                Identifier: ' W'
              TypeReference
                Identifier: ' PT'
              TypeReference
                Identifier: ' PW'
          TupleType
            TypeReference
              Identifier: 'TestFixtureValue'
              IndexedAccessType
                TypeReference
                  Identifier: 'T'
                TypeReference
                  Identifier: 'K'
              IntersectionType
                TypeReference
                  Identifier: ' T'
                TypeReference
                  Identifier: ' W'
                TypeReference
                  Identifier: ' PT'
                TypeReference
                  Identifier: ' PW'
            TypeLiteral
              PropertySignature
                Identifier: ' scope'
                QuestionToken
                LiteralType
                  StringLiteral
              PropertySignature
                Identifier: ' auto'
                QuestionToken
                BooleanKeyword
              PropertySignature
                Identifier: ' option'
                QuestionToken
                BooleanKeyword
              PropertySignature
                Identifier: ' timeout'
                QuestionToken
                UnionType
                  NumberKeyword
                  UndefinedKeyword
              PropertySignature
                Identifier: ' title'
                QuestionToken
                StringKeyword
              PropertySignature
                Identifier: ' box'
                QuestionToken
                BooleanKeyword
  TypeAliasDeclaration
    Identifier: ' BrowserName'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    Identifier: ' BrowserChannel'
    TypeReference
      Identifier: ' Exclude'
      IndexedAccessType
        TypeReference
          Identifier: 'LaunchOptions'
        LiteralType
          StringLiteral
      UndefinedKeyword
  TypeAliasDeclaration
    Identifier: ' ColorScheme'
    TypeReference
      Identifier: ' Exclude'
      IndexedAccessType
        TypeReference
          Identifier: 'BrowserContextOptions'
        LiteralType
          StringLiteral
      UndefinedKeyword
  TypeAliasDeclaration
    Identifier: ' ClientCertificate'
    IndexedAccessType
      TypeReference
        Identifier: ' Exclude'
        IndexedAccessType
          TypeReference
            Identifier: 'BrowserContextOptions'
          LiteralType
            StringLiteral
        UndefinedKeyword
      LiteralType
        NumericLiteral
  TypeAliasDeclaration
    Identifier: ' ExtraHTTPHeaders'
    TypeReference
      Identifier: ' Exclude'
      IndexedAccessType
        TypeReference
          Identifier: 'BrowserContextOptions'
        LiteralType
          StringLiteral
      UndefinedKeyword
  TypeAliasDeclaration
    Identifier: ' Proxy'
    TypeReference
      Identifier: ' Exclude'
      IndexedAccessType
        TypeReference
          Identifier: 'BrowserContextOptions'
        LiteralType
          StringLiteral
      UndefinedKeyword
  TypeAliasDeclaration
    Identifier: ' StorageState'
    TypeReference
      Identifier: ' Exclude'
      IndexedAccessType
        TypeReference
          Identifier: 'BrowserContextOptions'
        LiteralType
          StringLiteral
      UndefinedKeyword
  TypeAliasDeclaration
    Identifier: ' ServiceWorkerPolicy'
    TypeReference
      Identifier: ' Exclude'
      IndexedAccessType
        TypeReference
          Identifier: 'BrowserContextOptions'
        LiteralType
          StringLiteral
      UndefinedKeyword
  TypeAliasDeclaration
    Identifier: ' ConnectOptions'
    TypeLiteral
      PropertySignature
        Identifier: '
  /**
   * A browser websocket endpoint to connect to.
   */
  wsEndpoint'
        StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Additional HTTP headers to be sent with web socket connect request.
   */
  headers'
        QuestionToken
        TypeLiteral
          IndexSignature
            Parameter
              Identifier: 'key'
              StringKeyword
            StringKeyword
      PropertySignature
        Identifier: '

  /**
   * This option exposes network available on the connecting client to the browser being connected to.
   * Consists of a list of rules separated by comma.
   *
   * Available rules:
   * - Hostname pattern, for example: `example.com`, `*.org:99`, `x.*.y.com`, `*foo.org`.
   * - IP literal, for example: `127.0.0.1`, `0.0.0.0:99`, `[::1]`, `[0:0::1]:99`.
   * - `<loopback>` that matches local loopback interfaces: `localhost`, `*.localhost`, `127.0.0.1`, `[::1]`.

   * Some common examples:
   * - `"*"` to expose all network.
   * - `"<loopback>"` to expose localhost network.
   * - `"*.test.internal-domain,*.staging.internal-domain,<loopback>"` to expose test/staging deployments and localhost.
   */
  exposeNetwork'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '

  /**
   * Timeout in milliseconds for the connection to be established. Optional, defaults to no timeout.
   */
  timeout'
        QuestionToken
        NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PlaywrightWorkerOptions'
    PropertySignature
      Identifier: '
  /**
   * Name of the browser that runs tests. Defaults to `'chromium'`. Most of the time you should set `browserName` in
   * your {@link TestConfig}:
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig, devices } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     browserName: 'firefox',
   *   },
   * });
   * ```
   *
   */
  browserName'
      TypeReference
        Identifier: ' BrowserName'
    PropertySignature
      Identifier: '
  defaultBrowserType'
      TypeReference
        Identifier: ' BrowserName'
    PropertySignature
      Identifier: '
  /**
   * Whether to run browser in headless mode. More details for
   * [Chromium](https://developers.google.com/web/updates/2017/04/headless-chrome) and
   * [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Headless_mode). Defaults to `true` unless the
   * `devtools` option is `true`.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     headless: false
   *   },
   * });
   * ```
   *
   */
  headless'
      BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * Browser distribution channel.  Supported values are "chrome", "chrome-beta", "chrome-dev", "chrome-canary",
   * "msedge", "msedge-beta", "msedge-dev", "msedge-canary". Read more about using
   * [Google Chrome and Microsoft Edge](https://playwright.dev/docs/browsers#google-chrome--microsoft-edge).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   projects: [
   *     {
   *       name: 'Microsoft Edge',
   *       use: {
   *         ...devices['Desktop Edge'],
   *         channel: 'msedge'
   *       },
   *     },
   *   ]
   * });
   * ```
   *
   */
  channel'
      UnionType
        TypeReference
          Identifier: ' BrowserChannel'
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Options used to launch the browser, as passed to
   * [browserType.launch([options])](https://playwright.dev/docs/api/class-browsertype#browser-type-launch). Specific
   * options [testOptions.headless](https://playwright.dev/docs/api/class-testoptions#test-options-headless) and
   * [testOptions.channel](https://playwright.dev/docs/api/class-testoptions#test-options-channel) take priority over
   * this.
   *
   * **NOTE** Use custom browser args at your own risk, as some of them may break Playwright functionality.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   projects: [
   *     {
   *       name: 'chromium',
   *       use: {
   *         ...devices['Desktop Chrome'],
   *         launchOptions: {
   *           args: ['--start-maximized']
   *         }
   *       }
   *     }
   *   ]
   * });
   * ```
   *
   */
  launchOptions'
      TypeReference
        Identifier: ' Omit'
        TypeReference
          Identifier: 'LaunchOptions'
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
  /**
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     connectOptions: {
   *       wsEndpoint: 'ws://localhost:5678',
   *     },
   *   },
   * });
   * ```
   *
   * When connect options are specified, default
   * [fixtures.browser](https://playwright.dev/docs/api/class-fixtures#fixtures-browser),
   * [fixtures.context](https://playwright.dev/docs/api/class-fixtures#fixtures-context) and
   * [fixtures.page](https://playwright.dev/docs/api/class-fixtures#fixtures-page) use the remote browser instead of
   * launching a browser locally, and any launch options like
   * [testOptions.headless](https://playwright.dev/docs/api/class-testoptions#test-options-headless) or
   * [testOptions.channel](https://playwright.dev/docs/api/class-testoptions#test-options-channel) are ignored.
   */
  connectOptions'
      UnionType
        TypeReference
          Identifier: ' ConnectOptions'
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Whether to automatically capture a screenshot after each test. Defaults to `'off'`.
   * - `'off'`: Do not capture screenshots.
   * - `'on'`: Capture screenshot after each test.
   * - `'only-on-failure'`: Capture screenshot after each test failure.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     screenshot: 'only-on-failure',
   *   },
   * });
   * ```
   *
   * Learn more about [automatic screenshots](https://playwright.dev/docs/test-use-options#recording-options).
   */
  screenshot'
      UnionType
        TypeReference
          Identifier: ' ScreenshotMode'
        IntersectionType
          TypeLiteral
            PropertySignature
              Identifier: ' mode'
              TypeReference
                Identifier: ' ScreenshotMode'
          TypeReference
            Identifier: ' Pick'
            TypeReference
              Identifier: 'PageScreenshotOptions'
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
    PropertySignature
      Identifier: '
  /**
   * Whether to record trace for each test. Defaults to `'off'`.
   * - `'off'`: Do not record trace.
   * - `'on'`: Record trace for each test.
   * - `'on-first-retry'`: Record trace only when retrying a test for the first time.
   * - `'on-all-retries'`: Record trace only when retrying a test.
   * - `'retain-on-failure'`: Record trace for each test. When test run passes, remove the recorded trace.
   * - `'retain-on-first-failure'`: Record trace for the first run of each test, but not for retries. When test run
   *   passes, remove the recorded trace.
   *
   * For more control, pass an object that specifies `mode` and trace features to enable.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     trace: 'on-first-retry'
   *   },
   * });
   * ```
   *
   * Learn more about [recording trace](https://playwright.dev/docs/test-use-options#recording-options).
   */
  trace'
      UnionType
        TypeReference
          Identifier: ' TraceMode'
        LiteralType
          StringLiteral
        TypeLiteral
          PropertySignature
            Identifier: ' mode'
            TypeReference
              Identifier: ' TraceMode'
          PropertySignature
            Identifier: ' snapshots'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: ' screenshots'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: ' sources'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: ' attachments'
            QuestionToken
            BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * Whether to record video for each test. Defaults to `'off'`.
   * - `'off'`: Do not record video.
   * - `'on'`: Record video for each test.
   * - `'retain-on-failure'`: Record video for each test, but remove all videos from successful test runs.
   * - `'on-first-retry'`: Record video only when retrying a test for the first time.
   *
   * To control video size, pass an object with `mode` and `size` properties. If video size is not specified, it will be
   * equal to [testOptions.viewport](https://playwright.dev/docs/api/class-testoptions#test-options-viewport) scaled
   * down to fit into 800x800. If `viewport` is not configured explicitly the video size defaults to 800x450. Actual
   * picture of each page will be scaled down if necessary to fit the specified size.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     video: 'on-first-retry',
   *   },
   * });
   * ```
   *
   * Learn more about [recording video](https://playwright.dev/docs/test-use-options#recording-options).
   */
  video'
      UnionType
        TypeReference
          Identifier: ' VideoMode'
        LiteralType
          StringLiteral
        TypeLiteral
          PropertySignature
            Identifier: ' mode'
            TypeReference
              Identifier: ' VideoMode'
          PropertySignature
            Identifier: ' size'
            QuestionToken
            TypeReference
              Identifier: ' ViewportSize'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ScreenshotMode'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' TraceMode'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' VideoMode'
    UnionType
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
      LiteralType
        StringLiteral
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PlaywrightTestOptions'
    PropertySignature
      Identifier: '
  /**
   * Whether to automatically download all the attachments. Defaults to `true` where all the downloads are accepted.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     acceptDownloads: false,
   *   },
   * });
   * ```
   *
   */
  acceptDownloads'
      BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * Toggles bypassing page's Content-Security-Policy. Defaults to `false`.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     bypassCSP: true,
   *   }
   * });
   * ```
   *
   */
  bypassCSP'
      BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. See
   * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details.
   * Passing `null` resets emulation to system defaults. Defaults to `'light'`.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     colorScheme: 'dark',
   *   },
   * });
   * ```
   *
   */
  colorScheme'
      TypeReference
        Identifier: ' ColorScheme'
    PropertySignature
      Identifier: '
  /**
   * TLS Client Authentication allows the server to request a client certificate and verify it.
   *
   * **Details**
   *
   * An array of client certificates to be used. Each certificate object must have either both `certPath` and `keyPath`,
   * a single `pfxPath`, or their corresponding direct value equivalents (`cert` and `key`, or `pfx`). Optionally,
   * `passphrase` property should be provided if the certificate is encrypted. The `origin` property should be provided
   * with an exact match to the request origin that the certificate is valid for.
   *
   * **NOTE** Using Client Certificates in combination with Proxy Servers is not supported.
   *
   * **NOTE** When using WebKit on macOS, accessing `localhost` will not pick up client certificates. You can make it
   * work by replacing `localhost` with `local.playwright`.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     clientCertificates: [{
   *       origin: 'https://example.com',
   *       certPath: './cert.pem',
   *       keyPath: './key.pem',
   *       passphrase: 'mysecretpassword',
   *     }],
   *   },
   * });
   * ```
   *
   */
  clientCertificates'
      UnionType
        ArrayType
          TypeReference
            Identifier: ' ClientCertificate'
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Specify device scale factor (can be thought of as dpr). Defaults to `1`. Learn more about
   * [emulating devices with device scale factor](https://playwright.dev/docs/emulation#devices).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     viewport: { width: 2560, height: 1440 },
   *     deviceScaleFactor: 2,
   *   },
   * });
   * ```
   *
   */
  deviceScaleFactor'
      UnionType
        NumberKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * An object containing additional HTTP headers to be sent with every request. Defaults to none.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     extraHTTPHeaders: {
   *       'X-My-Header': 'value',
   *     },
   *   },
   * });
   * ```
   *
   */
  extraHTTPHeaders'
      UnionType
        TypeReference
          Identifier: ' ExtraHTTPHeaders'
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     geolocation: { longitude: 12.492507, latitude: 41.889938 },
   *   },
   * });
   * ```
   *
   * Learn more about [geolocation](https://playwright.dev/docs/emulation#color-scheme-and-media).
   */
  geolocation'
      UnionType
        TypeReference
          Identifier: ' Geolocation'
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Specifies if viewport supports touch events. Defaults to false. Learn more about
   * [mobile emulation](https://playwright.dev/docs/emulation#devices).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     hasTouch: true
   *   },
   * });
   * ```
   *
   */
  hasTouch'
      BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * Credentials for [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication). If no
   * origin is specified, the username and password are sent to any servers upon unauthorized responses.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     httpCredentials: {
   *       username: 'user',
   *       password: 'pass',
   *     },
   *   },
   * });
   * ```
   *
   */
  httpCredentials'
      UnionType
        TypeReference
          Identifier: ' HTTPCredentials'
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     ignoreHTTPSErrors: true,
   *   },
   * });
   * ```
   *
   */
  ignoreHTTPSErrors'
      BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * Whether the `meta viewport` tag is taken into account and touch events are enabled. isMobile is a part of device,
   * so you don't actually need to set it manually. Defaults to `false` and is not supported in Firefox. Learn more
   * about [mobile emulation](https://playwright.dev/docs/emulation#ismobile).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     isMobile: false,
   *   },
   * });
   * ```
   *
   */
  isMobile'
      BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * Whether or not to enable JavaScript in the context. Defaults to `true`. Learn more about
   * [disabling JavaScript](https://playwright.dev/docs/emulation#javascript-enabled).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     javaScriptEnabled: false,
   *   },
   * });
   * ```
   *
   */
  javaScriptEnabled'
      BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * Specify user locale, for example `en-GB`, `de-DE`, etc. Locale will affect `navigator.language` value,
   * `Accept-Language` request header value as well as number and date formatting rules. Defaults to the system default
   * locale. Learn more about emulation in our [emulation guide](https://playwright.dev/docs/emulation#locale--timezone).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     locale: 'it-IT',
   *   },
   * });
   * ```
   *
   */
  locale'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Whether to emulate network being offline. Defaults to `false`. Learn more about
   * [network emulation](https://playwright.dev/docs/emulation#offline).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     offline: true
   *   },
   * });
   * ```
   *
   */
  offline'
      BooleanKeyword
    PropertySignature
      Identifier: '
  /**
   * A list of permissions to grant to all pages in this context. See
   * [browserContext.grantPermissions(permissions[, options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-grant-permissions)
   * for more details. Defaults to none.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     permissions: ['notifications'],
   *   },
   * });
   * ```
   *
   */
  permissions'
      UnionType
        ArrayType
          StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Network proxy settings.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     proxy: {
   *       server: 'http://myproxy.com:3128',
   *       bypass: 'localhost',
   *     },
   *   },
   * });
   * ```
   *
   */
  proxy'
      UnionType
        TypeReference
          Identifier: ' Proxy'
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Learn more about [storage state and auth](https://playwright.dev/docs/auth).
   *
   * Populates context with given storage state. This option can be used to initialize context with logged-in
   * information obtained via
   * [browserContext.storageState([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-storage-state).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     storageState: 'storage-state.json',
   *   },
   * });
   * ```
   *
   * **Details**
   *
   * When storage state is set up in the config, it is possible to reset storage state for a file:
   *
   * ```js
   * // not-signed-in.spec.ts
   * import { test } from '@playwright/test';
   *
   * // Reset storage state for this file to avoid being authenticated
   * test.use({ storageState: { cookies: [], origins: [] } });
   *
   * test('not signed in test', async ({ page }) => {
   *   // ...
   * });
   * ```
   *
   */
  storageState'
      UnionType
        TypeReference
          Identifier: ' StorageState'
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Changes the timezone of the context. See
   * [ICU's metaZones.txt](https://cs.chromium.org/chromium/src/third_party/icu/source/data/misc/metaZones.txt?rcl=faee8bc70570192d82d2978a71e2a615788597d1)
   * for a list of supported timezone IDs. Defaults to the system timezone.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     timezoneId: 'Europe/Rome',
   *   },
   * });
   * ```
   *
   */
  timezoneId'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Specific user agent to use in this context.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     userAgent: 'some custom ua',
   *   },
   * });
   * ```
   *
   */
  userAgent'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Emulates consistent viewport for each page. Defaults to an 1280x720 viewport. Use `null` to disable the consistent
   * viewport emulation. Learn more about [viewport emulation](https://playwright.dev/docs/emulation#viewport).
   *
   * **NOTE** The `null` value opts out from the default presets, makes viewport depend on the host window size defined
   * by the operating system. It makes the execution of the tests non-deterministic.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     viewport: { width: 100, height: 100 },
   *   },
   * });
   * ```
   *
   */
  viewport'
      UnionType
        TypeReference
          Identifier: ' ViewportSize'
        LiteralType
          NullKeyword
    PropertySignature
      Identifier: '
  /**
   * When using [page.goto(url[, options])](https://playwright.dev/docs/api/class-page#page-goto),
   * [page.route(url, handler[, options])](https://playwright.dev/docs/api/class-page#page-route),
   * [page.waitForURL(url[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-url),
   * [page.waitForRequest(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-request),
   * or
   * [page.waitForResponse(urlOrPredicate[, options])](https://playwright.dev/docs/api/class-page#page-wait-for-response)
   * it takes the base URL in consideration by using the
   * [`URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL) constructor for building the corresponding URL.
   * Unset by default. Examples:
   * - baseURL: `http://localhost:3000` and navigating to `/bar.html` results in `http://localhost:3000/bar.html`
   * - baseURL: `http://localhost:3000/foo/` and navigating to `./bar.html` results in
   *   `http://localhost:3000/foo/bar.html`
   * - baseURL: `http://localhost:3000/foo` (without trailing slash) and navigating to `./bar.html` results in
   *   `http://localhost:3000/bar.html`
   *
   * **Usage**
   *
   * ```js
   * import { defineConfig, devices } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     /* Base URL to use in actions like `await page.goto('/')`. *\/
   *     baseURL: 'http://localhost:3000',
   *   },
   * });
   * ```
   *
   */
  baseURL'
      UnionType
        StringKeyword
        UndefinedKeyword
    PropertySignature
      Identifier: '
  /**
   * Options used to create the context, as passed to
   * [browser.newContext([options])](https://playwright.dev/docs/api/class-browser#browser-new-context). Specific
   * options like [testOptions.viewport](https://playwright.dev/docs/api/class-testoptions#test-options-viewport) take
   * priority over this.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     contextOptions: {
   *       reducedMotion: 'reduce',
   *     },
   *   },
   * });
   * ```
   *
   */
  contextOptions'
      TypeReference
        Identifier: ' BrowserContextOptions'
    PropertySignature
      Identifier: '
  /**
   * Default timeout for each Playwright action in milliseconds, defaults to 0 (no timeout).
   *
   * This is a default timeout for all Playwright actions, same as configured via
   * [page.setDefaultTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-timeout).
   *
   * **Usage**
   *
   * ```js
   * import { defineConfig, devices } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     /* Maximum time each action such as `click()` can take. Defaults to 0 (no limit). *\/
   *     actionTimeout: 0,
   *   },
   * });
   * ```
   *
   * Learn more about [various timeouts](https://playwright.dev/docs/test-timeouts).
   */
  actionTimeout'
      NumberKeyword
    PropertySignature
      Identifier: '
  /**
   * Timeout for each navigation action in milliseconds. Defaults to 0 (no timeout).
   *
   * This is a default navigation timeout, same as configured via
   * [page.setDefaultNavigationTimeout(timeout)](https://playwright.dev/docs/api/class-page#page-set-default-navigation-timeout).
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     navigationTimeout: 3000,
   *   },
   * });
   * ```
   *
   * Learn more about [various timeouts](https://playwright.dev/docs/test-timeouts).
   */
  navigationTimeout'
      NumberKeyword
    PropertySignature
      Identifier: '
  /**
   * Whether to allow sites to register Service workers. Defaults to `'allow'`.
   * - `'allow'`: [Service Workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) can be
   *   registered.
   * - `'block'`: Playwright will block all registration of Service Workers.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     serviceWorkers: 'allow'
   *   },
   * });
   * ```
   *
   */
  serviceWorkers'
      TypeReference
        Identifier: ' ServiceWorkerPolicy'
    PropertySignature
      Identifier: '
  /**
   * Custom attribute to be used in
   * [page.getByTestId(testId)](https://playwright.dev/docs/api/class-page#page-get-by-test-id). `data-testid` is used
   * by default.
   *
   * **Usage**
   *
   * ```js
   * // playwright.config.ts
   * import { defineConfig } from '@playwright/test';
   *
   * export default defineConfig({
   *   use: {
   *     testIdAttribute: 'pw-test-id',
   *   },
   * });
   * ```
   *
   */
  testIdAttribute'
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PlaywrightWorkerArgs'
    PropertySignature
      Identifier: '
  playwright'
      ImportType
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '
  /**
   * {@link Browser} instance is shared between all tests in the [same worker](https://playwright.dev/docs/test-parallel) - this makes testing
   * efficient. However, each test runs in an isolated {@link BrowserContext}  and gets a fresh environment.
   *
   * Learn how to [configure browser](https://playwright.dev/docs/test-configuration) and see [available options]{@link TestOptions}.
   *
   * **Usage**
   *
   * ```js
   * test.beforeAll(async ({ browser }) => {
   *   const page = await browser.newPage();
   *   // ...
   * });
   * ```
   *
   */
  browser'
      TypeReference
        Identifier: ' Browser'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PlaywrightTestArgs'
    PropertySignature
      Identifier: '
  /**
   * Isolated {@link BrowserContext} instance, created for each test. Since contexts are isolated between each other,
   * every test gets a fresh environment, even when multiple tests run in a single {@link Browser} for maximum
   * efficiency.
   *
   * Learn how to [configure context](https://playwright.dev/docs/test-configuration) and see [available options]{@link TestOptions}.
   *
   * Default [fixtures.page](https://playwright.dev/docs/api/class-fixtures#fixtures-page) belongs to this context.
   *
   * **Usage**
   *
   * ```js
   * test('example test', async ({ page, context }) => {
   *   await context.route('*external.com/*', route => route.abort());
   *   // ...
   * });
   * ```
   *
   */
  context'
      TypeReference
        Identifier: ' BrowserContext'
    PropertySignature
      Identifier: '
  /**
   * Isolated {@link Page} instance, created for each test. Pages are isolated between tests due to
   * [fixtures.context](https://playwright.dev/docs/api/class-fixtures#fixtures-context) isolation.
   *
   * This is the most common fixture used in a test.
   *
   * **Usage**
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('basic test', async ({ page }) => {
   *   await page.goto('/signin');
   *   await page.getByLabel('User Name').fill('user');
   *   await page.getByLabel('Password').fill('password');
   *   await page.getByText('Sign in').click();
   *   // ...
   * });
   * ```
   *
   */
  page'
      TypeReference
        Identifier: ' Page'
    PropertySignature
      Identifier: '
  /**
   * Isolated {@link APIRequestContext} instance for each test.
   *
   * **Usage**
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('basic test', async ({ request }) => {
   *   await request.post('/signin', {
   *     data: {
   *       username: 'user',
   *       password: 'password'
   *     }
   *   });
   *   // ...
   * });
   * ```
   *
   */
  request'
      TypeReference
        Identifier: ' APIRequestContext'
  TypeAliasDeclaration
    Identifier: ' ExcludeProps'
    TypeParameter
      Identifier: 'A'
    TypeParameter
      Identifier: ' B'
    MappedType
      TypeParameter
        Identifier: 'K'
        TypeReference
          Identifier: ' Exclude'
          TypeOperator
            TypeReference
              Identifier: ' A'
          TypeOperator
            TypeReference
              Identifier: ' B'
      IndexedAccessType
        TypeReference
          Identifier: ' A'
        TypeReference
          Identifier: 'K'
  TypeAliasDeclaration
    Identifier: ' CustomProperties'
    TypeParameter
      Identifier: 'T'
    TypeReference
      Identifier: ' ExcludeProps'
      TypeReference
        Identifier: 'T'
      IntersectionType
        TypeReference
          Identifier: ' PlaywrightTestOptions'
        TypeReference
          Identifier: ' PlaywrightWorkerOptions'
        TypeReference
          Identifier: ' PlaywrightTestArgs'
        TypeReference
          Identifier: ' PlaywrightWorkerArgs'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PlaywrightTestProject'
    TypeParameter
      Identifier: 'TestArgs'
      TypeLiteral
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeLiteral
    TypeReference
      Identifier: ' Project'
      IntersectionType
        TypeReference
          Identifier: 'PlaywrightTestOptions'
        TypeReference
          Identifier: ' CustomProperties'
          TypeReference
            Identifier: 'TestArgs'
      IntersectionType
        TypeReference
          Identifier: ' PlaywrightWorkerOptions'
        TypeReference
          Identifier: ' CustomProperties'
          TypeReference
            Identifier: 'WorkerArgs'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' PlaywrightTestConfig'
    TypeParameter
      Identifier: 'TestArgs'
      TypeLiteral
    TypeParameter
      Identifier: ' WorkerArgs'
      TypeLiteral
    TypeReference
      Identifier: ' Config'
      IntersectionType
        TypeReference
          Identifier: 'PlaywrightTestOptions'
        TypeReference
          Identifier: ' CustomProperties'
          TypeReference
            Identifier: 'TestArgs'
      IntersectionType
        TypeReference
          Identifier: ' PlaywrightWorkerOptions'
        TypeReference
          Identifier: ' CustomProperties'
          TypeReference
            Identifier: 'WorkerArgs'
  TypeAliasDeclaration
    Identifier: ' AsymmetricMatcher'
    TypeReference
      Identifier: ' Record'
      StringKeyword
      AnyKeyword
  InterfaceDeclaration
    Identifier: ' AsymmetricMatchers'
    MethodSignature
      Identifier: '
  /**
   * `expect.any()` matches any object instance created from the `constructor` or a corresponding primitive type. Use it
   * inside
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * to perform pattern matching.
   *
   * **Usage**
   *
   * ```js
   * // Match instance of a class.
   * class Example {}
   * expect(new Example()).toEqual(expect.any(Example));
   *
   * // Match any number.
   * expect({ prop: 1 }).toEqual({ prop: expect.any(Number) });
   *
   * // Match any string.
   * expect('abc').toEqual(expect.any(String));
   * ```
   *
   * @param constructor Constructor of the expected object like `ExampleClass`, or a primitive boxed type like `Number`.
   */
  any'
      Parameter
        Identifier: 'sample'
        UnknownKeyword
      TypeReference
        Identifier: ' AsymmetricMatcher'
    MethodSignature
      Identifier: '
  /**
   * `expect.anything()` matches everything except `null` and `undefined`. Use it inside
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * to perform pattern matching.
   *
   * **Usage**
   *
   * ```js
   * const value = { prop: 1 };
   * expect(value).toEqual({ prop: expect.anything() });
   * expect(value).not.toEqual({ otherProp: expect.anything() });
   * ```
   *
   */
  anything'
      TypeReference
        Identifier: ' AsymmetricMatcher'
    MethodSignature
      Identifier: '
  /**
   * `expect.arrayContaining()` matches an array that contains all of the elements in the expected array, in any order.
   * Note that received array may be a superset of the expected array and contain some extra elements.
   *
   * Use this method inside
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * to perform pattern matching.
   *
   * **Usage**
   *
   * ```js
   * expect([1, 2, 3]).toEqual(expect.arrayContaining([3, 1]));
   * expect([1, 2, 3]).not.toEqual(expect.arrayContaining([1, 4]));
   * ```
   *
   * @param expected Expected array that is a subset of the received value.
   */
  arrayContaining'
      Parameter
        Identifier: 'sample'
        TypeReference
          Identifier: ' Array'
          UnknownKeyword
      TypeReference
        Identifier: ' AsymmetricMatcher'
    MethodSignature
      Identifier: '
  /**
   * Compares floating point numbers for approximate equality. Use this method inside
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * to perform pattern matching. When just comparing two numbers, prefer
   * [expect(value).toBeCloseTo(expected[, numDigits])](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-be-close-to).
   *
   * **Usage**
   *
   * ```js
   * expect({ prop: 0.1 + 0.2 }).not.toEqual({ prop: 0.3 });
   * expect({ prop: 0.1 + 0.2 }).toEqual({ prop: expect.closeTo(0.3, 5) });
   * ```
   *
   * @param expected Expected value.
   * @param numDigits The number of decimal digits after the decimal point that must be equal.
   */
  closeTo'
      Parameter
        Identifier: 'sample'
        NumberKeyword
      Parameter
        Identifier: ' precision'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' AsymmetricMatcher'
    MethodSignature
      Identifier: '
  /**
   * `expect.objectContaining()` matches an object that contains and matches all of the properties in the expected
   * object. Note that received object may be a superset of the expected object and contain some extra properties.
   *
   * Use this method inside
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * to perform pattern matching. Object properties can be matchers to further relax the expectation. See examples.
   *
   * **Usage**
   *
   * ```js
   * // Assert some of the properties.
   * expect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ foo: 1 }));
   *
   * // Matchers can be used on the properties as well.
   * expect({ foo: 1, bar: 2 }).toEqual(expect.objectContaining({ bar: expect.any(Number) }));
   *
   * // Complex matching of sub-properties.
   * expect({
   *   list: [1, 2, 3],
   *   obj: { prop: 'Hello world!', another: 'some other value' },
   *   extra: 'extra',
   * }).toEqual(expect.objectContaining({
   *   list: expect.arrayContaining([2, 3]),
   *   obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),
   * }));
   * ```
   *
   * @param expected Expected object pattern that contains a subset of the properties.
   */
  objectContaining'
      Parameter
        Identifier: 'sample'
        TypeReference
          Identifier: ' Record'
          StringKeyword
          UnknownKeyword
      TypeReference
        Identifier: ' AsymmetricMatcher'
    MethodSignature
      Identifier: '
  /**
   * `expect.stringContaining()` matches a string that contains the expected substring. Use this method inside
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * to perform pattern matching.
   *
   * **Usage**
   *
   * ```js
   * expect('Hello world!').toEqual(expect.stringContaining('Hello'));
   * ```
   *
   * @param expected Expected substring.
   */
  stringContaining'
      Parameter
        Identifier: 'sample'
        StringKeyword
      TypeReference
        Identifier: ' AsymmetricMatcher'
    MethodSignature
      Identifier: '
  /**
   * `expect.stringMatching()` matches a received string that in turn matches the expected pattern. Use this method
   * inside
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * to perform pattern matching.
   *
   * **Usage**
   *
   * ```js
   * expect('123ms').toEqual(expect.stringMatching(/\d+m?s/));
   *
   * // Inside another matcher.
   * expect({
   *   status: 'passed',
   *   time: '123ms',
   * }).toEqual({
   *   status: expect.stringMatching(/passed|failed/),
   *   time: expect.stringMatching(/\d+m?s/),
   * });
   * ```
   *
   * @param expected Pattern that expected string should match.
   */
  stringMatching'
      Parameter
        Identifier: 'sample'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' RegExp'
      TypeReference
        Identifier: ' AsymmetricMatcher'
  InterfaceDeclaration
    Identifier: ' GenericAssertions'
    TypeParameter
      Identifier: 'R'
    PropertySignature
      Identifier: '
  /**
   * Makes the assertion check for the opposite condition. For example, the following code passes:
   *
   * ```js
   * const value = 1;
   * expect(value).not.toBe(2);
   * ```
   *
   */
  not'
      TypeReference
        Identifier: ' GenericAssertions'
        TypeReference
          Identifier: 'R'
    MethodSignature
      Identifier: '
  /**
   * Compares value with `expected` by calling `Object.is`. This method compares objects by reference instead of their
   * contents, similarly to the strict equality operator `===`.
   *
   * **Usage**
   *
   * ```js
   * const value = { prop: 1 };
   * expect(value).toBe(value);
   * expect(value).not.toBe({});
   * expect(value.prop).toBe(1);
   * ```
   *
   * @param expected Expected value.
   */
  toBe'
      Parameter
        Identifier: 'expected'
        UnknownKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Compares floating point numbers for approximate equality. Use this method instead of
   * [expect(value).toBe(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-be)
   * when comparing floating point numbers.
   *
   * **Usage**
   *
   * ```js
   * expect(0.1 + 0.2).not.toBe(0.3);
   * expect(0.1 + 0.2).toBeCloseTo(0.3, 5);
   * ```
   *
   * @param expected Expected value.
   * @param numDigits The number of decimal digits after the decimal point that must be equal.
   */
  toBeCloseTo'
      Parameter
        Identifier: 'expected'
        NumberKeyword
      Parameter
        Identifier: ' numDigits'
        QuestionToken
        NumberKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is not `undefined`.
   *
   * **Usage**
   *
   * ```js
   * const value = null;
   * expect(value).toBeDefined();
   * ```
   *
   */
  toBeDefined'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is false in a boolean context, one of `false`, `0`, `''`, `null`, `undefined` or `NaN`. Use this
   * method when you don't care about the specific value.
   *
   * **Usage**
   *
   * ```js
   * const value = null;
   * expect(value).toBeFalsy();
   * ```
   *
   */
  toBeFalsy'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that `value > expected` for number or big integer values.
   *
   * **Usage**
   *
   * ```js
   * const value = 42;
   * expect(value).toBeGreaterThan(1);
   * ```
   *
   * @param expected The value to compare to.
   */
  toBeGreaterThan'
      Parameter
        Identifier: 'expected'
        UnionType
          NumberKeyword
          BigIntKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that `value >= expected` for number or big integer values.
   *
   * **Usage**
   *
   * ```js
   * const value = 42;
   * expect(value).toBeGreaterThanOrEqual(42);
   * ```
   *
   * @param expected The value to compare to.
   */
  toBeGreaterThanOrEqual'
      Parameter
        Identifier: 'expected'
        UnionType
          NumberKeyword
          BigIntKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is an instance of a class. Uses `instanceof` operator.
   *
   * **Usage**
   *
   * ```js
   * expect(page).toBeInstanceOf(Page);
   *
   * class Example {}
   * expect(new Example()).toBeInstanceOf(Example);
   * ```
   *
   * @param expected The class or constructor function.
   */
  toBeInstanceOf'
      Parameter
        Identifier: 'expected'
        TypeReference
          Identifier: ' Function'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that `value < expected` for number or big integer values.
   *
   * **Usage**
   *
   * ```js
   * const value = 42;
   * expect(value).toBeLessThan(100);
   * ```
   *
   * @param expected The value to compare to.
   */
  toBeLessThan'
      Parameter
        Identifier: 'expected'
        UnionType
          NumberKeyword
          BigIntKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that `value <= expected` for number or big integer values.
   *
   * **Usage**
   *
   * ```js
   * const value = 42;
   * expect(value).toBeLessThanOrEqual(42);
   * ```
   *
   * @param expected The value to compare to.
   */
  toBeLessThanOrEqual'
      Parameter
        Identifier: 'expected'
        UnionType
          NumberKeyword
          BigIntKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is `NaN`.
   *
   * **Usage**
   *
   * ```js
   * const value = NaN;
   * expect(value).toBeNaN();
   * ```
   *
   */
  toBeNaN'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is `null`.
   *
   * **Usage**
   *
   * ```js
   * const value = null;
   * expect(value).toBeNull();
   * ```
   *
   */
  toBeNull'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is true in a boolean context, **anything but** `false`, `0`, `''`, `null`, `undefined` or `NaN`.
   * Use this method when you don't care about the specific value.
   *
   * **Usage**
   *
   * ```js
   * const value = { example: 'value' };
   * expect(value).toBeTruthy();
   * ```
   *
   */
  toBeTruthy'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is `undefined`.
   *
   * **Usage**
   *
   * ```js
   * const value = undefined;
   * expect(value).toBeUndefined();
   * ```
   *
   */
  toBeUndefined'
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that string value contains an expected substring. Comparison is case-sensitive.
   *
   * **Usage**
   *
   * ```js
   * const value = 'Hello, World';
   * expect(value).toContain('World');
   * expect(value).toContain(',');
   * ```
   *
   * @param expected Expected substring.
   */
  toContain'
      Parameter
        Identifier: 'expected'
        StringKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is an `Array` or `Set` and contains an expected item.
   *
   * **Usage**
   *
   * ```js
   * const value = [1, 2, 3];
   * expect(value).toContain(2);
   * expect(new Set(value)).toContain(2);
   * ```
   *
   * @param expected Expected value in the collection.
   */
  toContain'
      Parameter
        Identifier: 'expected'
        UnknownKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value is an `Array` or `Set` and contains an item equal to the expected.
   *
   * For objects, this method recursively checks equality of all fields, rather than comparing objects by reference as
   * performed by
   * [expect(value).toContain(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-contain-2).
   *
   * For primitive values, this method is equivalent to
   * [expect(value).toContain(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-contain-2).
   *
   * **Usage**
   *
   * ```js
   * const value = [
   *   { example: 1 },
   *   { another: 2 },
   *   { more: 3 },
   * ];
   * expect(value).toContainEqual({ another: 2 });
   * expect(new Set(value)).toContainEqual({ another: 2 });
   * ```
   *
   * @param expected Expected value in the collection.
   */
  toContainEqual'
      Parameter
        Identifier: 'expected'
        UnknownKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Compares contents of the value with contents of `expected`, performing "deep equality" check.
   *
   * For objects, this method recursively checks equality of all fields, rather than comparing objects by reference as
   * performed by
   * [expect(value).toBe(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-be).
   *
   * For primitive values, this method is equivalent to
   * [expect(value).toBe(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-be).
   *
   * **Usage**
   *
   * ```js
   * const value = { prop: 1 };
   * expect(value).toEqual({ prop: 1 });
   * ```
   *
   * **Non-strict equality**
   *
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * performs deep equality check that compares contents of the received and expected values. To ensure two objects
   * reference the same instance, use
   * [expect(value).toBe(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-be)
   * instead.
   *
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * ignores `undefined` properties and array items, and does not insist on object types being equal. For stricter
   * matching, use
   * [expect(value).toStrictEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-strict-equal).
   *
   * **Pattern matching**
   *
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal)
   * can be also used to perform pattern matching on objects, arrays and primitive types, with the help of the following
   * matchers:
   * - [expect(value).any(constructor)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-any)
   * - [expect(value).anything()](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-anything)
   * - [expect(value).arrayContaining(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-array-containing)
   * - [expect(value).closeTo(expected[, numDigits])](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-close-to)
   * - [expect(value).objectContaining(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-object-containing)
   * - [expect(value).stringContaining(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-string-containing)
   * - [expect(value).stringMatching(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-string-matching)
   *
   * Here is an example that asserts some of the values inside a complex object:
   *
   * ```js
   * expect({
   *   list: [1, 2, 3],
   *   obj: { prop: 'Hello world!', another: 'some other value' },
   *   extra: 'extra',
   * }).toEqual(expect.objectContaining({
   *   list: expect.arrayContaining([2, 3]),
   *   obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),
   * }));
   * ```
   *
   * @param expected Expected value.
   */
  toEqual'
      Parameter
        Identifier: 'expected'
        UnknownKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that value has a `.length` property equal to `expected`. Useful for arrays and strings.
   *
   * **Usage**
   *
   * ```js
   * expect('Hello, World').toHaveLength(12);
   * expect([1, 2, 3]).toHaveLength(3);
   * ```
   *
   * @param expected Expected length.
   */
  toHaveLength'
      Parameter
        Identifier: 'expected'
        NumberKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that property at provided `keyPath` exists on the object and optionally checks that property is equal to
   * the `expected`. Equality is checked recursively, similarly to
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal).
   *
   * **Usage**
   *
   * ```js
   * const value = {
   *   a: {
   *     b: [42],
   *   },
   *   c: true,
   * };
   * expect(value).toHaveProperty('a.b');
   * expect(value).toHaveProperty('a.b', [42]);
   * expect(value).toHaveProperty('a.b[0]', 42);
   * expect(value).toHaveProperty('c');
   * expect(value).toHaveProperty('c', true);
   * ```
   *
   * @param keyPath Path to the property. Use dot notation `a.b` to check nested properties and indexed `a[2]` notation to check nested
   * array items.
   * @param expected Optional expected value to compare the property to.
   */
  toHaveProperty'
      Parameter
        Identifier: 'keyPath'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' Array'
            StringKeyword
      Parameter
        Identifier: ' value'
        QuestionToken
        UnknownKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Ensures that string value matches a regular expression.
   *
   * **Usage**
   *
   * ```js
   * const value = 'Is 42 enough?';
   * expect(value).toMatch(/Is \d+ enough/);
   * ```
   *
   * @param expected Regular expression to match against.
   */
  toMatch'
      Parameter
        Identifier: 'expected'
        UnionType
          TypeReference
            Identifier: ' RegExp'
          StringKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Compares contents of the value with contents of `expected`, performing "deep equality" check. Allows extra
   * properties to be present in the value, unlike
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal),
   * so you can check just a subset of object properties.
   *
   * When comparing arrays, the number of items must match, and each item is checked recursively.
   *
   * **Usage**
   *
   * ```js
   * const value = {
   *   a: 1,
   *   b: 2,
   *   c: true,
   * };
   * expect(value).toMatchObject({ a: 1, c: true });
   * expect(value).toMatchObject({ b: 2, c: true });
   *
   * expect([{ a: 1, b: 2 }]).toMatchObject([{ a: 1 }]);
   * ```
   *
   * @param expected The expected object value to match against.
   */
  toMatchObject'
      Parameter
        Identifier: 'expected'
        UnionType
          TypeReference
            Identifier: ' Record'
            StringKeyword
            UnknownKeyword
          TypeReference
            Identifier: ' Array'
            UnknownKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Compares contents of the value with contents of `expected` **and** their types.
   *
   * Differences from
   * [expect(value).toEqual(expected)](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-equal):
   * - Keys with undefined properties are checked. For example, `{ a: undefined, b: 2 }` does not match `{ b: 2 }`.
   * - Array sparseness is checked. For example, `[, 1]` does not match `[undefined, 1]`.
   * - Object types are checked to be equal. For example, a class instance with fields `a` and `b` will not equal a
   *   literal object with fields `a` and `b`.
   *
   * **Usage**
   *
   * ```js
   * const value = { prop: 1 };
   * expect(value).toStrictEqual({ prop: 1 });
   * ```
   *
   * @param expected Expected value.
   */
  toStrictEqual'
      Parameter
        Identifier: 'expected'
        UnknownKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * Calls the function and ensures it throws an error.
   *
   * Optionally compares the error with `expected`. Allowed expected values:
   * - Regular expression - error message should **match** the pattern.
   * - String - error message should **include** the substring.
   * - Error object - error message should be **equal to** the message property of the object.
   * - Error class - error object should be an **instance of** the class.
   *
   * **Usage**
   *
   * ```js
   * expect(() => {
   *   throw new Error('Something bad');
   * }).toThrow();
   *
   * expect(() => {
   *   throw new Error('Something bad');
   * }).toThrow(/something/);
   *
   * expect(() => {
   *   throw new Error('Something bad');
   * }).toThrow(Error);
   * ```
   *
   * @param expected Expected error message or error object.
   */
  toThrow'
      Parameter
        Identifier: 'error'
        QuestionToken
        UnknownKeyword
      TypeReference
        Identifier: ' R'
    MethodSignature
      Identifier: '
  /**
   * An alias for
   * [expect(value).toThrow([expected])](https://playwright.dev/docs/api/class-genericassertions#generic-assertions-to-throw).
   *
   * **Usage**
   *
   * ```js
   * expect(() => {
   *   throw new Error('Something bad');
   * }).toThrowError();
   * ```
   *
   * @param expected Expected error message or error object.
   */
  toThrowError'
      Parameter
        Identifier: 'error'
        QuestionToken
        UnknownKeyword
      TypeReference
        Identifier: ' R'
  TypeAliasDeclaration
    Identifier: ' FunctionAssertions'
    TypeLiteral
      MethodSignature
        Identifier: '
  /**
   * Retries the callback until all assertions within it pass or the `timeout` value is reached.
   * The `intervals` parameter can be used to establish the probing frequency or pattern.
   *
   * **Usage**
   * ```js
   * await expect(async () => {
   *   const response = await page.request.get('https://api.example.com');
   *   expect(response.status()).toBe(200);
   * }).toPass({
   *   // Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe
   *   intervals: [1_000, 2_000, 10_000], // Defaults to [100, 250, 500, 1000].
   *   timeout: 60_000 // Defaults to 0
   * });
   * ```
   *
   * Note that by default `toPass` does not respect custom expect timeout.
   *
   * @param options
   */
  toPass'
        Parameter
          Identifier: 'options'
          QuestionToken
          TypeLiteral
            PropertySignature
              Identifier: ' timeout'
              QuestionToken
              NumberKeyword
            PropertySignature
              Identifier: ' intervals'
              QuestionToken
              ArrayType
                NumberKeyword
        TypeReference
          Identifier: ' Promise'
          VoidKeyword
  TypeAliasDeclaration
    Identifier: ' BaseMatchers'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' T'
    IntersectionType
      TypeReference
        Identifier: ' GenericAssertions'
        TypeReference
          Identifier: 'R'
      TypeReference
        QualifiedName
          Identifier: ' PlaywrightTest'
          Identifier: 'Matchers'
        TypeReference
          Identifier: 'R'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' SnapshotAssertions'
  TypeAliasDeclaration
    Identifier: ' AllowedGenericMatchers'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' T'
    IntersectionType
      TypeReference
        QualifiedName
          Identifier: ' PlaywrightTest'
          Identifier: 'Matchers'
        TypeReference
          Identifier: 'R'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' Pick'
        TypeReference
          Identifier: 'GenericAssertions'
          TypeReference
            Identifier: 'R'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
  TypeAliasDeclaration
    Identifier: ' SpecificMatchers'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' T'
    ConditionalType
      TypeReference
        Identifier: '
  T'
      TypeReference
        Identifier: ' Page'
      IntersectionType
        TypeReference
          Identifier: ' PageAssertions'
        TypeReference
          Identifier: ' AllowedGenericMatchers'
          TypeReference
            Identifier: 'R'
          TypeReference
            Identifier: ' T'
      ConditionalType
        TypeReference
          Identifier: '
  T'
        TypeReference
          Identifier: ' Locator'
        IntersectionType
          TypeReference
            Identifier: ' LocatorAssertions'
          TypeReference
            Identifier: ' AllowedGenericMatchers'
            TypeReference
              Identifier: 'R'
            TypeReference
              Identifier: ' T'
        ConditionalType
          TypeReference
            Identifier: '
  T'
          TypeReference
            Identifier: ' APIResponse'
          IntersectionType
            TypeReference
              Identifier: ' APIResponseAssertions'
            TypeReference
              Identifier: ' AllowedGenericMatchers'
              TypeReference
                Identifier: 'R'
              TypeReference
                Identifier: ' T'
          IntersectionType
            TypeReference
              Identifier: '
  BaseMatchers'
              TypeReference
                Identifier: 'R'
              TypeReference
                Identifier: ' T'
            ParenthesizedType
              ConditionalType
                TypeReference
                  Identifier: 'T'
                TypeReference
                  Identifier: ' Function'
                TypeReference
                  Identifier: ' FunctionAssertions'
                TypeLiteral
  TypeAliasDeclaration
    Identifier: ' AllMatchers'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' T'
    IntersectionType
      TypeReference
        Identifier: ' PageAssertions'
      TypeReference
        Identifier: ' LocatorAssertions'
      TypeReference
        Identifier: ' APIResponseAssertions'
      TypeReference
        Identifier: ' FunctionAssertions'
      TypeReference
        Identifier: ' BaseMatchers'
        TypeReference
          Identifier: 'R'
        TypeReference
          Identifier: ' T'
  TypeAliasDeclaration
    Identifier: ' IfAny'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' Y'
    TypeParameter
      Identifier: ' N'
    ConditionalType
      LiteralType
        NumericLiteral
      ParenthesizedType
        IntersectionType
          LiteralType
            NumericLiteral
          TypeReference
            Identifier: ' T'
      TypeReference
        Identifier: ' Y'
      TypeReference
        Identifier: ' N'
  TypeAliasDeclaration
    Identifier: ' Awaited'
    TypeParameter
      Identifier: 'T'
    ConditionalType
      TypeReference
        Identifier: ' T'
      TypeReference
        Identifier: ' PromiseLike'
        InferType
          TypeParameter
            Identifier: ' U'
      TypeReference
        Identifier: ' U'
      TypeReference
        Identifier: ' T'
  TypeAliasDeclaration
    Identifier: ' ToUserMatcher'
    TypeParameter
      Identifier: 'F'
    ConditionalType
      TypeReference
        Identifier: ' F'
      FunctionType
        Parameter
          Identifier: 'first'
          AnyKeyword
        Parameter
          DotDotDotToken
          Identifier: 'args'
          InferType
            TypeParameter
              Identifier: ' Rest'
        InferType
          TypeParameter
            Identifier: ' R'
      FunctionType
        Parameter
          DotDotDotToken
          Identifier: 'args'
          TypeReference
            Identifier: ' Rest'
        ParenthesizedType
          ConditionalType
            TypeReference
              Identifier: 'R'
            TypeReference
              Identifier: ' PromiseLike'
              InferType
                TypeParameter
                  Identifier: ' U'
            TypeReference
              Identifier: ' Promise'
              VoidKeyword
            VoidKeyword
      NeverKeyword
  TypeAliasDeclaration
    Identifier: ' ToUserMatcherObject'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' ArgType'
    MappedType
      TypeParameter
        Identifier: 'K'
        TypeOperator
          TypeReference
            Identifier: ' T'
      ConditionalType
        IndexedAccessType
          TypeReference
            Identifier: ' T'
          TypeReference
            Identifier: 'K'
        FunctionType
          Parameter
            Identifier: 'arg'
            TypeReference
              Identifier: ' ArgType'
          Parameter
            DotDotDotToken
            Identifier: 'rest'
            ArrayType
              AnyKeyword
          AnyKeyword
        TypeReference
          Identifier: ' K'
        NeverKeyword
      TypeReference
        Identifier: ' ToUserMatcher'
        IndexedAccessType
          TypeReference
            Identifier: 'T'
          TypeReference
            Identifier: 'K'
  TypeAliasDeclaration
    Identifier: ' MatcherHintColor'
    FunctionType
      Parameter
        Identifier: 'arg'
        StringKeyword
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MatcherHintOptions'
    TypeLiteral
      PropertySignature
        Identifier: '
  comment'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  expectedColor'
        QuestionToken
        TypeReference
          Identifier: ' MatcherHintColor'
      PropertySignature
        Identifier: '
  isDirectExpectCall'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  isNot'
        QuestionToken
        BooleanKeyword
      PropertySignature
        Identifier: '
  promise'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  receivedColor'
        QuestionToken
        TypeReference
          Identifier: ' MatcherHintColor'
      PropertySignature
        Identifier: '
  secondArgument'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  secondArgumentColor'
        QuestionToken
        TypeReference
          Identifier: ' MatcherHintColor'
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' ExpectMatcherUtils'
    MethodSignature
      Identifier: '
  matcherHint'
      Parameter
        Identifier: 'matcherName'
        StringKeyword
      Parameter
        Identifier: ' received'
        UnknownKeyword
      Parameter
        Identifier: ' expected'
        UnknownKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' MatcherHintOptions'
      StringKeyword
    MethodSignature
      Identifier: '
  printDiffOrStringify'
      Parameter
        Identifier: 'expected'
        UnknownKeyword
      Parameter
        Identifier: ' received'
        UnknownKeyword
      Parameter
        Identifier: ' expectedLabel'
        StringKeyword
      Parameter
        Identifier: ' receivedLabel'
        StringKeyword
      Parameter
        Identifier: ' expand'
        BooleanKeyword
      StringKeyword
    MethodSignature
      Identifier: '
  printExpected'
      Parameter
        Identifier: 'value'
        UnknownKeyword
      StringKeyword
    MethodSignature
      Identifier: '
  printReceived'
      Parameter
        Identifier: 'object'
        UnknownKeyword
      StringKeyword
    MethodSignature
      Identifier: '
  printWithType'
      TypeParameter
        Identifier: 'T'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: ' print'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '
  diff'
      Parameter
        Identifier: 'a'
        UnknownKeyword
      Parameter
        Identifier: ' b'
        UnknownKeyword
      UnionType
        StringKeyword
        LiteralType
          NullKeyword
    MethodSignature
      Identifier: '
  stringify'
      Parameter
        Identifier: 'object'
        UnknownKeyword
      Parameter
        Identifier: ' maxDepth'
        QuestionToken
        NumberKeyword
      Parameter
        Identifier: ' maxWidth'
        QuestionToken
        NumberKeyword
      StringKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' ExpectMatcherState'
    TypeLiteral
      PropertySignature
        Identifier: '
  /**
   * Whether this matcher was called with the negated .not modifier.
   */
  isNot'
        BooleanKeyword
      PropertySignature
        Identifier: '
  /**
   * - 'rejects' if matcher was called with the promise .rejects modifier
   * - 'resolves' if matcher was called with the promise .resolves modifier
   * - '' if matcher was not called with a promise modifier
   */
  promise'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      PropertySignature
        Identifier: '
  utils'
        TypeReference
          Identifier: ' ExpectMatcherUtils'
      PropertySignature
        Identifier: '
  /**
   * Timeout in milliseconds for the assertion to be fulfilled.
   */
  timeout'
        NumberKeyword
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' MatcherReturnType'
    TypeLiteral
      PropertySignature
        Identifier: '
  message'
        FunctionType
          StringKeyword
      PropertySignature
        Identifier: '
  pass'
        BooleanKeyword
      PropertySignature
        Identifier: '
  name'
        QuestionToken
        StringKeyword
      PropertySignature
        Identifier: '
  expected'
        QuestionToken
        UnknownKeyword
      PropertySignature
        Identifier: '
  actual'
        QuestionToken
        AnyKeyword
      PropertySignature
        Identifier: '
  log'
        QuestionToken
        ArrayType
          StringKeyword
  TypeAliasDeclaration
    Identifier: ' MakeMatchers'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' T'
    TypeParameter
      Identifier: ' ExtendedMatchers'
    IntersectionType
      TypeLiteral
        PropertySignature
          Identifier: '
  /**
   * If you know how to test something, `.not` lets you test its opposite.
   */
  not'
          TypeReference
            Identifier: ' MakeMatchers'
            TypeReference
              Identifier: 'R'
            TypeReference
              Identifier: ' T'
            TypeReference
              Identifier: ' ExtendedMatchers'
        PropertySignature
          Identifier: '
  /**
   * Use resolves to unwrap the value of a fulfilled promise so any other
   * matcher can be chained. If the promise is rejected the assertion fails.
   */
  resolves'
          TypeReference
            Identifier: ' MakeMatchers'
            TypeReference
              Identifier: 'Promise'
              TypeReference
                Identifier: 'R'
            TypeReference
              Identifier: ' Awaited'
              TypeReference
                Identifier: 'T'
            TypeReference
              Identifier: ' ExtendedMatchers'
        PropertySignature
          Identifier: '
  /**
   * Unwraps the reason of a rejected promise so any other matcher can be chained.
   * If the promise is fulfilled the assertion fails.
   */
  rejects'
          TypeReference
            Identifier: ' MakeMatchers'
            TypeReference
              Identifier: 'Promise'
              TypeReference
                Identifier: 'R'
            AnyKeyword
            TypeReference
              Identifier: ' ExtendedMatchers'
      TypeReference
        Identifier: ' IfAny'
        TypeReference
          Identifier: 'T'
        TypeReference
          Identifier: ' AllMatchers'
          TypeReference
            Identifier: 'R'
          TypeReference
            Identifier: ' T'
        IntersectionType
          TypeReference
            Identifier: ' SpecificMatchers'
            TypeReference
              Identifier: 'R'
            TypeReference
              Identifier: ' T'
          TypeReference
            Identifier: ' ToUserMatcherObject'
            TypeReference
              Identifier: 'ExtendedMatchers'
            TypeReference
              Identifier: ' T'
  TypeAliasDeclaration
    Identifier: ' PollMatchers'
    TypeParameter
      Identifier: 'R'
    TypeParameter
      Identifier: ' T'
    TypeParameter
      Identifier: ' ExtendedMatchers'
    IntersectionType
      TypeLiteral
        PropertySignature
          Identifier: '
  /**
   * If you know how to test something, `.not` lets you test its opposite.
   */
  not'
          TypeReference
            Identifier: ' PollMatchers'
            TypeReference
              Identifier: 'R'
            TypeReference
              Identifier: ' T'
            TypeReference
              Identifier: ' ExtendedMatchers'
      TypeReference
        Identifier: ' BaseMatchers'
        TypeReference
          Identifier: 'R'
        TypeReference
          Identifier: ' T'
      TypeReference
        Identifier: ' ToUserMatcherObject'
        TypeReference
          Identifier: 'ExtendedMatchers'
        TypeReference
          Identifier: ' T'
  TypeAliasDeclaration
    ExportKeyword
    Identifier: ' Expect'
    TypeParameter
      Identifier: 'ExtendedMatchers'
      TypeLiteral
    IntersectionType
      TypeLiteral
        CallSignature
          TypeParameter
            Identifier: 'T'
            UnknownKeyword
          Parameter
            Identifier: 'actual'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' messageOrOptions'
            QuestionToken
            UnionType
              StringKeyword
              TypeLiteral
                PropertySignature
                  Identifier: ' message'
                  QuestionToken
                  StringKeyword
          TypeReference
            Identifier: ' MakeMatchers'
            VoidKeyword
            TypeReference
              Identifier: ' T'
            TypeReference
              Identifier: ' ExtendedMatchers'
        PropertySignature
          Identifier: '
  soft'
          FunctionType
            TypeParameter
              Identifier: 'T'
              UnknownKeyword
            Parameter
              Identifier: 'actual'
              TypeReference
                Identifier: ' T'
            Parameter
              Identifier: ' messageOrOptions'
              QuestionToken
              UnionType
                StringKeyword
                TypeLiteral
                  PropertySignature
                    Identifier: ' message'
                    QuestionToken
                    StringKeyword
            TypeReference
              Identifier: ' MakeMatchers'
              VoidKeyword
              TypeReference
                Identifier: ' T'
              TypeReference
                Identifier: ' ExtendedMatchers'
        PropertySignature
          Identifier: '
  poll'
          FunctionType
            TypeParameter
              Identifier: 'T'
              UnknownKeyword
            Parameter
              Identifier: 'actual'
              FunctionType
                UnionType
                  TypeReference
                    Identifier: ' T'
                  TypeReference
                    Identifier: ' Promise'
                    TypeReference
                      Identifier: 'T'
            Parameter
              Identifier: ' messageOrOptions'
              QuestionToken
              UnionType
                StringKeyword
                TypeLiteral
                  PropertySignature
                    Identifier: ' message'
                    QuestionToken
                    StringKeyword
                  PropertySignature
                    Identifier: ' timeout'
                    QuestionToken
                    NumberKeyword
                  PropertySignature
                    Identifier: ' intervals'
                    QuestionToken
                    ArrayType
                      NumberKeyword
            TypeReference
              Identifier: ' PollMatchers'
              TypeReference
                Identifier: 'Promise'
                VoidKeyword
              TypeReference
                Identifier: ' T'
              TypeReference
                Identifier: ' ExtendedMatchers'
        MethodSignature
          Identifier: '
  extend'
          TypeParameter
            Identifier: 'MoreMatchers'
            TypeReference
              Identifier: ' Record'
              StringKeyword
              FunctionType
                Parameter
                  Identifier: 'this'
                  TypeReference
                    Identifier: ' ExpectMatcherState'
                Parameter
                  Identifier: ' receiver'
                  AnyKeyword
                Parameter
                  DotDotDotToken
                  Identifier: 'args'
                  ArrayType
                    AnyKeyword
                UnionType
                  TypeReference
                    Identifier: ' MatcherReturnType'
                  TypeReference
                    Identifier: ' Promise'
                    TypeReference
                      Identifier: 'MatcherReturnType'
          Parameter
            Identifier: 'matchers'
            TypeReference
              Identifier: ' MoreMatchers'
          TypeReference
            Identifier: ' Expect'
            IntersectionType
              TypeReference
                Identifier: 'ExtendedMatchers'
              TypeReference
                Identifier: ' MoreMatchers'
        PropertySignature
          Identifier: '
  configure'
          FunctionType
            Parameter
              Identifier: 'configuration'
              TypeLiteral
                PropertySignature
                  Identifier: '
    message'
                  QuestionToken
                  StringKeyword
                PropertySignature
                  Identifier: '
    timeout'
                  QuestionToken
                  NumberKeyword
                PropertySignature
                  Identifier: '
    soft'
                  QuestionToken
                  BooleanKeyword
            TypeReference
              Identifier: ' Expect'
              TypeReference
                Identifier: 'ExtendedMatchers'
        MethodSignature
          Identifier: '
  getState'
          UnknownKeyword
        PropertySignature
          Identifier: '
  not'
          TypeReference
            Identifier: ' Omit'
            TypeReference
              Identifier: 'AsymmetricMatchers'
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
      TypeReference
        Identifier: ' AsymmetricMatchers'
  ModuleDeclaration
    DeclareKeyword
    Identifier: ' global'
    ModuleBlock
      ModuleDeclaration
        ExportKeyword
        Identifier: ' PlaywrightTest'
        ModuleBlock
          InterfaceDeclaration
            ExportKeyword
            Identifier: ' Matchers'
            TypeParameter
              Identifier: 'R'
            TypeParameter
              Identifier: ' T'
              UnknownKeyword
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' test'
        TypeReference
          Identifier: ' TestType'
          IntersectionType
            TypeReference
              Identifier: 'PlaywrightTestArgs'
            TypeReference
              Identifier: ' PlaywrightTestOptions'
          IntersectionType
            TypeReference
              Identifier: ' PlaywrightWorkerArgs'
            TypeReference
              Identifier: ' PlaywrightWorkerOptions'
  ExportAssignment
    Identifier: ' test'
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' _baseTest'
        TypeReference
          Identifier: ' TestType'
          TypeLiteral
          TypeLiteral
  VariableStatement
    ExportKeyword
    VariableDeclarationList
      VariableDeclaration
        Identifier: ' expect'
        TypeReference
          Identifier: ' Expect'
          TypeLiteral
  FunctionDeclaration
    ExportKeyword
    Identifier: ' defineConfig'
    Parameter
      Identifier: 'config'
      TypeReference
        Identifier: ' PlaywrightTestConfig'
    TypeReference
      Identifier: ' PlaywrightTestConfig'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' defineConfig'
    TypeParameter
      Identifier: 'T'
    Parameter
      Identifier: 'config'
      TypeReference
        Identifier: ' PlaywrightTestConfig'
        TypeReference
          Identifier: 'T'
    TypeReference
      Identifier: ' PlaywrightTestConfig'
      TypeReference
        Identifier: 'T'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' defineConfig'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' W'
    Parameter
      Identifier: 'config'
      TypeReference
        Identifier: ' PlaywrightTestConfig'
        TypeReference
          Identifier: 'T'
        TypeReference
          Identifier: ' W'
    TypeReference
      Identifier: ' PlaywrightTestConfig'
      TypeReference
        Identifier: 'T'
      TypeReference
        Identifier: ' W'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' defineConfig'
    Parameter
      Identifier: 'config'
      TypeReference
        Identifier: ' PlaywrightTestConfig'
    Parameter
      DotDotDotToken
      Identifier: 'configs'
      ArrayType
        TypeReference
          Identifier: ' PlaywrightTestConfig'
    TypeReference
      Identifier: ' PlaywrightTestConfig'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' defineConfig'
    TypeParameter
      Identifier: 'T'
    Parameter
      Identifier: 'config'
      TypeReference
        Identifier: ' PlaywrightTestConfig'
        TypeReference
          Identifier: 'T'
    Parameter
      DotDotDotToken
      Identifier: 'configs'
      ArrayType
        TypeReference
          Identifier: ' PlaywrightTestConfig'
    TypeReference
      Identifier: ' PlaywrightTestConfig'
      TypeReference
        Identifier: 'T'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' defineConfig'
    TypeParameter
      Identifier: 'T'
    TypeParameter
      Identifier: ' W'
    Parameter
      Identifier: 'config'
      TypeReference
        Identifier: ' PlaywrightTestConfig'
        TypeReference
          Identifier: 'T'
        TypeReference
          Identifier: ' W'
    Parameter
      DotDotDotToken
      Identifier: 'configs'
      ArrayType
        TypeReference
          Identifier: ' PlaywrightTestConfig'
    TypeReference
      Identifier: ' PlaywrightTestConfig'
      TypeReference
        Identifier: 'T'
      TypeReference
        Identifier: ' W'
  TypeAliasDeclaration
    Identifier: ' MergedT'
    TypeParameter
      Identifier: 'List'
    ConditionalType
      TypeReference
        Identifier: ' List'
      TupleType
        TypeReference
          Identifier: 'TestType'
          InferType
            TypeParameter
              Identifier: ' T'
          AnyKeyword
        RestType
          ParenthesizedType
            InferType
              TypeParameter
                Identifier: ' Rest'
      IntersectionType
        TypeReference
          Identifier: ' T'
        TypeReference
          Identifier: ' MergedT'
          TypeReference
            Identifier: 'Rest'
      TypeLiteral
  TypeAliasDeclaration
    Identifier: ' MergedW'
    TypeParameter
      Identifier: 'List'
    ConditionalType
      TypeReference
        Identifier: ' List'
      TupleType
        TypeReference
          Identifier: 'TestType'
          AnyKeyword
          InferType
            TypeParameter
              Identifier: ' W'
        RestType
          ParenthesizedType
            InferType
              TypeParameter
                Identifier: ' Rest'
      IntersectionType
        TypeReference
          Identifier: ' W'
        TypeReference
          Identifier: ' MergedW'
          TypeReference
            Identifier: 'Rest'
      TypeLiteral
  TypeAliasDeclaration
    Identifier: ' MergedTestType'
    TypeParameter
      Identifier: 'List'
    TypeReference
      Identifier: ' TestType'
      TypeReference
        Identifier: 'MergedT'
        TypeReference
          Identifier: 'List'
      TypeReference
        Identifier: ' MergedW'
        TypeReference
          Identifier: 'List'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' mergeTests'
    TypeParameter
      Identifier: 'List'
      ArrayType
        AnyKeyword
    Parameter
      DotDotDotToken
      Identifier: 'tests'
      TypeReference
        Identifier: ' List'
    TypeReference
      Identifier: ' MergedTestType'
      TypeReference
        Identifier: 'List'
  TypeAliasDeclaration
    Identifier: ' MergedExpectMatchers'
    TypeParameter
      Identifier: 'List'
    ConditionalType
      TypeReference
        Identifier: ' List'
      TupleType
        TypeReference
          Identifier: 'Expect'
          InferType
            TypeParameter
              Identifier: ' M'
        RestType
          ParenthesizedType
            InferType
              TypeParameter
                Identifier: ' Rest'
      IntersectionType
        TypeReference
          Identifier: ' M'
        TypeReference
          Identifier: ' MergedExpectMatchers'
          TypeReference
            Identifier: 'Rest'
      TypeLiteral
  TypeAliasDeclaration
    Identifier: ' MergedExpect'
    TypeParameter
      Identifier: 'List'
    TypeReference
      Identifier: ' Expect'
      TypeReference
        Identifier: 'MergedExpectMatchers'
        TypeReference
          Identifier: 'List'
  FunctionDeclaration
    ExportKeyword
    Identifier: ' mergeExpects'
    TypeParameter
      Identifier: 'List'
      ArrayType
        AnyKeyword
    Parameter
      DotDotDotToken
      Identifier: 'expects'
      TypeReference
        Identifier: ' List'
    TypeReference
      Identifier: ' MergedExpect'
      TypeReference
        Identifier: 'List'
  ExportDeclaration
    NamedExports
  InterfaceDeclaration
    Identifier: ' APIResponseAssertions'
    MethodSignature
      Identifier: '
  /**
   * Ensures the response status code is within `200..299` range.
   *
   * **Usage**
   *
   * ```js
   * await expect(response).toBeOK();
   * ```
   *
   */
  toBeOK'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    PropertySignature
      Identifier: '

  /**
   * Makes the assertion check for the opposite condition. For example, this code tests that the response status is not
   * successful:
   *
   * ```js
   * await expect(response).not.toBeOK();
   * ```
   *
   */
  not'
      TypeReference
        Identifier: ' APIResponseAssertions'
  InterfaceDeclaration
    Identifier: ' LocatorAssertions'
    MethodSignature
      Identifier: '
  /**
   * Ensures that {@link Locator} points to an element that is
   * [connected](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected) to a Document or a ShadowRoot.
   *
   * **Usage**
   *
   * ```js
   * await expect(page.getByText('Hidden text')).toBeAttached();
   * ```
   *
   * @param options
   */
  toBeAttached'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    attached'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to a checked input.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByLabel('Subscribe to newsletter');
   * await expect(locator).toBeChecked();
   * ```
   *
   * @param options
   */
  toBeChecked'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    checked'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to a disabled element. Element is disabled if it has "disabled" attribute or is
   * disabled via
   * ['aria-disabled'](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-disabled). Note
   * that only native control elements such as HTML `button`, `input`, `select`, `textarea`, `option`, `optgroup` can be
   * disabled by setting "disabled" attribute. "disabled" attribute on other elements is ignored by the browser.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('button.submit');
   * await expect(locator).toBeDisabled();
   * ```
   *
   * @param options
   */
  toBeDisabled'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an editable element.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByRole('textbox');
   * await expect(locator).toBeEditable();
   * ```
   *
   * @param options
   */
  toBeEditable'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    editable'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an empty editable element or to a DOM node that has no text.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('div.warning');
   * await expect(locator).toBeEmpty();
   * ```
   *
   * @param options
   */
  toBeEmpty'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an enabled element.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('button.submit');
   * await expect(locator).toBeEnabled();
   * ```
   *
   * @param options
   */
  toBeEnabled'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    enabled'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to a focused DOM node.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByRole('textbox');
   * await expect(locator).toBeFocused();
   * ```
   *
   * @param options
   */
  toBeFocused'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures that {@link Locator} either does not resolve to any DOM node, or resolves to a
   * [non-visible](https://playwright.dev/docs/actionability#visible) one.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('.my-element');
   * await expect(locator).toBeHidden();
   * ```
   *
   * @param options
   */
  toBeHidden'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element that intersects viewport, according to the
   * [intersection observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByRole('button');
   * // Make sure at least some part of element intersects viewport.
   * await expect(locator).toBeInViewport();
   * // Make sure element is fully outside of viewport.
   * await expect(locator).not.toBeInViewport();
   * // Make sure that at least half of the element intersects viewport.
   * await expect(locator).toBeInViewport({ ratio: 0.5 });
   * ```
   *
   * @param options
   */
  toBeInViewport'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * The minimal ratio of the element to intersect viewport. If equals to `0`, then element should intersect viewport at
     * any positive ratio. Defaults to `0`.
     */
    ratio'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures that {@link Locator} points to an attached and [visible](https://playwright.dev/docs/actionability#visible) DOM node.
   *
   * To check that at least one element from the list is visible, use
   * [locator.first()](https://playwright.dev/docs/api/class-locator#locator-first).
   *
   * **Usage**
   *
   * ```js
   * // A specific element is visible.
   * await expect(page.getByText('Welcome')).toBeVisible();
   *
   * // At least one item in the list is visible.
   * await expect(page.getByTestId('todo-item').first()).toBeVisible();
   *
   * // At least one of the two elements is visible, possibly both.
   * await expect(
   *     page.getByRole('button', { name: 'Sign in' })
   *         .or(page.getByRole('button', { name: 'Sign up' }))
   *         .first()
   * ).toBeVisible();
   * ```
   *
   * @param options
   */
  toBeVisible'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    visible'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element that contains the given text. All nested elements will be
   * considered when computing the text content of the element. You can use regular expressions for the value as well.
   *
   * **Details**
   *
   * When `expected` parameter is a string, Playwright will normalize whitespaces and line breaks both in the actual
   * text and in the expected string before matching. When regular expression is used, the actual text is matched as is.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('.title');
   * await expect(locator).toContainText('substring');
   * await expect(locator).toContainText(/\d messages/);
   * ```
   *
   * If you pass an array as an expected value, the expectations are:
   * 1. Locator resolves to a list of elements.
   * 1. Elements from a **subset** of this list contain text from the expected array, respectively.
   * 1. The matching subset of elements has the same order as the expected array.
   * 1. Each text value from the expected array is matched by some element from the list.
   *
   * For example, consider the following list:
   *
   * ```html
   * <ul>
   *   <li>Item Text 1</li>
   *   <li>Item Text 2</li>
   *   <li>Item Text 3</li>
   * </ul>
   * ```
   *
   * Let's see how we can use the assertion:
   *
   * ```js
   * // ✓ Contains the right items in the right order
   * await expect(page.locator('ul > li')).toContainText(['Text 1', 'Text 3']);
   *
   * // ✖ Wrong order
   * await expect(page.locator('ul > li')).toContainText(['Text 3', 'Text 2']);
   *
   * // ✖ No item contains this text
   * await expect(page.locator('ul > li')).toContainText(['Some 33']);
   *
   * // ✖ Locator points to the outer list element, not to the list items
   * await expect(page.locator('ul')).toContainText(['Text 3']);
   * ```
   *
   * @param expected Expected substring or RegExp or a list of those.
   * @param options
   */
  toContainText'
      Parameter
        Identifier: 'expected'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          TypeReference
            Identifier: 'ReadonlyArray'
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular
     * expression flag if specified.
     */
    ignoreCase'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to use `element.innerText` instead of `element.textContent` when retrieving DOM node text.
     */
    useInnerText'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with a given
   * [accessible description](https://w3c.github.io/accname/#dfn-accessible-description).
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByTestId('save-button');
   * await expect(locator).toHaveAccessibleDescription('Save results to disk');
   * ```
   *
   * @param description Expected accessible description.
   * @param options
   */
  toHaveAccessibleDescription'
      Parameter
        Identifier: 'description'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular
     * expression flag if specified.
     */
    ignoreCase'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with a given
   * [accessible name](https://w3c.github.io/accname/#dfn-accessible-name).
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByTestId('save-button');
   * await expect(locator).toHaveAccessibleName('Save to disk');
   * ```
   *
   * @param name Expected accessible name.
   * @param options
   */
  toHaveAccessibleName'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular
     * expression flag if specified.
     */
    ignoreCase'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with given attribute.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('input');
   * await expect(locator).toHaveAttribute('type', 'text');
   * ```
   *
   * @param name Attribute name.
   * @param value Expected attribute value.
   * @param options
   */
  toHaveAttribute'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' value'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular
     * expression flag if specified.
     */
    ignoreCase'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with given attribute. The method will assert attribute presence.
   *
   * ```js
   * const locator = page.locator('input');
   * // Assert attribute existence.
   * await expect(locator).toHaveAttribute('disabled');
   * await expect(locator).not.toHaveAttribute('open');
   * ```
   *
   * @param name Attribute name.
   * @param options
   */
  toHaveAttribute'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with given CSS classes. This needs to be a full match or using a
   * relaxed regular expression.
   *
   * **Usage**
   *
   * ```html
   * <div class='selected row' id='component'></div>
   * ```
   *
   * ```js
   * const locator = page.locator('#component');
   * await expect(locator).toHaveClass(/selected/);
   * await expect(locator).toHaveClass('selected row');
   * ```
   *
   * Note that if array is passed as an expected value, entire lists of elements can be asserted:
   *
   * ```js
   * const locator = page.locator('list > .component');
   * await expect(locator).toHaveClass(['component', 'component selected', 'component']);
   * ```
   *
   * @param expected Expected class or RegExp or a list of those.
   * @param options
   */
  toHaveClass'
      Parameter
        Identifier: 'expected'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          TypeReference
            Identifier: 'ReadonlyArray'
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} resolves to an exact number of DOM nodes.
   *
   * **Usage**
   *
   * ```js
   * const list = page.locator('list > .component');
   * await expect(list).toHaveCount(3);
   * ```
   *
   * @param count Expected count.
   * @param options
   */
  toHaveCount'
      Parameter
        Identifier: 'count'
        NumberKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} resolves to an element with the given computed CSS style.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByRole('button');
   * await expect(locator).toHaveCSS('display', 'flex');
   * ```
   *
   * @param name CSS property name.
   * @param value CSS property value.
   * @param options
   */
  toHaveCSS'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' value'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with the given DOM Node ID.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByRole('textbox');
   * await expect(locator).toHaveId('lastname');
   * ```
   *
   * @param id Element id.
   * @param options
   */
  toHaveId'
      Parameter
        Identifier: 'id'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with given JavaScript property. Note that this property can be of
   * a primitive type as well as a plain serializable JavaScript object.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('.component');
   * await expect(locator).toHaveJSProperty('loaded', true);
   * ```
   *
   * @param name Property name.
   * @param value Property value.
   * @param options
   */
  toHaveJSProperty'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' value'
        AnyKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with a given
   * [ARIA role](https://www.w3.org/TR/wai-aria-1.2/#roles).
   *
   * Note that role is matched as a string, disregarding the ARIA role hierarchy. For example, asserting  a superclass
   * role `"checkbox"` on an element with a subclass role `"switch"` will fail.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByTestId('save-button');
   * await expect(locator).toHaveRole('button');
   * ```
   *
   * @param role Required aria role.
   * @param options
   */
  toHaveRole'
      Parameter
        Identifier: 'role'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This function will wait until two consecutive locator screenshots yield the same result, and then compare the last
   * screenshot with the expectation.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByRole('button');
   * await expect(locator).toHaveScreenshot('image.png');
   * ```
   *
   * Note that screenshot assertions only work with Playwright test runner.
   * @param name Snapshot name.
   * @param options
   */
  toHaveScreenshot'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different
     * treatment depending on their duration:
     * - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
     * - infinite animations are canceled to initial state, and then played over after the screenshot.
     *
     * Defaults to `"disabled"` that disables animations.
     */
    animations'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be
     * changed.  Defaults to `"hide"`.
     */
    caret'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink
     * box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.
     */
    mask'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              TypeReference
                Identifier: 'Locator'
          PropertySignature
            Identifier: '

    /**
     * Specify the color of the overlay box for masked elements, in
     * [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.
     */
    maskColor'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is
     * configurable with `TestConfig.expect`. Unset by default.
     */
    maxDiffPixelRatio'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by
     * default.
     */
    maxDiffPixels'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images.
     * Defaults to `false`.
     */
    omitBackground'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this
     * will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so
     * screenshots of high-dpi devices will be twice as large or even larger.
     *
     * Defaults to `"css"`.
     */
    scale'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic
     * elements, make elements invisible or change their properties to help you creating repeatable screenshots. This
     * stylesheet pierces the Shadow DOM and applies to the inner frames.
     */
    stylePath'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Array'
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the
     * same pixel in compared images, between zero (strict) and one (lax), default is configurable with
     * `TestConfig.expect`. Defaults to `0.2`.
     */
    threshold'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This function will wait until two consecutive locator screenshots yield the same result, and then compare the last
   * screenshot with the expectation.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.getByRole('button');
   * await expect(locator).toHaveScreenshot();
   * ```
   *
   * Note that screenshot assertions only work with Playwright test runner.
   * @param options
   */
  toHaveScreenshot'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different
     * treatment depending on their duration:
     * - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
     * - infinite animations are canceled to initial state, and then played over after the screenshot.
     *
     * Defaults to `"disabled"` that disables animations.
     */
    animations'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be
     * changed.  Defaults to `"hide"`.
     */
    caret'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink
     * box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.
     */
    mask'
            QuestionToken
            TypeReference
              Identifier: ' Array'
              TypeReference
                Identifier: 'Locator'
          PropertySignature
            Identifier: '

    /**
     * Specify the color of the overlay box for masked elements, in
     * [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.
     */
    maskColor'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is
     * configurable with `TestConfig.expect`. Unset by default.
     */
    maxDiffPixelRatio'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by
     * default.
     */
    maxDiffPixels'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images.
     * Defaults to `false`.
     */
    omitBackground'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this
     * will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so
     * screenshots of high-dpi devices will be twice as large or even larger.
     *
     * Defaults to `"css"`.
     */
    scale'
            QuestionToken
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          PropertySignature
            Identifier: '

    /**
     * File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic
     * elements, make elements invisible or change their properties to help you creating repeatable screenshots. This
     * stylesheet pierces the Shadow DOM and applies to the inner frames.
     */
    stylePath'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Array'
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the
     * same pixel in compared images, between zero (strict) and one (lax), default is configurable with
     * `TestConfig.expect`. Defaults to `0.2`.
     */
    threshold'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with the given text. All nested elements will be considered when
   * computing the text content of the element. You can use regular expressions for the value as well.
   *
   * **Details**
   *
   * When `expected` parameter is a string, Playwright will normalize whitespaces and line breaks both in the actual
   * text and in the expected string before matching. When regular expression is used, the actual text is matched as is.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('.title');
   * await expect(locator).toHaveText(/Welcome, Test User/);
   * await expect(locator).toHaveText(/Welcome, .*\/);
   * ```
   *
   * If you pass an array as an expected value, the expectations are:
   * 1. Locator resolves to a list of elements.
   * 1. The number of elements equals the number of expected values in the array.
   * 1. Elements from the list have text matching expected array values, one by one, in order.
   *
   * For example, consider the following list:
   *
   * ```html
   * <ul>
   *   <li>Text 1</li>
   *   <li>Text 2</li>
   *   <li>Text 3</li>
   * </ul>
   * ```
   *
   * Let's see how we can use the assertion:
   *
   * ```js
   * // ✓ Has the right items in the right order
   * await expect(page.locator('ul > li')).toHaveText(['Text 1', 'Text 2', 'Text 3']);
   *
   * // ✖ Wrong order
   * await expect(page.locator('ul > li')).toHaveText(['Text 3', 'Text 2', 'Text 1']);
   *
   * // ✖ Last item does not match
   * await expect(page.locator('ul > li')).toHaveText(['Text 1', 'Text 2', 'Text']);
   *
   * // ✖ Locator points to the outer list element, not to the list items
   * await expect(page.locator('ul')).toHaveText(['Text 1', 'Text 2', 'Text 3']);
   * ```
   *
   * @param expected Expected string or RegExp or a list of those.
   * @param options
   */
  toHaveText'
      Parameter
        Identifier: 'expected'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
          TypeReference
            Identifier: 'ReadonlyArray'
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular
     * expression flag if specified.
     */
    ignoreCase'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Whether to use `element.innerText` instead of `element.textContent` when retrieving DOM node text.
     */
    useInnerText'
            QuestionToken
            BooleanKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to an element with the given input value. You can use regular expressions for
   * the value as well.
   *
   * **Usage**
   *
   * ```js
   * const locator = page.locator('input[type=number]');
   * await expect(locator).toHaveValue(/[0-9]/);
   * ```
   *
   * @param value Expected value.
   * @param options
   */
  toHaveValue'
      Parameter
        Identifier: 'value'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the {@link Locator} points to multi-select/combobox (i.e. a `select` with the `multiple` attribute) and the
   * specified values are selected.
   *
   * **Usage**
   *
   * For example, given the following element:
   *
   * ```html
   * <select id="favorite-colors" multiple>
   *   <option value="R">Red</option>
   *   <option value="G">Green</option>
   *   <option value="B">Blue</option>
   * </select>
   * ```
   *
   * ```js
   * const locator = page.locator('id=favorite-colors');
   * await locator.selectOption(['R', 'G']);
   * await expect(locator).toHaveValues([/R/, /G/]);
   * ```
   *
   * @param values Expected options currently selected.
   * @param options
   */
  toHaveValues'
      Parameter
        Identifier: 'values'
        TypeReference
          Identifier: ' ReadonlyArray'
          UnionType
            StringKeyword
            TypeReference
              Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    PropertySignature
      Identifier: '

  /**
   * Makes the assertion check for the opposite condition. For example, this code tests that the Locator doesn't contain
   * text `"error"`:
   *
   * ```js
   * await expect(locator).not.toContainText('error');
   * ```
   *
   */
  not'
      TypeReference
        Identifier: ' LocatorAssertions'
  InterfaceDeclaration
    Identifier: ' PageAssertions'
    MethodSignature
      Identifier: '
  /**
   * This function will wait until two consecutive page screenshots yield the same result, and then compare the last
   * screenshot with the expectation.
   *
   * **Usage**
   *
   * ```js
   * await expect(page).toHaveScreenshot('image.png');
   * ```
   *
   * Note that screenshot assertions only work with Playwright test runner.
   * @param name Snapshot name.
   * @param options
   */
  toHaveScreenshot'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeReference
          Identifier: ' PageAssertionsToHaveScreenshotOptions'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * This function will wait until two consecutive page screenshots yield the same result, and then compare the last
   * screenshot with the expectation.
   *
   * **Usage**
   *
   * ```js
   * await expect(page).toHaveScreenshot();
   * ```
   *
   * Note that screenshot assertions only work with Playwright test runner.
   * @param options
   */
  toHaveScreenshot'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' PageAssertionsToHaveScreenshotOptions'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the page has the given title.
   *
   * **Usage**
   *
   * ```js
   * await expect(page).toHaveTitle(/.*checkout/);
   * ```
   *
   * @param titleOrRegExp Expected title or RegExp.
   * @param options
   */
  toHaveTitle'
      Parameter
        Identifier: 'titleOrRegExp'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Ensures the page is navigated to the given URL.
   *
   * **Usage**
   *
   * ```js
   * await expect(page).toHaveURL(/.*checkout/);
   * ```
   *
   * @param urlOrRegExp Expected URL string or RegExp.
   * @param options
   */
  toHaveURL'
      Parameter
        Identifier: 'urlOrRegExp'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'RegExp'
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Whether to perform case-insensitive match. `ignoreCase` option takes precedence over the corresponding regular
     * expression flag if specified.
     */
    ignoreCase'
            QuestionToken
            BooleanKeyword
          PropertySignature
            Identifier: '

    /**
     * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
     */
    timeout'
            QuestionToken
            NumberKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    PropertySignature
      Identifier: '

  /**
   * Makes the assertion check for the opposite condition. For example, this code tests that the page URL doesn't
   * contain `"error"`:
   *
   * ```js
   * await expect(page).not.toHaveURL('error');
   * ```
   *
   */
  not'
      TypeReference
        Identifier: ' PageAssertions'
  InterfaceDeclaration
    Identifier: ' SnapshotAssertions'
    MethodSignature
      Identifier: '
  /**
   * **NOTE** To compare screenshots, use
   * [expect(page).toHaveScreenshot(name[, options])](https://playwright.dev/docs/api/class-pageassertions#page-assertions-to-have-screenshot-1)
   * instead.
   *
   * Ensures that passed value, either a [string] or a [Buffer], matches the expected snapshot stored in the test
   * snapshots directory.
   *
   * **Usage**
   *
   * ```js
   * // Basic usage.
   * expect(await page.screenshot()).toMatchSnapshot('landing-page.png');
   *
   * // Pass options to customize the snapshot comparison and have a generated name.
   * expect(await page.screenshot()).toMatchSnapshot('landing-page.png', {
   *   maxDiffPixels: 27, // allow no more than 27 different pixels.
   * });
   *
   * // Configure image matching threshold.
   * expect(await page.screenshot()).toMatchSnapshot('landing-page.png', { threshold: 0.3 });
   *
   * // Bring some structure to your snapshot files by passing file path segments.
   * expect(await page.screenshot()).toMatchSnapshot(['landing', 'step2.png']);
   * expect(await page.screenshot()).toMatchSnapshot(['landing', 'step3.png']);
   * ```
   *
   * Learn more about [visual comparisons](https://playwright.dev/docs/test-snapshots).
   *
   * Note that matching snapshots only work with Playwright test runner.
   * @param name Snapshot name.
   * @param options
   */
  toMatchSnapshot'
      Parameter
        Identifier: 'name'
        UnionType
          StringKeyword
          TypeReference
            Identifier: 'ReadonlyArray'
            StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is
     * configurable with `TestConfig.expect`. Unset by default.
     */
    maxDiffPixelRatio'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by
     * default.
     */
    maxDiffPixels'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the
     * same pixel in compared images, between zero (strict) and one (lax), default is configurable with
     * `TestConfig.expect`. Defaults to `0.2`.
     */
    threshold'
            QuestionToken
            NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * **NOTE** To compare screenshots, use
   * [expect(page).toHaveScreenshot([options])](https://playwright.dev/docs/api/class-pageassertions#page-assertions-to-have-screenshot-2)
   * instead.
   *
   * Ensures that passed value, either a [string] or a [Buffer], matches the expected snapshot stored in the test
   * snapshots directory.
   *
   * **Usage**
   *
   * ```js
   * // Basic usage and the file name is derived from the test name.
   * expect(await page.screenshot()).toMatchSnapshot();
   *
   * // Pass options to customize the snapshot comparison and have a generated name.
   * expect(await page.screenshot()).toMatchSnapshot({
   *   maxDiffPixels: 27, // allow no more than 27 different pixels.
   * });
   *
   * // Configure image matching threshold and snapshot name.
   * expect(await page.screenshot()).toMatchSnapshot({
   *   name: 'landing-page.png',
   *   threshold: 0.3,
   * });
   * ```
   *
   * Learn more about [visual comparisons](https://playwright.dev/docs/test-snapshots).
   *
   * Note that matching snapshots only work with Playwright test runner.
   * @param options
   */
  toMatchSnapshot'
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is
     * configurable with `TestConfig.expect`. Unset by default.
     */
    maxDiffPixelRatio'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by
     * default.
     */
    maxDiffPixels'
            QuestionToken
            NumberKeyword
          PropertySignature
            Identifier: '

    /**
     * Snapshot name. If not passed, the test name and ordinals are used when called multiple times.
     */
    name'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Array'
                StringKeyword
          PropertySignature
            Identifier: '

    /**
     * An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the
     * same pixel in compared images, between zero (strict) and one (lax), default is configurable with
     * `TestConfig.expect`. Defaults to `0.2`.
     */
    threshold'
            QuestionToken
            NumberKeyword
      VoidKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TestInfo'
    MethodSignature
      Identifier: '
  /**
   * Attach a value or a file from disk to the current test. Some reporters show test attachments. Either `path` or
   * `body` must be specified, but not both.
   *
   * For example, you can attach a screenshot to the test:
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test('basic test', async ({ page }, testInfo) => {
   *   await page.goto('https://playwright.dev');
   *   const screenshot = await page.screenshot();
   *   await testInfo.attach('screenshot', { body: screenshot, contentType: 'image/png' });
   * });
   * ```
   *
   * Or you can attach files returned by your APIs:
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   * import { download } from './my-custom-helpers';
   *
   * test('basic test', async ({}, testInfo) => {
   *   const tmpPath = await download('a');
   *   await testInfo.attach('downloaded', { path: tmpPath });
   * });
   * ```
   *
   * **NOTE** [testInfo.attach(name[, options])](https://playwright.dev/docs/api/class-testinfo#test-info-attach)
   * automatically takes care of copying attached files to a location that is accessible to reporters. You can safely
   * remove the attachment after awaiting the attach call.
   * @param name Attachment name. The name will also be sanitized and used as the prefix of file name when saving to disk.
   * @param options
   */
  attach'
      Parameter
        Identifier: 'name'
        StringKeyword
      Parameter
        Identifier: ' options'
        QuestionToken
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Attachment body. Mutually exclusive with `path`.
     */
    body'
            QuestionToken
            UnionType
              StringKeyword
              TypeReference
                Identifier: 'Buffer'
          PropertySignature
            Identifier: '

    /**
     * Content type of this attachment to properly present in the report, for example `'application/json'` or
     * `'image/png'`. If omitted, content type is inferred based on the `path`, or defaults to `text/plain` for [string]
     * attachments and `application/octet-stream` for [Buffer] attachments.
     */
    contentType'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Path on the filesystem to the attached file. Mutually exclusive with `body`.
     */
    path'
            QuestionToken
            StringKeyword
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Marks the currently running test as "should fail". Playwright Test runs this test and ensures that it is actually
   * failing. This is useful for documentation purposes to acknowledge that some functionality is broken until it is
   * fixed. This is similar to
   * [test.fail([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fail).
   */
  fail'
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Conditionally mark the currently running test as "should fail" with an optional description. This is similar to
   * [test.fail([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fail).
   * @param condition Test is marked as "should fail" when the condition is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fail'
      Parameter
        Identifier: 'condition'
        BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Mark a test as "fixme", with the intention to fix it. Test is immediately aborted. This is similar to
   * [test.fixme([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fixme).
   */
  fixme'
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Conditionally mark the currently running test as "fixme" with an optional description. This is similar to
   * [test.fixme([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fixme).
   * @param condition Test is marked as "fixme" when the condition is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  fixme'
      Parameter
        Identifier: 'condition'
        BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns a path inside the [testInfo.outputDir](https://playwright.dev/docs/api/class-testinfo#test-info-output-dir)
   * where the test can safely put a temporary file. Guarantees that tests running in parallel will not interfere with
   * each other.
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   * import fs from 'fs';
   *
   * test('example test', async ({}, testInfo) => {
   *   const file = testInfo.outputPath('dir', 'temporary-file.txt');
   *   await fs.promises.writeFile(file, 'Put some data to the dir/temporary-file.txt', 'utf8');
   * });
   * ```
   *
   * > Note that `pathSegments` accepts path segments to the test output directory such as
   * `testInfo.outputPath('relative', 'path', 'to', 'output')`.
   * > However, this path must stay within the
   * [testInfo.outputDir](https://playwright.dev/docs/api/class-testinfo#test-info-output-dir) directory for each test
   * (i.e. `test-results/a-test-title`), otherwise it will throw.
   * @param pathSegments Path segments to append at the end of the resulting path.
   */
  outputPath'
      Parameter
        DotDotDotToken
        Identifier: 'pathSegments'
        TypeReference
          Identifier: ' ReadonlyArray'
          StringKeyword
      StringKeyword
    MethodSignature
      Identifier: '

  /**
   * Changes the timeout for the currently running test. Zero means no timeout. Learn more about
   * [various timeouts](https://playwright.dev/docs/test-timeouts).
   *
   * Timeout is usually specified in the [configuration file](https://playwright.dev/docs/test-configuration), but it could be useful to
   * change the timeout in certain scenarios:
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.beforeEach(async ({ page }, testInfo) => {
   *   // Extend timeout for all tests running this hook by 30 seconds.
   *   testInfo.setTimeout(testInfo.timeout + 30000);
   * });
   * ```
   *
   * @param timeout Timeout in milliseconds.
   */
  setTimeout'
      Parameter
        Identifier: 'timeout'
        NumberKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Unconditionally skip the currently running test. Test is immediately aborted. This is similar to
   * [test.skip([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-skip).
   */
  skip'
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Conditionally skips the currently running test with an optional description. This is similar to
   * [test.skip([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-skip).
   * @param condition A skip condition. Test is skipped when the condition is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  skip'
      Parameter
        Identifier: 'condition'
        BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Marks the currently running test as "slow", giving it triple the default timeout. This is similar to
   * [test.slow([condition, callback, description])](https://playwright.dev/docs/api/class-test#test-slow).
   */
  slow'
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Conditionally mark the currently running test as "slow" with an optional description, giving it triple the default
   * timeout. This is similar to
   * [test.slow([condition, callback, description])](https://playwright.dev/docs/api/class-test#test-slow).
   * @param condition Test is marked as "slow" when the condition is `true`.
   * @param description Optional description that will be reflected in a test report.
   */
  slow'
      Parameter
        Identifier: 'condition'
        BooleanKeyword
      Parameter
        Identifier: ' description'
        QuestionToken
        StringKeyword
      VoidKeyword
    MethodSignature
      Identifier: '

  /**
   * Returns a path to a snapshot file with the given `pathSegments`. Learn more about
   * [snapshots](https://playwright.dev/docs/test-snapshots).
   *
   * > Note that `pathSegments` accepts path segments to the snapshot file such as `testInfo.snapshotPath('relative',
   * 'path', 'to', 'snapshot.png')`.
   * > However, this path must stay within the snapshots directory for each test file (i.e. `a.spec.js-snapshots`),
   * otherwise it will throw.
   * @param pathSegments The name of the snapshot or the path segments to define the snapshot file path. Snapshots with the same name in the
   * same test file are expected to be the same.
   */
  snapshotPath'
      Parameter
        DotDotDotToken
        Identifier: 'pathSegments'
        TypeReference
          Identifier: ' ReadonlyArray'
          StringKeyword
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The list of annotations applicable to the current test. Includes annotations from the test, annotations from all
   * [test.describe([title, details, callback])](https://playwright.dev/docs/api/class-test#test-describe) groups the
   * test belongs to and file-level annotations for the test file.
   *
   * Learn more about [test annotations](https://playwright.dev/docs/test-annotations).
   */
  annotations'
      TypeReference
        Identifier: ' Array'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Annotation type, for example `'skip'` or `'fail'`.
     */
    type'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional description.
     */
    description'
            QuestionToken
            StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The list of files or buffers attached to the current test. Some reporters show test attachments.
   *
   * To add an attachment, use
   * [testInfo.attach(name[, options])](https://playwright.dev/docs/api/class-testinfo#test-info-attach) instead of
   * directly pushing onto this array.
   */
  attachments'
      TypeReference
        Identifier: ' Array'
        TypeLiteral
          PropertySignature
            Identifier: '
    /**
     * Attachment name.
     */
    name'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Content type of this attachment to properly present in the report, for example `'application/json'` or
     * `'image/png'`.
     */
    contentType'
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional path on the filesystem to the attached file.
     */
    path'
            QuestionToken
            StringKeyword
          PropertySignature
            Identifier: '

    /**
     * Optional attachment body used instead of a file.
     */
    body'
            QuestionToken
            TypeReference
              Identifier: ' Buffer'
    PropertySignature
      Identifier: '

  /**
   * Column number where the currently running test is declared.
   */
  column'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Processed configuration from the [configuration file](https://playwright.dev/docs/test-configuration).
   */
  config'
      TypeReference
        Identifier: ' FullConfig'
    PropertySignature
      Identifier: '

  /**
   * The number of milliseconds the test took to finish. Always zero before the test finishes, either successfully or
   * not. Can be used in
   * [test.afterEach([title, hookFunction])](https://playwright.dev/docs/api/class-test#test-after-each) hook.
   */
  duration'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * First error thrown during test execution, if any. This is equal to the first element in
   * [testInfo.errors](https://playwright.dev/docs/api/class-testinfo#test-info-errors).
   */
  error'
      QuestionToken
      TypeReference
        Identifier: ' TestInfoError'
    PropertySignature
      Identifier: '

  /**
   * Errors thrown during test execution, if any.
   */
  errors'
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'TestInfoError'
    PropertySignature
      Identifier: '

  /**
   * Expected status for the currently running test. This is usually `'passed'`, except for a few cases:
   * - `'skipped'` for skipped tests, e.g. with
   *   [test.skip([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-skip);
   * - `'failed'` for tests marked as failed with
   *   [test.fail([title, details, body, condition, callback, description])](https://playwright.dev/docs/api/class-test#test-fail).
   *
   * Expected status is usually compared with the actual
   * [testInfo.status](https://playwright.dev/docs/api/class-testinfo#test-info-status):
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.afterEach(async ({}, testInfo) => {
   *   if (testInfo.status !== testInfo.expectedStatus)
   *     console.log(`${testInfo.title} did not run as expected!`);
   * });
   * ```
   *
   */
  expectedStatus'
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Absolute path to a file where the currently running test is declared.
   */
  file'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Test function as passed to `test(title, testFunction)`.
   */
  fn'
      TypeReference
        Identifier: ' Function'
    PropertySignature
      Identifier: '

  /**
   * Line number where the currently running test is declared.
   */
  line'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Absolute path to the output directory for this specific test run. Each test run gets its own directory so they
   * cannot conflict.
   */
  outputDir'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have
   * a different `parallelIndex`. When a worker is restarted, for example after a failure, the new worker process has
   * the same `parallelIndex`.
   *
   * Also available as `process.env.TEST_PARALLEL_INDEX`. Learn more about
   * [parallelism and sharding](https://playwright.dev/docs/test-parallel) with Playwright Test.
   */
  parallelIndex'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Processed project configuration from the [configuration file](https://playwright.dev/docs/test-configuration).
   */
  project'
      TypeReference
        Identifier: ' FullProject'
    PropertySignature
      Identifier: '

  /**
   * Specifies a unique repeat index when running in "repeat each" mode. This mode is enabled by passing `--repeat-each`
   * to the [command line](https://playwright.dev/docs/test-cli).
   */
  repeatEachIndex'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Specifies the retry number when the test is retried after a failure. The first test run has
   * [testInfo.retry](https://playwright.dev/docs/api/class-testinfo#test-info-retry) equal to zero, the first retry has
   * it equal to one, and so on. Learn more about [retries](https://playwright.dev/docs/test-retries#retries).
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.beforeEach(async ({}, testInfo) => {
   *   // You can access testInfo.retry in any hook or fixture.
   *   if (testInfo.retry > 0)
   *     console.log(`Retrying!`);
   * });
   *
   * test('my test', async ({ page }, testInfo) => {
   *   // Here we clear some server-side state when retrying.
   *   if (testInfo.retry)
   *     await cleanSomeCachesOnTheServer();
   *   // ...
   * });
   * ```
   *
   */
  retry'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Absolute path to the snapshot output directory for this specific test. Each test suite gets its own directory so
   * they cannot conflict.
   *
   * This property does not account for the
   * [testProject.snapshotPathTemplate](https://playwright.dev/docs/api/class-testproject#test-project-snapshot-path-template)
   * configuration.
   */
  snapshotDir'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * **NOTE** Use of [testInfo.snapshotSuffix](https://playwright.dev/docs/api/class-testinfo#test-info-snapshot-suffix)
   * is discouraged. Please use
   * [testConfig.snapshotPathTemplate](https://playwright.dev/docs/api/class-testconfig#test-config-snapshot-path-template)
   * to configure snapshot paths.
   *
   * Suffix used to differentiate snapshots between multiple test configurations. For example, if snapshots depend on
   * the platform, you can set `testInfo.snapshotSuffix` equal to `process.platform`. In this case
   * `expect(value).toMatchSnapshot(snapshotName)` will use different snapshots depending on the platform. Learn more
   * about [snapshots](https://playwright.dev/docs/test-snapshots).
   */
  snapshotSuffix'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Actual status for the currently running test. Available after the test has finished in
   * [test.afterEach([title, hookFunction])](https://playwright.dev/docs/api/class-test#test-after-each) hook and
   * fixtures.
   *
   * Status is usually compared with the
   * [testInfo.expectedStatus](https://playwright.dev/docs/api/class-testinfo#test-info-expected-status):
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.afterEach(async ({}, testInfo) => {
   *   if (testInfo.status !== testInfo.expectedStatus)
   *     console.log(`${testInfo.title} did not run as expected!`);
   * });
   * ```
   *
   */
  status'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Tags that apply to the test. Learn more about [tags](https://playwright.dev/docs/test-annotations#tag-tests).
   *
   * Note that any changes made to this list while the test is running will not be visible to test reporters.
   */
  tags'
      TypeReference
        Identifier: ' Array'
        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Test id matching the test case id in the reporter API.
   */
  testId'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Timeout in milliseconds for the currently running test. Zero means no timeout. Learn more about
   * [various timeouts](https://playwright.dev/docs/test-timeouts).
   *
   * Timeout is usually specified in the [configuration file](https://playwright.dev/docs/test-configuration)
   *
   * ```js
   * import { test, expect } from '@playwright/test';
   *
   * test.beforeEach(async ({ page }, testInfo) => {
   *   // Extend timeout for all tests running this hook by 30 seconds.
   *   testInfo.setTimeout(testInfo.timeout + 30000);
   * });
   * ```
   *
   */
  timeout'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * The title of the currently running test as passed to `test(title, testFunction)`.
   */
  title'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The full title path starting with the project.
   */
  titlePath'
      TypeReference
        Identifier: ' Array'
        StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The unique index of the worker process that is running the test. When a worker is restarted, for example after a
   * failure, the new worker process gets a new unique `workerIndex`.
   *
   * Also available as `process.env.TEST_WORKER_INDEX`. Learn more about [parallelism and sharding](https://playwright.dev/docs/test-parallel)
   * with Playwright Test.
   */
  workerIndex'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' TestInfoError'
    PropertySignature
      Identifier: '
  /**
   * Error message. Set when [Error] (or its subclass) has been thrown.
   */
  message'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Error stack. Set when [Error] (or its subclass) has been thrown.
   */
  stack'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * The value that was thrown. Set when anything except the [Error] (or its subclass) has been thrown.
   */
  value'
      QuestionToken
      StringKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WorkerInfo'
    PropertySignature
      Identifier: '
  /**
   * Processed configuration from the [configuration file](https://playwright.dev/docs/test-configuration).
   */
  config'
      TypeReference
        Identifier: ' FullConfig'
    PropertySignature
      Identifier: '

  /**
   * The index of the worker between `0` and `workers - 1`. It is guaranteed that workers running at the same time have
   * a different `parallelIndex`. When a worker is restarted, for example after a failure, the new worker process has
   * the same `parallelIndex`.
   *
   * Also available as `process.env.TEST_PARALLEL_INDEX`. Learn more about
   * [parallelism and sharding](https://playwright.dev/docs/test-parallel) with Playwright Test.
   */
  parallelIndex'
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Processed project configuration from the [configuration file](https://playwright.dev/docs/test-configuration).
   */
  project'
      TypeReference
        Identifier: ' FullProject'
    PropertySignature
      Identifier: '

  /**
   * The unique index of the worker process that is running the test. When a worker is restarted, for example after a
   * failure, the new worker process gets a new unique `workerIndex`.
   *
   * Also available as `process.env.TEST_WORKER_INDEX`. Learn more about [parallelism and sharding](https://playwright.dev/docs/test-parallel)
   * with Playwright Test.
   */
  workerIndex'
      NumberKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' PageAssertionsToHaveScreenshotOptions'
    PropertySignature
      Identifier: '
  /**
   * When set to `"disabled"`, stops CSS animations, CSS transitions and Web Animations. Animations get different
   * treatment depending on their duration:
   * - finite animations are fast-forwarded to completion, so they'll fire `transitionend` event.
   * - infinite animations are canceled to initial state, and then played over after the screenshot.
   *
   * Defaults to `"disabled"` that disables animations.
   */
  animations'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * When set to `"hide"`, screenshot will hide text caret. When set to `"initial"`, text caret behavior will not be
   * changed.  Defaults to `"hide"`.
   */
  caret'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * An object which specifies clipping of the resulting image.
   */
  clip'
      QuestionToken
      TypeLiteral
        PropertySignature
          Identifier: '
    /**
     * x-coordinate of top-left corner of clip area
     */
    x'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * y-coordinate of top-left corner of clip area
     */
    y'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * width of clipping area
     */
    width'
          NumberKeyword
        PropertySignature
          Identifier: '

    /**
     * height of clipping area
     */
    height'
          NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to
   * `false`.
   */
  fullPage'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Specify locators that should be masked when the screenshot is taken. Masked elements will be overlaid with a pink
   * box `#FF00FF` (customized by `maskColor`) that completely covers its bounding box.
   */
  mask'
      QuestionToken
      TypeReference
        Identifier: ' Array'
        TypeReference
          Identifier: 'Locator'
    PropertySignature
      Identifier: '

  /**
   * Specify the color of the overlay box for masked elements, in
   * [CSS color format](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). Default color is pink `#FF00FF`.
   */
  maskColor'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * An acceptable ratio of pixels that are different to the total amount of pixels, between `0` and `1`. Default is
   * configurable with `TestConfig.expect`. Unset by default.
   */
  maxDiffPixelRatio'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * An acceptable amount of pixels that could be different. Default is configurable with `TestConfig.expect`. Unset by
   * default.
   */
  maxDiffPixels'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Hides default white background and allows capturing screenshots with transparency. Not applicable to `jpeg` images.
   * Defaults to `false`.
   */
  omitBackground'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * When set to `"css"`, screenshot will have a single pixel per each css pixel on the page. For high-dpi devices, this
   * will keep screenshots small. Using `"device"` option will produce a single pixel per each device pixel, so
   * screenshots of high-dpi devices will be twice as large or even larger.
   *
   * Defaults to `"css"`.
   */
  scale'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * File name containing the stylesheet to apply while making the screenshot. This is where you can hide dynamic
   * elements, make elements invisible or change their properties to help you creating repeatable screenshots. This
   * stylesheet pierces the Shadow DOM and applies to the inner frames.
   */
  stylePath'
      QuestionToken
      UnionType
        StringKeyword
        TypeReference
          Identifier: 'Array'
          StringKeyword
    PropertySignature
      Identifier: '

  /**
   * An acceptable perceived color difference in the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) between the
   * same pixel in compared images, between zero (strict) and one (lax), default is configurable with
   * `TestConfig.expect`. Defaults to `0.2`.
   */
  threshold'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Time to retry the assertion for in milliseconds. Defaults to `timeout` in `TestConfig.expect`.
   */
  timeout'
      QuestionToken
      NumberKeyword
  InterfaceDeclaration
    Identifier: ' TestConfigWebServer'
    PropertySignature
      Identifier: '
  /**
   * Shell command to start. For example `npm run start`..
   */
  command'
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Current working directory of the spawned process, defaults to the directory of the configuration file.
   */
  cwd'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Environment variables to set for the command, `process.env` by default.
   */
  env'
      QuestionToken
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'key'
            StringKeyword
          StringKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to ignore HTTPS errors when fetching the `url`. Defaults to `false`.
   */
  ignoreHTTPSErrors'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The port that your http server is expected to appear on. It does wait until it accepts connections. Either `port`
   * or `url` should be specified.
   */
  port'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * If true, it will re-use an existing server on the `port` or `url` when available. If no server is running on that
   * `port` or `url`, it will run the command to start a new server. If `false`, it will throw if an existing process is
   * listening on the `port` or `url`. This should be commonly set to `!process.env.CI` to allow the local dev server
   * when running tests locally.
   */
  reuseExistingServer'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * If `"pipe"`, it will pipe the stdout of the command to the process stdout. If `"ignore"`, it will ignore the stdout
   * of the command. Default to `"ignore"`.
   */
  stdout'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * Whether to pipe the stderr of the command to the process stderr or ignore it. Defaults to `"pipe"`.
   */
  stderr'
      QuestionToken
      UnionType
        LiteralType
          StringLiteral
        LiteralType
          StringLiteral
    PropertySignature
      Identifier: '

  /**
   * How long to wait for the process to start up and be available in milliseconds. Defaults to 60000.
   */
  timeout'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * The url on your http server that is expected to return a 2xx, 3xx, 400, 401, 402, or 403 status code when the
   * server is ready to accept connections. Redirects (3xx status codes) are being followed and the new location is
   * checked. Either `port` or `url` should be specified.
   */
  url'
      QuestionToken
      StringKeyword
