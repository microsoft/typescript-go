--- old.jsxNamespaceGlobalReexport.types
+++ new.jsxNamespaceGlobalReexport.types
@@= skipped -2, +2 lines =@@
 === /node_modules/preact/index.d.ts ===
 type Defaultize<Props, Defaults> =
 >Defaultize : Defaultize<Props, Defaults>
+>Props : Props
+>Defaults : Defaults
 
 	// Distribute over unions
 	Props extends any // Make any properties included in Default optional
@@= skipped -8, +10 lines =@@
 				Pick<Props, Exclude<keyof Props, keyof Defaults>>
 		: never;
 export namespace JSXInternal {
+>JSXInternal : any
+
     interface HTMLAttributes<T = {}> { }
+>HTMLAttributes : HTMLAttributes<T>
+>T : T
+
     interface SVGAttributes<T = {}> { }
+>SVGAttributes : SVGAttributes<T>
+>T : T
+
     type LibraryManagedAttributes<Component, Props> = Component extends {
 >LibraryManagedAttributes : LibraryManagedAttributes<Component, Props>
+>Component : Component
+>Props : Props
 
         defaultProps: infer Defaults;
 >defaultProps : Defaults
+>Defaults : Defaults
     }
         ? Defaultize<Props, Defaults>
         : Props;
 
     interface IntrinsicAttributes {
+>IntrinsicAttributes : IntrinsicAttributes
+
         key?: any;
 >key : any
     }
 
     interface Element extends VNode<any> { }
+>Element : Element
 
     interface ElementClass extends Component<any, any> { }
+>ElementClass : ElementClass
 
     interface ElementAttributesProperty {
+>ElementAttributesProperty : ElementAttributesProperty
+
         props: any;
 >props : any
     }
 
     interface ElementChildrenAttribute {
+>ElementChildrenAttribute : ElementChildrenAttribute
+
         children: any;
 >children : any
     }
 
     interface IntrinsicElements {
+>IntrinsicElements : IntrinsicElements
+
         div: HTMLAttributes;
 >div : HTMLAttributes<{}>
     }
@@= skipped -40, +61 lines =@@
 
 export type ComponentType<T = {}> = {};
 >ComponentType : ComponentType<T>
+>T : T
 
 export type ComponentChild = {};
 >ComponentChild : ComponentChild
@@= skipped -9, +10 lines =@@
 
 export type VNode<T = {}> = {};
 >VNode : VNode<T>
+>T : T
 
 export type Attributes = {};
 >Attributes : Attributes
 
 export type Component<T = {}, U = {}> = {};
 >Component : Component<T, U>
+>T : T
+>U : U
 
 === /node_modules/preact/jsx-runtime/index.d.ts ===
 export { Fragment } from '..';
@@= skipped -32, +35 lines =@@
 >JSXInternal : any
 
 export function jsx(
->jsx : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChild; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChild; }, key?: string): VNode<any>; }
+>jsx : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChild | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: string,
 >type : string
 
     props: JSXInternal.HTMLAttributes &
->props : JSXInternal.HTMLAttributes<{}> & JSXInternal.SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild; }
+>props : HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild | undefined; }
 >JSXInternal : any
 
         JSXInternal.SVGAttributes &
@@= skipped -20, +20 lines =@@
 
 ): VNode<any>;
 export function jsx<P>(
->jsx : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChild; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChild; }, key?: string): VNode<any>; }
+>jsx : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChild | undefined; }, key?: string | undefined): VNode<any>; }
+>P : P
 
     type: ComponentType<P>,
 >type : ComponentType<P>
 
     props: Attributes & P & { children?: ComponentChild },
->props : P & { children?: ComponentChild; }
+>props : P & { children?: ComponentChild | undefined; }
 >children : ComponentChild | undefined
 
     key?: string
@@= skipped -15, +16 lines =@@
 ): VNode<any>;
 
 export function jsxs(
->jsxs : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChild[]; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChild[]; }, key?: string): VNode<any>; }
+>jsxs : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild[] | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChild[] | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: string,
 >type : string
 
     props: JSXInternal.HTMLAttributes &
->props : JSXInternal.HTMLAttributes<{}> & JSXInternal.SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild[]; }
+>props : HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild[] | undefined; }
 >JSXInternal : any
 
         JSXInternal.SVGAttributes &
@@= skipped -20, +20 lines =@@
 
 ): VNode<any>;
 export function jsxs<P>(
->jsxs : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChild[]; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChild[]; }, key?: string): VNode<any>; }
+>jsxs : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild[] | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChild[] | undefined; }, key?: string | undefined): VNode<any>; }
+>P : P
 
     type: ComponentType<P>,
 >type : ComponentType<P>
 
     props: Attributes & P & { children?: ComponentChild[] },
->props : P & { children?: ComponentChild[]; }
+>props : P & { children?: ComponentChild[] | undefined; }
 >children : ComponentChild[] | undefined
 
     key?: string
@@= skipped -15, +16 lines =@@
 ): VNode<any>;
 
 export function jsxDEV(
->jsxDEV : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChildren; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChildren; }, key?: string): VNode<any>; }
+>jsxDEV : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChildren | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChildren | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: string,
 >type : string
 
     props: JSXInternal.HTMLAttributes &
->props : JSXInternal.HTMLAttributes<{}> & JSXInternal.SVGAttributes<{}> & Record<string, any> & { children?: ComponentChildren; }
+>props : HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChildren | undefined; }
 >JSXInternal : any
 
         JSXInternal.SVGAttributes &
@@= skipped -20, +20 lines =@@
 
 ): VNode<any>;
 export function jsxDEV<P>(
->jsxDEV : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChildren; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChildren; }, key?: string): VNode<any>; }
+>jsxDEV : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChildren | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChildren | undefined; }, key?: string | undefined): VNode<any>; }
+>P : P
 
     type: ComponentType<P>,
 >type : ComponentType<P>
 
     props: Attributes & P & { children?: ComponentChildren },
->props : P & { children?: ComponentChildren; }
+>props : P & { children?: ComponentChildren | undefined; }
 >children : ComponentChildren | undefined
 
     key?: string
@@= skipped -24, +25 lines =@@
     // @ts-ignore
     export import JSX = JSXInternal;
 >JSX : any
->JSXInternal : error
+>JSXInternal : any
 }
 === /index.tsx ===
 export const Comp = () => <div></div>;
->Comp : () => JSX.Element
->() => <div></div> : () => JSX.Element
-><div></div> : JSX.Element
+>Comp : () => any
+>() => <div></div> : () => any
+><div></div> : any
 >div : any
 >div : any
 
