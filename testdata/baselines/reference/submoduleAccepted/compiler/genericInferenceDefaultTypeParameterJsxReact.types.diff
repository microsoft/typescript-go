--- old.genericInferenceDefaultTypeParameterJsxReact.types
+++ new.genericInferenceDefaultTypeParameterJsxReact.types
@@= skipped -12, +12 lines =@@
 
 type ButtonBaseProps<T extends ElementType> = ComponentPropsWithRef<T> & { children?: ReactNode };
 >ButtonBaseProps : ButtonBaseProps<T>
->children : React.ReactNode
+>children : ReactNode
 
 function Component<T extends ElementType = 'span'>(props: ButtonBaseProps<T>) {
->Component : <T extends ElementType = "span">(props: ButtonBaseProps<T>) => JSX.Element
+>Component : <T extends ElementType>(props: ButtonBaseProps<T>) => any
 >props : ButtonBaseProps<T>
 
     return <></>;
-><></> : JSX.Element
+><></> : any
 }
 
 const v1 = <Component onClick={e => e.preventDefault()} />;
->v1 : JSX.Element
-><Component onClick={e => e.preventDefault()} /> : JSX.Element
->Component : <T extends ElementType = "span">(props: ButtonBaseProps<T>) => JSX.Element
->onClick : (e: React.MouseEvent<HTMLSpanElement>) => void
->e => e.preventDefault() : (e: React.MouseEvent<HTMLSpanElement>) => void
->e : React.MouseEvent<HTMLSpanElement>
->e.preventDefault() : void
->e.preventDefault : () => void
->e : React.MouseEvent<HTMLSpanElement>
->preventDefault : () => void
+>v1 : any
+><Component onClick={e => e.preventDefault()} /> : any
+>Component : <T extends ElementType>(props: ButtonBaseProps<T>) => any
+>onClick : any
+>e => e.preventDefault() : (e: any) => any
+>e : any
+>e.preventDefault() : any
+>e.preventDefault : any
+>e : any
+>preventDefault : any
 
