--- old.tsxInferenceShouldNotYieldAnyOnUnions.types
+++ new.tsxInferenceShouldNotYieldAnyOnUnions.types
@@= skipped -1, +1 lines =@@
 
 === index.tsx ===
 namespace JSX {
+>JSX : any
+
     export interface Element {}
+>Element : Element
 }
 
 type Props<T> = PropsBase<string> | PropsWithConvert<T>;
 >Props : Props<T>
+>T : T
 
 interface PropsBase<T> {
+>PropsBase : PropsBase<T>
+>T : T
+
     data: T;
 >data : T
 }
 
 interface PropsWithConvert<T> extends PropsBase<T> {
+>PropsWithConvert : PropsWithConvert<T>
+>T : T
+
     convert: (t: T) => string;
 >convert : (t: T) => string
 >t : T
 }
 
 function ShouldInferFromData<T>(props: Props<T>): JSX.Element {
->ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
+>ShouldInferFromData : <T>(props: Props<T>) => Element
+>T : T
 >props : Props<T>
 >JSX : any
 
     return <div />;
-><div /> : JSX.Element
+><div /> : any
 >div : any
 }
 
 // Sanity check: function call equivalent versions work fine
 ShouldInferFromData({ data: "1" });
->ShouldInferFromData({ data: "1" }) : JSX.Element
->ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
+>ShouldInferFromData({ data: "1" }) : Element
+>ShouldInferFromData : <T>(props: Props<T>) => Element
 >{ data: "1" } : { data: string; }
 >data : string
 >"1" : "1"
 
 ShouldInferFromData({ data: "1", convert: n => "" + n });
->ShouldInferFromData({ data: "1", convert: n => "" + n }) : JSX.Element
->ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
+>ShouldInferFromData({ data: "1", convert: n => "" + n }) : Element
+>ShouldInferFromData : <T>(props: Props<T>) => Element
 >{ data: "1", convert: n => "" + n } : { data: string; convert: (n: string) => string; }
 >data : string
 >"1" : "1"
@@= skipped -49, +60 lines =@@
 >n : string
 
 ShouldInferFromData({ data: 2, convert: n => "" + n });
->ShouldInferFromData({ data: 2, convert: n => "" + n }) : JSX.Element
->ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
+>ShouldInferFromData({ data: 2, convert: n => "" + n }) : Element
+>ShouldInferFromData : <T>(props: Props<T>) => Element
 >{ data: 2, convert: n => "" + n } : { data: number; convert: (n: number) => string; }
 >data : number
 >2 : 2
@@= skipped -14, +14 lines =@@
 
 
 const f1 = <ShouldInferFromData data={"1"} />;
->f1 : JSX.Element
-><ShouldInferFromData data={"1"} /> : JSX.Element
->ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
->data : string
+>f1 : any
+><ShouldInferFromData data={"1"} /> : any
+>ShouldInferFromData : <T>(props: Props<T>) => Element
+>data : any
 >"1" : "1"
 
 const f2 = <ShouldInferFromData data={"1"} convert={n => "" + n} />;
->f2 : JSX.Element
-><ShouldInferFromData data={"1"} convert={n => "" + n} /> : JSX.Element
->ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
->data : string
+>f2 : any
+><ShouldInferFromData data={"1"} convert={n => "" + n} /> : any
+>ShouldInferFromData : <T>(props: Props<T>) => Element
+>data : any
 >"1" : "1"
->convert : (n: string) => string
->n => "" + n : (n: string) => string
->n : string
+>convert : any
+>n => "" + n : (n: any) => string
+>n : any
 >"" + n : string
 >"" : ""
->n : string
+>n : any
 
 const f3 = <ShouldInferFromData data={2} convert={n => "" + n} />;
->f3 : JSX.Element
-><ShouldInferFromData data={2} convert={n => "" + n} /> : JSX.Element
->ShouldInferFromData : <T>(props: Props<T>) => JSX.Element
->data : number
+>f3 : any
+><ShouldInferFromData data={2} convert={n => "" + n} /> : any
+>ShouldInferFromData : <T>(props: Props<T>) => Element
+>data : any
 >2 : 2
->convert : (n: number) => string
->n => "" + n : (n: number) => string
->n : number
+>convert : any
+>n => "" + n : (n: any) => string
+>n : any
 >"" + n : string
 >"" : ""
->n : number
+>n : any
 
