--- old.unionReductionWithStringMappingAndIdenticalBaseTypeExistsNoCrash.types
+++ new.unionReductionWithStringMappingAndIdenticalBaseTypeExistsNoCrash.types
@@= skipped -21, +21 lines =@@
     | undefined;
   type JSXElementConstructor<P> = (props: P) => ReactNode;
 >JSXElementConstructor : JSXElementConstructor<P>
+>P : P
 >props : P
 
   interface ReactElement<
+>ReactElement : ReactElement<P, T>
+
     P = any,
+>P : P
+
     T extends string | JSXElementConstructor<any> =
+>T : T
+
       | string
       | JSXElementConstructor<any>,
   > {
@@= skipped -20, +27 lines =@@
 
   type ComponentProps<T extends JSXElementConstructor<any>> =
 >ComponentProps : ComponentProps<T>
+>T : T
 
     T extends JSXElementConstructor<infer P> ? P : never;
+>P : P
 
   interface ExoticComponent<P = {}> {
+>ExoticComponent : ExoticComponent<P>
+>P : P
+
     (props: P): ReactNode;
 >props : P
 
@@= skipped -13, +18 lines =@@
 
   type LazyExoticComponent<T extends JSXElementConstructor<any>> =
 >LazyExoticComponent : LazyExoticComponent<T>
+>T : T
 
     ExoticComponent<ComponentProps<T>> & {
       readonly _result: T;
@@= skipped -11, +12 lines =@@
 >createElement : () => void
 
   namespace JSX {
+>JSX : any
+
     interface Element extends GlobalJSXElement {}
+>Element : Element
+
     interface ElementChildrenAttribute
+>ElementChildrenAttribute : ElementChildrenAttribute
+
       extends GlobalJSXElementChildrenAttribute {}
     type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<
 >LibraryManagedAttributes : LibraryManagedAttributes<C, P>
+>C : C
+>P : P
 
       C,
       P
     >;
     interface IntrinsicElements extends GlobalJSXIntrinsicElements {}
+>IntrinsicElements : IntrinsicElements
   }
 }
 
 type ReactManagedAttributes<C, P> = C extends { defaultProps: infer D }
 >ReactManagedAttributes : ReactManagedAttributes<C, P>
+>C : C
+>P : P
 >defaultProps : D
+>D : D
 
   ? P & D
   : P;
@@= skipped -24, +36 lines =@@
 >global : any
 
   namespace JSX {
+>JSX : any
+
     interface Element extends React.ReactElement<any, any> {}
+>Element : Element
 >React : typeof React
 
     interface ElementChildrenAttribute {
+>ElementChildrenAttribute : ElementChildrenAttribute
+
       children: {};
 >children : {}
     }
     type LibraryManagedAttributes<C, P> = C extends React.LazyExoticComponent<
 >LibraryManagedAttributes : LibraryManagedAttributes<C, P>
+>C : C
+>P : P
 >React : any
 
       infer T
+>T : T
+
     >
       ? ReactManagedAttributes<T, P>
       : ReactManagedAttributes<C, P>;
     interface IntrinsicElements {
+>IntrinsicElements : IntrinsicElements
+
       div: {};
 >div : {}
 
@@= skipped -26, +37 lines =@@
 }
 
 interface GlobalJSXElement extends JSX.Element {}
+>GlobalJSXElement : GlobalJSXElement
 >JSX : any
 
 interface GlobalJSXElementChildrenAttribute
+>GlobalJSXElementChildrenAttribute : GlobalJSXElementChildrenAttribute
+
   extends JSX.ElementChildrenAttribute {}
 >JSX : any
 
 type GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<
 >GlobalJSXLibraryManagedAttributes : GlobalJSXLibraryManagedAttributes<C, P>
+>C : C
+>P : P
 >JSX : any
 
   C,
   P
 >;
 interface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}
+>GlobalJSXIntrinsicElements : GlobalJSXIntrinsicElements
 >JSX : any
 
 === src/index.tsx ===
@@= skipped -22, +28 lines =@@
 
 declare function upperFirst<T extends string>(str: T): Capitalize<T>
 >upperFirst : <T extends string>(str: T) => Capitalize<T>
+>T : T
 >str : T
 
 const displayEnum = (value: string) => upperFirst(value.toLowerCase())
@@= skipped -14, +15 lines =@@
 >toLowerCase : () => string
 
 function Comp() {
->Comp : () => React.JSX.Element
+>Comp : () => any
 
   return <div>
-><div>    <span>Scope:</span> {displayEnum("VALUE")}  </div> : React.JSX.Element
+><div>    <span>Scope:</span> {displayEnum("VALUE")}  </div> : any
 >div : any
 
     <span>Scope:</span> {displayEnum("VALUE")}
-><span>Scope:</span> : React.JSX.Element
+><span>Scope:</span> : any
 >span : any
 >span : any
 >displayEnum("VALUE") : Capitalize<string>
