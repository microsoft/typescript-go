--- old.declarationEmitRecursiveConditionalAliasPreserved.types
+++ new.declarationEmitRecursiveConditionalAliasPreserved.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/declarationEmitRecursiveConditionalAliasPreserved.ts] ////
 
-=== Performance Stats ===
-Assignability cache: 2,500
-Type Count: 10,000
-Instantiation count: 50,000
-Symbol count: 50,000
-
 === input.d.ts ===
 type _BuildPowersOf2LengthArrays<
 >_BuildPowersOf2LengthArrays : _BuildPowersOf2LengthArrays<Length, AccumulatedArray>
 
     Length extends number,
+>Length : Length
+
     AccumulatedArray extends never[][],
+>AccumulatedArray : AccumulatedArray
+
 > = AccumulatedArray[0][Length] extends never
     ? AccumulatedArray
     : _BuildPowersOf2LengthArrays<
@@= skipped -22, +20 lines =@@
 >_ConcatLargestUntilDone : _ConcatLargestUntilDone<Length, AccumulatedArray, NextArray>
 
     Length extends number,
+>Length : Length
+
     AccumulatedArray extends never[][],
+>AccumulatedArray : AccumulatedArray
+
     NextArray extends never[],
+>NextArray : NextArray
+
 > = NextArray['length'] extends Length
     ? NextArray
     : [...AccumulatedArray[0], ...NextArray][Length] extends never
     ? _ConcatLargestUntilDone<
         Length,
         AccumulatedArray extends [AccumulatedArray[0], ...infer U]
+>U : U
+
         ? U extends never[][]
         ? U
         : never
@@= skipped -17, +25 lines =@@
     : _ConcatLargestUntilDone<
         Length,
         AccumulatedArray extends [AccumulatedArray[0], ...infer U]
+>U : U
+
         ? U extends never[][]
         ? U
         : never
@@= skipped -9, +11 lines =@@
 
 type _Replace<R extends unknown[], T> = { [K in keyof R]: T };
 >_Replace : _Replace<R, T>
+>R : R
+>T : T
+>K : K
 
 export type TupleOf<Type, Length extends number> = number extends Length
 >TupleOf : TupleOf<Type, Length>
+>Type : Type
+>Length : Length
 
     ? Type[]
     : {
         // in case Length is a union
         [LengthKey in Length]: _BuildPowersOf2LengthArrays<
+>LengthKey : LengthKey
+
             LengthKey,
             [[never]]
         > extends infer TwoDimensionalArray
+>TwoDimensionalArray : TwoDimensionalArray
+
         ? TwoDimensionalArray extends never[][]
         ? _Replace<_ConcatLargestUntilDone<LengthKey, TwoDimensionalArray, []>, Type>
         : never
@@= skipped -19, +28 lines =@@
 
 export type Subtract<N1 extends number, N2 extends number> = TupleOf<never, N1> extends [
 >Subtract : Subtract<N1, N2>
+>N1 : N1
+>N2 : N2
 
     ...TupleOf<never, N2>,
     ...infer R,
+>R : R
+
 ]
     ? R['length']
     : never;
 
 export type Decrement<T extends number> = Subtract<T, 1>;
 >Decrement : Decrement<T>
+>T : T
 
 export type Add<N1 extends number, N2 extends number> = [
 >Add : Add<N1, N2>
+>N1 : N1
+>N2 : N2
 
     ...TupleOf<never, N1>,
     ...TupleOf<never, N2>,
@@= skipped -23, +30 lines =@@
 >_MultiAdd : _MultiAdd<Num, Accumulator, IterationsLeft>
 
     Num extends number,
+>Num : Num
+
     Accumulator extends number,
+>Accumulator : Accumulator
+
     IterationsLeft extends number,
+>IterationsLeft : IterationsLeft
+
 > = IterationsLeft extends 0
     ? Accumulator
     : _MultiAdd<Num, Add<Num, Accumulator>, Decrement<IterationsLeft>>
 
 export type Multiply<N1 extends number, N2 extends number> = number extends N1 | N2
 >Multiply : Multiply<N1, N2>
+>N1 : N1
+>N2 : N2
 
     ? number
     : {
         [K2 in N2]: { [K1 in N1]: _MultiAdd<K1, 0, N2> }[N1]
+>K2 : K2
+>K1 : K1
+
     }[N2]
 
 type PowerTailRec<
 >PowerTailRec : PowerTailRec<Num, PowerOf, Result>
 
     Num extends number,
+>Num : Num
+
     PowerOf extends number,
+>PowerOf : PowerOf
+
     Result extends number,
+>Result : Result
+
 > = number extends PowerOf
     ? number
     : PowerOf extends 0
@@= skipped -28, +45 lines =@@
 
 export type Power<Num extends number, PowerOf extends number> = PowerTailRec<Num, PowerOf, 1>;
 >Power : Power<Num, PowerOf>
+>Num : Num
+>PowerOf : PowerOf
 
 === a.tsx ===
 import { Power } from "./input";
@@= skipped -8, +10 lines =@@
 export const power = <Num extends number, PowerOf extends number>(
 >power : <Num extends number, PowerOf extends number>(num: Num, powerOf: PowerOf) => Power<Num, PowerOf>
 ><Num extends number, PowerOf extends number>(    num: Num,    powerOf: PowerOf): Power<Num, PowerOf> => (num ** powerOf) as never : <Num extends number, PowerOf extends number>(num: Num, powerOf: PowerOf) => Power<Num, PowerOf>
+>Num : Num
+>PowerOf : PowerOf
 
     num: Num,
 >num : Num
