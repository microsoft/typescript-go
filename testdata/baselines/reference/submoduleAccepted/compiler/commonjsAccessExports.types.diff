--- old.commonjsAccessExports.types
+++ new.commonjsAccessExports.types
@@= skipped -1, +1 lines =@@
 
 === /a.js ===
 exports.x = 0;
+>x : any
+>0 : 0
 >exports.x = 0 : 0
->exports.x : 0
->exports : typeof import("/a")
->x : 0
+>exports.x : any
+>exports : any
+>x : any
 >0 : 0
 
 exports.x;
->exports.x : 0
->exports : typeof import("/a")
->x : 0
+>exports.x : any
+>exports : any
+>x : any
 
 // Works nested
 {
     // 'exports' does not provide a contextual type to a function-class
     exports.Cls = function() {
->exports.Cls = function() {        this.x = 0;    } : typeof Cls
->exports.Cls : typeof Cls
->exports : typeof import("/a")
->Cls : typeof Cls
->function() {        this.x = 0;    } : typeof Cls
+>Cls : any
+>function() {        this.x = 0;    } : () => void
 
         this.x = 0;
 >this.x = 0 : 0
 >this.x : any
->this : this
+>this : any
 >x : any
 >0 : 0
+>this.x = 0 : 0
+>this.x : any
+>this : any
+>x : any
+>0 : 0
     }
 }
 
 const instance = new exports.Cls();
->instance : Cls
->new exports.Cls() : Cls
->exports.Cls : typeof Cls
->exports : typeof import("/a")
->Cls : typeof Cls
+>instance : any
+>new exports.Cls() : any
+>exports.Cls : any
+>exports : any
+>Cls : any
 
