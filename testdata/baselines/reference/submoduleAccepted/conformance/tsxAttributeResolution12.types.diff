--- old.tsxAttributeResolution12.types
+++ new.tsxAttributeResolution12.types
@@= skipped -1, +1 lines =@@
 
 === react.d.ts ===
 declare module JSX {
+>JSX : any
+
 	interface Element { }
+>Element : Element
+
 	interface IntrinsicElements {
+>IntrinsicElements : IntrinsicElements
 	}
 	interface ElementAttributesProperty {
+>ElementAttributesProperty : ElementAttributesProperty
+
 		props;
 >props : any
 	}
 	interface IntrinsicAttributes {
+>IntrinsicAttributes : IntrinsicAttributes
+
 		ref?: string;
 >ref : string
 	}
@@= skipped -16, +25 lines =@@
 === file.tsx ===
 declare class Component<P, S>  {
 >Component : Component<P, S>
+>P : P
+>S : S
 
 	constructor(props?: P, context?: any);
 >props : P
@@= skipped -22, +24 lines =@@
 >callBack : () => any
 
 	render(): JSX.Element;
->render : () => JSX.Element
+>render : () => Element
 >JSX : any
 
 	props: P;
@@= skipped -15, +15 lines =@@
 
 
 interface ComponentClass<P> {
+>ComponentClass : ComponentClass<P>
+>P : P
+
 	new (props?: P, context?: any): Component<P, any>;
 >props : P
 >context : any
@@= skipped -9, +12 lines =@@
 >TestMod : typeof TestMod
 
 	interface TestClass extends ComponentClass<{reqd: any}> {
+>TestClass : TestClass
 >reqd : any
 	}
 	var Test: TestClass;
@@= skipped -8, +9 lines =@@
 
 // Errors correctly
 const T = TestMod.Test;
->T : TestMod.TestClass
->TestMod.Test : TestMod.TestClass
+>T : TestClass
+>TestMod.Test : TestClass
 >TestMod : typeof TestMod
->Test : TestMod.TestClass
+>Test : TestClass
 
 var t1 = <T />;
->t1 : JSX.Element
-><T /> : JSX.Element
->T : TestMod.TestClass
+>t1 : any
+><T /> : any
+>T : TestClass
 
 // Should error
 var t2 = <TestMod.Test />;
->t2 : JSX.Element
-><TestMod.Test /> : JSX.Element
->TestMod.Test : TestMod.TestClass
+>t2 : any
+><TestMod.Test /> : any
+>TestMod.Test : TestClass
 >TestMod : typeof TestMod
->Test : TestMod.TestClass
+>Test : TestClass
 
 
