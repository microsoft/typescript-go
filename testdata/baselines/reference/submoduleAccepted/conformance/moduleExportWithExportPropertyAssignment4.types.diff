--- old.moduleExportWithExportPropertyAssignment4.types
+++ new.moduleExportWithExportPropertyAssignment4.types
@@= skipped -2, +2 lines =@@
 === a.js ===
 /// <reference path='./requires.d.ts' />
 var mod1 = require('./mod1')
->mod1 : typeof mod1
->require('./mod1') : typeof mod1
+>mod1 : typeof A
+>require('./mod1') : typeof A
 >require : (name: string) => any
 >'./mod1' : "./mod1"
 
@@= skipped -9, +9 lines =@@
 >mod1.justExport.toFixed() : string
 >mod1.justExport.toFixed : (fractionDigits?: number) => string
 >mod1.justExport : number
->mod1 : typeof mod1
+>mod1 : typeof A
 >justExport : number
 >toFixed : (fractionDigits?: number) => string
 
 mod1.bothBefore.toFixed() // error
 >mod1.bothBefore.toFixed() : any
 >mod1.bothBefore.toFixed : any
->mod1.bothBefore : number | "string"
->mod1 : typeof mod1
->bothBefore : number | "string"
+>mod1.bothBefore : "string"
+>mod1 : typeof A
+>bothBefore : "string"
 >toFixed : any
 
 mod1.bothAfter.toFixed()
 >mod1.bothAfter.toFixed() : any
 >mod1.bothAfter.toFixed : any
->mod1.bothAfter : number | "string"
->mod1 : typeof mod1
->bothAfter : number | "string"
+>mod1.bothAfter : "string"
+>mod1 : typeof A
+>bothAfter : "string"
 >toFixed : any
 
 mod1.justProperty.length
 >mod1.justProperty.length : number
 >mod1.justProperty : "string"
->mod1 : typeof mod1
+>mod1 : typeof A
 >justProperty : "string"
 >length : number
 
@@= skipped -40, +40 lines =@@
 /// <reference path='./requires.d.ts' />
 module.exports.bothBefore = 'string'
 >module.exports.bothBefore = 'string' : "string"
->module.exports.bothBefore : number | "string"
->module.exports : typeof A
->module : { exports: typeof A; }
->exports : typeof A
->bothBefore : number | "string"
+>module.exports.bothBefore : any
+>module.exports : any
+>module : { exports: any; }
+>exports : any
+>bothBefore : any
 >'string' : "string"
 
 A.justExport = 4
@@= skipped -16, +16 lines =@@
 
 A.bothBefore = 2
 >A.bothBefore = 2 : 2
->A.bothBefore : number | "string"
+>A.bothBefore : "string"
 >A : typeof A
->bothBefore : number | "string"
+>bothBefore : "string"
 >2 : 2
 
 A.bothAfter = 3
 >A.bothAfter = 3 : 3
->A.bothAfter : number | "string"
+>A.bothAfter : "string"
 >A : typeof A
->bothAfter : number | "string"
+>bothAfter : "string"
 >3 : 3
 
 module.exports = A
 >module.exports = A : typeof A
->module.exports : typeof A
->module : { exports: typeof A; }
->exports : typeof A
+>module.exports : any
+>module : { exports: any; }
+>exports : any
 >A : typeof A
 
 function A() {
@@= skipped -25, +25 lines =@@
     this.p = 1
 >this.p = 1 : 1
 >this.p : any
->this : this
+>this : any
 >p : any
 >1 : 1
 }
 module.exports.bothAfter = 'string'
 >module.exports.bothAfter = 'string' : "string"
->module.exports.bothAfter : number | "string"
->module.exports : typeof A
->module : { exports: typeof A; }
->exports : typeof A
->bothAfter : number | "string"
+>module.exports.bothAfter : any
+>module.exports : any
+>module : { exports: any; }
+>exports : any
+>bothAfter : any
 >'string' : "string"
 
 module.exports.justProperty = 'string'
 >module.exports.justProperty = 'string' : "string"
->module.exports.justProperty : "string"
->module.exports : typeof A
->module : { exports: typeof A; }
->exports : typeof A
->justProperty : "string"
+>module.exports.justProperty : any
+>module.exports : any
+>module : { exports: any; }
+>exports : any
+>justProperty : any
 >'string' : "string"
 
