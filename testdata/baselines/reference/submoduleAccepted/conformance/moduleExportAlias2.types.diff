--- old.moduleExportAlias2.types
+++ new.moduleExportAlias2.types
@@= skipped -10, +10 lines =@@
 var two = C.f(1)
 >two : any
 >C.f(1) : any
->C.f : (n: any) => any
+>C.f : any
 >C : typeof C
->f : (n: any) => any
+>f : any
 >1 : 1

 var c = new C
->c : C
->new C : C
+>c : any
+>new C : any
 >C : typeof C

 === node.d.ts ===
@@= skipped -25, +25 lines =@@
 === semver.js ===
 /// <reference path='node.d.ts' />
 exports = module.exports = C
->exports = module.exports = C : typeof C
->exports : typeof C
->module.exports = C : typeof C
->module.exports : typeof C
->module : { exports: typeof C; }
->exports : typeof C
->C : typeof C
+>exports = module.exports = C : () => void
+>exports : any
+>module.exports = C : () => void
+>module.exports : typeof import("./semver")
+>module : { "\"semver\"": typeof import("./semver"); }
+>exports : typeof import("./semver")
+>C : () => void

 exports.f = n => n + 1
 >exports.f = n => n + 1 : (n: any) => any
->exports.f : (n: any) => any
->exports : typeof C
->f : (n: any) => any
+>exports.f : any
+>exports : typeof import("./semver")
+>f : any
 >n => n + 1 : (n: any) => any
 >n : any
 >n + 1 : any
@@= skipped -20, +20 lines =@@
 >1 : 1

 function C() {
->C : typeof C
+>C : () => void

     this.p = 1
 >this.p = 1 : 1
 >this.p : any
->this : this
+>this : any
 >p : any
 >1 : 1
 }