--- old.prototypePropertyAssignmentMergeAcrossFiles2.types
+++ new.prototypePropertyAssignmentMergeAcrossFiles2.types
@@= skipped -1, +1 lines =@@

 === prototypePropertyAssignmentMergeAcrossFiles2.js ===
 var Ns = {}
->Ns : typeof Ns
->{} : {}
+>Ns : { One: { (): void; prototype: { ok: () => void; }; }; Two: { (): void; prototype: {}; }; }
+>{} : { One: { (): void; prototype: { ok: () => void; }; }; Two: { (): void; prototype: {}; }; }

 Ns.One = function() {};
->Ns.One = function() {} : typeof One
->Ns.One : typeof One
->Ns : typeof Ns
->One : typeof One
->function() {} : typeof One
+>Ns.One = function() {} : { (): void; prototype: { ok: () => void; }; }
+>Ns.One : { (): void; prototype: { ok: () => void; }; }
+>Ns : { One: { (): void; prototype: { ok: () => void; }; }; Two: { (): void; prototype: {}; }; }
+>One : { (): void; prototype: { ok: () => void; }; }
+>function() {} : { (): void; prototype: { ok: () => void; }; }

 Ns.Two = function() {};
->Ns.Two = function() {} : typeof Two
->Ns.Two : typeof Two
->Ns : typeof Ns
->Two : typeof Two
->function() {} : typeof Two
+>Ns.Two = function() {} : { (): void; prototype: {}; }
+>Ns.Two : { (): void; prototype: {}; }
+>Ns : { One: { (): void; prototype: { ok: () => void; }; }; Two: { (): void; prototype: {}; }; }
+>Two : { (): void; prototype: {}; }
+>function() {} : { (): void; prototype: {}; }

 Ns.One.prototype = {
 >Ns.One.prototype = {  ok() {},} : { ok(): void; }
->Ns.One.prototype : { ok(): void; }
->Ns.One : typeof One
->Ns : typeof Ns
->One : typeof One
->prototype : { ok(): void; }
<<<<<<< HEAD
->{  ok() {},} : { ok(): void; }
+>Ns.One.prototype = {  ok() {},} : { ok: () => void; }
+>Ns.One.prototype : { ok: () => void; }
+>Ns.One : { (): void; prototype: { ok: () => void; }; }
+>Ns : { One: { (): void; prototype: { ok: () => void; }; }; Two: { (): void; prototype: {}; }; }
+>One : { (): void; prototype: { ok: () => void; }; }
+>prototype : { ok: () => void; }
+>{  ok() {},} : { ok: () => void; }
||||||| b0e1b84ac
->{  ok() {},} : { ok(): void; }
+>Ns.One.prototype = {  ok() {},} : { ok: () => void; }
+>Ns.One.prototype : any
+>Ns.One : any
+>Ns : {}
+>One : any
+>prototype : any
+>{  ok() {},} : { ok: () => void; }
=======
+>Ns.One.prototype : any
+>Ns.One : any
+>Ns : {}
+>One : any
+>prototype : any
 >{  ok() {},} : { ok(): void; }
>>>>>>> main

   ok() {},
<<<<<<< HEAD
 >ok : () => void
@@= skipped -33, +33 lines =@@
||||||| b0e1b84ac
 >ok : () => void
@@= skipped -32, +32 lines =@@
 };
=======
@@= skipped -32, +32 lines =@@
 };
>>>>>>> main
 Ns.Two.prototype = {
 >Ns.Two.prototype = {} : {}
 >Ns.Two.prototype : {}
->Ns.Two : typeof Two
->Ns : typeof Ns
->Two : typeof Two
+>Ns.Two : { (): void; prototype: {}; }
+>Ns : { One: { (): void; prototype: { ok: () => void; }; }; Two: { (): void; prototype: {}; }; }
+>Two : { (): void; prototype: {}; }
 >prototype : {}
 >{} : {}
<<<<<<< HEAD
 }
||||||| b0e1b84ac
 }
=======
 }

@@= skipped -13, +13 lines =@@
  * @type {Ns.One}
  */
 var one;
->one : One
+>one : Ns.One

 one.wat;
 >one.wat : any
->one : One
+>one : Ns.One
 >wat : any

 /**
  * @type {Ns.Two}
  */
 var two;
->two : Two
+>two : Ns.Two

 two.wat;
 >two.wat : any
->two : Two
+>two : Ns.Two
 >wat : any
>>>>>>> main
