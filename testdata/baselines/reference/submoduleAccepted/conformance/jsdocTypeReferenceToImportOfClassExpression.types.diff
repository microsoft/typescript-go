--- old.jsdocTypeReferenceToImportOfClassExpression.types
+++ new.jsdocTypeReferenceToImportOfClassExpression.types
@@= skipped -1, +1 lines =@@
 
 === MC.js ===
 const MW = require("./MW");
->MW : typeof MW
->require("./MW") : typeof MW
+>MW : typeof import("MW")
+>require("./MW") : typeof import("MW")
 >require : any
 >"./MW" : "./MW"
 
 /** @typedef {number} Cictema */
 
 module.exports = class MC {
->module.exports = class MC {  watch() {    return new MW(this);  }} : typeof import("MC")
->module.exports : typeof import("MC")
->module : { exports: typeof import("MC"); }
->exports : typeof import("MC")
->class MC {  watch() {    return new MW(this);  }} : typeof import("MC")
->MC : typeof import("MC")
+>module.exports = class MC {  watch() {    return new MW(this);  }} : typeof MC
+>module.exports : typeof MC
+>module : { MC: typeof MC; }
+>exports : typeof MC
+>class MC {  watch() {    return new MW(this);  }} : typeof MC
+>MC : typeof MC
 
   watch() {
 >watch : () => MW
 
     return new MW(this);
 >new MW(this) : MW
->MW : typeof MW
+>MW : typeof import("MW")
 >this : this
   }
 };
@@= skipped -35, +35 lines =@@
    * @param {MC} compiler the compiler
    */
   constructor(compiler) {
->compiler : import("MC")
+>compiler : MC
 
     this.compiler = compiler;
->this.compiler = compiler : import("MC")
+>this.compiler = compiler : MC
 >this.compiler : any
 >this : this
 >compiler : any
->compiler : import("MC")
+>compiler : MC
   }
 }
 
 module.exports = MW;
 >module.exports = MW : typeof MW
->module.exports : typeof MW
->module : { exports: typeof MW; }
->exports : typeof MW
+>module.exports : typeof import("MW")
+>module : { "MW": typeof import("MW"); }
+>exports : typeof import("MW")
 >MW : typeof MW
 
