--- old.jsdocTypeReferenceToImportOfFunctionExpression.types
+++ new.jsdocTypeReferenceToImportOfFunctionExpression.types
@@= skipped -1, +1 lines =@@
 
 === MC.js ===
 const MW = require("./MW");
->MW : typeof MW
->require("./MW") : typeof MW
+>MW : typeof import("MW")
+>require("./MW") : typeof import("MW")
 >require : any
 >"./MW" : "./MW"
 
@@= skipped -9, +9 lines =@@
 
 /** @class */
 module.exports = function MC() {
->module.exports = function MC() {    /** @type {any} */    var x = {}    return new MW(x);} : { (): MW; new (): MC; }
->module.exports : { (): MW; new (): MC; }
->module : { exports: { (): MW; new (): MC; }; }
->exports : { (): MW; new (): MC; }
->function MC() {    /** @type {any} */    var x = {}    return new MW(x);} : typeof MC
->MC : typeof MC
+>module.exports = function MC() {    /** @type {any} */    var x = {}    return new MW(x);} : () => MW
+>module.exports : () => MW
+>module : { export=: () => MW; }
+>exports : () => MW
+>function MC() {    /** @type {any} */    var x = {}    return new MW(x);} : () => MW
+>MC : () => MW
 
     /** @type {any} */
     var x = {}
@@= skipped -14, +14 lines =@@
 
     return new MW(x);
 >new MW(x) : MW
->MW : typeof MW
+>MW : typeof import("MW")
 >x : any
 
 };
@@= skipped -15, +15 lines =@@
    * @param {MC} compiler the compiler
    */
   constructor(compiler) {
->compiler : { (): MW; new (): MC; }
+>compiler : any
 
     this.compiler = compiler;
->this.compiler = compiler : { (): MW; new (): MC; }
+>this.compiler = compiler : any
 >this.compiler : any
 >this : this
 >compiler : any
->compiler : { (): MW; new (): MC; }
+>compiler : any
   }
 }
 
 module.exports = MW;
 >module.exports = MW : typeof MW
->module.exports : typeof MW
->module : { exports: typeof MW; }
->exports : typeof MW
+>module.exports : typeof import("MW")
+>module : { "MW": typeof import("MW"); }
+>exports : typeof import("MW")
 >MW : typeof MW
 
