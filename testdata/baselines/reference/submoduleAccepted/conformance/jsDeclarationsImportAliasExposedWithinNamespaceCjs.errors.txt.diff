--- old.jsDeclarationsImportAliasExposedWithinNamespaceCjs.errors.txt
+++ new.jsDeclarationsImportAliasExposedWithinNamespaceCjs.errors.txt
@@= skipped -0, +0 lines =@@
-<no content>
+file2.js(6,11): error TS2315: Type 'Object' is not generic.
+file2.js(17,12): error TS2702: 'testFnTypes' only refers to a type, but is being used as a namespace here.
+file2.js(28,1): error TS2309: An export assignment cannot be used in a module with other exported elements.
+
+
+==== file2.js (3 errors) ====
+    const {myTypes} = require('./file.js');
+    
+    /**
+     * @namespace testFnTypes
+     * @global
+     * @type {Object<string,*>}
+              ~~~~~~~~~~~~~~~~
+!!! error TS2315: Type 'Object' is not generic.
+     */
+    const testFnTypes = {
+        // SOME PROPS HERE
+    };
+    
+    /** @typedef {boolean|myTypes.typeC} testFnTypes.input */
+    
+    /**
+     * @function testFn
+     * @description A test function.
+     * @param {testFnTypes.input} input - Input.
+               ~~~~~~~~~~~
+!!! error TS2702: 'testFnTypes' only refers to a type, but is being used as a namespace here.
+     * @returns {number|null} Result.
+     */
+    function testFn(input) {
+        if (typeof input === 'number') {
+            return 2 * input;
+        } else {
+            return null;
+        }
+    }
+    
+    module.exports = {testFn, testFnTypes};
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+!!! error TS2309: An export assignment cannot be used in a module with other exported elements.
+==== file.js (0 errors) ====
+    /**
+     * @namespace myTypes
+     * @global
+     * @type {Object<string,*>}
+     */
+    const myTypes = {
+        // SOME PROPS HERE
+    };
+    
+    /** @typedef {string|RegExp|Array<string|RegExp>} myTypes.typeA */
+    
+    /**
+     * @typedef myTypes.typeB
+     * @property {myTypes.typeA}    prop1 - Prop 1.
+     * @property {string}           prop2 - Prop 2.
+     */
+    
+    /** @typedef {myTypes.typeB|Function} myTypes.typeC */
+    
+    exports.myTypes = myTypes;