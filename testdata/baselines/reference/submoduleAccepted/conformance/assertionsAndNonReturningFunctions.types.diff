--- old.assertionsAndNonReturningFunctions.types
+++ new.assertionsAndNonReturningFunctions.types
@@= skipped -5, +5 lines =@@
 /** @type {AssertFunc} */
 const assert = check => {
 >assert : AssertFunc
->check => {    if (!check) throw new Error();} : (check: boolean) => asserts check
+>check => {    if (!check) throw new Error();} : (check: boolean) => void
 >check : boolean

     if (!check) throw new Error();
@@= skipped -19, +19 lines =@@
 >!(typeof x === "string") : boolean
 >(typeof x === "string") : boolean
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : unknown
 >"string" : "string"
 >new Error() : Error
@@= skipped -49, +49 lines =@@
 >assert(typeof x === "string") : void
 >assert : AssertFunc
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : any
 >"string" : "string"

@@= skipped -18, +18 lines =@@
 >assert2(typeof x === "string") : void
 >assert2 : (check: boolean) => asserts check
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : any
 >"string" : "string"

@@= skipped -42, +42 lines =@@
  * @param {boolean} b 
  */
 function f2(b) {
->f2 : (b: boolean) => 1 | 0
+>f2 : (b: boolean) => 0 | 1
 >b : boolean

     switch (b) {