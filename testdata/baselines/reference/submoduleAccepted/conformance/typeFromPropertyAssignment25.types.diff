--- old.typeFromPropertyAssignment25.types
+++ new.typeFromPropertyAssignment25.types
@@= skipped -1, +1 lines =@@
 
 === bug24703.js ===
 var Common = {};
->Common : typeof Common
->{} : {}
+>Common : { I: typeof I; O: typeof O; }
+>{} : { I: typeof I; O: typeof O; }
 
 Common.I = class {
 >Common.I = class {    constructor() {        this.i = 1    }} : typeof I
 >Common.I : typeof I
->Common : typeof Common
+>Common : { I: typeof I; O: typeof O; }
 >I : typeof I
 >class {    constructor() {        this.i = 1    }} : typeof I
 
     constructor() {
         this.i = 1
 >this.i = 1 : 1
->this.i : any
+>this.i : number
 >this : this
->i : any
+>i : number
 >1 : 1
     }
 }
 Common.O = class extends Common.I {
 >Common.O = class extends Common.I {    constructor() {        super()        this.o = 2    }} : typeof O
 >Common.O : typeof O
->Common : typeof Common
+>Common : { I: typeof I; O: typeof O; }
 >O : typeof O
 >class extends Common.I {    constructor() {        super()        this.o = 2    }} : typeof O
 >Common.I : I
->Common : typeof Common
+>Common : { I: typeof I; O: typeof O; }
 >I : typeof I
 
     constructor() {
@@= skipped -36, +36 lines =@@
 
         this.o = 2
 >this.o = 2 : 2
->this.o : any
+>this.o : number
 >this : this
->o : any
+>o : number
 >2 : 2
     }
 }
@@= skipped -10, +10 lines =@@
 >o : O
 >new Common.O() : O
 >Common.O : typeof O
->Common : typeof Common
+>Common : { I: typeof I; O: typeof O; }
 >O : typeof O
 
 var i = new Common.I()
 >i : I
 >new Common.I() : I
 >Common.I : typeof I
->Common : typeof Common
+>Common : { I: typeof I; O: typeof O; }
 >I : typeof I
 
 o.i
