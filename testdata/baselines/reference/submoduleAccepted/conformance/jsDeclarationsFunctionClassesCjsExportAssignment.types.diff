--- old.jsDeclarationsFunctionClassesCjsExportAssignment.types
+++ new.jsDeclarationsFunctionClassesCjsExportAssignment.types
@@= skipped -4, +4 lines =@@
  * @param {number} timeout
  */
 function Timer(timeout) {
->Timer : typeof Timer
+>Timer : (timeout: number) => void
 >timeout : number
 
     this.timeout = timeout;
 >this.timeout = timeout : number
 >this.timeout : any
->this : this
+>this : any
 >timeout : any
 >timeout : number
 }
 module.exports = Timer;
->module.exports = Timer : typeof Timer
->module.exports : typeof Timer
->module : { exports: typeof Timer; }
->exports : typeof Timer
->Timer : typeof Timer
+>module.exports = Timer : (timeout: number) => void
+>module.exports : any
+>module : any
+>exports : any
+>Timer : (timeout: number) => void
 
 === hook.js ===
 /**
@@= skipped -31, +31 lines =@@
     this.handle = handle;
 >this.handle = handle : HookHandler
 >this.handle : any
->this : this
+>this : any
 >handle : any
 >handle : HookHandler
 }
 module.exports = Hook;
 >module.exports = Hook : typeof Hook
->module.exports : typeof Hook
->module : { exports: typeof Hook; }
->exports : typeof Hook
+>module.exports : any
+>module : any
+>exports : any
 >Hook : typeof Hook
 
 === context.js ===
@@= skipped -51, +51 lines =@@
 >!(this instanceof Context) : boolean
 >(this instanceof Context) : boolean
 >this instanceof Context : boolean
->this : this
+>this : any
 >Context : typeof Context
 
       return new Context(input)
->new Context(input) : Context
+>new Context(input) : any
 >Context : typeof Context
 >input : Input
     }
     this.state = this.construct(input);
->this.state = this.construct(input) : State
+>this.state = this.construct(input) : any
 >this.state : any
->this : this & { construct(input: Input, handle?: HookHandler | undefined): State; }
+>this : any
 >state : any
->this.construct(input) : State
->this.construct : (input: Input, handle?: HookHandler | undefined) => State
->this : this & { construct(input: Input, handle?: HookHandler | undefined): State; }
->construct : (input: Input, handle?: HookHandler | undefined) => State
+>this.construct(input) : any
+>this.construct : any
+>this : any
+>construct : any
 >input : Input
 }
 Context.prototype = {
->Context.prototype = {    /**     * @param {Input} input     * @param {HookHandler=} handle     * @returns {State}     */    construct(input, handle = () => void 0) {        return input;    }} : { construct(input: Input, handle?: HookHandler | undefined): State; }
->Context.prototype : { construct(input: Input, handle?: HookHandler | undefined): State; }
+>Context.prototype = {    /**     * @param {Input} input     * @param {HookHandler=} handle     * @returns {State}     */    construct(input, handle = () => void 0) {        return input;    }} : { construct: (input: Input, handle?: HookHandler) => State; }
+>Context.prototype : { construct: (input: Input, handle?: HookHandler) => State; }
 >Context : typeof Context
->prototype : { construct(input: Input, handle?: HookHandler | undefined): State; }
->{    /**     * @param {Input} input     * @param {HookHandler=} handle     * @returns {State}     */    construct(input, handle = () => void 0) {        return input;    }} : { construct(input: Input, handle?: HookHandler | undefined): State; }
+>prototype : { construct: (input: Input, handle?: HookHandler) => State; }
+>{    /**     * @param {Input} input     * @param {HookHandler=} handle     * @returns {State}     */    construct(input, handle = () => void 0) {        return input;    }} : { construct: (input: Input, handle?: HookHandler) => State; }
 
     /**
      * @param {Input} input
@@= skipped -32, +32 lines =@@
      * @returns {State}
      */
     construct(input, handle = () => void 0) {
->construct : (input: Input, handle?: HookHandler | undefined) => State
+>construct : (input: Input, handle?: HookHandler) => State
 >input : Input
->handle : import("hook").HookHandler
+>handle : HookHandler
 >() => void 0 : () => any
 >void 0 : undefined
 >0 : 0
@@= skipped -12, +12 lines =@@
     }
 }
 module.exports = Context;
->module.exports = Context : { (input: Input): Context; new (input: Input): Context; prototype: { construct(input: Input, handle?: HookHandler | undefined): State; }; }
->module.exports : { (input: Input): Context; new (input: Input): Context; prototype: { construct(input: Input, handle?: HookHandler | undefined): State; }; }
->module : { exports: { (input: Input): Context; new (input: Input): Context; prototype: { construct(input: Input, handle?: HookHandler | undefined): State; }; }; }
->exports : { (input: Input): Context; new (input: Input): Context; prototype: { construct(input: Input, handle?: HookHandler | undefined): State; }; }
+>module.exports = Context : typeof Context
+>module.exports : any
+>module : any
+>exports : any
 >Context : typeof Context
 
