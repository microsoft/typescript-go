--- old.paramTagTypeResolution2.types
+++ new.paramTagTypeResolution2.types
@@= skipped -6, +6 lines =@@
  * @param {{[K in keyof T]: (value: T[K]) => void }} b
  */
 function f(a, b) {
->f : <T>(a: T, b: { [K in keyof T]: (value: T[K]) => void; }) => void
+>f : <T>(a: T, b: { [K in keyof T]: (value: T[K]) => void }) => void
 >a : T
->b : { [K in keyof T]: (value: T[K]) => void; }
+>b : { [K in keyof T]: (value: T[K]) => void }
 }
 
 f({ x: 42 }, { x(param) { param.toFixed() } });
 >f({ x: 42 }, { x(param) { param.toFixed() } }) : void
->f : <T>(a: T, b: { [K in keyof T]: (value: T[K]) => void; }) => void
+>f : <T>(a: T, b: { [K in keyof T]: (value: T[K]) => void }) => void
 >{ x: 42 } : { x: number; }
 >x : number
 >42 : 42
->{ x(param) { param.toFixed() } } : { x(param: number): void; }
->x : (param: number) => void
->param : number
->param.toFixed() : string
->param.toFixed : (fractionDigits?: number) => string
->param : number
->toFixed : (fractionDigits?: number) => string
+>{ x(param) { param.toFixed() } } : { x: (param: K) => void; }
+>x : (param: K) => void
+>param : K
+>param.toFixed() : any
+>param.toFixed : any
+>param : K
+>toFixed : any
 
