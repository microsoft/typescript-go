--- old.jsDeclarationsComputedNames.types
+++ new.jsDeclarationsComputedNames.types
@@= skipped -11, +11 lines =@@
 >Symbol : SymbolConstructor
 
 module.exports = {
->module.exports = {    [TopLevelSym](x = 12) {        return x;    },    items: {        [InnerSym]: (arg = {x: 12}) => arg.x    }} : { [TopLevelSym](x?: number): number; items: { [InnerSym]: (arg?: { x: number; }) => number; }; }
->module.exports : { [TopLevelSym](x?: number): number; items: { [InnerSym]: (arg?: { x: number; }) => number; }; }
->module : { exports: { [TopLevelSym](x?: number): number; items: { [InnerSym]: (arg?: { x: number; }) => number; }; }; }
->exports : { [TopLevelSym](x?: number): number; items: { [InnerSym]: (arg?: { x: number; }) => number; }; }
->{    [TopLevelSym](x = 12) {        return x;    },    items: {        [InnerSym]: (arg = {x: 12}) => arg.x    }} : { [TopLevelSym](x?: number): number; items: { [InnerSym]: (arg?: { x: number; }) => number; }; }
+>{    [TopLevelSym](x = 12) {        return x;    },    items: {        [InnerSym]: (arg = {x: 12}) => arg.x    }} : { [TopLevelSym]: (x?: number) => number; items: { [InnerSym]: (arg?: { x: number; }) => number; }; }
 
     [TopLevelSym](x = 12) {
 >[TopLevelSym] : (x?: number) => number
@@= skipped -31, +27 lines =@@
 >arg.x : number
 >arg : { x: number; }
 >x : number
+>[InnerSym] : (arg?: { x: number; }) => number
+>InnerSym : unique symbol
+>(arg = {x: 12}) => arg.x : (arg?: { x: number; }) => number
+>arg : { x: number; }
+>{x: 12} : { x: number; }
+>x : number
+>12 : 12
+>arg.x : number
+>arg : { x: number; }
+>x : number
     }
 }
 
@@= skipped -31, +41 lines =@@
      * @param {typeof TopLevelSym | typeof InnerSym} _p
      */
     constructor(_p = InnerSym) {
->_p : unique symbol | unique symbol
+>_p : symbol
 >InnerSym : unique symbol
 
         // switch on _p
