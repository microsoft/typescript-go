--- old.varRequireFromJavascript.types
+++ new.varRequireFromJavascript.types
@@= skipped -1, +1 lines =@@
 
 === use.js ===
 var ex = require('./ex')
->ex : typeof ex
->require('./ex') : typeof ex
+>ex : typeof import("ex")
+>require('./ex') : typeof import("ex")
 >require : any
 >'./ex' : "./ex"
 
 // values work
 var crunch = new ex.Crunch(1);
->crunch : ex.Crunch
->new ex.Crunch(1) : ex.Crunch
->ex.Crunch : typeof ex.Crunch
->ex : typeof ex
->Crunch : typeof ex.Crunch
+>crunch : Crunch
+>new ex.Crunch(1) : Crunch
+>ex.Crunch : typeof Crunch
+>ex : typeof import("ex")
+>Crunch : typeof Crunch
 >1 : 1
 
 crunch.n
->crunch.n : number
->crunch : ex.Crunch
->n : number
+>crunch.n : any
+>crunch : Crunch
+>n : any
 
 
 // types work
@@= skipped -25, +25 lines =@@
  * @param {ex.Crunch} wrap
  */
 function f(wrap) {
->f : (wrap: ex.Crunch) => void
->wrap : ex.Crunch
+>f : (wrap: any) => void
+>wrap : any
 
     wrap.n
->wrap.n : number
->wrap : ex.Crunch
->n : number
+>wrap.n : any
+>wrap : any
+>n : any
 }
 
 === ex.js ===
@@= skipped -15, +15 lines =@@
 
     /** @param {number} n */
     constructor(n) {
->n : number
+>n : any
 
         this.n = n
->this.n = n : number
+>this.n = n : any
 >this.n : any
 >this : this
 >n : any
->n : number
+>n : any
     }
     m() {
->m : () => number
+>m : () => any
 
         return this.n
->this.n : number
+>this.n : any
 >this : this
->n : number
+>n : any
     }
 }
 
