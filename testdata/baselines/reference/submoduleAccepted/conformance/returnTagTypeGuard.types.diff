--- old.returnTagTypeGuard.types
+++ new.returnTagTypeGuard.types
@@= skipped -6, +6 lines =@@
     constructor() {
         this.c = 1
 >this.c = 1 : 1
->this.c : any
+>this.c : number
 >this : this
->c : any
+>c : number
 >1 : 1
     }
     /**
@@= skipped -23, +23 lines =@@
     constructor() {
         this.d = 'no'
 >this.d = 'no' : "no"
->this.d : any
+>this.d : string
 >this : this
->d : any
+>d : string
 >'no' : "no"
     }
     /**
@@= skipped -58, +58 lines =@@
 
 /** @param {boolean | number} val */
 function foo(val) {
->foo : (val: boolean | number) => void
+>foo : (val: number | boolean) => void
 >val : number | boolean
 
     if (isBoolean(val)) {
@@= skipped -21, +21 lines =@@
 
 /** @type {Cb} */
 function isNumber(x) { return typeof x === "number" }
->isNumber : (x: unknown) => x is number
->x : unknown
+>isNumber : (x: any) => x is number
+>x : any
 >typeof x === "number" : boolean
 >typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
->x : unknown
+>x : any
 >"number" : "number"
 
 /** @param {unknown} x */
@@= skipped -14, +14 lines =@@
 
     if (isNumber(x)) {
 >isNumber(x) : boolean
->isNumber : (x: unknown) => x is number
+>isNumber : (x: any) => x is number
 >x : unknown
 
         x * 2;
