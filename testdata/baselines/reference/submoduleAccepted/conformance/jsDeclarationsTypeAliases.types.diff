--- old.jsDeclarationsTypeAliases.types
+++ new.jsDeclarationsTypeAliases.types
@@= skipped -37, +37 lines =@@
  * @returns {SomeType}
  */
 function doTheThing(x) {
->doTheThing : (x: number) => SomeType
+>doTheThing : (x: number) => number | ExportedThing | LocalThing | { x: string; }
 >x : number

     return {x: ""+x};
@@= skipped -18, +18 lines =@@
 >"ok" : "ok"
 }
 module.exports = {
->module.exports = {    doTheThing,    ExportedThing,} : typeof module.exports
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
->{    doTheThing,    ExportedThing,} : { doTheThing: (x: number) => SomeType; ExportedThing: typeof ExportedThing; }
+>module.exports = {    doTheThing,    ExportedThing,} : { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }
+>module.exports : { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }
+>module : { "export=": { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }; }
+>exports : { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }
+>{    doTheThing,    ExportedThing,} : { doTheThing: (x: number) => number | ExportedThing | LocalThing | { x: string; }; ExportedThing: typeof ExportedThing; }

     doTheThing,
->doTheThing : (x: number) => SomeType
+>doTheThing : (x: number) => number | ExportedThing | LocalThing | { x: string; }

     ExportedThing,
 >ExportedThing : typeof ExportedThing