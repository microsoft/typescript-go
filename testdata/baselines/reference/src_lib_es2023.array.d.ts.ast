SourceFile
  InterfaceDeclaration
    Identifier: ' Array'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' T'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: 'predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ArrayType
              TypeReference
                Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: ' thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns a copy of an array with its elements reversed.
     */
    toReversed'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Returns a copy of an array with its elements sorted.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.
     * ```ts
     * [11, 2, 22, 1].toSorted((a, b) => a - b) // [1, 2, 11, 22]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' b'
            TypeReference
              Identifier: ' T'
          NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Copies an array and removes elements and, if necessary, inserts new elements in their place. Returns the copied array.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @param items Elements to insert into the copied array in place of the deleted elements.
     * @returns The copied array.
     */
    toSpliced'
      Parameter
        Identifier: 'start'
        NumberKeyword
      Parameter
        Identifier: ' deleteCount'
        NumberKeyword
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Copies an array and removes elements while returning the remaining elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @returns A copy of the original array with the remaining elements.
     */
    toSpliced'
      Parameter
        Identifier: 'start'
        NumberKeyword
      Parameter
        Identifier: ' deleteCount'
        QuestionToken
        NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Copies an array, then overwrites the value at the provided index with the
     * given value. If the index is negative, then it replaces from the end
     * of the array.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to write into the copied array.
     * @returns The copied array with the updated value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' T'
      ArrayType
        TypeReference
          Identifier: ' T'
  InterfaceDeclaration
    Identifier: ' ReadonlyArray'
    TypeParameter
      Identifier: 'T'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        TypeReference
          Identifier: ' T'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' T'
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            TypeOperator
              ArrayType
                TypeReference
                  Identifier: ' T'
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copied array with all of its elements reversed.
     */
    toReversed'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.
     * ```ts
     * [11, 2, 22, 1].toSorted((a, b) => a - b) // [1, 2, 11, 22]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            TypeReference
              Identifier: ' T'
          Parameter
            Identifier: ' b'
            TypeReference
              Identifier: ' T'
          NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Copies an array and removes elements while, if necessary, inserting new elements in their place, returning the remaining elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @param items Elements to insert into the copied array in place of the deleted elements.
     * @returns A copy of the original array with the remaining elements.
     */
    toSpliced'
      Parameter
        Identifier: 'start'
        NumberKeyword
      Parameter
        Identifier: ' deleteCount'
        NumberKeyword
      Parameter
        DotDotDotToken
        Identifier: 'items'
        ArrayType
          TypeReference
            Identifier: ' T'
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Copies an array and removes elements while returning the remaining elements.
     * @param start The zero-based location in the array from which to start removing elements.
     * @param deleteCount The number of elements to remove.
     * @returns A copy of the original array with the remaining elements.
     */
    toSpliced'
      Parameter
        Identifier: 'start'
        NumberKeyword
      Parameter
        Identifier: ' deleteCount'
        QuestionToken
        NumberKeyword
      ArrayType
        TypeReference
          Identifier: ' T'
    MethodSignature
      Identifier: '

    /**
     * Copies an array, then overwrites the value at the provided index with the
     * given value. If the index is negative, then it replaces from the end
     * of the array
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        TypeReference
          Identifier: ' T'
      ArrayType
        TypeReference
          Identifier: ' T'
  InterfaceDeclaration
    Identifier: ' Int8Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Int8Array<Buffer>.from([11, 2, 22, 1]);
     * myNums.toSorted((a, b) => a - b) // Int8Array<Buffer>(4) [1, 2, 11, 22]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Int8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' Uint8Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Uint8Array<Buffer>.from([11, 2, 22, 1]);
     * myNums.toSorted((a, b) => a - b) // Uint8Array<Buffer>(4) [1, 2, 11, 22]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Uint8Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' Uint8ClampedArray'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Uint8ClampedArray<Buffer>.from([11, 2, 22, 1]);
     * myNums.toSorted((a, b) => a - b) // Uint8ClampedArray<Buffer>(4) [1, 2, 11, 22]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Uint8ClampedArray'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' Int16Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Int16Array<Buffer>.from([11, 2, -22, 1]);
     * myNums.toSorted((a, b) => a - b) // Int16Array<Buffer>(4) [-22, 1, 2, 11]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Int16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' Uint16Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Uint16Array<Buffer>.from([11, 2, 22, 1]);
     * myNums.toSorted((a, b) => a - b) // Uint16Array<Buffer>(4) [1, 2, 11, 22]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Uint16Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' Int32Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: 'value'
            NumberKeyword
          Parameter
            Identifier: ' index'
            NumberKeyword
          Parameter
            Identifier: ' array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Int32Array<Buffer>.from([11, 2, -22, 1]);
     * myNums.toSorted((a, b) => a - b) // Int32Array<Buffer>(4) [-22, 1, 2, 11]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Int32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' Uint32Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Uint32Array<Buffer>.from([11, 2, 22, 1]);
     * myNums.toSorted((a, b) => a - b) // Uint32Array<Buffer>(4) [1, 2, 11, 22]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Uint32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' Float32Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Float32Array<Buffer>.from([11.25, 2, -22.5, 1]);
     * myNums.toSorted((a, b) => a - b) // Float32Array<Buffer>(4) [-22.5, 1, 2, 11.5]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Float32Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' Float64Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        NumberKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        NumberKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            NumberKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = Float64Array<Buffer>.from([11.25, 2, -22.5, 1]);
     * myNums.toSorted((a, b) => a - b) // Float64Array<Buffer>(4) [-22.5, 1, 2, 11.5]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            NumberKeyword
          Parameter
            Identifier: ' b'
            NumberKeyword
          NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given number at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        NumberKeyword
      TypeReference
        Identifier: ' Float64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' BigInt64Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        BigIntKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            BigIntKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            BigIntKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        BigIntKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            BigIntKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' BigInt64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = BigInt64Array<Buffer>.from([11n, 2n, -22n, 1n]);
     * myNums.toSorted((a, b) => Number(a - b)) // BigInt64Array<Buffer>(4) [-22n, 1n, 2n, 11n]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            BigIntKeyword
          Parameter
            Identifier: ' b'
            BigIntKeyword
          NumberKeyword
      TypeReference
        Identifier: ' BigInt64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given bigint at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        BigIntKeyword
      TypeReference
        Identifier: ' BigInt64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
  InterfaceDeclaration
    Identifier: ' BigUint64Array'
    TypeParameter
      Identifier: 'TArrayBuffer'
      TypeReference
        Identifier: ' ArrayBufferLike'
    MethodSignature
      Identifier: '
    /**
     * Returns the value of the last element in the array where predicate is true, and undefined
     * otherwise.
     * @param predicate findLast calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found, findLast
     * immediately returns that element value. Otherwise, findLast returns undefined.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLast'
      TypeParameter
        Identifier: 'S'
        BigIntKeyword
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            BigIntKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          TypePredicate
            Identifier: ' value'
            TypeReference
              Identifier: ' S'
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        TypeReference
          Identifier: ' S'
        UndefinedKeyword
    MethodSignature
      Identifier: '
    findLast'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            BigIntKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      UnionType
        BigIntKeyword
        UndefinedKeyword
    MethodSignature
      Identifier: '

    /**
     * Returns the index of the last element in the array where predicate is true, and -1
     * otherwise.
     * @param predicate findLastIndex calls predicate once for each element of the array, in descending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.
     * @param thisArg If provided, it will be used as the this value for each invocation of
     * predicate. If it is not provided, undefined is used instead.
     */
    findLastIndex'
      Parameter
        Identifier: '
        predicate'
        FunctionType
          Parameter
            Identifier: '
            value'
            BigIntKeyword
          Parameter
            Identifier: '
            index'
            NumberKeyword
          Parameter
            Identifier: '
            array'
            ThisType
          UnknownKeyword
      Parameter
        Identifier: '
        thisArg'
        QuestionToken
        AnyKeyword
      NumberKeyword
    MethodSignature
      Identifier: '

    /**
     * Copies the array and returns the copy with the elements in reverse order.
     */
    toReversed'
      TypeReference
        Identifier: ' BigUint64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies and sorts the array.
     * @param compareFn Function used to determine the order of the elements. It is expected to return
     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive
     * value otherwise. If omitted, the elements are sorted in ascending order.
     * ```ts
     * const myNums = BigUint64Array<Buffer>.from([11n, 2n, 22n, 1n]);
     * myNums.toSorted((a, b) => Number(a - b)) // BigUint64Array<Buffer>(4) [1n, 2n, 11n, 22n]
     * ```
     */
    toSorted'
      Parameter
        Identifier: 'compareFn'
        QuestionToken
        FunctionType
          Parameter
            Identifier: 'a'
            BigIntKeyword
          Parameter
            Identifier: ' b'
            BigIntKeyword
          NumberKeyword
      TypeReference
        Identifier: ' BigUint64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
    MethodSignature
      Identifier: '

    /**
     * Copies the array and inserts the given bigint at the provided index.
     * @param index The index of the value to overwrite. If the index is
     * negative, then it replaces from the end of the array.
     * @param value The value to insert into the copied array.
     * @returns A copy of the original array with the inserted value.
     */
    with'
      Parameter
        Identifier: 'index'
        NumberKeyword
      Parameter
        Identifier: ' value'
        BigIntKeyword
      TypeReference
        Identifier: ' BigUint64Array'
        TypeReference
          Identifier: 'ArrayBuffer'
