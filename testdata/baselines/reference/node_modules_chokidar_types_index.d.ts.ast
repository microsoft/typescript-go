SourceFile
  ImportDeclaration
    ImportClause
      NamespaceImport
        Identifier: ' fs'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' EventEmitter'
    StringLiteral
  ImportDeclaration
    ImportClause
      NamedImports
        ImportSpecifier
          Identifier: ' Matcher'
    StringLiteral
  ClassDeclaration
    ExportKeyword
    Identifier: ' FSWatcher'
    HeritageClause
      ExpressionWithTypeArguments
        Identifier: ' EventEmitter'
    HeritageClause
      ExpressionWithTypeArguments
        PropertyAccessExpression
          Identifier: ' fs'
          Identifier: 'FSWatcher'
    PropertyDeclaration
      Identifier: '
  options'
      TypeReference
        Identifier: ' WatchOptions'
    Constructor
      Parameter
        Identifier: 'options'
        QuestionToken
        TypeReference
          Identifier: ' WatchOptions'
    MethodDeclaration
      Identifier: '

  /**
   * Add files, directories, or glob patterns for tracking. Takes an array of strings or just one
   * string.
   */
  add'
      Parameter
        Identifier: 'paths'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' ReadonlyArray'
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Stop watching files, directories, or glob patterns. Takes an array of strings or just one
   * string.
   */
  unwatch'
      Parameter
        Identifier: 'paths'
        UnionType
          StringKeyword
          TypeReference
            Identifier: ' ReadonlyArray'
            StringKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Returns an object representing all the paths on the file system being watched by this
   * `FSWatcher` instance. The object's keys are all the directories (using absolute paths unless
   * the `cwd` option was used), and the values are arrays of the names of the items contained in
   * each directory.
   */
  getWatched'
      TypeLiteral
        IndexSignature
          Parameter
            Identifier: 'directory'
            StringKeyword
          ArrayType
            StringKeyword
    MethodDeclaration
      Identifier: '

  /**
   * Removes all listeners from watched files.
   */
  close'
      TypeReference
        Identifier: ' Promise'
        VoidKeyword
    MethodDeclaration
      Identifier: '

  on'
      Parameter
        Identifier: 'event'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'path'
            StringKeyword
          Parameter
            Identifier: ' stats'
            QuestionToken
            TypeReference
              QualifiedName
                Identifier: ' fs'
                Identifier: 'Stats'
          VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'eventName'
            UnionType
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
              LiteralType
                StringLiteral
          Parameter
            Identifier: ' path'
            StringKeyword
          Parameter
            Identifier: ' stats'
            QuestionToken
            TypeReference
              QualifiedName
                Identifier: ' fs'
                Identifier: 'Stats'
          VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Error occurred
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'error'
            TypeReference
              Identifier: ' Error'
          VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Exposes the native Node `fs.FSWatcher events`
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'eventName'
            StringKeyword
          Parameter
            Identifier: ' path'
            StringKeyword
          Parameter
            Identifier: ' details'
            AnyKeyword
          VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  /**
   * Fires when the initial scan is complete
   */
  on'
      Parameter
        Identifier: 'event'
        LiteralType
          StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  on'
      Parameter
        Identifier: 'event'
        UnionType
          LiteralType
            StringLiteral
          LiteralType
            StringLiteral
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            Identifier: 'path'
            StringKeyword
          VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  on'
      Parameter
        Identifier: 'event'
        StringKeyword
      Parameter
        Identifier: ' listener'
        FunctionType
          Parameter
            DotDotDotToken
            Identifier: 'args'
            ArrayType
              AnyKeyword
          VoidKeyword
      ThisType
    MethodDeclaration
      Identifier: '

  ref'
      ThisType
    MethodDeclaration
      Identifier: '
  
  unref'
      ThisType
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' WatchOptions'
    PropertySignature
      Identifier: '
  /**
   * Indicates whether the process should continue to run as long as files are being watched. If
   * set to `false` when using `fsevents` to watch, no more events will be emitted after `ready`,
   * even if the process continues to run.
   */
  persistent'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * ([anymatch](https://github.com/micromatch/anymatch)-compatible definition) Defines files/paths to
   * be ignored. The whole relative or absolute path is tested, not just filename. If a function
   * with two arguments is provided, it gets called twice per path - once with a single argument
   * (the path), second time with two arguments (the path and the
   * [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) object of that path).
   */
  ignored'
      QuestionToken
      TypeReference
        Identifier: ' Matcher'
    PropertySignature
      Identifier: '

  /**
   * If set to `false` then `add`/`addDir` events are also emitted for matching paths while
   * instantiating the watching as chokidar discovers these file paths (before the `ready` event).
   */
  ignoreInitial'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * When `false`, only the symlinks themselves will be watched for changes instead of following
   * the link references and bubbling events through the link's path.
   */
  followSymlinks'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * The base directory from which watch `paths` are to be derived. Paths emitted with events will
   * be relative to this.
   */
  cwd'
      QuestionToken
      StringKeyword
    PropertySignature
      Identifier: '

  /**
   *  If set to true then the strings passed to .watch() and .add() are treated as literal path
   *  names, even if they look like globs. Default: false.
   */
  disableGlobbing'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to use fs.watchFile (backed by polling), or fs.watch. If polling leads to high CPU
   * utilization, consider setting this to `false`. It is typically necessary to **set this to
   * `true` to successfully watch files over a network**, and it may be necessary to successfully
   * watch files in other non-standard situations. Setting to `true` explicitly on OS X overrides
   * the `useFsEvents` default.
   */
  usePolling'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * Whether to use the `fsevents` watching interface if available. When set to `true` explicitly
   * and `fsevents` is available this supercedes the `usePolling` setting. When set to `false` on
   * OS X, `usePolling: true` becomes the default.
   */
  useFsEvents'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * If relying upon the [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) object that
   * may get passed with `add`, `addDir`, and `change` events, set this to `true` to ensure it is
   * provided even in cases where it wasn't already available from the underlying watch events.
   */
  alwaysStat'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * If set, limits how many levels of subdirectories will be traversed.
   */
  depth'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Interval of file system polling.
   */
  interval'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * Interval of file system polling for binary files. ([see list of binary extensions](https://gi
   * thub.com/sindresorhus/binary-extensions/blob/master/binary-extensions.json))
   */
  binaryInterval'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   *  Indicates whether to watch files that don't have read permissions if possible. If watching
   *  fails due to `EPERM` or `EACCES` with this set to `true`, the errors will be suppressed
   *  silently.
   */
  ignorePermissionErrors'
      QuestionToken
      BooleanKeyword
    PropertySignature
      Identifier: '

  /**
   * `true` if `useFsEvents` and `usePolling` are `false`). Automatically filters out artifacts
   * that occur when using editors that use "atomic writes" instead of writing directly to the
   * source file. If a file is re-added within 100 ms of being deleted, Chokidar emits a `change`
   * event rather than `unlink` then `add`. If the default of 100 ms does not work well for you,
   * you can override it by setting `atomic` to a custom value, in milliseconds.
   */
  atomic'
      QuestionToken
      UnionType
        BooleanKeyword
        NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * can be set to an object in order to adjust timing params:
   */
  awaitWriteFinish'
      QuestionToken
      UnionType
        TypeReference
          Identifier: ' AwaitWriteFinishOptions'
        BooleanKeyword
  InterfaceDeclaration
    ExportKeyword
    Identifier: ' AwaitWriteFinishOptions'
    PropertySignature
      Identifier: '
  /**
   * Amount of time in milliseconds for a file size to remain constant before emitting its event.
   */
  stabilityThreshold'
      QuestionToken
      NumberKeyword
    PropertySignature
      Identifier: '

  /**
   * File size polling interval.
   */
  pollInterval'
      QuestionToken
      NumberKeyword
  FunctionDeclaration
    ExportKeyword
    Identifier: ' watch'
    Parameter
      Identifier: '
  paths'
      UnionType
        StringKeyword
        TypeReference
          Identifier: ' ReadonlyArray'
          StringKeyword
    Parameter
      Identifier: '
  options'
      QuestionToken
      TypeReference
        Identifier: ' WatchOptions'
    TypeReference
      Identifier: ' FSWatcher'
