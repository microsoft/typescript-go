package main

import (
	"bytes"
	_ "embed"
	"encoding/json"
	"flag"
	"go/format"
	"os"
	"strings"

	"github.com/microsoft/typescript-go/_tools/genlsp/metamodel"
)

//go:embed metaModel.json
var rawMetaModel []byte

func main() {
	out := flag.String("out", "", "output file")
	flag.Parse()

	if *out == "" {
		panic("missing -out")
	}

	g := generator{}
	g.generate()

	b := g.buf.Bytes()
	b, err := format.Source(b)
	if err != nil {
		panic(err)
	}

	if err := os.WriteFile(*out, b, 0o644); err != nil {
		panic(err)
	}
}

var supportedMethods = map[string]bool{
	"initialize":  true,
	"initialized": true,
	"shutdown":    true,
	"exit":        true,

	"$/cancelRequest": true,
	"$/setTrace":      true,

	"textDocument/didOpen":   true,
	"textDocument/didChange": true,
	"textDocument/didClose":  true,
	"textDocument/didSave":   true,

	"textDocument/publishDiagnostics": true,
	"textDocument/diagnostics":        true,

	"textDocument/hover": true,

	"textDocument/completion": true,
	"completionItem/resolve":  true,
}

func writeDocumentation(buf *bytes.Buffer, doc *string) {
	if doc != nil {
		lines := strings.Split(*doc, "\n")
		for _, line := range lines {
			buf.WriteString("// " + line + "\n")
		}
	}
}

func writeDeprecation(buf *bytes.Buffer, deprecated *string) {
	if deprecated != nil {
		buf.WriteString("// Deprecated: " + *deprecated + "\n")
	}
}

type generator struct {
	model metamodel.MetaModel

	buf         bytes.Buffer
	indentCount int
}

func (g *generator) generate() {
	if err := json.Unmarshal(rawMetaModel, &g.model); err != nil {
		panic(err)
	}

	g.writeLine("// Code generated by genlsp; DO NOT EDIT.")
	g.writeLine("")
	g.writeLine("package lsproto2")
	g.writeLine("")
	g.writeLine("// Meta model version " + g.model.MetaData.Version)
	g.writeLine("")

	for _, t := range g.model.Structures {
		g.writeDocumentation(t.Documentation)
		g.writeDeprecation(t.Deprecated)

		g.writeLine("type " + t.Name + " struct {")
		g.indent()

		for _, e := range t.Extends {
			g.writeLine(*e.Name)
		}
		for _, m := range t.Mixins {
			g.writeLine(*m.Name)
		}

		for _, p := range t.Properties {
			g.writeDocumentation(p.Documentation)
			g.writeDeprecation(p.Deprecated)

			// TODO(jakebailey): better uppercasing (e.g. URI)
			g.startLine(strings.Title(p.Name) + " ")

			switch p.Type.Kind {
			case metamodel.FluffyReference:
				g.write("*" + *p.Type.Name)
			default:
				g.write("TODO_" + string(p.Type.Kind))
			}

			g.finishLine(" `json:\"" + p.Name + "\"`")
		}

		g.dedent()
		g.writeLine("}")
		g.writeLine("")
	}

	for _, t := range g.model.Enumerations {
		g.writeDocumentation(t.Documentation)
		g.writeDeprecation(t.Deprecated)

		g.writeLine("type " + t.Name + " int")
		g.writeLine("")
	}

	// for _, t := range g.model.Requests {
	// 	fmt.Println(t.Method)
	// }

	// for _, t := range g.model.Notifications {
	// 	fmt.Println(t.Method)
	// }
}

func (g *generator) writeDocumentation(doc *string) {
	if doc != nil {
		lines := strings.Split(*doc, "\n")
		for _, line := range lines {
			g.startLine("// ")
			g.finishLine(line)
		}
	}
}

func (g *generator) writeDeprecation(deprecated *string) {
	if deprecated != nil {
		g.startLine("// Deprecated: ")
		g.finishLine(*deprecated)
	}
}

func (g *generator) startLine(s string) {
	for range g.indentCount {
		g.buf.WriteString("\t")
	}
	g.buf.WriteString(s)
}

func (g *generator) finishLine(s string) {
	g.buf.WriteString(s)
	g.buf.WriteString("\n")
}

func (g *generator) writeLine(line string) {
	g.startLine(line)
	g.buf.WriteString("\n")
}

func (g *generator) write(s string) {
	g.buf.WriteString(s)
}

func (g *generator) indent() {
	g.indentCount++
}

func (g *generator) dedent() {
	g.indentCount--
}
