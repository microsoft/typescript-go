trigger:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  parameters:
    pool:
      name: TypeScript-AzurePipelines-EO
      image: 1ESPT-Mariner2.0
      os: linux

    sdl:
      git:
        submodules: false
        fetchDepth: 1
        fetchTags: false
        retryCount: 3
      enableProductionSDL: true
      sourceAnalysisPool:
        name: TypeScript-AzurePipelines-EO
        image: 1ESPT-Windows2022
        os: windows

    stages:
      - stage: Build
        displayName: Build
        jobs:
          - job: Build
            displayName: Build

            steps:
              - checkout: self
                clean: true
                fetchDepth: 1
                fetchTags: false
                submodules: false
                retryCountOnTaskFailure: 3

              - task: NodeTool@0
                inputs:
                  versionSpec: 20.x
                displayName: 'Install Node'

              - bash: |
                  npm install -g `node -e 'console.log(JSON.parse(fs.readFileSync("package.json", "utf8")).packageManager)'`
                  npm --version
                displayName: 'Install packageManager from package.json'

              # Do --ignore-scripts for now to avoid needing to install/build rust.
              - bash: npm ci --ignore-scripts
                displayName: 'npm ci'

              - bash: |
                  set -euo pipefail
                  version=$(grep -oP '^go \K[0-9]+\.[0-9]+' go.mod)
                  curl -SL -o '$(Agent.BuildDirectory)/golang.tar.gz' https://aka.ms/golang/release/latest/go${version}.linux-amd64.tar.gz
                  tar -C '$(Agent.BuildDirectory)' -xzf '$(Agent.BuildDirectory)/golang.tar.gz'
                  rm -f '$(Agent.BuildDirectory)/golang.tar.gz'
                  echo '##vso[task.prependpath]$(Agent.BuildDirectory)/go/bin'
                displayName: 'Install Go'

              - bash: |
                  which go
                  go version
                displayName: 'Check Go version'

              - bash: npx hereby build
                displayName: 'Build'
